// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_clientserver_gameservers.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_clientserver_gameservers.proto</summary>
public static partial class SteammessagesClientserverGameserversReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_clientserver_gameservers.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesClientserverGameserversReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CixzdGVhbW1lc3NhZ2VzX2NsaWVudHNlcnZlcl9nYW1lc2VydmVycy5wcm90",
          "bxoYc3RlYW1tZXNzYWdlc19iYXNlLnByb3RvIu0BChBDTXNnR1NTZXJ2ZXJU",
          "eXBlEhUKDWFwcF9pZF9zZXJ2ZWQYASABKA0SDQoFZmxhZ3MYAiABKA0SIgoa",
          "ZGVwcmVjYXRlZF9nYW1lX2lwX2FkZHJlc3MYAyABKA0SEQoJZ2FtZV9wb3J0",
          "GAQgASgNEhAKCGdhbWVfZGlyGAUgASgJEhQKDGdhbWVfdmVyc2lvbhgGIAEo",
          "CRIXCg9nYW1lX3F1ZXJ5X3BvcnQYByABKA0SFwoPZ2FtZV9wb3J0X2xvY2Fs",
          "GAogASgNEhEKCXNkcl9sb2dvbhgIIAEoDBIPCgdmYWtlX2lwGAkgASgHIiYK",
          "EUNNc2dHU1N0YXR1c1JlcGx5EhEKCWlzX3NlY3VyZRgBIAEoCCKpAQoQQ01z",
          "Z0dTUGxheWVyTGlzdBIpCgdwbGF5ZXJzGAEgAygLMhguQ01zZ0dTUGxheWVy",
          "TGlzdC5QbGF5ZXIaagoGUGxheWVyEhAKCHN0ZWFtX2lkGAEgASgEEhwKFGRl",
          "cHJlY2F0ZWRfcHVibGljX2lwGAIgASgNEg0KBXRva2VuGAMgASgMEiEKCXB1",
          "YmxpY19pcBgEIAEoCzIOLkNNc2dJUEFkZHJlc3MidQoRQ01zZ0dTVXNlclBs",
          "YXlpbmcSEAoIc3RlYW1faWQYASABKAYSHAoUZGVwcmVjYXRlZF9wdWJsaWNf",
          "aXAYAiABKA0SDQoFdG9rZW4YAyABKAwSIQoJcHVibGljX2lwGAQgASgLMg4u",
          "Q01zZ0lQQWRkcmVzcyIqChZDTXNnR1NEaXNjb25uZWN0Tm90aWNlEhAKCHN0",
          "ZWFtX2lkGAEgASgGIpcEChJDTXNnR2FtZVNlcnZlckRhdGESEAoIcmV2aXNp",
          "b24YGCABKA0SEgoKcXVlcnlfcG9ydBgDIAEoDRIRCglnYW1lX3BvcnQYBCAB",
          "KA0SFgoOc3BlY3RhdG9yX3BvcnQYBSABKA0SEwoLc2VydmVyX25hbWUYFiAB",
          "KAkSGAoQZ2FtZV9kZXNjcmlwdGlvbhgdIAEoCRIdChVzcGVjdGF0b3Jfc2Vy",
          "dmVyX25hbWUYGyABKAkSDwoHZmFrZV9pcBgcIAEoBxIZChFzZHJfcGluZ19s",
          "b2NhdGlvbhgeIAEoCRIOCgZhcHBfaWQYBiABKA0SDwoHZ2FtZWRpchgHIAEo",
          "CRIPCgd2ZXJzaW9uGAggASgJEg8KB3Byb2R1Y3QYCSABKAkSDgoGcmVnaW9u",
          "GAogASgJEisKB3BsYXllcnMYCyADKAsyGi5DTXNnR2FtZVNlcnZlckRhdGEu",
          "UGxheWVyEhMKC21heF9wbGF5ZXJzGAwgASgNEhEKCWJvdF9jb3VudBgNIAEo",
          "DRIQCghwYXNzd29yZBgOIAEoCBIOCgZzZWN1cmUYDyABKAgSEQoJZGVkaWNh",
          "dGVkGBAgASgIEgoKAm9zGBEgASgJEhEKCWdhbWVfZGF0YRgSIAEoCRIRCgln",
          "YW1lX3R5cGUYFCABKAkSCwoDbWFwGBUgASgJGhoKBlBsYXllchIQCghzdGVh",
          "bV9pZBgBIAEoBiJNChRDTXNnR2FtZVNlcnZlclJlbW92ZRIaChJsZWdhY3lf",
          "c3RlYW1faWRfZ3MYASABKAYSGQoRbGVnYWN5X3F1ZXJ5X3BvcnQYAyABKA0i",
          "ggEKGENNc2dDbGllbnRHTVNTZXJ2ZXJRdWVyeRIOCgZhcHBfaWQYASABKA0S",
          "FwoPZ2VvX2xvY2F0aW9uX2lwGAIgASgNEhMKC3JlZ2lvbl9jb2RlGAMgASgN",
          "EhMKC2ZpbHRlcl90ZXh0GAQgASgJEhMKC21heF9zZXJ2ZXJzGAUgASgNIqUH",
          "CiBDTXNnR01TQ2xpZW50U2VydmVyUXVlcnlSZXNwb25zZRI5CgdzZXJ2ZXJz",
          "GAEgAygLMiguQ01zZ0dNU0NsaWVudFNlcnZlclF1ZXJ5UmVzcG9uc2UuU2Vy",
          "dmVyEg0KBWVycm9yGAIgASgJEkUKE2RlZmF1bHRfc2VydmVyX2RhdGEYAyAB",
          "KAsyKC5DTXNnR01TQ2xpZW50U2VydmVyUXVlcnlSZXNwb25zZS5TZXJ2ZXIS",
          "FgoOc2VydmVyX3N0cmluZ3MYBCADKAkaoAUKBlNlcnZlchIcChRkZXByZWNh",
          "dGVkX3NlcnZlcl9pcBgBIAEoDRISCgpxdWVyeV9wb3J0GAIgASgNEhQKDGF1",
          "dGhfcGxheWVycxgDIAEoDRIhCglzZXJ2ZXJfaXAYBCABKAsyDi5DTXNnSVBB",
          "ZGRyZXNzEhAKCHN0ZWFtX2lkGAYgASgGEhAKCHJldmlzaW9uGAcgASgNEg8K",
          "B3BsYXllcnMYCCABKA0SEQoJZ2FtZV9wb3J0GAkgASgNEhEKCXNkcl9wb3Bp",
          "ZBgKIAEoBxIZChFzZHJfcGluZ19sb2NhdGlvbhggIAEoCRINCgVmbGFncxgL",
          "IAEoDRIOCgZhcHBfaWQYDCABKA0SEwoLbWF4X3BsYXllcnMYDSABKA0SDAoE",
          "Ym90cxgOIAEoDRIWCg5zcGVjdGF0b3JfcG9ydBgPIAEoDRITCgtnYW1lZGly",
          "X3N0chgQIAEoCRIYChBnYW1lZGlyX3N0cmluZGV4GBEgASgNEg8KB21hcF9z",
          "dHIYEiABKAkSFAoMbWFwX3N0cmluZGV4GBMgASgNEhAKCG5hbWVfc3RyGBQg",
          "ASgJEhUKDW5hbWVfc3RyaW5kZXgYFSABKA0SHAoUZ2FtZV9kZXNjcmlwdGlv",
          "bl9zdHIYFiABKAkSIQoZZ2FtZV9kZXNjcmlwdGlvbl9zdHJpbmRleBgXIAEo",
          "DRITCgt2ZXJzaW9uX3N0chgYIAEoCRIYChB2ZXJzaW9uX3N0cmluZGV4GBkg",
          "ASgNEhQKDGdhbWV0eXBlX3N0chgaIAEoCRIZChFnYW1ldHlwZV9zdHJpbmRl",
          "eBgbIAEoDRIaChJzcGVjdGF0b3JfbmFtZV9zdHIYHiABKAkSHwoXc3BlY3Rh",
          "dG9yX25hbWVfc3RyaW5kZXgYHyABKA0iNQoGRUZsYWdzEhcKE2tfRUZsYWdf",
          "SGFzUGFzc3dvcmQQARISCg5rX0VGbGFnX1NlY3VyZRACIk8KF0NNc2dHYW1l",
          "U2VydmVyT3V0T2ZEYXRlEhMKC3N0ZWFtX2lkX2dzGAEgASgGEg4KBnJlamVj",
          "dBgCIAEoCBIPCgdtZXNzYWdlGAMgASgJIjAKF0NNc2dHU0Fzc29jaWF0ZVdp",
          "dGhDbGFuEhUKDXN0ZWFtX2lkX2NsYW4YASABKAYiTAofQ01zZ0dTQXNzb2Np",
          "YXRlV2l0aENsYW5SZXNwb25zZRIVCg1zdGVhbV9pZF9jbGFuGAEgASgGEhIK",
          "B2VyZXN1bHQYAiABKA06ATIiQQojQ01zZ0dTQ29tcHV0ZU5ld1BsYXllckNv",
          "bXBhdGliaWxpdHkSGgoSc3RlYW1faWRfY2FuZGlkYXRlGAEgASgGIs8BCitD",
          "TXNnR1NDb21wdXRlTmV3UGxheWVyQ29tcGF0aWJpbGl0eVJlc3BvbnNlEhoK",
          "EnN0ZWFtX2lkX2NhbmRpZGF0ZRgBIAEoBhISCgdlcmVzdWx0GAIgASgNOgEy",
          "EhYKDmlzX2NsYW5fbWVtYmVyGAMgASgIEhgKEGN0X2RvbnRfbGlrZV95b3UY",
          "BCABKAUSGAoQY3RfeW91X2RvbnRfbGlrZRgFIAEoBRIkChxjdF9jbGFubWVt",
          "YmVyc19kb250X2xpa2VfeW91GAYgASgFQgVIAYABAA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SteammessagesBaseReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSServerType), global::CMsgGSServerType.Parser, new[]{ "AppIdServed", "Flags", "DeprecatedGameIpAddress", "GamePort", "GameDir", "GameVersion", "GameQueryPort", "GamePortLocal", "SdrLogon", "FakeIp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSStatusReply), global::CMsgGSStatusReply.Parser, new[]{ "IsSecure" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSPlayerList), global::CMsgGSPlayerList.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSPlayerList.Types.Player), global::CMsgGSPlayerList.Types.Player.Parser, new[]{ "SteamId", "DeprecatedPublicIp", "Token", "PublicIp" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSUserPlaying), global::CMsgGSUserPlaying.Parser, new[]{ "SteamId", "DeprecatedPublicIp", "Token", "PublicIp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSDisconnectNotice), global::CMsgGSDisconnectNotice.Parser, new[]{ "SteamId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerData), global::CMsgGameServerData.Parser, new[]{ "Revision", "QueryPort", "GamePort", "SpectatorPort", "ServerName", "GameDescription", "SpectatorServerName", "FakeIp", "SdrPingLocation", "AppId", "Gamedir", "Version", "Product", "Region", "Players", "MaxPlayers", "BotCount", "Password", "Secure", "Dedicated", "Os", "GameData", "GameType", "Map" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerData.Types.Player), global::CMsgGameServerData.Types.Player.Parser, new[]{ "SteamId" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerRemove), global::CMsgGameServerRemove.Parser, new[]{ "LegacySteamIdGs", "LegacyQueryPort" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgClientGMSServerQuery), global::CMsgClientGMSServerQuery.Parser, new[]{ "AppId", "GeoLocationIp", "RegionCode", "FilterText", "MaxServers" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGMSClientServerQueryResponse), global::CMsgGMSClientServerQueryResponse.Parser, new[]{ "Servers", "Error", "DefaultServerData", "ServerStrings" }, null, new[]{ typeof(global::CMsgGMSClientServerQueryResponse.Types.EFlags) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGMSClientServerQueryResponse.Types.Server), global::CMsgGMSClientServerQueryResponse.Types.Server.Parser, new[]{ "DeprecatedServerIp", "QueryPort", "AuthPlayers", "ServerIp", "SteamId", "Revision", "Players", "GamePort", "SdrPopid", "SdrPingLocation", "Flags", "AppId", "MaxPlayers", "Bots", "SpectatorPort", "GamedirStr", "GamedirStrindex", "MapStr", "MapStrindex", "NameStr", "NameStrindex", "GameDescriptionStr", "GameDescriptionStrindex", "VersionStr", "VersionStrindex", "GametypeStr", "GametypeStrindex", "SpectatorNameStr", "SpectatorNameStrindex" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerOutOfDate), global::CMsgGameServerOutOfDate.Parser, new[]{ "SteamIdGs", "Reject", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSAssociateWithClan), global::CMsgGSAssociateWithClan.Parser, new[]{ "SteamIdClan" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSAssociateWithClanResponse), global::CMsgGSAssociateWithClanResponse.Parser, new[]{ "SteamIdClan", "Eresult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSComputeNewPlayerCompatibility), global::CMsgGSComputeNewPlayerCompatibility.Parser, new[]{ "SteamIdCandidate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGSComputeNewPlayerCompatibilityResponse), global::CMsgGSComputeNewPlayerCompatibilityResponse.Parser, new[]{ "SteamIdCandidate", "Eresult", "IsClanMember", "CtDontLikeYou", "CtYouDontLike", "CtClanmembersDontLikeYou" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CMsgGSServerType : pb::IMessage<CMsgGSServerType>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSServerType> _parser = new pb::MessageParser<CMsgGSServerType>(() => new CMsgGSServerType());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSServerType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSServerType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSServerType(CMsgGSServerType other) : this() {
    _hasBits0 = other._hasBits0;
    appIdServed_ = other.appIdServed_;
    flags_ = other.flags_;
    deprecatedGameIpAddress_ = other.deprecatedGameIpAddress_;
    gamePort_ = other.gamePort_;
    gameDir_ = other.gameDir_;
    gameVersion_ = other.gameVersion_;
    gameQueryPort_ = other.gameQueryPort_;
    gamePortLocal_ = other.gamePortLocal_;
    sdrLogon_ = other.sdrLogon_;
    fakeIp_ = other.fakeIp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSServerType Clone() {
    return new CMsgGSServerType(this);
  }

  /// <summary>Field number for the "app_id_served" field.</summary>
  public const int AppIdServedFieldNumber = 1;
  private readonly static uint AppIdServedDefaultValue = 0;

  private uint appIdServed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AppIdServed {
    get { if ((_hasBits0 & 1) != 0) { return appIdServed_; } else { return AppIdServedDefaultValue; } }
    set {
      _hasBits0 |= 1;
      appIdServed_ = value;
    }
  }
  /// <summary>Gets whether the "app_id_served" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppIdServed {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "app_id_served" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppIdServed() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 2;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 2) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "deprecated_game_ip_address" field.</summary>
  public const int DeprecatedGameIpAddressFieldNumber = 3;
  private readonly static uint DeprecatedGameIpAddressDefaultValue = 0;

  private uint deprecatedGameIpAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeprecatedGameIpAddress {
    get { if ((_hasBits0 & 4) != 0) { return deprecatedGameIpAddress_; } else { return DeprecatedGameIpAddressDefaultValue; } }
    set {
      _hasBits0 |= 4;
      deprecatedGameIpAddress_ = value;
    }
  }
  /// <summary>Gets whether the "deprecated_game_ip_address" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeprecatedGameIpAddress {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "deprecated_game_ip_address" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeprecatedGameIpAddress() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "game_port" field.</summary>
  public const int GamePortFieldNumber = 4;
  private readonly static uint GamePortDefaultValue = 0;

  private uint gamePort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GamePort {
    get { if ((_hasBits0 & 8) != 0) { return gamePort_; } else { return GamePortDefaultValue; } }
    set {
      _hasBits0 |= 8;
      gamePort_ = value;
    }
  }
  /// <summary>Gets whether the "game_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamePort {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "game_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamePort() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "game_dir" field.</summary>
  public const int GameDirFieldNumber = 5;
  private readonly static string GameDirDefaultValue = "";

  private string gameDir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameDir {
    get { return gameDir_ ?? GameDirDefaultValue; }
    set {
      gameDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_dir" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameDir {
    get { return gameDir_ != null; }
  }
  /// <summary>Clears the value of the "game_dir" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameDir() {
    gameDir_ = null;
  }

  /// <summary>Field number for the "game_version" field.</summary>
  public const int GameVersionFieldNumber = 6;
  private readonly static string GameVersionDefaultValue = "";

  private string gameVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameVersion {
    get { return gameVersion_ ?? GameVersionDefaultValue; }
    set {
      gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameVersion {
    get { return gameVersion_ != null; }
  }
  /// <summary>Clears the value of the "game_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameVersion() {
    gameVersion_ = null;
  }

  /// <summary>Field number for the "game_query_port" field.</summary>
  public const int GameQueryPortFieldNumber = 7;
  private readonly static uint GameQueryPortDefaultValue = 0;

  private uint gameQueryPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GameQueryPort {
    get { if ((_hasBits0 & 16) != 0) { return gameQueryPort_; } else { return GameQueryPortDefaultValue; } }
    set {
      _hasBits0 |= 16;
      gameQueryPort_ = value;
    }
  }
  /// <summary>Gets whether the "game_query_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameQueryPort {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "game_query_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameQueryPort() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "game_port_local" field.</summary>
  public const int GamePortLocalFieldNumber = 10;
  private readonly static uint GamePortLocalDefaultValue = 0;

  private uint gamePortLocal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GamePortLocal {
    get { if ((_hasBits0 & 64) != 0) { return gamePortLocal_; } else { return GamePortLocalDefaultValue; } }
    set {
      _hasBits0 |= 64;
      gamePortLocal_ = value;
    }
  }
  /// <summary>Gets whether the "game_port_local" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamePortLocal {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "game_port_local" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamePortLocal() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "sdr_logon" field.</summary>
  public const int SdrLogonFieldNumber = 8;
  private readonly static pb::ByteString SdrLogonDefaultValue = pb::ByteString.Empty;

  private pb::ByteString sdrLogon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString SdrLogon {
    get { return sdrLogon_ ?? SdrLogonDefaultValue; }
    set {
      sdrLogon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sdr_logon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSdrLogon {
    get { return sdrLogon_ != null; }
  }
  /// <summary>Clears the value of the "sdr_logon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSdrLogon() {
    sdrLogon_ = null;
  }

  /// <summary>Field number for the "fake_ip" field.</summary>
  public const int FakeIpFieldNumber = 9;
  private readonly static uint FakeIpDefaultValue = 0;

  private uint fakeIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FakeIp {
    get { if ((_hasBits0 & 32) != 0) { return fakeIp_; } else { return FakeIpDefaultValue; } }
    set {
      _hasBits0 |= 32;
      fakeIp_ = value;
    }
  }
  /// <summary>Gets whether the "fake_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFakeIp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "fake_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFakeIp() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSServerType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSServerType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AppIdServed != other.AppIdServed) return false;
    if (Flags != other.Flags) return false;
    if (DeprecatedGameIpAddress != other.DeprecatedGameIpAddress) return false;
    if (GamePort != other.GamePort) return false;
    if (GameDir != other.GameDir) return false;
    if (GameVersion != other.GameVersion) return false;
    if (GameQueryPort != other.GameQueryPort) return false;
    if (GamePortLocal != other.GamePortLocal) return false;
    if (SdrLogon != other.SdrLogon) return false;
    if (FakeIp != other.FakeIp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppIdServed) hash ^= AppIdServed.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasDeprecatedGameIpAddress) hash ^= DeprecatedGameIpAddress.GetHashCode();
    if (HasGamePort) hash ^= GamePort.GetHashCode();
    if (HasGameDir) hash ^= GameDir.GetHashCode();
    if (HasGameVersion) hash ^= GameVersion.GetHashCode();
    if (HasGameQueryPort) hash ^= GameQueryPort.GetHashCode();
    if (HasGamePortLocal) hash ^= GamePortLocal.GetHashCode();
    if (HasSdrLogon) hash ^= SdrLogon.GetHashCode();
    if (HasFakeIp) hash ^= FakeIp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAppIdServed) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppIdServed);
    }
    if (HasFlags) {
      output.WriteRawTag(16);
      output.WriteUInt32(Flags);
    }
    if (HasDeprecatedGameIpAddress) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeprecatedGameIpAddress);
    }
    if (HasGamePort) {
      output.WriteRawTag(32);
      output.WriteUInt32(GamePort);
    }
    if (HasGameDir) {
      output.WriteRawTag(42);
      output.WriteString(GameDir);
    }
    if (HasGameVersion) {
      output.WriteRawTag(50);
      output.WriteString(GameVersion);
    }
    if (HasGameQueryPort) {
      output.WriteRawTag(56);
      output.WriteUInt32(GameQueryPort);
    }
    if (HasSdrLogon) {
      output.WriteRawTag(66);
      output.WriteBytes(SdrLogon);
    }
    if (HasFakeIp) {
      output.WriteRawTag(77);
      output.WriteFixed32(FakeIp);
    }
    if (HasGamePortLocal) {
      output.WriteRawTag(80);
      output.WriteUInt32(GamePortLocal);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAppIdServed) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppIdServed);
    }
    if (HasFlags) {
      output.WriteRawTag(16);
      output.WriteUInt32(Flags);
    }
    if (HasDeprecatedGameIpAddress) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeprecatedGameIpAddress);
    }
    if (HasGamePort) {
      output.WriteRawTag(32);
      output.WriteUInt32(GamePort);
    }
    if (HasGameDir) {
      output.WriteRawTag(42);
      output.WriteString(GameDir);
    }
    if (HasGameVersion) {
      output.WriteRawTag(50);
      output.WriteString(GameVersion);
    }
    if (HasGameQueryPort) {
      output.WriteRawTag(56);
      output.WriteUInt32(GameQueryPort);
    }
    if (HasSdrLogon) {
      output.WriteRawTag(66);
      output.WriteBytes(SdrLogon);
    }
    if (HasFakeIp) {
      output.WriteRawTag(77);
      output.WriteFixed32(FakeIp);
    }
    if (HasGamePortLocal) {
      output.WriteRawTag(80);
      output.WriteUInt32(GamePortLocal);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAppIdServed) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppIdServed);
    }
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasDeprecatedGameIpAddress) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedGameIpAddress);
    }
    if (HasGamePort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePort);
    }
    if (HasGameDir) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameDir);
    }
    if (HasGameVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
    }
    if (HasGameQueryPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameQueryPort);
    }
    if (HasGamePortLocal) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePortLocal);
    }
    if (HasSdrLogon) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SdrLogon);
    }
    if (HasFakeIp) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSServerType other) {
    if (other == null) {
      return;
    }
    if (other.HasAppIdServed) {
      AppIdServed = other.AppIdServed;
    }
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasDeprecatedGameIpAddress) {
      DeprecatedGameIpAddress = other.DeprecatedGameIpAddress;
    }
    if (other.HasGamePort) {
      GamePort = other.GamePort;
    }
    if (other.HasGameDir) {
      GameDir = other.GameDir;
    }
    if (other.HasGameVersion) {
      GameVersion = other.GameVersion;
    }
    if (other.HasGameQueryPort) {
      GameQueryPort = other.GameQueryPort;
    }
    if (other.HasGamePortLocal) {
      GamePortLocal = other.GamePortLocal;
    }
    if (other.HasSdrLogon) {
      SdrLogon = other.SdrLogon;
    }
    if (other.HasFakeIp) {
      FakeIp = other.FakeIp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AppIdServed = input.ReadUInt32();
          break;
        }
        case 16: {
          Flags = input.ReadUInt32();
          break;
        }
        case 24: {
          DeprecatedGameIpAddress = input.ReadUInt32();
          break;
        }
        case 32: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 42: {
          GameDir = input.ReadString();
          break;
        }
        case 50: {
          GameVersion = input.ReadString();
          break;
        }
        case 56: {
          GameQueryPort = input.ReadUInt32();
          break;
        }
        case 66: {
          SdrLogon = input.ReadBytes();
          break;
        }
        case 77: {
          FakeIp = input.ReadFixed32();
          break;
        }
        case 80: {
          GamePortLocal = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          AppIdServed = input.ReadUInt32();
          break;
        }
        case 16: {
          Flags = input.ReadUInt32();
          break;
        }
        case 24: {
          DeprecatedGameIpAddress = input.ReadUInt32();
          break;
        }
        case 32: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 42: {
          GameDir = input.ReadString();
          break;
        }
        case 50: {
          GameVersion = input.ReadString();
          break;
        }
        case 56: {
          GameQueryPort = input.ReadUInt32();
          break;
        }
        case 66: {
          SdrLogon = input.ReadBytes();
          break;
        }
        case 77: {
          FakeIp = input.ReadFixed32();
          break;
        }
        case 80: {
          GamePortLocal = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSStatusReply : pb::IMessage<CMsgGSStatusReply>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSStatusReply> _parser = new pb::MessageParser<CMsgGSStatusReply>(() => new CMsgGSStatusReply());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSStatusReply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSStatusReply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSStatusReply(CMsgGSStatusReply other) : this() {
    _hasBits0 = other._hasBits0;
    isSecure_ = other.isSecure_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSStatusReply Clone() {
    return new CMsgGSStatusReply(this);
  }

  /// <summary>Field number for the "is_secure" field.</summary>
  public const int IsSecureFieldNumber = 1;
  private readonly static bool IsSecureDefaultValue = false;

  private bool isSecure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsSecure {
    get { if ((_hasBits0 & 1) != 0) { return isSecure_; } else { return IsSecureDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isSecure_ = value;
    }
  }
  /// <summary>Gets whether the "is_secure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsSecure {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_secure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsSecure() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSStatusReply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSStatusReply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsSecure != other.IsSecure) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIsSecure) hash ^= IsSecure.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasIsSecure) {
      output.WriteRawTag(8);
      output.WriteBool(IsSecure);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasIsSecure) {
      output.WriteRawTag(8);
      output.WriteBool(IsSecure);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasIsSecure) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSStatusReply other) {
    if (other == null) {
      return;
    }
    if (other.HasIsSecure) {
      IsSecure = other.IsSecure;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsSecure = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          IsSecure = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSPlayerList : pb::IMessage<CMsgGSPlayerList>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSPlayerList> _parser = new pb::MessageParser<CMsgGSPlayerList>(() => new CMsgGSPlayerList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSPlayerList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSPlayerList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSPlayerList(CMsgGSPlayerList other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSPlayerList Clone() {
    return new CMsgGSPlayerList(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgGSPlayerList.Types.Player> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgGSPlayerList.Types.Player.Parser);
  private readonly pbc::RepeatedField<global::CMsgGSPlayerList.Types.Player> players_ = new pbc::RepeatedField<global::CMsgGSPlayerList.Types.Player>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgGSPlayerList.Types.Player> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSPlayerList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSPlayerList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    players_.WriteTo(ref output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSPlayerList other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          players_.AddEntriesFrom(ref input, _repeated_players_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgGSPlayerList message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Player : pb::IMessage<Player>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Player> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgGSPlayerList.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player(Player other) : this() {
        _hasBits0 = other._hasBits0;
        steamId_ = other.steamId_;
        deprecatedPublicIp_ = other.deprecatedPublicIp_;
        token_ = other.token_;
        publicIp_ = other.publicIp_ != null ? other.publicIp_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player Clone() {
        return new Player(this);
      }

      /// <summary>Field number for the "steam_id" field.</summary>
      public const int SteamIdFieldNumber = 1;
      private readonly static ulong SteamIdDefaultValue = 0UL;

      private ulong steamId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong SteamId {
        get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          steamId_ = value;
        }
      }
      /// <summary>Gets whether the "steam_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSteamId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "steam_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSteamId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "deprecated_public_ip" field.</summary>
      public const int DeprecatedPublicIpFieldNumber = 2;
      private readonly static uint DeprecatedPublicIpDefaultValue = 0;

      private uint deprecatedPublicIp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DeprecatedPublicIp {
        get { if ((_hasBits0 & 2) != 0) { return deprecatedPublicIp_; } else { return DeprecatedPublicIpDefaultValue; } }
        set {
          _hasBits0 |= 2;
          deprecatedPublicIp_ = value;
        }
      }
      /// <summary>Gets whether the "deprecated_public_ip" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDeprecatedPublicIp {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "deprecated_public_ip" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDeprecatedPublicIp() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "token" field.</summary>
      public const int TokenFieldNumber = 3;
      private readonly static pb::ByteString TokenDefaultValue = pb::ByteString.Empty;

      private pb::ByteString token_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString Token {
        get { return token_ ?? TokenDefaultValue; }
        set {
          token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "token" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasToken {
        get { return token_ != null; }
      }
      /// <summary>Clears the value of the "token" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearToken() {
        token_ = null;
      }

      /// <summary>Field number for the "public_ip" field.</summary>
      public const int PublicIpFieldNumber = 4;
      private global::CMsgIPAddress publicIp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgIPAddress PublicIp {
        get { return publicIp_; }
        set {
          publicIp_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Player);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Player other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SteamId != other.SteamId) return false;
        if (DeprecatedPublicIp != other.DeprecatedPublicIp) return false;
        if (Token != other.Token) return false;
        if (!object.Equals(PublicIp, other.PublicIp)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasSteamId) hash ^= SteamId.GetHashCode();
        if (HasDeprecatedPublicIp) hash ^= DeprecatedPublicIp.GetHashCode();
        if (HasToken) hash ^= Token.GetHashCode();
        if (publicIp_ != null) hash ^= PublicIp.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasSteamId) {
          output.WriteRawTag(8);
          output.WriteUInt64(SteamId);
        }
        if (HasDeprecatedPublicIp) {
          output.WriteRawTag(16);
          output.WriteUInt32(DeprecatedPublicIp);
        }
        if (HasToken) {
          output.WriteRawTag(26);
          output.WriteBytes(Token);
        }
        if (publicIp_ != null) {
          output.WriteRawTag(34);
          output.WriteMessage(PublicIp);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasSteamId) {
          output.WriteRawTag(8);
          output.WriteUInt64(SteamId);
        }
        if (HasDeprecatedPublicIp) {
          output.WriteRawTag(16);
          output.WriteUInt32(DeprecatedPublicIp);
        }
        if (HasToken) {
          output.WriteRawTag(26);
          output.WriteBytes(Token);
        }
        if (publicIp_ != null) {
          output.WriteRawTag(34);
          output.WriteMessage(PublicIp);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasSteamId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SteamId);
        }
        if (HasDeprecatedPublicIp) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedPublicIp);
        }
        if (HasToken) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
        }
        if (publicIp_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicIp);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Player other) {
        if (other == null) {
          return;
        }
        if (other.HasSteamId) {
          SteamId = other.SteamId;
        }
        if (other.HasDeprecatedPublicIp) {
          DeprecatedPublicIp = other.DeprecatedPublicIp;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.publicIp_ != null) {
          if (publicIp_ == null) {
            PublicIp = new global::CMsgIPAddress();
          }
          PublicIp.MergeFrom(other.PublicIp);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              SteamId = input.ReadUInt64();
              break;
            }
            case 16: {
              DeprecatedPublicIp = input.ReadUInt32();
              break;
            }
            case 26: {
              Token = input.ReadBytes();
              break;
            }
            case 34: {
              if (publicIp_ == null) {
                PublicIp = new global::CMsgIPAddress();
              }
              input.ReadMessage(PublicIp);
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              SteamId = input.ReadUInt64();
              break;
            }
            case 16: {
              DeprecatedPublicIp = input.ReadUInt32();
              break;
            }
            case 26: {
              Token = input.ReadBytes();
              break;
            }
            case 34: {
              if (publicIp_ == null) {
                PublicIp = new global::CMsgIPAddress();
              }
              input.ReadMessage(PublicIp);
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgGSUserPlaying : pb::IMessage<CMsgGSUserPlaying>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSUserPlaying> _parser = new pb::MessageParser<CMsgGSUserPlaying>(() => new CMsgGSUserPlaying());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSUserPlaying> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSUserPlaying() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSUserPlaying(CMsgGSUserPlaying other) : this() {
    _hasBits0 = other._hasBits0;
    steamId_ = other.steamId_;
    deprecatedPublicIp_ = other.deprecatedPublicIp_;
    token_ = other.token_;
    publicIp_ = other.publicIp_ != null ? other.publicIp_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSUserPlaying Clone() {
    return new CMsgGSUserPlaying(this);
  }

  /// <summary>Field number for the "steam_id" field.</summary>
  public const int SteamIdFieldNumber = 1;
  private readonly static ulong SteamIdDefaultValue = 0UL;

  private ulong steamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamId {
    get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamId_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "deprecated_public_ip" field.</summary>
  public const int DeprecatedPublicIpFieldNumber = 2;
  private readonly static uint DeprecatedPublicIpDefaultValue = 0;

  private uint deprecatedPublicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeprecatedPublicIp {
    get { if ((_hasBits0 & 2) != 0) { return deprecatedPublicIp_; } else { return DeprecatedPublicIpDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deprecatedPublicIp_ = value;
    }
  }
  /// <summary>Gets whether the "deprecated_public_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeprecatedPublicIp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "deprecated_public_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeprecatedPublicIp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 3;
  private readonly static pb::ByteString TokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString token_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Token {
    get { return token_ ?? TokenDefaultValue; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToken {
    get { return token_ != null; }
  }
  /// <summary>Clears the value of the "token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToken() {
    token_ = null;
  }

  /// <summary>Field number for the "public_ip" field.</summary>
  public const int PublicIpFieldNumber = 4;
  private global::CMsgIPAddress publicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgIPAddress PublicIp {
    get { return publicIp_; }
    set {
      publicIp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSUserPlaying);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSUserPlaying other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamId != other.SteamId) return false;
    if (DeprecatedPublicIp != other.DeprecatedPublicIp) return false;
    if (Token != other.Token) return false;
    if (!object.Equals(PublicIp, other.PublicIp)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamId) hash ^= SteamId.GetHashCode();
    if (HasDeprecatedPublicIp) hash ^= DeprecatedPublicIp.GetHashCode();
    if (HasToken) hash ^= Token.GetHashCode();
    if (publicIp_ != null) hash ^= PublicIp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamId) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamId);
    }
    if (HasDeprecatedPublicIp) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeprecatedPublicIp);
    }
    if (HasToken) {
      output.WriteRawTag(26);
      output.WriteBytes(Token);
    }
    if (publicIp_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(PublicIp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamId) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamId);
    }
    if (HasDeprecatedPublicIp) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeprecatedPublicIp);
    }
    if (HasToken) {
      output.WriteRawTag(26);
      output.WriteBytes(Token);
    }
    if (publicIp_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(PublicIp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamId) {
      size += 1 + 8;
    }
    if (HasDeprecatedPublicIp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedPublicIp);
    }
    if (HasToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
    }
    if (publicIp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicIp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSUserPlaying other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamId) {
      SteamId = other.SteamId;
    }
    if (other.HasDeprecatedPublicIp) {
      DeprecatedPublicIp = other.DeprecatedPublicIp;
    }
    if (other.HasToken) {
      Token = other.Token;
    }
    if (other.publicIp_ != null) {
      if (publicIp_ == null) {
        PublicIp = new global::CMsgIPAddress();
      }
      PublicIp.MergeFrom(other.PublicIp);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamId = input.ReadFixed64();
          break;
        }
        case 16: {
          DeprecatedPublicIp = input.ReadUInt32();
          break;
        }
        case 26: {
          Token = input.ReadBytes();
          break;
        }
        case 34: {
          if (publicIp_ == null) {
            PublicIp = new global::CMsgIPAddress();
          }
          input.ReadMessage(PublicIp);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamId = input.ReadFixed64();
          break;
        }
        case 16: {
          DeprecatedPublicIp = input.ReadUInt32();
          break;
        }
        case 26: {
          Token = input.ReadBytes();
          break;
        }
        case 34: {
          if (publicIp_ == null) {
            PublicIp = new global::CMsgIPAddress();
          }
          input.ReadMessage(PublicIp);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSDisconnectNotice : pb::IMessage<CMsgGSDisconnectNotice>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSDisconnectNotice> _parser = new pb::MessageParser<CMsgGSDisconnectNotice>(() => new CMsgGSDisconnectNotice());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSDisconnectNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSDisconnectNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSDisconnectNotice(CMsgGSDisconnectNotice other) : this() {
    _hasBits0 = other._hasBits0;
    steamId_ = other.steamId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSDisconnectNotice Clone() {
    return new CMsgGSDisconnectNotice(this);
  }

  /// <summary>Field number for the "steam_id" field.</summary>
  public const int SteamIdFieldNumber = 1;
  private readonly static ulong SteamIdDefaultValue = 0UL;

  private ulong steamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamId {
    get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamId_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSDisconnectNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSDisconnectNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamId != other.SteamId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamId) hash ^= SteamId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamId) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamId) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamId) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSDisconnectNotice other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamId) {
      SteamId = other.SteamId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamId = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamId = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGameServerData : pb::IMessage<CMsgGameServerData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerData> _parser = new pb::MessageParser<CMsgGameServerData>(() => new CMsgGameServerData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerData(CMsgGameServerData other) : this() {
    _hasBits0 = other._hasBits0;
    revision_ = other.revision_;
    queryPort_ = other.queryPort_;
    gamePort_ = other.gamePort_;
    spectatorPort_ = other.spectatorPort_;
    serverName_ = other.serverName_;
    gameDescription_ = other.gameDescription_;
    spectatorServerName_ = other.spectatorServerName_;
    fakeIp_ = other.fakeIp_;
    sdrPingLocation_ = other.sdrPingLocation_;
    appId_ = other.appId_;
    gamedir_ = other.gamedir_;
    version_ = other.version_;
    product_ = other.product_;
    region_ = other.region_;
    players_ = other.players_.Clone();
    maxPlayers_ = other.maxPlayers_;
    botCount_ = other.botCount_;
    password_ = other.password_;
    secure_ = other.secure_;
    dedicated_ = other.dedicated_;
    os_ = other.os_;
    gameData_ = other.gameData_;
    gameType_ = other.gameType_;
    map_ = other.map_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerData Clone() {
    return new CMsgGameServerData(this);
  }

  /// <summary>Field number for the "revision" field.</summary>
  public const int RevisionFieldNumber = 24;
  private readonly static uint RevisionDefaultValue = 0;

  private uint revision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Revision {
    get { if ((_hasBits0 & 512) != 0) { return revision_; } else { return RevisionDefaultValue; } }
    set {
      _hasBits0 |= 512;
      revision_ = value;
    }
  }
  /// <summary>Gets whether the "revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRevision {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRevision() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "query_port" field.</summary>
  public const int QueryPortFieldNumber = 3;
  private readonly static uint QueryPortDefaultValue = 0;

  private uint queryPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint QueryPort {
    get { if ((_hasBits0 & 1) != 0) { return queryPort_; } else { return QueryPortDefaultValue; } }
    set {
      _hasBits0 |= 1;
      queryPort_ = value;
    }
  }
  /// <summary>Gets whether the "query_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQueryPort {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "query_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQueryPort() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "game_port" field.</summary>
  public const int GamePortFieldNumber = 4;
  private readonly static uint GamePortDefaultValue = 0;

  private uint gamePort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GamePort {
    get { if ((_hasBits0 & 2) != 0) { return gamePort_; } else { return GamePortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gamePort_ = value;
    }
  }
  /// <summary>Gets whether the "game_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamePort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "game_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamePort() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "spectator_port" field.</summary>
  public const int SpectatorPortFieldNumber = 5;
  private readonly static uint SpectatorPortDefaultValue = 0;

  private uint spectatorPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SpectatorPort {
    get { if ((_hasBits0 & 4) != 0) { return spectatorPort_; } else { return SpectatorPortDefaultValue; } }
    set {
      _hasBits0 |= 4;
      spectatorPort_ = value;
    }
  }
  /// <summary>Gets whether the "spectator_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpectatorPort {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "spectator_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpectatorPort() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "server_name" field.</summary>
  public const int ServerNameFieldNumber = 22;
  private readonly static string ServerNameDefaultValue = "";

  private string serverName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ServerName {
    get { return serverName_ ?? ServerNameDefaultValue; }
    set {
      serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "server_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerName {
    get { return serverName_ != null; }
  }
  /// <summary>Clears the value of the "server_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerName() {
    serverName_ = null;
  }

  /// <summary>Field number for the "game_description" field.</summary>
  public const int GameDescriptionFieldNumber = 29;
  private readonly static string GameDescriptionDefaultValue = "";

  private string gameDescription_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameDescription {
    get { return gameDescription_ ?? GameDescriptionDefaultValue; }
    set {
      gameDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameDescription {
    get { return gameDescription_ != null; }
  }
  /// <summary>Clears the value of the "game_description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameDescription() {
    gameDescription_ = null;
  }

  /// <summary>Field number for the "spectator_server_name" field.</summary>
  public const int SpectatorServerNameFieldNumber = 27;
  private readonly static string SpectatorServerNameDefaultValue = "";

  private string spectatorServerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SpectatorServerName {
    get { return spectatorServerName_ ?? SpectatorServerNameDefaultValue; }
    set {
      spectatorServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "spectator_server_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpectatorServerName {
    get { return spectatorServerName_ != null; }
  }
  /// <summary>Clears the value of the "spectator_server_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpectatorServerName() {
    spectatorServerName_ = null;
  }

  /// <summary>Field number for the "fake_ip" field.</summary>
  public const int FakeIpFieldNumber = 28;
  private readonly static uint FakeIpDefaultValue = 0;

  private uint fakeIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FakeIp {
    get { if ((_hasBits0 & 1024) != 0) { return fakeIp_; } else { return FakeIpDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      fakeIp_ = value;
    }
  }
  /// <summary>Gets whether the "fake_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFakeIp {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "fake_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFakeIp() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "sdr_ping_location" field.</summary>
  public const int SdrPingLocationFieldNumber = 30;
  private readonly static string SdrPingLocationDefaultValue = "";

  private string sdrPingLocation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SdrPingLocation {
    get { return sdrPingLocation_ ?? SdrPingLocationDefaultValue; }
    set {
      sdrPingLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sdr_ping_location" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSdrPingLocation {
    get { return sdrPingLocation_ != null; }
  }
  /// <summary>Clears the value of the "sdr_ping_location" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSdrPingLocation() {
    sdrPingLocation_ = null;
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 6;
  private readonly static uint AppIdDefaultValue = 0;

  private uint appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AppId {
    get { if ((_hasBits0 & 8) != 0) { return appId_; } else { return AppIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "gamedir" field.</summary>
  public const int GamedirFieldNumber = 7;
  private readonly static string GamedirDefaultValue = "";

  private string gamedir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Gamedir {
    get { return gamedir_ ?? GamedirDefaultValue; }
    set {
      gamedir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gamedir" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamedir {
    get { return gamedir_ != null; }
  }
  /// <summary>Clears the value of the "gamedir" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamedir() {
    gamedir_ = null;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 8;
  private readonly static string VersionDefaultValue = "";

  private string version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersion() {
    version_ = null;
  }

  /// <summary>Field number for the "product" field.</summary>
  public const int ProductFieldNumber = 9;
  private readonly static string ProductDefaultValue = "";

  private string product_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Product {
    get { return product_ ?? ProductDefaultValue; }
    set {
      product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "product" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProduct {
    get { return product_ != null; }
  }
  /// <summary>Clears the value of the "product" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProduct() {
    product_ = null;
  }

  /// <summary>Field number for the "region" field.</summary>
  public const int RegionFieldNumber = 10;
  private readonly static string RegionDefaultValue = "";

  private string region_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Region {
    get { return region_ ?? RegionDefaultValue; }
    set {
      region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "region" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegion {
    get { return region_ != null; }
  }
  /// <summary>Clears the value of the "region" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegion() {
    region_ = null;
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 11;
  private static readonly pb::FieldCodec<global::CMsgGameServerData.Types.Player> _repeated_players_codec
      = pb::FieldCodec.ForMessage(90, global::CMsgGameServerData.Types.Player.Parser);
  private readonly pbc::RepeatedField<global::CMsgGameServerData.Types.Player> players_ = new pbc::RepeatedField<global::CMsgGameServerData.Types.Player>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgGameServerData.Types.Player> Players {
    get { return players_; }
  }

  /// <summary>Field number for the "max_players" field.</summary>
  public const int MaxPlayersFieldNumber = 12;
  private readonly static uint MaxPlayersDefaultValue = 0;

  private uint maxPlayers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxPlayers {
    get { if ((_hasBits0 & 16) != 0) { return maxPlayers_; } else { return MaxPlayersDefaultValue; } }
    set {
      _hasBits0 |= 16;
      maxPlayers_ = value;
    }
  }
  /// <summary>Gets whether the "max_players" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxPlayers {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "max_players" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxPlayers() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "bot_count" field.</summary>
  public const int BotCountFieldNumber = 13;
  private readonly static uint BotCountDefaultValue = 0;

  private uint botCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BotCount {
    get { if ((_hasBits0 & 32) != 0) { return botCount_; } else { return BotCountDefaultValue; } }
    set {
      _hasBits0 |= 32;
      botCount_ = value;
    }
  }
  /// <summary>Gets whether the "bot_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBotCount {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "bot_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBotCount() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 14;
  private readonly static bool PasswordDefaultValue = false;

  private bool password_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Password {
    get { if ((_hasBits0 & 64) != 0) { return password_; } else { return PasswordDefaultValue; } }
    set {
      _hasBits0 |= 64;
      password_ = value;
    }
  }
  /// <summary>Gets whether the "password" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPassword {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "password" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPassword() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "secure" field.</summary>
  public const int SecureFieldNumber = 15;
  private readonly static bool SecureDefaultValue = false;

  private bool secure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Secure {
    get { if ((_hasBits0 & 128) != 0) { return secure_; } else { return SecureDefaultValue; } }
    set {
      _hasBits0 |= 128;
      secure_ = value;
    }
  }
  /// <summary>Gets whether the "secure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecure {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "secure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecure() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "dedicated" field.</summary>
  public const int DedicatedFieldNumber = 16;
  private readonly static bool DedicatedDefaultValue = false;

  private bool dedicated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Dedicated {
    get { if ((_hasBits0 & 256) != 0) { return dedicated_; } else { return DedicatedDefaultValue; } }
    set {
      _hasBits0 |= 256;
      dedicated_ = value;
    }
  }
  /// <summary>Gets whether the "dedicated" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDedicated {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "dedicated" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDedicated() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "os" field.</summary>
  public const int OsFieldNumber = 17;
  private readonly static string OsDefaultValue = "";

  private string os_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Os {
    get { return os_ ?? OsDefaultValue; }
    set {
      os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "os" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOs {
    get { return os_ != null; }
  }
  /// <summary>Clears the value of the "os" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOs() {
    os_ = null;
  }

  /// <summary>Field number for the "game_data" field.</summary>
  public const int GameDataFieldNumber = 18;
  private readonly static string GameDataDefaultValue = "";

  private string gameData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameData {
    get { return gameData_ ?? GameDataDefaultValue; }
    set {
      gameData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameData {
    get { return gameData_ != null; }
  }
  /// <summary>Clears the value of the "game_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameData() {
    gameData_ = null;
  }

  /// <summary>Field number for the "game_type" field.</summary>
  public const int GameTypeFieldNumber = 20;
  private readonly static string GameTypeDefaultValue = "";

  private string gameType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameType {
    get { return gameType_ ?? GameTypeDefaultValue; }
    set {
      gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameType {
    get { return gameType_ != null; }
  }
  /// <summary>Clears the value of the "game_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameType() {
    gameType_ = null;
  }

  /// <summary>Field number for the "map" field.</summary>
  public const int MapFieldNumber = 21;
  private readonly static string MapDefaultValue = "";

  private string map_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Map {
    get { return map_ ?? MapDefaultValue; }
    set {
      map_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "map" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMap {
    get { return map_ != null; }
  }
  /// <summary>Clears the value of the "map" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMap() {
    map_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Revision != other.Revision) return false;
    if (QueryPort != other.QueryPort) return false;
    if (GamePort != other.GamePort) return false;
    if (SpectatorPort != other.SpectatorPort) return false;
    if (ServerName != other.ServerName) return false;
    if (GameDescription != other.GameDescription) return false;
    if (SpectatorServerName != other.SpectatorServerName) return false;
    if (FakeIp != other.FakeIp) return false;
    if (SdrPingLocation != other.SdrPingLocation) return false;
    if (AppId != other.AppId) return false;
    if (Gamedir != other.Gamedir) return false;
    if (Version != other.Version) return false;
    if (Product != other.Product) return false;
    if (Region != other.Region) return false;
    if(!players_.Equals(other.players_)) return false;
    if (MaxPlayers != other.MaxPlayers) return false;
    if (BotCount != other.BotCount) return false;
    if (Password != other.Password) return false;
    if (Secure != other.Secure) return false;
    if (Dedicated != other.Dedicated) return false;
    if (Os != other.Os) return false;
    if (GameData != other.GameData) return false;
    if (GameType != other.GameType) return false;
    if (Map != other.Map) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRevision) hash ^= Revision.GetHashCode();
    if (HasQueryPort) hash ^= QueryPort.GetHashCode();
    if (HasGamePort) hash ^= GamePort.GetHashCode();
    if (HasSpectatorPort) hash ^= SpectatorPort.GetHashCode();
    if (HasServerName) hash ^= ServerName.GetHashCode();
    if (HasGameDescription) hash ^= GameDescription.GetHashCode();
    if (HasSpectatorServerName) hash ^= SpectatorServerName.GetHashCode();
    if (HasFakeIp) hash ^= FakeIp.GetHashCode();
    if (HasSdrPingLocation) hash ^= SdrPingLocation.GetHashCode();
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasGamedir) hash ^= Gamedir.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (HasProduct) hash ^= Product.GetHashCode();
    if (HasRegion) hash ^= Region.GetHashCode();
    hash ^= players_.GetHashCode();
    if (HasMaxPlayers) hash ^= MaxPlayers.GetHashCode();
    if (HasBotCount) hash ^= BotCount.GetHashCode();
    if (HasPassword) hash ^= Password.GetHashCode();
    if (HasSecure) hash ^= Secure.GetHashCode();
    if (HasDedicated) hash ^= Dedicated.GetHashCode();
    if (HasOs) hash ^= Os.GetHashCode();
    if (HasGameData) hash ^= GameData.GetHashCode();
    if (HasGameType) hash ^= GameType.GetHashCode();
    if (HasMap) hash ^= Map.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasQueryPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(QueryPort);
    }
    if (HasGamePort) {
      output.WriteRawTag(32);
      output.WriteUInt32(GamePort);
    }
    if (HasSpectatorPort) {
      output.WriteRawTag(40);
      output.WriteUInt32(SpectatorPort);
    }
    if (HasAppId) {
      output.WriteRawTag(48);
      output.WriteUInt32(AppId);
    }
    if (HasGamedir) {
      output.WriteRawTag(58);
      output.WriteString(Gamedir);
    }
    if (HasVersion) {
      output.WriteRawTag(66);
      output.WriteString(Version);
    }
    if (HasProduct) {
      output.WriteRawTag(74);
      output.WriteString(Product);
    }
    if (HasRegion) {
      output.WriteRawTag(82);
      output.WriteString(Region);
    }
    players_.WriteTo(output, _repeated_players_codec);
    if (HasMaxPlayers) {
      output.WriteRawTag(96);
      output.WriteUInt32(MaxPlayers);
    }
    if (HasBotCount) {
      output.WriteRawTag(104);
      output.WriteUInt32(BotCount);
    }
    if (HasPassword) {
      output.WriteRawTag(112);
      output.WriteBool(Password);
    }
    if (HasSecure) {
      output.WriteRawTag(120);
      output.WriteBool(Secure);
    }
    if (HasDedicated) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Dedicated);
    }
    if (HasOs) {
      output.WriteRawTag(138, 1);
      output.WriteString(Os);
    }
    if (HasGameData) {
      output.WriteRawTag(146, 1);
      output.WriteString(GameData);
    }
    if (HasGameType) {
      output.WriteRawTag(162, 1);
      output.WriteString(GameType);
    }
    if (HasMap) {
      output.WriteRawTag(170, 1);
      output.WriteString(Map);
    }
    if (HasServerName) {
      output.WriteRawTag(178, 1);
      output.WriteString(ServerName);
    }
    if (HasRevision) {
      output.WriteRawTag(192, 1);
      output.WriteUInt32(Revision);
    }
    if (HasSpectatorServerName) {
      output.WriteRawTag(218, 1);
      output.WriteString(SpectatorServerName);
    }
    if (HasFakeIp) {
      output.WriteRawTag(229, 1);
      output.WriteFixed32(FakeIp);
    }
    if (HasGameDescription) {
      output.WriteRawTag(234, 1);
      output.WriteString(GameDescription);
    }
    if (HasSdrPingLocation) {
      output.WriteRawTag(242, 1);
      output.WriteString(SdrPingLocation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasQueryPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(QueryPort);
    }
    if (HasGamePort) {
      output.WriteRawTag(32);
      output.WriteUInt32(GamePort);
    }
    if (HasSpectatorPort) {
      output.WriteRawTag(40);
      output.WriteUInt32(SpectatorPort);
    }
    if (HasAppId) {
      output.WriteRawTag(48);
      output.WriteUInt32(AppId);
    }
    if (HasGamedir) {
      output.WriteRawTag(58);
      output.WriteString(Gamedir);
    }
    if (HasVersion) {
      output.WriteRawTag(66);
      output.WriteString(Version);
    }
    if (HasProduct) {
      output.WriteRawTag(74);
      output.WriteString(Product);
    }
    if (HasRegion) {
      output.WriteRawTag(82);
      output.WriteString(Region);
    }
    players_.WriteTo(ref output, _repeated_players_codec);
    if (HasMaxPlayers) {
      output.WriteRawTag(96);
      output.WriteUInt32(MaxPlayers);
    }
    if (HasBotCount) {
      output.WriteRawTag(104);
      output.WriteUInt32(BotCount);
    }
    if (HasPassword) {
      output.WriteRawTag(112);
      output.WriteBool(Password);
    }
    if (HasSecure) {
      output.WriteRawTag(120);
      output.WriteBool(Secure);
    }
    if (HasDedicated) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Dedicated);
    }
    if (HasOs) {
      output.WriteRawTag(138, 1);
      output.WriteString(Os);
    }
    if (HasGameData) {
      output.WriteRawTag(146, 1);
      output.WriteString(GameData);
    }
    if (HasGameType) {
      output.WriteRawTag(162, 1);
      output.WriteString(GameType);
    }
    if (HasMap) {
      output.WriteRawTag(170, 1);
      output.WriteString(Map);
    }
    if (HasServerName) {
      output.WriteRawTag(178, 1);
      output.WriteString(ServerName);
    }
    if (HasRevision) {
      output.WriteRawTag(192, 1);
      output.WriteUInt32(Revision);
    }
    if (HasSpectatorServerName) {
      output.WriteRawTag(218, 1);
      output.WriteString(SpectatorServerName);
    }
    if (HasFakeIp) {
      output.WriteRawTag(229, 1);
      output.WriteFixed32(FakeIp);
    }
    if (HasGameDescription) {
      output.WriteRawTag(234, 1);
      output.WriteString(GameDescription);
    }
    if (HasSdrPingLocation) {
      output.WriteRawTag(242, 1);
      output.WriteString(SdrPingLocation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRevision) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
    }
    if (HasQueryPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueryPort);
    }
    if (HasGamePort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePort);
    }
    if (HasSpectatorPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorPort);
    }
    if (HasServerName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ServerName);
    }
    if (HasGameDescription) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GameDescription);
    }
    if (HasSpectatorServerName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SpectatorServerName);
    }
    if (HasFakeIp) {
      size += 2 + 4;
    }
    if (HasSdrPingLocation) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SdrPingLocation);
    }
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasGamedir) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Gamedir);
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (HasProduct) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
    }
    if (HasRegion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
    }
    size += players_.CalculateSize(_repeated_players_codec);
    if (HasMaxPlayers) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
    }
    if (HasBotCount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BotCount);
    }
    if (HasPassword) {
      size += 1 + 1;
    }
    if (HasSecure) {
      size += 1 + 1;
    }
    if (HasDedicated) {
      size += 2 + 1;
    }
    if (HasOs) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Os);
    }
    if (HasGameData) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GameData);
    }
    if (HasGameType) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GameType);
    }
    if (HasMap) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Map);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerData other) {
    if (other == null) {
      return;
    }
    if (other.HasRevision) {
      Revision = other.Revision;
    }
    if (other.HasQueryPort) {
      QueryPort = other.QueryPort;
    }
    if (other.HasGamePort) {
      GamePort = other.GamePort;
    }
    if (other.HasSpectatorPort) {
      SpectatorPort = other.SpectatorPort;
    }
    if (other.HasServerName) {
      ServerName = other.ServerName;
    }
    if (other.HasGameDescription) {
      GameDescription = other.GameDescription;
    }
    if (other.HasSpectatorServerName) {
      SpectatorServerName = other.SpectatorServerName;
    }
    if (other.HasFakeIp) {
      FakeIp = other.FakeIp;
    }
    if (other.HasSdrPingLocation) {
      SdrPingLocation = other.SdrPingLocation;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasGamedir) {
      Gamedir = other.Gamedir;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    if (other.HasProduct) {
      Product = other.Product;
    }
    if (other.HasRegion) {
      Region = other.Region;
    }
    players_.Add(other.players_);
    if (other.HasMaxPlayers) {
      MaxPlayers = other.MaxPlayers;
    }
    if (other.HasBotCount) {
      BotCount = other.BotCount;
    }
    if (other.HasPassword) {
      Password = other.Password;
    }
    if (other.HasSecure) {
      Secure = other.Secure;
    }
    if (other.HasDedicated) {
      Dedicated = other.Dedicated;
    }
    if (other.HasOs) {
      Os = other.Os;
    }
    if (other.HasGameData) {
      GameData = other.GameData;
    }
    if (other.HasGameType) {
      GameType = other.GameType;
    }
    if (other.HasMap) {
      Map = other.Map;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 24: {
          QueryPort = input.ReadUInt32();
          break;
        }
        case 32: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 40: {
          SpectatorPort = input.ReadUInt32();
          break;
        }
        case 48: {
          AppId = input.ReadUInt32();
          break;
        }
        case 58: {
          Gamedir = input.ReadString();
          break;
        }
        case 66: {
          Version = input.ReadString();
          break;
        }
        case 74: {
          Product = input.ReadString();
          break;
        }
        case 82: {
          Region = input.ReadString();
          break;
        }
        case 90: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
        case 96: {
          MaxPlayers = input.ReadUInt32();
          break;
        }
        case 104: {
          BotCount = input.ReadUInt32();
          break;
        }
        case 112: {
          Password = input.ReadBool();
          break;
        }
        case 120: {
          Secure = input.ReadBool();
          break;
        }
        case 128: {
          Dedicated = input.ReadBool();
          break;
        }
        case 138: {
          Os = input.ReadString();
          break;
        }
        case 146: {
          GameData = input.ReadString();
          break;
        }
        case 162: {
          GameType = input.ReadString();
          break;
        }
        case 170: {
          Map = input.ReadString();
          break;
        }
        case 178: {
          ServerName = input.ReadString();
          break;
        }
        case 192: {
          Revision = input.ReadUInt32();
          break;
        }
        case 218: {
          SpectatorServerName = input.ReadString();
          break;
        }
        case 229: {
          FakeIp = input.ReadFixed32();
          break;
        }
        case 234: {
          GameDescription = input.ReadString();
          break;
        }
        case 242: {
          SdrPingLocation = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 24: {
          QueryPort = input.ReadUInt32();
          break;
        }
        case 32: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 40: {
          SpectatorPort = input.ReadUInt32();
          break;
        }
        case 48: {
          AppId = input.ReadUInt32();
          break;
        }
        case 58: {
          Gamedir = input.ReadString();
          break;
        }
        case 66: {
          Version = input.ReadString();
          break;
        }
        case 74: {
          Product = input.ReadString();
          break;
        }
        case 82: {
          Region = input.ReadString();
          break;
        }
        case 90: {
          players_.AddEntriesFrom(ref input, _repeated_players_codec);
          break;
        }
        case 96: {
          MaxPlayers = input.ReadUInt32();
          break;
        }
        case 104: {
          BotCount = input.ReadUInt32();
          break;
        }
        case 112: {
          Password = input.ReadBool();
          break;
        }
        case 120: {
          Secure = input.ReadBool();
          break;
        }
        case 128: {
          Dedicated = input.ReadBool();
          break;
        }
        case 138: {
          Os = input.ReadString();
          break;
        }
        case 146: {
          GameData = input.ReadString();
          break;
        }
        case 162: {
          GameType = input.ReadString();
          break;
        }
        case 170: {
          Map = input.ReadString();
          break;
        }
        case 178: {
          ServerName = input.ReadString();
          break;
        }
        case 192: {
          Revision = input.ReadUInt32();
          break;
        }
        case 218: {
          SpectatorServerName = input.ReadString();
          break;
        }
        case 229: {
          FakeIp = input.ReadFixed32();
          break;
        }
        case 234: {
          GameDescription = input.ReadString();
          break;
        }
        case 242: {
          SdrPingLocation = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgGameServerData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Player : pb::IMessage<Player>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Player> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgGameServerData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player(Player other) : this() {
        _hasBits0 = other._hasBits0;
        steamId_ = other.steamId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player Clone() {
        return new Player(this);
      }

      /// <summary>Field number for the "steam_id" field.</summary>
      public const int SteamIdFieldNumber = 1;
      private readonly static ulong SteamIdDefaultValue = 0UL;

      private ulong steamId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong SteamId {
        get { if ((_hasBits0 & 1) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          steamId_ = value;
        }
      }
      /// <summary>Gets whether the "steam_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSteamId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "steam_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSteamId() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Player);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Player other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SteamId != other.SteamId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasSteamId) hash ^= SteamId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasSteamId) {
          output.WriteRawTag(9);
          output.WriteFixed64(SteamId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasSteamId) {
          output.WriteRawTag(9);
          output.WriteFixed64(SteamId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasSteamId) {
          size += 1 + 8;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Player other) {
        if (other == null) {
          return;
        }
        if (other.HasSteamId) {
          SteamId = other.SteamId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 9: {
              SteamId = input.ReadFixed64();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 9: {
              SteamId = input.ReadFixed64();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgGameServerRemove : pb::IMessage<CMsgGameServerRemove>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerRemove> _parser = new pb::MessageParser<CMsgGameServerRemove>(() => new CMsgGameServerRemove());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerRemove> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRemove() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRemove(CMsgGameServerRemove other) : this() {
    _hasBits0 = other._hasBits0;
    legacySteamIdGs_ = other.legacySteamIdGs_;
    legacyQueryPort_ = other.legacyQueryPort_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRemove Clone() {
    return new CMsgGameServerRemove(this);
  }

  /// <summary>Field number for the "legacy_steam_id_gs" field.</summary>
  public const int LegacySteamIdGsFieldNumber = 1;
  private readonly static ulong LegacySteamIdGsDefaultValue = 0UL;

  private ulong legacySteamIdGs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacySteamIdGs {
    get { if ((_hasBits0 & 1) != 0) { return legacySteamIdGs_; } else { return LegacySteamIdGsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacySteamIdGs_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_steam_id_gs" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacySteamIdGs {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_steam_id_gs" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacySteamIdGs() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "legacy_query_port" field.</summary>
  public const int LegacyQueryPortFieldNumber = 3;
  private readonly static uint LegacyQueryPortDefaultValue = 0;

  private uint legacyQueryPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyQueryPort {
    get { if ((_hasBits0 & 2) != 0) { return legacyQueryPort_; } else { return LegacyQueryPortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyQueryPort_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_query_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyQueryPort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_query_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyQueryPort() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerRemove);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerRemove other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LegacySteamIdGs != other.LegacySteamIdGs) return false;
    if (LegacyQueryPort != other.LegacyQueryPort) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLegacySteamIdGs) hash ^= LegacySteamIdGs.GetHashCode();
    if (HasLegacyQueryPort) hash ^= LegacyQueryPort.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacySteamIdGs) {
      output.WriteRawTag(9);
      output.WriteFixed64(LegacySteamIdGs);
    }
    if (HasLegacyQueryPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(LegacyQueryPort);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacySteamIdGs) {
      output.WriteRawTag(9);
      output.WriteFixed64(LegacySteamIdGs);
    }
    if (HasLegacyQueryPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(LegacyQueryPort);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLegacySteamIdGs) {
      size += 1 + 8;
    }
    if (HasLegacyQueryPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyQueryPort);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerRemove other) {
    if (other == null) {
      return;
    }
    if (other.HasLegacySteamIdGs) {
      LegacySteamIdGs = other.LegacySteamIdGs;
    }
    if (other.HasLegacyQueryPort) {
      LegacyQueryPort = other.LegacyQueryPort;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          LegacySteamIdGs = input.ReadFixed64();
          break;
        }
        case 24: {
          LegacyQueryPort = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          LegacySteamIdGs = input.ReadFixed64();
          break;
        }
        case 24: {
          LegacyQueryPort = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgClientGMSServerQuery : pb::IMessage<CMsgClientGMSServerQuery>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgClientGMSServerQuery> _parser = new pb::MessageParser<CMsgClientGMSServerQuery>(() => new CMsgClientGMSServerQuery());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgClientGMSServerQuery> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientGMSServerQuery() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientGMSServerQuery(CMsgClientGMSServerQuery other) : this() {
    _hasBits0 = other._hasBits0;
    appId_ = other.appId_;
    geoLocationIp_ = other.geoLocationIp_;
    regionCode_ = other.regionCode_;
    filterText_ = other.filterText_;
    maxServers_ = other.maxServers_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientGMSServerQuery Clone() {
    return new CMsgClientGMSServerQuery(this);
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 1;
  private readonly static uint AppIdDefaultValue = 0;

  private uint appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AppId {
    get { if ((_hasBits0 & 1) != 0) { return appId_; } else { return AppIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "geo_location_ip" field.</summary>
  public const int GeoLocationIpFieldNumber = 2;
  private readonly static uint GeoLocationIpDefaultValue = 0;

  private uint geoLocationIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GeoLocationIp {
    get { if ((_hasBits0 & 2) != 0) { return geoLocationIp_; } else { return GeoLocationIpDefaultValue; } }
    set {
      _hasBits0 |= 2;
      geoLocationIp_ = value;
    }
  }
  /// <summary>Gets whether the "geo_location_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGeoLocationIp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "geo_location_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGeoLocationIp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "region_code" field.</summary>
  public const int RegionCodeFieldNumber = 3;
  private readonly static uint RegionCodeDefaultValue = 0;

  private uint regionCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RegionCode {
    get { if ((_hasBits0 & 4) != 0) { return regionCode_; } else { return RegionCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      regionCode_ = value;
    }
  }
  /// <summary>Gets whether the "region_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegionCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "region_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegionCode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "filter_text" field.</summary>
  public const int FilterTextFieldNumber = 4;
  private readonly static string FilterTextDefaultValue = "";

  private string filterText_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string FilterText {
    get { return filterText_ ?? FilterTextDefaultValue; }
    set {
      filterText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "filter_text" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilterText {
    get { return filterText_ != null; }
  }
  /// <summary>Clears the value of the "filter_text" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilterText() {
    filterText_ = null;
  }

  /// <summary>Field number for the "max_servers" field.</summary>
  public const int MaxServersFieldNumber = 5;
  private readonly static uint MaxServersDefaultValue = 0;

  private uint maxServers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxServers {
    get { if ((_hasBits0 & 8) != 0) { return maxServers_; } else { return MaxServersDefaultValue; } }
    set {
      _hasBits0 |= 8;
      maxServers_ = value;
    }
  }
  /// <summary>Gets whether the "max_servers" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxServers {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "max_servers" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxServers() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgClientGMSServerQuery);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgClientGMSServerQuery other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AppId != other.AppId) return false;
    if (GeoLocationIp != other.GeoLocationIp) return false;
    if (RegionCode != other.RegionCode) return false;
    if (FilterText != other.FilterText) return false;
    if (MaxServers != other.MaxServers) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasGeoLocationIp) hash ^= GeoLocationIp.GetHashCode();
    if (HasRegionCode) hash ^= RegionCode.GetHashCode();
    if (HasFilterText) hash ^= FilterText.GetHashCode();
    if (HasMaxServers) hash ^= MaxServers.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAppId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppId);
    }
    if (HasGeoLocationIp) {
      output.WriteRawTag(16);
      output.WriteUInt32(GeoLocationIp);
    }
    if (HasRegionCode) {
      output.WriteRawTag(24);
      output.WriteUInt32(RegionCode);
    }
    if (HasFilterText) {
      output.WriteRawTag(34);
      output.WriteString(FilterText);
    }
    if (HasMaxServers) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxServers);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAppId) {
      output.WriteRawTag(8);
      output.WriteUInt32(AppId);
    }
    if (HasGeoLocationIp) {
      output.WriteRawTag(16);
      output.WriteUInt32(GeoLocationIp);
    }
    if (HasRegionCode) {
      output.WriteRawTag(24);
      output.WriteUInt32(RegionCode);
    }
    if (HasFilterText) {
      output.WriteRawTag(34);
      output.WriteString(FilterText);
    }
    if (HasMaxServers) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxServers);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasGeoLocationIp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GeoLocationIp);
    }
    if (HasRegionCode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionCode);
    }
    if (HasFilterText) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FilterText);
    }
    if (HasMaxServers) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxServers);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgClientGMSServerQuery other) {
    if (other == null) {
      return;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasGeoLocationIp) {
      GeoLocationIp = other.GeoLocationIp;
    }
    if (other.HasRegionCode) {
      RegionCode = other.RegionCode;
    }
    if (other.HasFilterText) {
      FilterText = other.FilterText;
    }
    if (other.HasMaxServers) {
      MaxServers = other.MaxServers;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AppId = input.ReadUInt32();
          break;
        }
        case 16: {
          GeoLocationIp = input.ReadUInt32();
          break;
        }
        case 24: {
          RegionCode = input.ReadUInt32();
          break;
        }
        case 34: {
          FilterText = input.ReadString();
          break;
        }
        case 40: {
          MaxServers = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          AppId = input.ReadUInt32();
          break;
        }
        case 16: {
          GeoLocationIp = input.ReadUInt32();
          break;
        }
        case 24: {
          RegionCode = input.ReadUInt32();
          break;
        }
        case 34: {
          FilterText = input.ReadString();
          break;
        }
        case 40: {
          MaxServers = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGMSClientServerQueryResponse : pb::IMessage<CMsgGMSClientServerQueryResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGMSClientServerQueryResponse> _parser = new pb::MessageParser<CMsgGMSClientServerQueryResponse>(() => new CMsgGMSClientServerQueryResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGMSClientServerQueryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGMSClientServerQueryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGMSClientServerQueryResponse(CMsgGMSClientServerQueryResponse other) : this() {
    servers_ = other.servers_.Clone();
    error_ = other.error_;
    defaultServerData_ = other.defaultServerData_ != null ? other.defaultServerData_.Clone() : null;
    serverStrings_ = other.serverStrings_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGMSClientServerQueryResponse Clone() {
    return new CMsgGMSClientServerQueryResponse(this);
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgGMSClientServerQueryResponse.Types.Server> _repeated_servers_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgGMSClientServerQueryResponse.Types.Server.Parser);
  private readonly pbc::RepeatedField<global::CMsgGMSClientServerQueryResponse.Types.Server> servers_ = new pbc::RepeatedField<global::CMsgGMSClientServerQueryResponse.Types.Server>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgGMSClientServerQueryResponse.Types.Server> Servers {
    get { return servers_; }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 2;
  private readonly static string ErrorDefaultValue = "";

  private string error_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Error {
    get { return error_ ?? ErrorDefaultValue; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "error" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasError {
    get { return error_ != null; }
  }
  /// <summary>Clears the value of the "error" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearError() {
    error_ = null;
  }

  /// <summary>Field number for the "default_server_data" field.</summary>
  public const int DefaultServerDataFieldNumber = 3;
  private global::CMsgGMSClientServerQueryResponse.Types.Server defaultServerData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGMSClientServerQueryResponse.Types.Server DefaultServerData {
    get { return defaultServerData_; }
    set {
      defaultServerData_ = value;
    }
  }

  /// <summary>Field number for the "server_strings" field.</summary>
  public const int ServerStringsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_serverStrings_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> serverStrings_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> ServerStrings {
    get { return serverStrings_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGMSClientServerQueryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGMSClientServerQueryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!servers_.Equals(other.servers_)) return false;
    if (Error != other.Error) return false;
    if (!object.Equals(DefaultServerData, other.DefaultServerData)) return false;
    if(!serverStrings_.Equals(other.serverStrings_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= servers_.GetHashCode();
    if (HasError) hash ^= Error.GetHashCode();
    if (defaultServerData_ != null) hash ^= DefaultServerData.GetHashCode();
    hash ^= serverStrings_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    servers_.WriteTo(output, _repeated_servers_codec);
    if (HasError) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    if (defaultServerData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DefaultServerData);
    }
    serverStrings_.WriteTo(output, _repeated_serverStrings_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    servers_.WriteTo(ref output, _repeated_servers_codec);
    if (HasError) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    if (defaultServerData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DefaultServerData);
    }
    serverStrings_.WriteTo(ref output, _repeated_serverStrings_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += servers_.CalculateSize(_repeated_servers_codec);
    if (HasError) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    if (defaultServerData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultServerData);
    }
    size += serverStrings_.CalculateSize(_repeated_serverStrings_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGMSClientServerQueryResponse other) {
    if (other == null) {
      return;
    }
    servers_.Add(other.servers_);
    if (other.HasError) {
      Error = other.Error;
    }
    if (other.defaultServerData_ != null) {
      if (defaultServerData_ == null) {
        DefaultServerData = new global::CMsgGMSClientServerQueryResponse.Types.Server();
      }
      DefaultServerData.MergeFrom(other.DefaultServerData);
    }
    serverStrings_.Add(other.serverStrings_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
        case 26: {
          if (defaultServerData_ == null) {
            DefaultServerData = new global::CMsgGMSClientServerQueryResponse.Types.Server();
          }
          input.ReadMessage(DefaultServerData);
          break;
        }
        case 34: {
          serverStrings_.AddEntriesFrom(input, _repeated_serverStrings_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          servers_.AddEntriesFrom(ref input, _repeated_servers_codec);
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
        case 26: {
          if (defaultServerData_ == null) {
            DefaultServerData = new global::CMsgGMSClientServerQueryResponse.Types.Server();
          }
          input.ReadMessage(DefaultServerData);
          break;
        }
        case 34: {
          serverStrings_.AddEntriesFrom(ref input, _repeated_serverStrings_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgGMSClientServerQueryResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum EFlags {
      [pbr::OriginalName("k_EFlag_HasPassword")] KEflagHasPassword = 1,
      [pbr::OriginalName("k_EFlag_Secure")] KEflagSecure = 2,
    }

    public sealed partial class Server : pb::IMessage<Server>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Server> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgGMSClientServerQueryResponse.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server(Server other) : this() {
        _hasBits0 = other._hasBits0;
        deprecatedServerIp_ = other.deprecatedServerIp_;
        queryPort_ = other.queryPort_;
        authPlayers_ = other.authPlayers_;
        serverIp_ = other.serverIp_ != null ? other.serverIp_.Clone() : null;
        steamId_ = other.steamId_;
        revision_ = other.revision_;
        players_ = other.players_;
        gamePort_ = other.gamePort_;
        sdrPopid_ = other.sdrPopid_;
        sdrPingLocation_ = other.sdrPingLocation_;
        flags_ = other.flags_;
        appId_ = other.appId_;
        maxPlayers_ = other.maxPlayers_;
        bots_ = other.bots_;
        spectatorPort_ = other.spectatorPort_;
        gamedirStr_ = other.gamedirStr_;
        gamedirStrindex_ = other.gamedirStrindex_;
        mapStr_ = other.mapStr_;
        mapStrindex_ = other.mapStrindex_;
        nameStr_ = other.nameStr_;
        nameStrindex_ = other.nameStrindex_;
        gameDescriptionStr_ = other.gameDescriptionStr_;
        gameDescriptionStrindex_ = other.gameDescriptionStrindex_;
        versionStr_ = other.versionStr_;
        versionStrindex_ = other.versionStrindex_;
        gametypeStr_ = other.gametypeStr_;
        gametypeStrindex_ = other.gametypeStrindex_;
        spectatorNameStr_ = other.spectatorNameStr_;
        spectatorNameStrindex_ = other.spectatorNameStrindex_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server Clone() {
        return new Server(this);
      }

      /// <summary>Field number for the "deprecated_server_ip" field.</summary>
      public const int DeprecatedServerIpFieldNumber = 1;
      private readonly static uint DeprecatedServerIpDefaultValue = 0;

      private uint deprecatedServerIp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DeprecatedServerIp {
        get { if ((_hasBits0 & 1) != 0) { return deprecatedServerIp_; } else { return DeprecatedServerIpDefaultValue; } }
        set {
          _hasBits0 |= 1;
          deprecatedServerIp_ = value;
        }
      }
      /// <summary>Gets whether the "deprecated_server_ip" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDeprecatedServerIp {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "deprecated_server_ip" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDeprecatedServerIp() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "query_port" field.</summary>
      public const int QueryPortFieldNumber = 2;
      private readonly static uint QueryPortDefaultValue = 0;

      private uint queryPort_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint QueryPort {
        get { if ((_hasBits0 & 2) != 0) { return queryPort_; } else { return QueryPortDefaultValue; } }
        set {
          _hasBits0 |= 2;
          queryPort_ = value;
        }
      }
      /// <summary>Gets whether the "query_port" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasQueryPort {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "query_port" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearQueryPort() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "auth_players" field.</summary>
      public const int AuthPlayersFieldNumber = 3;
      private readonly static uint AuthPlayersDefaultValue = 0;

      private uint authPlayers_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint AuthPlayers {
        get { if ((_hasBits0 & 4) != 0) { return authPlayers_; } else { return AuthPlayersDefaultValue; } }
        set {
          _hasBits0 |= 4;
          authPlayers_ = value;
        }
      }
      /// <summary>Gets whether the "auth_players" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAuthPlayers {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "auth_players" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAuthPlayers() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "server_ip" field.</summary>
      public const int ServerIpFieldNumber = 4;
      private global::CMsgIPAddress serverIp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgIPAddress ServerIp {
        get { return serverIp_; }
        set {
          serverIp_ = value;
        }
      }

      /// <summary>Field number for the "steam_id" field.</summary>
      public const int SteamIdFieldNumber = 6;
      private readonly static ulong SteamIdDefaultValue = 0UL;

      private ulong steamId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong SteamId {
        get { if ((_hasBits0 & 8) != 0) { return steamId_; } else { return SteamIdDefaultValue; } }
        set {
          _hasBits0 |= 8;
          steamId_ = value;
        }
      }
      /// <summary>Gets whether the "steam_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSteamId {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "steam_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSteamId() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "revision" field.</summary>
      public const int RevisionFieldNumber = 7;
      private readonly static uint RevisionDefaultValue = 0;

      private uint revision_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Revision {
        get { if ((_hasBits0 & 16) != 0) { return revision_; } else { return RevisionDefaultValue; } }
        set {
          _hasBits0 |= 16;
          revision_ = value;
        }
      }
      /// <summary>Gets whether the "revision" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasRevision {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "revision" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearRevision() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "players" field.</summary>
      public const int PlayersFieldNumber = 8;
      private readonly static uint PlayersDefaultValue = 0;

      private uint players_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Players {
        get { if ((_hasBits0 & 32) != 0) { return players_; } else { return PlayersDefaultValue; } }
        set {
          _hasBits0 |= 32;
          players_ = value;
        }
      }
      /// <summary>Gets whether the "players" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPlayers {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "players" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPlayers() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "game_port" field.</summary>
      public const int GamePortFieldNumber = 9;
      private readonly static uint GamePortDefaultValue = 0;

      private uint gamePort_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint GamePort {
        get { if ((_hasBits0 & 64) != 0) { return gamePort_; } else { return GamePortDefaultValue; } }
        set {
          _hasBits0 |= 64;
          gamePort_ = value;
        }
      }
      /// <summary>Gets whether the "game_port" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGamePort {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "game_port" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGamePort() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "sdr_popid" field.</summary>
      public const int SdrPopidFieldNumber = 10;
      private readonly static uint SdrPopidDefaultValue = 0;

      private uint sdrPopid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint SdrPopid {
        get { if ((_hasBits0 & 128) != 0) { return sdrPopid_; } else { return SdrPopidDefaultValue; } }
        set {
          _hasBits0 |= 128;
          sdrPopid_ = value;
        }
      }
      /// <summary>Gets whether the "sdr_popid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSdrPopid {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "sdr_popid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSdrPopid() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "sdr_ping_location" field.</summary>
      public const int SdrPingLocationFieldNumber = 32;
      private readonly static string SdrPingLocationDefaultValue = "";

      private string sdrPingLocation_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string SdrPingLocation {
        get { return sdrPingLocation_ ?? SdrPingLocationDefaultValue; }
        set {
          sdrPingLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "sdr_ping_location" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSdrPingLocation {
        get { return sdrPingLocation_ != null; }
      }
      /// <summary>Clears the value of the "sdr_ping_location" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSdrPingLocation() {
        sdrPingLocation_ = null;
      }

      /// <summary>Field number for the "flags" field.</summary>
      public const int FlagsFieldNumber = 11;
      private readonly static uint FlagsDefaultValue = 0;

      private uint flags_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Flags {
        get { if ((_hasBits0 & 256) != 0) { return flags_; } else { return FlagsDefaultValue; } }
        set {
          _hasBits0 |= 256;
          flags_ = value;
        }
      }
      /// <summary>Gets whether the "flags" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFlags {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "flags" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFlags() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "app_id" field.</summary>
      public const int AppIdFieldNumber = 12;
      private readonly static uint AppIdDefaultValue = 0;

      private uint appId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint AppId {
        get { if ((_hasBits0 & 512) != 0) { return appId_; } else { return AppIdDefaultValue; } }
        set {
          _hasBits0 |= 512;
          appId_ = value;
        }
      }
      /// <summary>Gets whether the "app_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAppId {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "app_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAppId() {
        _hasBits0 &= ~512;
      }

      /// <summary>Field number for the "max_players" field.</summary>
      public const int MaxPlayersFieldNumber = 13;
      private readonly static uint MaxPlayersDefaultValue = 0;

      private uint maxPlayers_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint MaxPlayers {
        get { if ((_hasBits0 & 1024) != 0) { return maxPlayers_; } else { return MaxPlayersDefaultValue; } }
        set {
          _hasBits0 |= 1024;
          maxPlayers_ = value;
        }
      }
      /// <summary>Gets whether the "max_players" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMaxPlayers {
        get { return (_hasBits0 & 1024) != 0; }
      }
      /// <summary>Clears the value of the "max_players" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMaxPlayers() {
        _hasBits0 &= ~1024;
      }

      /// <summary>Field number for the "bots" field.</summary>
      public const int BotsFieldNumber = 14;
      private readonly static uint BotsDefaultValue = 0;

      private uint bots_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Bots {
        get { if ((_hasBits0 & 2048) != 0) { return bots_; } else { return BotsDefaultValue; } }
        set {
          _hasBits0 |= 2048;
          bots_ = value;
        }
      }
      /// <summary>Gets whether the "bots" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBots {
        get { return (_hasBits0 & 2048) != 0; }
      }
      /// <summary>Clears the value of the "bots" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBots() {
        _hasBits0 &= ~2048;
      }

      /// <summary>Field number for the "spectator_port" field.</summary>
      public const int SpectatorPortFieldNumber = 15;
      private readonly static uint SpectatorPortDefaultValue = 0;

      private uint spectatorPort_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint SpectatorPort {
        get { if ((_hasBits0 & 4096) != 0) { return spectatorPort_; } else { return SpectatorPortDefaultValue; } }
        set {
          _hasBits0 |= 4096;
          spectatorPort_ = value;
        }
      }
      /// <summary>Gets whether the "spectator_port" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSpectatorPort {
        get { return (_hasBits0 & 4096) != 0; }
      }
      /// <summary>Clears the value of the "spectator_port" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSpectatorPort() {
        _hasBits0 &= ~4096;
      }

      /// <summary>Field number for the "gamedir_str" field.</summary>
      public const int GamedirStrFieldNumber = 16;
      private readonly static string GamedirStrDefaultValue = "";

      private string gamedirStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string GamedirStr {
        get { return gamedirStr_ ?? GamedirStrDefaultValue; }
        set {
          gamedirStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "gamedir_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGamedirStr {
        get { return gamedirStr_ != null; }
      }
      /// <summary>Clears the value of the "gamedir_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGamedirStr() {
        gamedirStr_ = null;
      }

      /// <summary>Field number for the "gamedir_strindex" field.</summary>
      public const int GamedirStrindexFieldNumber = 17;
      private readonly static uint GamedirStrindexDefaultValue = 0;

      private uint gamedirStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint GamedirStrindex {
        get { if ((_hasBits0 & 8192) != 0) { return gamedirStrindex_; } else { return GamedirStrindexDefaultValue; } }
        set {
          _hasBits0 |= 8192;
          gamedirStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "gamedir_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGamedirStrindex {
        get { return (_hasBits0 & 8192) != 0; }
      }
      /// <summary>Clears the value of the "gamedir_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGamedirStrindex() {
        _hasBits0 &= ~8192;
      }

      /// <summary>Field number for the "map_str" field.</summary>
      public const int MapStrFieldNumber = 18;
      private readonly static string MapStrDefaultValue = "";

      private string mapStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string MapStr {
        get { return mapStr_ ?? MapStrDefaultValue; }
        set {
          mapStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "map_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMapStr {
        get { return mapStr_ != null; }
      }
      /// <summary>Clears the value of the "map_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMapStr() {
        mapStr_ = null;
      }

      /// <summary>Field number for the "map_strindex" field.</summary>
      public const int MapStrindexFieldNumber = 19;
      private readonly static uint MapStrindexDefaultValue = 0;

      private uint mapStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint MapStrindex {
        get { if ((_hasBits0 & 16384) != 0) { return mapStrindex_; } else { return MapStrindexDefaultValue; } }
        set {
          _hasBits0 |= 16384;
          mapStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "map_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMapStrindex {
        get { return (_hasBits0 & 16384) != 0; }
      }
      /// <summary>Clears the value of the "map_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMapStrindex() {
        _hasBits0 &= ~16384;
      }

      /// <summary>Field number for the "name_str" field.</summary>
      public const int NameStrFieldNumber = 20;
      private readonly static string NameStrDefaultValue = "";

      private string nameStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string NameStr {
        get { return nameStr_ ?? NameStrDefaultValue; }
        set {
          nameStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasNameStr {
        get { return nameStr_ != null; }
      }
      /// <summary>Clears the value of the "name_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearNameStr() {
        nameStr_ = null;
      }

      /// <summary>Field number for the "name_strindex" field.</summary>
      public const int NameStrindexFieldNumber = 21;
      private readonly static uint NameStrindexDefaultValue = 0;

      private uint nameStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint NameStrindex {
        get { if ((_hasBits0 & 32768) != 0) { return nameStrindex_; } else { return NameStrindexDefaultValue; } }
        set {
          _hasBits0 |= 32768;
          nameStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "name_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasNameStrindex {
        get { return (_hasBits0 & 32768) != 0; }
      }
      /// <summary>Clears the value of the "name_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearNameStrindex() {
        _hasBits0 &= ~32768;
      }

      /// <summary>Field number for the "game_description_str" field.</summary>
      public const int GameDescriptionStrFieldNumber = 22;
      private readonly static string GameDescriptionStrDefaultValue = "";

      private string gameDescriptionStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string GameDescriptionStr {
        get { return gameDescriptionStr_ ?? GameDescriptionStrDefaultValue; }
        set {
          gameDescriptionStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "game_description_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGameDescriptionStr {
        get { return gameDescriptionStr_ != null; }
      }
      /// <summary>Clears the value of the "game_description_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGameDescriptionStr() {
        gameDescriptionStr_ = null;
      }

      /// <summary>Field number for the "game_description_strindex" field.</summary>
      public const int GameDescriptionStrindexFieldNumber = 23;
      private readonly static uint GameDescriptionStrindexDefaultValue = 0;

      private uint gameDescriptionStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint GameDescriptionStrindex {
        get { if ((_hasBits0 & 65536) != 0) { return gameDescriptionStrindex_; } else { return GameDescriptionStrindexDefaultValue; } }
        set {
          _hasBits0 |= 65536;
          gameDescriptionStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "game_description_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGameDescriptionStrindex {
        get { return (_hasBits0 & 65536) != 0; }
      }
      /// <summary>Clears the value of the "game_description_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGameDescriptionStrindex() {
        _hasBits0 &= ~65536;
      }

      /// <summary>Field number for the "version_str" field.</summary>
      public const int VersionStrFieldNumber = 24;
      private readonly static string VersionStrDefaultValue = "";

      private string versionStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string VersionStr {
        get { return versionStr_ ?? VersionStrDefaultValue; }
        set {
          versionStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "version_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVersionStr {
        get { return versionStr_ != null; }
      }
      /// <summary>Clears the value of the "version_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVersionStr() {
        versionStr_ = null;
      }

      /// <summary>Field number for the "version_strindex" field.</summary>
      public const int VersionStrindexFieldNumber = 25;
      private readonly static uint VersionStrindexDefaultValue = 0;

      private uint versionStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint VersionStrindex {
        get { if ((_hasBits0 & 131072) != 0) { return versionStrindex_; } else { return VersionStrindexDefaultValue; } }
        set {
          _hasBits0 |= 131072;
          versionStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "version_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVersionStrindex {
        get { return (_hasBits0 & 131072) != 0; }
      }
      /// <summary>Clears the value of the "version_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVersionStrindex() {
        _hasBits0 &= ~131072;
      }

      /// <summary>Field number for the "gametype_str" field.</summary>
      public const int GametypeStrFieldNumber = 26;
      private readonly static string GametypeStrDefaultValue = "";

      private string gametypeStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string GametypeStr {
        get { return gametypeStr_ ?? GametypeStrDefaultValue; }
        set {
          gametypeStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "gametype_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGametypeStr {
        get { return gametypeStr_ != null; }
      }
      /// <summary>Clears the value of the "gametype_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGametypeStr() {
        gametypeStr_ = null;
      }

      /// <summary>Field number for the "gametype_strindex" field.</summary>
      public const int GametypeStrindexFieldNumber = 27;
      private readonly static uint GametypeStrindexDefaultValue = 0;

      private uint gametypeStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint GametypeStrindex {
        get { if ((_hasBits0 & 262144) != 0) { return gametypeStrindex_; } else { return GametypeStrindexDefaultValue; } }
        set {
          _hasBits0 |= 262144;
          gametypeStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "gametype_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGametypeStrindex {
        get { return (_hasBits0 & 262144) != 0; }
      }
      /// <summary>Clears the value of the "gametype_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGametypeStrindex() {
        _hasBits0 &= ~262144;
      }

      /// <summary>Field number for the "spectator_name_str" field.</summary>
      public const int SpectatorNameStrFieldNumber = 30;
      private readonly static string SpectatorNameStrDefaultValue = "";

      private string spectatorNameStr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string SpectatorNameStr {
        get { return spectatorNameStr_ ?? SpectatorNameStrDefaultValue; }
        set {
          spectatorNameStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "spectator_name_str" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSpectatorNameStr {
        get { return spectatorNameStr_ != null; }
      }
      /// <summary>Clears the value of the "spectator_name_str" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSpectatorNameStr() {
        spectatorNameStr_ = null;
      }

      /// <summary>Field number for the "spectator_name_strindex" field.</summary>
      public const int SpectatorNameStrindexFieldNumber = 31;
      private readonly static uint SpectatorNameStrindexDefaultValue = 0;

      private uint spectatorNameStrindex_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint SpectatorNameStrindex {
        get { if ((_hasBits0 & 524288) != 0) { return spectatorNameStrindex_; } else { return SpectatorNameStrindexDefaultValue; } }
        set {
          _hasBits0 |= 524288;
          spectatorNameStrindex_ = value;
        }
      }
      /// <summary>Gets whether the "spectator_name_strindex" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSpectatorNameStrindex {
        get { return (_hasBits0 & 524288) != 0; }
      }
      /// <summary>Clears the value of the "spectator_name_strindex" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSpectatorNameStrindex() {
        _hasBits0 &= ~524288;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Server);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Server other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (DeprecatedServerIp != other.DeprecatedServerIp) return false;
        if (QueryPort != other.QueryPort) return false;
        if (AuthPlayers != other.AuthPlayers) return false;
        if (!object.Equals(ServerIp, other.ServerIp)) return false;
        if (SteamId != other.SteamId) return false;
        if (Revision != other.Revision) return false;
        if (Players != other.Players) return false;
        if (GamePort != other.GamePort) return false;
        if (SdrPopid != other.SdrPopid) return false;
        if (SdrPingLocation != other.SdrPingLocation) return false;
        if (Flags != other.Flags) return false;
        if (AppId != other.AppId) return false;
        if (MaxPlayers != other.MaxPlayers) return false;
        if (Bots != other.Bots) return false;
        if (SpectatorPort != other.SpectatorPort) return false;
        if (GamedirStr != other.GamedirStr) return false;
        if (GamedirStrindex != other.GamedirStrindex) return false;
        if (MapStr != other.MapStr) return false;
        if (MapStrindex != other.MapStrindex) return false;
        if (NameStr != other.NameStr) return false;
        if (NameStrindex != other.NameStrindex) return false;
        if (GameDescriptionStr != other.GameDescriptionStr) return false;
        if (GameDescriptionStrindex != other.GameDescriptionStrindex) return false;
        if (VersionStr != other.VersionStr) return false;
        if (VersionStrindex != other.VersionStrindex) return false;
        if (GametypeStr != other.GametypeStr) return false;
        if (GametypeStrindex != other.GametypeStrindex) return false;
        if (SpectatorNameStr != other.SpectatorNameStr) return false;
        if (SpectatorNameStrindex != other.SpectatorNameStrindex) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDeprecatedServerIp) hash ^= DeprecatedServerIp.GetHashCode();
        if (HasQueryPort) hash ^= QueryPort.GetHashCode();
        if (HasAuthPlayers) hash ^= AuthPlayers.GetHashCode();
        if (serverIp_ != null) hash ^= ServerIp.GetHashCode();
        if (HasSteamId) hash ^= SteamId.GetHashCode();
        if (HasRevision) hash ^= Revision.GetHashCode();
        if (HasPlayers) hash ^= Players.GetHashCode();
        if (HasGamePort) hash ^= GamePort.GetHashCode();
        if (HasSdrPopid) hash ^= SdrPopid.GetHashCode();
        if (HasSdrPingLocation) hash ^= SdrPingLocation.GetHashCode();
        if (HasFlags) hash ^= Flags.GetHashCode();
        if (HasAppId) hash ^= AppId.GetHashCode();
        if (HasMaxPlayers) hash ^= MaxPlayers.GetHashCode();
        if (HasBots) hash ^= Bots.GetHashCode();
        if (HasSpectatorPort) hash ^= SpectatorPort.GetHashCode();
        if (HasGamedirStr) hash ^= GamedirStr.GetHashCode();
        if (HasGamedirStrindex) hash ^= GamedirStrindex.GetHashCode();
        if (HasMapStr) hash ^= MapStr.GetHashCode();
        if (HasMapStrindex) hash ^= MapStrindex.GetHashCode();
        if (HasNameStr) hash ^= NameStr.GetHashCode();
        if (HasNameStrindex) hash ^= NameStrindex.GetHashCode();
        if (HasGameDescriptionStr) hash ^= GameDescriptionStr.GetHashCode();
        if (HasGameDescriptionStrindex) hash ^= GameDescriptionStrindex.GetHashCode();
        if (HasVersionStr) hash ^= VersionStr.GetHashCode();
        if (HasVersionStrindex) hash ^= VersionStrindex.GetHashCode();
        if (HasGametypeStr) hash ^= GametypeStr.GetHashCode();
        if (HasGametypeStrindex) hash ^= GametypeStrindex.GetHashCode();
        if (HasSpectatorNameStr) hash ^= SpectatorNameStr.GetHashCode();
        if (HasSpectatorNameStrindex) hash ^= SpectatorNameStrindex.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDeprecatedServerIp) {
          output.WriteRawTag(8);
          output.WriteUInt32(DeprecatedServerIp);
        }
        if (HasQueryPort) {
          output.WriteRawTag(16);
          output.WriteUInt32(QueryPort);
        }
        if (HasAuthPlayers) {
          output.WriteRawTag(24);
          output.WriteUInt32(AuthPlayers);
        }
        if (serverIp_ != null) {
          output.WriteRawTag(34);
          output.WriteMessage(ServerIp);
        }
        if (HasSteamId) {
          output.WriteRawTag(49);
          output.WriteFixed64(SteamId);
        }
        if (HasRevision) {
          output.WriteRawTag(56);
          output.WriteUInt32(Revision);
        }
        if (HasPlayers) {
          output.WriteRawTag(64);
          output.WriteUInt32(Players);
        }
        if (HasGamePort) {
          output.WriteRawTag(72);
          output.WriteUInt32(GamePort);
        }
        if (HasSdrPopid) {
          output.WriteRawTag(85);
          output.WriteFixed32(SdrPopid);
        }
        if (HasFlags) {
          output.WriteRawTag(88);
          output.WriteUInt32(Flags);
        }
        if (HasAppId) {
          output.WriteRawTag(96);
          output.WriteUInt32(AppId);
        }
        if (HasMaxPlayers) {
          output.WriteRawTag(104);
          output.WriteUInt32(MaxPlayers);
        }
        if (HasBots) {
          output.WriteRawTag(112);
          output.WriteUInt32(Bots);
        }
        if (HasSpectatorPort) {
          output.WriteRawTag(120);
          output.WriteUInt32(SpectatorPort);
        }
        if (HasGamedirStr) {
          output.WriteRawTag(130, 1);
          output.WriteString(GamedirStr);
        }
        if (HasGamedirStrindex) {
          output.WriteRawTag(136, 1);
          output.WriteUInt32(GamedirStrindex);
        }
        if (HasMapStr) {
          output.WriteRawTag(146, 1);
          output.WriteString(MapStr);
        }
        if (HasMapStrindex) {
          output.WriteRawTag(152, 1);
          output.WriteUInt32(MapStrindex);
        }
        if (HasNameStr) {
          output.WriteRawTag(162, 1);
          output.WriteString(NameStr);
        }
        if (HasNameStrindex) {
          output.WriteRawTag(168, 1);
          output.WriteUInt32(NameStrindex);
        }
        if (HasGameDescriptionStr) {
          output.WriteRawTag(178, 1);
          output.WriteString(GameDescriptionStr);
        }
        if (HasGameDescriptionStrindex) {
          output.WriteRawTag(184, 1);
          output.WriteUInt32(GameDescriptionStrindex);
        }
        if (HasVersionStr) {
          output.WriteRawTag(194, 1);
          output.WriteString(VersionStr);
        }
        if (HasVersionStrindex) {
          output.WriteRawTag(200, 1);
          output.WriteUInt32(VersionStrindex);
        }
        if (HasGametypeStr) {
          output.WriteRawTag(210, 1);
          output.WriteString(GametypeStr);
        }
        if (HasGametypeStrindex) {
          output.WriteRawTag(216, 1);
          output.WriteUInt32(GametypeStrindex);
        }
        if (HasSpectatorNameStr) {
          output.WriteRawTag(242, 1);
          output.WriteString(SpectatorNameStr);
        }
        if (HasSpectatorNameStrindex) {
          output.WriteRawTag(248, 1);
          output.WriteUInt32(SpectatorNameStrindex);
        }
        if (HasSdrPingLocation) {
          output.WriteRawTag(130, 2);
          output.WriteString(SdrPingLocation);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDeprecatedServerIp) {
          output.WriteRawTag(8);
          output.WriteUInt32(DeprecatedServerIp);
        }
        if (HasQueryPort) {
          output.WriteRawTag(16);
          output.WriteUInt32(QueryPort);
        }
        if (HasAuthPlayers) {
          output.WriteRawTag(24);
          output.WriteUInt32(AuthPlayers);
        }
        if (serverIp_ != null) {
          output.WriteRawTag(34);
          output.WriteMessage(ServerIp);
        }
        if (HasSteamId) {
          output.WriteRawTag(49);
          output.WriteFixed64(SteamId);
        }
        if (HasRevision) {
          output.WriteRawTag(56);
          output.WriteUInt32(Revision);
        }
        if (HasPlayers) {
          output.WriteRawTag(64);
          output.WriteUInt32(Players);
        }
        if (HasGamePort) {
          output.WriteRawTag(72);
          output.WriteUInt32(GamePort);
        }
        if (HasSdrPopid) {
          output.WriteRawTag(85);
          output.WriteFixed32(SdrPopid);
        }
        if (HasFlags) {
          output.WriteRawTag(88);
          output.WriteUInt32(Flags);
        }
        if (HasAppId) {
          output.WriteRawTag(96);
          output.WriteUInt32(AppId);
        }
        if (HasMaxPlayers) {
          output.WriteRawTag(104);
          output.WriteUInt32(MaxPlayers);
        }
        if (HasBots) {
          output.WriteRawTag(112);
          output.WriteUInt32(Bots);
        }
        if (HasSpectatorPort) {
          output.WriteRawTag(120);
          output.WriteUInt32(SpectatorPort);
        }
        if (HasGamedirStr) {
          output.WriteRawTag(130, 1);
          output.WriteString(GamedirStr);
        }
        if (HasGamedirStrindex) {
          output.WriteRawTag(136, 1);
          output.WriteUInt32(GamedirStrindex);
        }
        if (HasMapStr) {
          output.WriteRawTag(146, 1);
          output.WriteString(MapStr);
        }
        if (HasMapStrindex) {
          output.WriteRawTag(152, 1);
          output.WriteUInt32(MapStrindex);
        }
        if (HasNameStr) {
          output.WriteRawTag(162, 1);
          output.WriteString(NameStr);
        }
        if (HasNameStrindex) {
          output.WriteRawTag(168, 1);
          output.WriteUInt32(NameStrindex);
        }
        if (HasGameDescriptionStr) {
          output.WriteRawTag(178, 1);
          output.WriteString(GameDescriptionStr);
        }
        if (HasGameDescriptionStrindex) {
          output.WriteRawTag(184, 1);
          output.WriteUInt32(GameDescriptionStrindex);
        }
        if (HasVersionStr) {
          output.WriteRawTag(194, 1);
          output.WriteString(VersionStr);
        }
        if (HasVersionStrindex) {
          output.WriteRawTag(200, 1);
          output.WriteUInt32(VersionStrindex);
        }
        if (HasGametypeStr) {
          output.WriteRawTag(210, 1);
          output.WriteString(GametypeStr);
        }
        if (HasGametypeStrindex) {
          output.WriteRawTag(216, 1);
          output.WriteUInt32(GametypeStrindex);
        }
        if (HasSpectatorNameStr) {
          output.WriteRawTag(242, 1);
          output.WriteString(SpectatorNameStr);
        }
        if (HasSpectatorNameStrindex) {
          output.WriteRawTag(248, 1);
          output.WriteUInt32(SpectatorNameStrindex);
        }
        if (HasSdrPingLocation) {
          output.WriteRawTag(130, 2);
          output.WriteString(SdrPingLocation);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDeprecatedServerIp) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedServerIp);
        }
        if (HasQueryPort) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueryPort);
        }
        if (HasAuthPlayers) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthPlayers);
        }
        if (serverIp_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerIp);
        }
        if (HasSteamId) {
          size += 1 + 8;
        }
        if (HasRevision) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
        }
        if (HasPlayers) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Players);
        }
        if (HasGamePort) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePort);
        }
        if (HasSdrPopid) {
          size += 1 + 4;
        }
        if (HasSdrPingLocation) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(SdrPingLocation);
        }
        if (HasFlags) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
        }
        if (HasAppId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
        }
        if (HasMaxPlayers) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
        }
        if (HasBots) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bots);
        }
        if (HasSpectatorPort) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorPort);
        }
        if (HasGamedirStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(GamedirStr);
        }
        if (HasGamedirStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GamedirStrindex);
        }
        if (HasMapStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(MapStr);
        }
        if (HasMapStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MapStrindex);
        }
        if (HasNameStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(NameStr);
        }
        if (HasNameStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NameStrindex);
        }
        if (HasGameDescriptionStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(GameDescriptionStr);
        }
        if (HasGameDescriptionStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GameDescriptionStrindex);
        }
        if (HasVersionStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionStr);
        }
        if (HasVersionStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VersionStrindex);
        }
        if (HasGametypeStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(GametypeStr);
        }
        if (HasGametypeStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GametypeStrindex);
        }
        if (HasSpectatorNameStr) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(SpectatorNameStr);
        }
        if (HasSpectatorNameStrindex) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorNameStrindex);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Server other) {
        if (other == null) {
          return;
        }
        if (other.HasDeprecatedServerIp) {
          DeprecatedServerIp = other.DeprecatedServerIp;
        }
        if (other.HasQueryPort) {
          QueryPort = other.QueryPort;
        }
        if (other.HasAuthPlayers) {
          AuthPlayers = other.AuthPlayers;
        }
        if (other.serverIp_ != null) {
          if (serverIp_ == null) {
            ServerIp = new global::CMsgIPAddress();
          }
          ServerIp.MergeFrom(other.ServerIp);
        }
        if (other.HasSteamId) {
          SteamId = other.SteamId;
        }
        if (other.HasRevision) {
          Revision = other.Revision;
        }
        if (other.HasPlayers) {
          Players = other.Players;
        }
        if (other.HasGamePort) {
          GamePort = other.GamePort;
        }
        if (other.HasSdrPopid) {
          SdrPopid = other.SdrPopid;
        }
        if (other.HasSdrPingLocation) {
          SdrPingLocation = other.SdrPingLocation;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasMaxPlayers) {
          MaxPlayers = other.MaxPlayers;
        }
        if (other.HasBots) {
          Bots = other.Bots;
        }
        if (other.HasSpectatorPort) {
          SpectatorPort = other.SpectatorPort;
        }
        if (other.HasGamedirStr) {
          GamedirStr = other.GamedirStr;
        }
        if (other.HasGamedirStrindex) {
          GamedirStrindex = other.GamedirStrindex;
        }
        if (other.HasMapStr) {
          MapStr = other.MapStr;
        }
        if (other.HasMapStrindex) {
          MapStrindex = other.MapStrindex;
        }
        if (other.HasNameStr) {
          NameStr = other.NameStr;
        }
        if (other.HasNameStrindex) {
          NameStrindex = other.NameStrindex;
        }
        if (other.HasGameDescriptionStr) {
          GameDescriptionStr = other.GameDescriptionStr;
        }
        if (other.HasGameDescriptionStrindex) {
          GameDescriptionStrindex = other.GameDescriptionStrindex;
        }
        if (other.HasVersionStr) {
          VersionStr = other.VersionStr;
        }
        if (other.HasVersionStrindex) {
          VersionStrindex = other.VersionStrindex;
        }
        if (other.HasGametypeStr) {
          GametypeStr = other.GametypeStr;
        }
        if (other.HasGametypeStrindex) {
          GametypeStrindex = other.GametypeStrindex;
        }
        if (other.HasSpectatorNameStr) {
          SpectatorNameStr = other.SpectatorNameStr;
        }
        if (other.HasSpectatorNameStrindex) {
          SpectatorNameStrindex = other.SpectatorNameStrindex;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              DeprecatedServerIp = input.ReadUInt32();
              break;
            }
            case 16: {
              QueryPort = input.ReadUInt32();
              break;
            }
            case 24: {
              AuthPlayers = input.ReadUInt32();
              break;
            }
            case 34: {
              if (serverIp_ == null) {
                ServerIp = new global::CMsgIPAddress();
              }
              input.ReadMessage(ServerIp);
              break;
            }
            case 49: {
              SteamId = input.ReadFixed64();
              break;
            }
            case 56: {
              Revision = input.ReadUInt32();
              break;
            }
            case 64: {
              Players = input.ReadUInt32();
              break;
            }
            case 72: {
              GamePort = input.ReadUInt32();
              break;
            }
            case 85: {
              SdrPopid = input.ReadFixed32();
              break;
            }
            case 88: {
              Flags = input.ReadUInt32();
              break;
            }
            case 96: {
              AppId = input.ReadUInt32();
              break;
            }
            case 104: {
              MaxPlayers = input.ReadUInt32();
              break;
            }
            case 112: {
              Bots = input.ReadUInt32();
              break;
            }
            case 120: {
              SpectatorPort = input.ReadUInt32();
              break;
            }
            case 130: {
              GamedirStr = input.ReadString();
              break;
            }
            case 136: {
              GamedirStrindex = input.ReadUInt32();
              break;
            }
            case 146: {
              MapStr = input.ReadString();
              break;
            }
            case 152: {
              MapStrindex = input.ReadUInt32();
              break;
            }
            case 162: {
              NameStr = input.ReadString();
              break;
            }
            case 168: {
              NameStrindex = input.ReadUInt32();
              break;
            }
            case 178: {
              GameDescriptionStr = input.ReadString();
              break;
            }
            case 184: {
              GameDescriptionStrindex = input.ReadUInt32();
              break;
            }
            case 194: {
              VersionStr = input.ReadString();
              break;
            }
            case 200: {
              VersionStrindex = input.ReadUInt32();
              break;
            }
            case 210: {
              GametypeStr = input.ReadString();
              break;
            }
            case 216: {
              GametypeStrindex = input.ReadUInt32();
              break;
            }
            case 242: {
              SpectatorNameStr = input.ReadString();
              break;
            }
            case 248: {
              SpectatorNameStrindex = input.ReadUInt32();
              break;
            }
            case 258: {
              SdrPingLocation = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              DeprecatedServerIp = input.ReadUInt32();
              break;
            }
            case 16: {
              QueryPort = input.ReadUInt32();
              break;
            }
            case 24: {
              AuthPlayers = input.ReadUInt32();
              break;
            }
            case 34: {
              if (serverIp_ == null) {
                ServerIp = new global::CMsgIPAddress();
              }
              input.ReadMessage(ServerIp);
              break;
            }
            case 49: {
              SteamId = input.ReadFixed64();
              break;
            }
            case 56: {
              Revision = input.ReadUInt32();
              break;
            }
            case 64: {
              Players = input.ReadUInt32();
              break;
            }
            case 72: {
              GamePort = input.ReadUInt32();
              break;
            }
            case 85: {
              SdrPopid = input.ReadFixed32();
              break;
            }
            case 88: {
              Flags = input.ReadUInt32();
              break;
            }
            case 96: {
              AppId = input.ReadUInt32();
              break;
            }
            case 104: {
              MaxPlayers = input.ReadUInt32();
              break;
            }
            case 112: {
              Bots = input.ReadUInt32();
              break;
            }
            case 120: {
              SpectatorPort = input.ReadUInt32();
              break;
            }
            case 130: {
              GamedirStr = input.ReadString();
              break;
            }
            case 136: {
              GamedirStrindex = input.ReadUInt32();
              break;
            }
            case 146: {
              MapStr = input.ReadString();
              break;
            }
            case 152: {
              MapStrindex = input.ReadUInt32();
              break;
            }
            case 162: {
              NameStr = input.ReadString();
              break;
            }
            case 168: {
              NameStrindex = input.ReadUInt32();
              break;
            }
            case 178: {
              GameDescriptionStr = input.ReadString();
              break;
            }
            case 184: {
              GameDescriptionStrindex = input.ReadUInt32();
              break;
            }
            case 194: {
              VersionStr = input.ReadString();
              break;
            }
            case 200: {
              VersionStrindex = input.ReadUInt32();
              break;
            }
            case 210: {
              GametypeStr = input.ReadString();
              break;
            }
            case 216: {
              GametypeStrindex = input.ReadUInt32();
              break;
            }
            case 242: {
              SpectatorNameStr = input.ReadString();
              break;
            }
            case 248: {
              SpectatorNameStrindex = input.ReadUInt32();
              break;
            }
            case 258: {
              SdrPingLocation = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgGameServerOutOfDate : pb::IMessage<CMsgGameServerOutOfDate>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerOutOfDate> _parser = new pb::MessageParser<CMsgGameServerOutOfDate>(() => new CMsgGameServerOutOfDate());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerOutOfDate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerOutOfDate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerOutOfDate(CMsgGameServerOutOfDate other) : this() {
    _hasBits0 = other._hasBits0;
    steamIdGs_ = other.steamIdGs_;
    reject_ = other.reject_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerOutOfDate Clone() {
    return new CMsgGameServerOutOfDate(this);
  }

  /// <summary>Field number for the "steam_id_gs" field.</summary>
  public const int SteamIdGsFieldNumber = 1;
  private readonly static ulong SteamIdGsDefaultValue = 0UL;

  private ulong steamIdGs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamIdGs {
    get { if ((_hasBits0 & 1) != 0) { return steamIdGs_; } else { return SteamIdGsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamIdGs_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id_gs" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamIdGs {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id_gs" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamIdGs() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "reject" field.</summary>
  public const int RejectFieldNumber = 2;
  private readonly static bool RejectDefaultValue = false;

  private bool reject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Reject {
    get { if ((_hasBits0 & 2) != 0) { return reject_; } else { return RejectDefaultValue; } }
    set {
      _hasBits0 |= 2;
      reject_ = value;
    }
  }
  /// <summary>Gets whether the "reject" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReject {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "reject" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReject() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 3;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerOutOfDate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerOutOfDate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamIdGs != other.SteamIdGs) return false;
    if (Reject != other.Reject) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamIdGs) hash ^= SteamIdGs.GetHashCode();
    if (HasReject) hash ^= Reject.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamIdGs) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdGs);
    }
    if (HasReject) {
      output.WriteRawTag(16);
      output.WriteBool(Reject);
    }
    if (HasMessage) {
      output.WriteRawTag(26);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamIdGs) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdGs);
    }
    if (HasReject) {
      output.WriteRawTag(16);
      output.WriteBool(Reject);
    }
    if (HasMessage) {
      output.WriteRawTag(26);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamIdGs) {
      size += 1 + 8;
    }
    if (HasReject) {
      size += 1 + 1;
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerOutOfDate other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamIdGs) {
      SteamIdGs = other.SteamIdGs;
    }
    if (other.HasReject) {
      Reject = other.Reject;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamIdGs = input.ReadFixed64();
          break;
        }
        case 16: {
          Reject = input.ReadBool();
          break;
        }
        case 26: {
          Message = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamIdGs = input.ReadFixed64();
          break;
        }
        case 16: {
          Reject = input.ReadBool();
          break;
        }
        case 26: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSAssociateWithClan : pb::IMessage<CMsgGSAssociateWithClan>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSAssociateWithClan> _parser = new pb::MessageParser<CMsgGSAssociateWithClan>(() => new CMsgGSAssociateWithClan());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSAssociateWithClan> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClan() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClan(CMsgGSAssociateWithClan other) : this() {
    _hasBits0 = other._hasBits0;
    steamIdClan_ = other.steamIdClan_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClan Clone() {
    return new CMsgGSAssociateWithClan(this);
  }

  /// <summary>Field number for the "steam_id_clan" field.</summary>
  public const int SteamIdClanFieldNumber = 1;
  private readonly static ulong SteamIdClanDefaultValue = 0UL;

  private ulong steamIdClan_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamIdClan {
    get { if ((_hasBits0 & 1) != 0) { return steamIdClan_; } else { return SteamIdClanDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamIdClan_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id_clan" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamIdClan {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id_clan" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamIdClan() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSAssociateWithClan);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSAssociateWithClan other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamIdClan != other.SteamIdClan) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamIdClan) hash ^= SteamIdClan.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamIdClan) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdClan);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamIdClan) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdClan);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamIdClan) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSAssociateWithClan other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamIdClan) {
      SteamIdClan = other.SteamIdClan;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamIdClan = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamIdClan = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSAssociateWithClanResponse : pb::IMessage<CMsgGSAssociateWithClanResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSAssociateWithClanResponse> _parser = new pb::MessageParser<CMsgGSAssociateWithClanResponse>(() => new CMsgGSAssociateWithClanResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSAssociateWithClanResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClanResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClanResponse(CMsgGSAssociateWithClanResponse other) : this() {
    _hasBits0 = other._hasBits0;
    steamIdClan_ = other.steamIdClan_;
    eresult_ = other.eresult_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSAssociateWithClanResponse Clone() {
    return new CMsgGSAssociateWithClanResponse(this);
  }

  /// <summary>Field number for the "steam_id_clan" field.</summary>
  public const int SteamIdClanFieldNumber = 1;
  private readonly static ulong SteamIdClanDefaultValue = 0UL;

  private ulong steamIdClan_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamIdClan {
    get { if ((_hasBits0 & 1) != 0) { return steamIdClan_; } else { return SteamIdClanDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamIdClan_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id_clan" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamIdClan {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id_clan" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamIdClan() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 2;
  private readonly static uint EresultDefaultValue = 2;

  private uint eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Eresult {
    get { if ((_hasBits0 & 2) != 0) { return eresult_; } else { return EresultDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEresult {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEresult() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSAssociateWithClanResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSAssociateWithClanResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamIdClan != other.SteamIdClan) return false;
    if (Eresult != other.Eresult) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamIdClan) hash ^= SteamIdClan.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamIdClan) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdClan);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamIdClan) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdClan);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamIdClan) {
      size += 1 + 8;
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eresult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSAssociateWithClanResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamIdClan) {
      SteamIdClan = other.SteamIdClan;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamIdClan = input.ReadFixed64();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamIdClan = input.ReadFixed64();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSComputeNewPlayerCompatibility : pb::IMessage<CMsgGSComputeNewPlayerCompatibility>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSComputeNewPlayerCompatibility> _parser = new pb::MessageParser<CMsgGSComputeNewPlayerCompatibility>(() => new CMsgGSComputeNewPlayerCompatibility());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSComputeNewPlayerCompatibility> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibility() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibility(CMsgGSComputeNewPlayerCompatibility other) : this() {
    _hasBits0 = other._hasBits0;
    steamIdCandidate_ = other.steamIdCandidate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibility Clone() {
    return new CMsgGSComputeNewPlayerCompatibility(this);
  }

  /// <summary>Field number for the "steam_id_candidate" field.</summary>
  public const int SteamIdCandidateFieldNumber = 1;
  private readonly static ulong SteamIdCandidateDefaultValue = 0UL;

  private ulong steamIdCandidate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamIdCandidate {
    get { if ((_hasBits0 & 1) != 0) { return steamIdCandidate_; } else { return SteamIdCandidateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamIdCandidate_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id_candidate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamIdCandidate {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id_candidate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamIdCandidate() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSComputeNewPlayerCompatibility);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSComputeNewPlayerCompatibility other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamIdCandidate != other.SteamIdCandidate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamIdCandidate) hash ^= SteamIdCandidate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamIdCandidate) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdCandidate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamIdCandidate) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdCandidate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamIdCandidate) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSComputeNewPlayerCompatibility other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamIdCandidate) {
      SteamIdCandidate = other.SteamIdCandidate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamIdCandidate = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamIdCandidate = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGSComputeNewPlayerCompatibilityResponse : pb::IMessage<CMsgGSComputeNewPlayerCompatibilityResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGSComputeNewPlayerCompatibilityResponse> _parser = new pb::MessageParser<CMsgGSComputeNewPlayerCompatibilityResponse>(() => new CMsgGSComputeNewPlayerCompatibilityResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGSComputeNewPlayerCompatibilityResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientserverGameserversReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibilityResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibilityResponse(CMsgGSComputeNewPlayerCompatibilityResponse other) : this() {
    _hasBits0 = other._hasBits0;
    steamIdCandidate_ = other.steamIdCandidate_;
    eresult_ = other.eresult_;
    isClanMember_ = other.isClanMember_;
    ctDontLikeYou_ = other.ctDontLikeYou_;
    ctYouDontLike_ = other.ctYouDontLike_;
    ctClanmembersDontLikeYou_ = other.ctClanmembersDontLikeYou_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGSComputeNewPlayerCompatibilityResponse Clone() {
    return new CMsgGSComputeNewPlayerCompatibilityResponse(this);
  }

  /// <summary>Field number for the "steam_id_candidate" field.</summary>
  public const int SteamIdCandidateFieldNumber = 1;
  private readonly static ulong SteamIdCandidateDefaultValue = 0UL;

  private ulong steamIdCandidate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SteamIdCandidate {
    get { if ((_hasBits0 & 1) != 0) { return steamIdCandidate_; } else { return SteamIdCandidateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      steamIdCandidate_ = value;
    }
  }
  /// <summary>Gets whether the "steam_id_candidate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamIdCandidate {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "steam_id_candidate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamIdCandidate() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 2;
  private readonly static uint EresultDefaultValue = 2;

  private uint eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Eresult {
    get { if ((_hasBits0 & 2) != 0) { return eresult_; } else { return EresultDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEresult {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEresult() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_clan_member" field.</summary>
  public const int IsClanMemberFieldNumber = 3;
  private readonly static bool IsClanMemberDefaultValue = false;

  private bool isClanMember_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsClanMember {
    get { if ((_hasBits0 & 4) != 0) { return isClanMember_; } else { return IsClanMemberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isClanMember_ = value;
    }
  }
  /// <summary>Gets whether the "is_clan_member" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsClanMember {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_clan_member" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsClanMember() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ct_dont_like_you" field.</summary>
  public const int CtDontLikeYouFieldNumber = 4;
  private readonly static int CtDontLikeYouDefaultValue = 0;

  private int ctDontLikeYou_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CtDontLikeYou {
    get { if ((_hasBits0 & 8) != 0) { return ctDontLikeYou_; } else { return CtDontLikeYouDefaultValue; } }
    set {
      _hasBits0 |= 8;
      ctDontLikeYou_ = value;
    }
  }
  /// <summary>Gets whether the "ct_dont_like_you" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtDontLikeYou {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ct_dont_like_you" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtDontLikeYou() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ct_you_dont_like" field.</summary>
  public const int CtYouDontLikeFieldNumber = 5;
  private readonly static int CtYouDontLikeDefaultValue = 0;

  private int ctYouDontLike_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CtYouDontLike {
    get { if ((_hasBits0 & 16) != 0) { return ctYouDontLike_; } else { return CtYouDontLikeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ctYouDontLike_ = value;
    }
  }
  /// <summary>Gets whether the "ct_you_dont_like" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtYouDontLike {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ct_you_dont_like" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtYouDontLike() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ct_clanmembers_dont_like_you" field.</summary>
  public const int CtClanmembersDontLikeYouFieldNumber = 6;
  private readonly static int CtClanmembersDontLikeYouDefaultValue = 0;

  private int ctClanmembersDontLikeYou_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CtClanmembersDontLikeYou {
    get { if ((_hasBits0 & 32) != 0) { return ctClanmembersDontLikeYou_; } else { return CtClanmembersDontLikeYouDefaultValue; } }
    set {
      _hasBits0 |= 32;
      ctClanmembersDontLikeYou_ = value;
    }
  }
  /// <summary>Gets whether the "ct_clanmembers_dont_like_you" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtClanmembersDontLikeYou {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ct_clanmembers_dont_like_you" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtClanmembersDontLikeYou() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGSComputeNewPlayerCompatibilityResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGSComputeNewPlayerCompatibilityResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SteamIdCandidate != other.SteamIdCandidate) return false;
    if (Eresult != other.Eresult) return false;
    if (IsClanMember != other.IsClanMember) return false;
    if (CtDontLikeYou != other.CtDontLikeYou) return false;
    if (CtYouDontLike != other.CtYouDontLike) return false;
    if (CtClanmembersDontLikeYou != other.CtClanmembersDontLikeYou) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSteamIdCandidate) hash ^= SteamIdCandidate.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasIsClanMember) hash ^= IsClanMember.GetHashCode();
    if (HasCtDontLikeYou) hash ^= CtDontLikeYou.GetHashCode();
    if (HasCtYouDontLike) hash ^= CtYouDontLike.GetHashCode();
    if (HasCtClanmembersDontLikeYou) hash ^= CtClanmembersDontLikeYou.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSteamIdCandidate) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdCandidate);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasIsClanMember) {
      output.WriteRawTag(24);
      output.WriteBool(IsClanMember);
    }
    if (HasCtDontLikeYou) {
      output.WriteRawTag(32);
      output.WriteInt32(CtDontLikeYou);
    }
    if (HasCtYouDontLike) {
      output.WriteRawTag(40);
      output.WriteInt32(CtYouDontLike);
    }
    if (HasCtClanmembersDontLikeYou) {
      output.WriteRawTag(48);
      output.WriteInt32(CtClanmembersDontLikeYou);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSteamIdCandidate) {
      output.WriteRawTag(9);
      output.WriteFixed64(SteamIdCandidate);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasIsClanMember) {
      output.WriteRawTag(24);
      output.WriteBool(IsClanMember);
    }
    if (HasCtDontLikeYou) {
      output.WriteRawTag(32);
      output.WriteInt32(CtDontLikeYou);
    }
    if (HasCtYouDontLike) {
      output.WriteRawTag(40);
      output.WriteInt32(CtYouDontLike);
    }
    if (HasCtClanmembersDontLikeYou) {
      output.WriteRawTag(48);
      output.WriteInt32(CtClanmembersDontLikeYou);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSteamIdCandidate) {
      size += 1 + 8;
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eresult);
    }
    if (HasIsClanMember) {
      size += 1 + 1;
    }
    if (HasCtDontLikeYou) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CtDontLikeYou);
    }
    if (HasCtYouDontLike) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CtYouDontLike);
    }
    if (HasCtClanmembersDontLikeYou) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CtClanmembersDontLikeYou);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGSComputeNewPlayerCompatibilityResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasSteamIdCandidate) {
      SteamIdCandidate = other.SteamIdCandidate;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasIsClanMember) {
      IsClanMember = other.IsClanMember;
    }
    if (other.HasCtDontLikeYou) {
      CtDontLikeYou = other.CtDontLikeYou;
    }
    if (other.HasCtYouDontLike) {
      CtYouDontLike = other.CtYouDontLike;
    }
    if (other.HasCtClanmembersDontLikeYou) {
      CtClanmembersDontLikeYou = other.CtClanmembersDontLikeYou;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          SteamIdCandidate = input.ReadFixed64();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 24: {
          IsClanMember = input.ReadBool();
          break;
        }
        case 32: {
          CtDontLikeYou = input.ReadInt32();
          break;
        }
        case 40: {
          CtYouDontLike = input.ReadInt32();
          break;
        }
        case 48: {
          CtClanmembersDontLikeYou = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          SteamIdCandidate = input.ReadFixed64();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 24: {
          IsClanMember = input.ReadBool();
          break;
        }
        case 32: {
          CtDontLikeYou = input.ReadInt32();
          break;
        }
        case 40: {
          CtYouDontLike = input.ReadInt32();
          break;
        }
        case 48: {
          CtClanmembersDontLikeYou = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
