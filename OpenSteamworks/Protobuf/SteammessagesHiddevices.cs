// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_hiddevices.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_hiddevices.proto</summary>
public static partial class SteammessagesHiddevicesReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_hiddevices.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesHiddevicesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5zdGVhbW1lc3NhZ2VzX2hpZGRldmljZXMucHJvdG8iugQKDkNISUREZXZp",
          "Y2VJbmZvEj0KCGxvY2F0aW9uGAEgASgOMhMuRUhJRERldmljZUxvY2F0aW9u",
          "OhZrX0VEZXZpY2VMb2NhdGlvbkxvY2FsEgwKBHBhdGgYAiABKAkSEQoJdmVu",
          "ZG9yX2lkGAMgASgNEhIKCnByb2R1Y3RfaWQYBCABKA0SFQoNc2VyaWFsX251",
          "bWJlchgFIAEoCRIWCg5yZWxlYXNlX251bWJlchgGIAEoDRIbChNtYW51ZmFj",
          "dHVyZXJfc3RyaW5nGAcgASgJEhYKDnByb2R1Y3Rfc3RyaW5nGAggASgJEhIK",
          "CnVzYWdlX3BhZ2UYCSABKA0SDQoFdXNhZ2UYCiABKA0SHAoQaW50ZXJmYWNl",
          "X251bWJlchgLIAEoBToCLTESEgoGb3N0eXBlGAwgASgFOgItMRIaChJpc19n",
          "ZW5lcmljX2dhbWVwYWQYDSABKAgSGwoTaXNfZ2VuZXJpY19qb3lzdGljaxgO",
          "IAEoCBIRCgljYXBzX2JpdHMYDyABKA0SEgoKc2Vzc2lvbl9pZBgQIAEoDRIj",
          "ChhlQ29udHJvbGxlclR5cGVfT0JTT0xFVEUYESABKA06ATASKAoZaXNfeGlu",
          "cHV0X2RldmljZV9PQlNPTEVURRgSIAEoCDoFZmFsc2USKgoic2Vzc2lvbl9y",
          "ZW1vdGVfcGxheV90b2dldGhlcl9hcHBpZBgTIAEoDRIgChFpc19zdGVhbXZy",
          "X2RldmljZRgUIAEoCDoFZmFsc2UidwoVQ0hJRERldmljZUlucHV0UmVwb3J0",
          "EhMKC2Z1bGxfcmVwb3J0GAEgASgMEhQKDGRlbHRhX3JlcG9ydBgCIAEoDBIZ",
          "ChFkZWx0YV9yZXBvcnRfc2l6ZRgDIAEoDRIYChBkZWx0YV9yZXBvcnRfY3Jj",
          "GAQgASgNIuIMChNDSElETWVzc2FnZVRvUmVtb3RlEhIKCnJlcXVlc3RfaWQY",
          "ASABKA0SNgoLZGV2aWNlX29wZW4YAiABKAsyHy5DSElETWVzc2FnZVRvUmVt",
          "b3RlLkRldmljZU9wZW5IABI4CgxkZXZpY2VfY2xvc2UYAyABKAsyIC5DSElE",
          "TWVzc2FnZVRvUmVtb3RlLkRldmljZUNsb3NlSAASOAoMZGV2aWNlX3dyaXRl",
          "GAQgASgLMiAuQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VXcml0ZUgAEjYK",
          "C2RldmljZV9yZWFkGAUgASgLMh8uQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZp",
          "Y2VSZWFkSAASUgoaZGV2aWNlX3NlbmRfZmVhdHVyZV9yZXBvcnQYBiABKAsy",
          "LC5DSElETWVzc2FnZVRvUmVtb3RlLkRldmljZVNlbmRGZWF0dXJlUmVwb3J0",
          "SAASUAoZZGV2aWNlX2dldF9mZWF0dXJlX3JlcG9ydBgHIAEoCzIrLkNISURN",
          "ZXNzYWdlVG9SZW1vdGUuRGV2aWNlR2V0RmVhdHVyZVJlcG9ydEgAEk4KGGRl",
          "dmljZV9nZXRfdmVuZG9yX3N0cmluZxgIIAEoCzIqLkNISURNZXNzYWdlVG9S",
          "ZW1vdGUuRGV2aWNlR2V0VmVuZG9yU3RyaW5nSAASUAoZZGV2aWNlX2dldF9w",
          "cm9kdWN0X3N0cmluZxgJIAEoCzIrLkNISURNZXNzYWdlVG9SZW1vdGUuRGV2",
          "aWNlR2V0UHJvZHVjdFN0cmluZ0gAElsKH2RldmljZV9nZXRfc2VyaWFsX251",
          "bWJlcl9zdHJpbmcYCiABKAsyMC5DSElETWVzc2FnZVRvUmVtb3RlLkRldmlj",
          "ZUdldFNlcmlhbE51bWJlclN0cmluZ0gAElIKGmRldmljZV9zdGFydF9pbnB1",
          "dF9yZXBvcnRzGAsgASgLMiwuQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VT",
          "dGFydElucHV0UmVwb3J0c0gAElIKGmRldmljZV9yZXF1ZXN0X2Z1bGxfcmVw",
          "b3J0GAwgASgLMiwuQ0hJRE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VSZXF1ZXN0",
          "RnVsbFJlcG9ydEgAEkIKEWRldmljZV9kaXNjb25uZWN0GA0gASgLMiUuQ0hJ",
          "RE1lc3NhZ2VUb1JlbW90ZS5EZXZpY2VEaXNjb25uZWN0SAAaKwoKRGV2aWNl",
          "T3BlbhIdCgRpbmZvGAEgASgLMg8uQ0hJRERldmljZUluZm8aHQoLRGV2aWNl",
          "Q2xvc2USDgoGZGV2aWNlGAEgASgNGisKC0RldmljZVdyaXRlEg4KBmRldmlj",
          "ZRgBIAEoDRIMCgRkYXRhGAIgASgMGkAKCkRldmljZVJlYWQSDgoGZGV2aWNl",
          "GAEgASgNEg4KBmxlbmd0aBgCIAEoDRISCgp0aW1lb3V0X21zGAMgASgFGjcK",
          "F0RldmljZVNlbmRGZWF0dXJlUmVwb3J0Eg4KBmRldmljZRgBIAEoDRIMCgRk",
          "YXRhGAIgASgMGk8KFkRldmljZUdldEZlYXR1cmVSZXBvcnQSDgoGZGV2aWNl",
          "GAEgASgNEhUKDXJlcG9ydF9udW1iZXIYAiABKAwSDgoGbGVuZ3RoGAMgASgN",
          "GicKFURldmljZUdldFZlbmRvclN0cmluZxIOCgZkZXZpY2UYASABKA0aKAoW",
          "RGV2aWNlR2V0UHJvZHVjdFN0cmluZxIOCgZkZXZpY2UYASABKA0aLQobRGV2",
          "aWNlR2V0U2VyaWFsTnVtYmVyU3RyaW5nEg4KBmRldmljZRgBIAEoDRo5ChdE",
          "ZXZpY2VTdGFydElucHV0UmVwb3J0cxIOCgZkZXZpY2UYASABKA0SDgoGbGVu",
          "Z3RoGAIgASgNGikKF0RldmljZVJlcXVlc3RGdWxsUmVwb3J0Eg4KBmRldmlj",
          "ZRgBIAEoDRqJAQoQRGV2aWNlRGlzY29ubmVjdBIOCgZkZXZpY2UYASABKA0S",
          "VwoQZGlzY29ubmVjdE1ldGhvZBgCIAEoDjIbLkVISUREZXZpY2VEaXNjb25u",
          "ZWN0TWV0aG9kOiBrX0VEZXZpY2VEaXNjb25uZWN0TWV0aG9kVW5rbm93bhIM",
          "CgRkYXRhGAMgASgMQgkKB2NvbW1hbmQiywUKFUNISURNZXNzYWdlRnJvbVJl",
          "bW90ZRJFChJ1cGRhdGVfZGV2aWNlX2xpc3QYASABKAsyJy5DSElETWVzc2Fn",
          "ZUZyb21SZW1vdGUuVXBkYXRlRGV2aWNlTGlzdEgAEjoKCHJlc3BvbnNlGAIg",
          "ASgLMiYuQ0hJRE1lc3NhZ2VGcm9tUmVtb3RlLlJlcXVlc3RSZXNwb25zZUgA",
          "EjwKB3JlcG9ydHMYAyABKAsyKS5DSElETWVzc2FnZUZyb21SZW1vdGUuRGV2",
          "aWNlSW5wdXRSZXBvcnRzSAASOgoMY2xvc2VfZGV2aWNlGAQgASgLMiIuQ0hJ",
          "RE1lc3NhZ2VGcm9tUmVtb3RlLkNsb3NlRGV2aWNlSAASQwoRY2xvc2VfYWxs",
          "X2RldmljZXMYBSABKAsyJi5DSElETWVzc2FnZUZyb21SZW1vdGUuQ2xvc2VB",
          "bGxEZXZpY2VzSAAaNAoQVXBkYXRlRGV2aWNlTGlzdBIgCgdkZXZpY2VzGAEg",
          "AygLMg8uQ0hJRERldmljZUluZm8aQwoPUmVxdWVzdFJlc3BvbnNlEhIKCnJl",
          "cXVlc3RfaWQYASABKA0SDgoGcmVzdWx0GAIgASgFEgwKBGRhdGEYAyABKAwa",
          "twEKEkRldmljZUlucHV0UmVwb3J0cxJTCg5kZXZpY2VfcmVwb3J0cxgBIAMo",
          "CzI7LkNISURNZXNzYWdlRnJvbVJlbW90ZS5EZXZpY2VJbnB1dFJlcG9ydHMu",
          "RGV2aWNlSW5wdXRSZXBvcnQaTAoRRGV2aWNlSW5wdXRSZXBvcnQSDgoGZGV2",
          "aWNlGAEgASgNEicKB3JlcG9ydHMYAiADKAsyFi5DSElERGV2aWNlSW5wdXRS",
          "ZXBvcnQaHQoLQ2xvc2VEZXZpY2USDgoGZGV2aWNlGAEgASgNGhEKD0Nsb3Nl",
          "QWxsRGV2aWNlc0IJCgdjb21tYW5kKmcKEkVISUREZXZpY2VMb2NhdGlvbhIa",
          "ChZrX0VEZXZpY2VMb2NhdGlvbkxvY2FsEAASGwoXa19FRGV2aWNlTG9jYXRp",
          "b25SZW1vdGUQAhIYChRrX0VEZXZpY2VMb2NhdGlvbkFueRADKsEBChpFSElE",
          "RGV2aWNlRGlzY29ubmVjdE1ldGhvZBIkCiBrX0VEZXZpY2VEaXNjb25uZWN0",
          "TWV0aG9kVW5rbm93bhAAEiYKImtfRURldmljZURpc2Nvbm5lY3RNZXRob2RC",
          "bHVldG9vdGgQARIqCiZrX0VEZXZpY2VEaXNjb25uZWN0TWV0aG9kRmVhdHVy",
          "ZVJlcG9ydBACEikKJWtfRURldmljZURpc2Nvbm5lY3RNZXRob2RPdXRwdXRS",
          "ZXBvcnQQA0IFSAGAAQA="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EHIDDeviceLocation), typeof(global::EHIDDeviceDisconnectMethod), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDDeviceInfo), global::CHIDDeviceInfo.Parser, new[]{ "Location", "Path", "VendorId", "ProductId", "SerialNumber", "ReleaseNumber", "ManufacturerString", "ProductString", "UsagePage", "Usage", "InterfaceNumber", "Ostype", "IsGenericGamepad", "IsGenericJoystick", "CapsBits", "SessionId", "EControllerTypeOBSOLETE", "IsXinputDeviceOBSOLETE", "SessionRemotePlayTogetherAppid", "IsSteamvrDevice" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDDeviceInputReport), global::CHIDDeviceInputReport.Parser, new[]{ "FullReport", "DeltaReport", "DeltaReportSize", "DeltaReportCrc" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote), global::CHIDMessageToRemote.Parser, new[]{ "RequestId", "DeviceOpen", "DeviceClose", "DeviceWrite", "DeviceRead", "DeviceSendFeatureReport", "DeviceGetFeatureReport", "DeviceGetVendorString", "DeviceGetProductString", "DeviceGetSerialNumberString", "DeviceStartInputReports", "DeviceRequestFullReport", "DeviceDisconnect" }, new[]{ "Command" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceOpen), global::CHIDMessageToRemote.Types.DeviceOpen.Parser, new[]{ "Info" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceClose), global::CHIDMessageToRemote.Types.DeviceClose.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceWrite), global::CHIDMessageToRemote.Types.DeviceWrite.Parser, new[]{ "Device", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceRead), global::CHIDMessageToRemote.Types.DeviceRead.Parser, new[]{ "Device", "Length", "TimeoutMs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceSendFeatureReport), global::CHIDMessageToRemote.Types.DeviceSendFeatureReport.Parser, new[]{ "Device", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceGetFeatureReport), global::CHIDMessageToRemote.Types.DeviceGetFeatureReport.Parser, new[]{ "Device", "ReportNumber", "Length" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceGetVendorString), global::CHIDMessageToRemote.Types.DeviceGetVendorString.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceGetProductString), global::CHIDMessageToRemote.Types.DeviceGetProductString.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString), global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceStartInputReports), global::CHIDMessageToRemote.Types.DeviceStartInputReports.Parser, new[]{ "Device", "Length" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceRequestFullReport), global::CHIDMessageToRemote.Types.DeviceRequestFullReport.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageToRemote.Types.DeviceDisconnect), global::CHIDMessageToRemote.Types.DeviceDisconnect.Parser, new[]{ "Device", "DisconnectMethod", "Data" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote), global::CHIDMessageFromRemote.Parser, new[]{ "UpdateDeviceList", "Response", "Reports", "CloseDevice", "CloseAllDevices" }, new[]{ "Command" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.UpdateDeviceList), global::CHIDMessageFromRemote.Types.UpdateDeviceList.Parser, new[]{ "Devices" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.RequestResponse), global::CHIDMessageFromRemote.Types.RequestResponse.Parser, new[]{ "RequestId", "Result", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.DeviceInputReports), global::CHIDMessageFromRemote.Types.DeviceInputReports.Parser, new[]{ "DeviceReports" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport), global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport.Parser, new[]{ "Device", "Reports" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.CloseDevice), global::CHIDMessageFromRemote.Types.CloseDevice.Parser, new[]{ "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHIDMessageFromRemote.Types.CloseAllDevices), global::CHIDMessageFromRemote.Types.CloseAllDevices.Parser, null, null, null, null, null)})
        }));
  }
  #endregion

}
#region Enums
public enum EHIDDeviceLocation {
  [pbr::OriginalName("k_EDeviceLocationLocal")] KEdeviceLocationLocal = 0,
  [pbr::OriginalName("k_EDeviceLocationRemote")] KEdeviceLocationRemote = 2,
  [pbr::OriginalName("k_EDeviceLocationAny")] KEdeviceLocationAny = 3,
}

public enum EHIDDeviceDisconnectMethod {
  [pbr::OriginalName("k_EDeviceDisconnectMethodUnknown")] KEdeviceDisconnectMethodUnknown = 0,
  [pbr::OriginalName("k_EDeviceDisconnectMethodBluetooth")] KEdeviceDisconnectMethodBluetooth = 1,
  [pbr::OriginalName("k_EDeviceDisconnectMethodFeatureReport")] KEdeviceDisconnectMethodFeatureReport = 2,
  [pbr::OriginalName("k_EDeviceDisconnectMethodOutputReport")] KEdeviceDisconnectMethodOutputReport = 3,
}

#endregion

#region Messages
public sealed partial class CHIDDeviceInfo : pb::IMessage<CHIDDeviceInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CHIDDeviceInfo> _parser = new pb::MessageParser<CHIDDeviceInfo>(() => new CHIDDeviceInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CHIDDeviceInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesHiddevicesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInfo(CHIDDeviceInfo other) : this() {
    _hasBits0 = other._hasBits0;
    location_ = other.location_;
    path_ = other.path_;
    vendorId_ = other.vendorId_;
    productId_ = other.productId_;
    serialNumber_ = other.serialNumber_;
    releaseNumber_ = other.releaseNumber_;
    manufacturerString_ = other.manufacturerString_;
    productString_ = other.productString_;
    usagePage_ = other.usagePage_;
    usage_ = other.usage_;
    interfaceNumber_ = other.interfaceNumber_;
    ostype_ = other.ostype_;
    isGenericGamepad_ = other.isGenericGamepad_;
    isGenericJoystick_ = other.isGenericJoystick_;
    capsBits_ = other.capsBits_;
    sessionId_ = other.sessionId_;
    eControllerTypeOBSOLETE_ = other.eControllerTypeOBSOLETE_;
    isXinputDeviceOBSOLETE_ = other.isXinputDeviceOBSOLETE_;
    sessionRemotePlayTogetherAppid_ = other.sessionRemotePlayTogetherAppid_;
    isSteamvrDevice_ = other.isSteamvrDevice_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInfo Clone() {
    return new CHIDDeviceInfo(this);
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 1;
  private readonly static global::EHIDDeviceLocation LocationDefaultValue = global::EHIDDeviceLocation.KEdeviceLocationLocal;

  private global::EHIDDeviceLocation location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EHIDDeviceLocation Location {
    get { if ((_hasBits0 & 1) != 0) { return location_; } else { return LocationDefaultValue; } }
    set {
      _hasBits0 |= 1;
      location_ = value;
    }
  }
  /// <summary>Gets whether the "location" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLocation {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "location" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLocation() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 2;
  private readonly static string PathDefaultValue = "";

  private string path_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Path {
    get { return path_ ?? PathDefaultValue; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "path" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPath {
    get { return path_ != null; }
  }
  /// <summary>Clears the value of the "path" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPath() {
    path_ = null;
  }

  /// <summary>Field number for the "vendor_id" field.</summary>
  public const int VendorIdFieldNumber = 3;
  private readonly static uint VendorIdDefaultValue = 0;

  private uint vendorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint VendorId {
    get { if ((_hasBits0 & 2) != 0) { return vendorId_; } else { return VendorIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      vendorId_ = value;
    }
  }
  /// <summary>Gets whether the "vendor_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVendorId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "vendor_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVendorId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "product_id" field.</summary>
  public const int ProductIdFieldNumber = 4;
  private readonly static uint ProductIdDefaultValue = 0;

  private uint productId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ProductId {
    get { if ((_hasBits0 & 4) != 0) { return productId_; } else { return ProductIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      productId_ = value;
    }
  }
  /// <summary>Gets whether the "product_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProductId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "product_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProductId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "serial_number" field.</summary>
  public const int SerialNumberFieldNumber = 5;
  private readonly static string SerialNumberDefaultValue = "";

  private string serialNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SerialNumber {
    get { return serialNumber_ ?? SerialNumberDefaultValue; }
    set {
      serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "serial_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSerialNumber {
    get { return serialNumber_ != null; }
  }
  /// <summary>Clears the value of the "serial_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSerialNumber() {
    serialNumber_ = null;
  }

  /// <summary>Field number for the "release_number" field.</summary>
  public const int ReleaseNumberFieldNumber = 6;
  private readonly static uint ReleaseNumberDefaultValue = 0;

  private uint releaseNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ReleaseNumber {
    get { if ((_hasBits0 & 8) != 0) { return releaseNumber_; } else { return ReleaseNumberDefaultValue; } }
    set {
      _hasBits0 |= 8;
      releaseNumber_ = value;
    }
  }
  /// <summary>Gets whether the "release_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReleaseNumber {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "release_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReleaseNumber() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "manufacturer_string" field.</summary>
  public const int ManufacturerStringFieldNumber = 7;
  private readonly static string ManufacturerStringDefaultValue = "";

  private string manufacturerString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ManufacturerString {
    get { return manufacturerString_ ?? ManufacturerStringDefaultValue; }
    set {
      manufacturerString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "manufacturer_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManufacturerString {
    get { return manufacturerString_ != null; }
  }
  /// <summary>Clears the value of the "manufacturer_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManufacturerString() {
    manufacturerString_ = null;
  }

  /// <summary>Field number for the "product_string" field.</summary>
  public const int ProductStringFieldNumber = 8;
  private readonly static string ProductStringDefaultValue = "";

  private string productString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ProductString {
    get { return productString_ ?? ProductStringDefaultValue; }
    set {
      productString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "product_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProductString {
    get { return productString_ != null; }
  }
  /// <summary>Clears the value of the "product_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProductString() {
    productString_ = null;
  }

  /// <summary>Field number for the "usage_page" field.</summary>
  public const int UsagePageFieldNumber = 9;
  private readonly static uint UsagePageDefaultValue = 0;

  private uint usagePage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint UsagePage {
    get { if ((_hasBits0 & 16) != 0) { return usagePage_; } else { return UsagePageDefaultValue; } }
    set {
      _hasBits0 |= 16;
      usagePage_ = value;
    }
  }
  /// <summary>Gets whether the "usage_page" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsagePage {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "usage_page" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsagePage() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "usage" field.</summary>
  public const int UsageFieldNumber = 10;
  private readonly static uint UsageDefaultValue = 0;

  private uint usage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Usage {
    get { if ((_hasBits0 & 32) != 0) { return usage_; } else { return UsageDefaultValue; } }
    set {
      _hasBits0 |= 32;
      usage_ = value;
    }
  }
  /// <summary>Gets whether the "usage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsage {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "usage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsage() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "interface_number" field.</summary>
  public const int InterfaceNumberFieldNumber = 11;
  private readonly static int InterfaceNumberDefaultValue = -1;

  private int interfaceNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int InterfaceNumber {
    get { if ((_hasBits0 & 64) != 0) { return interfaceNumber_; } else { return InterfaceNumberDefaultValue; } }
    set {
      _hasBits0 |= 64;
      interfaceNumber_ = value;
    }
  }
  /// <summary>Gets whether the "interface_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInterfaceNumber {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "interface_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInterfaceNumber() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "ostype" field.</summary>
  public const int OstypeFieldNumber = 12;
  private readonly static int OstypeDefaultValue = -1;

  private int ostype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ostype {
    get { if ((_hasBits0 & 128) != 0) { return ostype_; } else { return OstypeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      ostype_ = value;
    }
  }
  /// <summary>Gets whether the "ostype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOstype {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "ostype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOstype() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "is_generic_gamepad" field.</summary>
  public const int IsGenericGamepadFieldNumber = 13;
  private readonly static bool IsGenericGamepadDefaultValue = false;

  private bool isGenericGamepad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGenericGamepad {
    get { if ((_hasBits0 & 256) != 0) { return isGenericGamepad_; } else { return IsGenericGamepadDefaultValue; } }
    set {
      _hasBits0 |= 256;
      isGenericGamepad_ = value;
    }
  }
  /// <summary>Gets whether the "is_generic_gamepad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGenericGamepad {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "is_generic_gamepad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGenericGamepad() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "is_generic_joystick" field.</summary>
  public const int IsGenericJoystickFieldNumber = 14;
  private readonly static bool IsGenericJoystickDefaultValue = false;

  private bool isGenericJoystick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGenericJoystick {
    get { if ((_hasBits0 & 512) != 0) { return isGenericJoystick_; } else { return IsGenericJoystickDefaultValue; } }
    set {
      _hasBits0 |= 512;
      isGenericJoystick_ = value;
    }
  }
  /// <summary>Gets whether the "is_generic_joystick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGenericJoystick {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "is_generic_joystick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGenericJoystick() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "caps_bits" field.</summary>
  public const int CapsBitsFieldNumber = 15;
  private readonly static uint CapsBitsDefaultValue = 0;

  private uint capsBits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint CapsBits {
    get { if ((_hasBits0 & 1024) != 0) { return capsBits_; } else { return CapsBitsDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      capsBits_ = value;
    }
  }
  /// <summary>Gets whether the "caps_bits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCapsBits {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "caps_bits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCapsBits() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "session_id" field.</summary>
  public const int SessionIdFieldNumber = 16;
  private readonly static uint SessionIdDefaultValue = 0;

  private uint sessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SessionId {
    get { if ((_hasBits0 & 2048) != 0) { return sessionId_; } else { return SessionIdDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      sessionId_ = value;
    }
  }
  /// <summary>Gets whether the "session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionId {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionId() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "eControllerType_OBSOLETE" field.</summary>
  public const int EControllerTypeOBSOLETEFieldNumber = 17;
  private readonly static uint EControllerTypeOBSOLETEDefaultValue = 0;

  private uint eControllerTypeOBSOLETE_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EControllerTypeOBSOLETE {
    get { if ((_hasBits0 & 4096) != 0) { return eControllerTypeOBSOLETE_; } else { return EControllerTypeOBSOLETEDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      eControllerTypeOBSOLETE_ = value;
    }
  }
  /// <summary>Gets whether the "eControllerType_OBSOLETE" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEControllerTypeOBSOLETE {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "eControllerType_OBSOLETE" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEControllerTypeOBSOLETE() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "is_xinput_device_OBSOLETE" field.</summary>
  public const int IsXinputDeviceOBSOLETEFieldNumber = 18;
  private readonly static bool IsXinputDeviceOBSOLETEDefaultValue = false;

  private bool isXinputDeviceOBSOLETE_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsXinputDeviceOBSOLETE {
    get { if ((_hasBits0 & 8192) != 0) { return isXinputDeviceOBSOLETE_; } else { return IsXinputDeviceOBSOLETEDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      isXinputDeviceOBSOLETE_ = value;
    }
  }
  /// <summary>Gets whether the "is_xinput_device_OBSOLETE" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsXinputDeviceOBSOLETE {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "is_xinput_device_OBSOLETE" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsXinputDeviceOBSOLETE() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "session_remote_play_together_appid" field.</summary>
  public const int SessionRemotePlayTogetherAppidFieldNumber = 19;
  private readonly static uint SessionRemotePlayTogetherAppidDefaultValue = 0;

  private uint sessionRemotePlayTogetherAppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SessionRemotePlayTogetherAppid {
    get { if ((_hasBits0 & 16384) != 0) { return sessionRemotePlayTogetherAppid_; } else { return SessionRemotePlayTogetherAppidDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      sessionRemotePlayTogetherAppid_ = value;
    }
  }
  /// <summary>Gets whether the "session_remote_play_together_appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionRemotePlayTogetherAppid {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "session_remote_play_together_appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionRemotePlayTogetherAppid() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "is_steamvr_device" field.</summary>
  public const int IsSteamvrDeviceFieldNumber = 20;
  private readonly static bool IsSteamvrDeviceDefaultValue = false;

  private bool isSteamvrDevice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsSteamvrDevice {
    get { if ((_hasBits0 & 32768) != 0) { return isSteamvrDevice_; } else { return IsSteamvrDeviceDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      isSteamvrDevice_ = value;
    }
  }
  /// <summary>Gets whether the "is_steamvr_device" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsSteamvrDevice {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "is_steamvr_device" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsSteamvrDevice() {
    _hasBits0 &= ~32768;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CHIDDeviceInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CHIDDeviceInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Location != other.Location) return false;
    if (Path != other.Path) return false;
    if (VendorId != other.VendorId) return false;
    if (ProductId != other.ProductId) return false;
    if (SerialNumber != other.SerialNumber) return false;
    if (ReleaseNumber != other.ReleaseNumber) return false;
    if (ManufacturerString != other.ManufacturerString) return false;
    if (ProductString != other.ProductString) return false;
    if (UsagePage != other.UsagePage) return false;
    if (Usage != other.Usage) return false;
    if (InterfaceNumber != other.InterfaceNumber) return false;
    if (Ostype != other.Ostype) return false;
    if (IsGenericGamepad != other.IsGenericGamepad) return false;
    if (IsGenericJoystick != other.IsGenericJoystick) return false;
    if (CapsBits != other.CapsBits) return false;
    if (SessionId != other.SessionId) return false;
    if (EControllerTypeOBSOLETE != other.EControllerTypeOBSOLETE) return false;
    if (IsXinputDeviceOBSOLETE != other.IsXinputDeviceOBSOLETE) return false;
    if (SessionRemotePlayTogetherAppid != other.SessionRemotePlayTogetherAppid) return false;
    if (IsSteamvrDevice != other.IsSteamvrDevice) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLocation) hash ^= Location.GetHashCode();
    if (HasPath) hash ^= Path.GetHashCode();
    if (HasVendorId) hash ^= VendorId.GetHashCode();
    if (HasProductId) hash ^= ProductId.GetHashCode();
    if (HasSerialNumber) hash ^= SerialNumber.GetHashCode();
    if (HasReleaseNumber) hash ^= ReleaseNumber.GetHashCode();
    if (HasManufacturerString) hash ^= ManufacturerString.GetHashCode();
    if (HasProductString) hash ^= ProductString.GetHashCode();
    if (HasUsagePage) hash ^= UsagePage.GetHashCode();
    if (HasUsage) hash ^= Usage.GetHashCode();
    if (HasInterfaceNumber) hash ^= InterfaceNumber.GetHashCode();
    if (HasOstype) hash ^= Ostype.GetHashCode();
    if (HasIsGenericGamepad) hash ^= IsGenericGamepad.GetHashCode();
    if (HasIsGenericJoystick) hash ^= IsGenericJoystick.GetHashCode();
    if (HasCapsBits) hash ^= CapsBits.GetHashCode();
    if (HasSessionId) hash ^= SessionId.GetHashCode();
    if (HasEControllerTypeOBSOLETE) hash ^= EControllerTypeOBSOLETE.GetHashCode();
    if (HasIsXinputDeviceOBSOLETE) hash ^= IsXinputDeviceOBSOLETE.GetHashCode();
    if (HasSessionRemotePlayTogetherAppid) hash ^= SessionRemotePlayTogetherAppid.GetHashCode();
    if (HasIsSteamvrDevice) hash ^= IsSteamvrDevice.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLocation) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Location);
    }
    if (HasPath) {
      output.WriteRawTag(18);
      output.WriteString(Path);
    }
    if (HasVendorId) {
      output.WriteRawTag(24);
      output.WriteUInt32(VendorId);
    }
    if (HasProductId) {
      output.WriteRawTag(32);
      output.WriteUInt32(ProductId);
    }
    if (HasSerialNumber) {
      output.WriteRawTag(42);
      output.WriteString(SerialNumber);
    }
    if (HasReleaseNumber) {
      output.WriteRawTag(48);
      output.WriteUInt32(ReleaseNumber);
    }
    if (HasManufacturerString) {
      output.WriteRawTag(58);
      output.WriteString(ManufacturerString);
    }
    if (HasProductString) {
      output.WriteRawTag(66);
      output.WriteString(ProductString);
    }
    if (HasUsagePage) {
      output.WriteRawTag(72);
      output.WriteUInt32(UsagePage);
    }
    if (HasUsage) {
      output.WriteRawTag(80);
      output.WriteUInt32(Usage);
    }
    if (HasInterfaceNumber) {
      output.WriteRawTag(88);
      output.WriteInt32(InterfaceNumber);
    }
    if (HasOstype) {
      output.WriteRawTag(96);
      output.WriteInt32(Ostype);
    }
    if (HasIsGenericGamepad) {
      output.WriteRawTag(104);
      output.WriteBool(IsGenericGamepad);
    }
    if (HasIsGenericJoystick) {
      output.WriteRawTag(112);
      output.WriteBool(IsGenericJoystick);
    }
    if (HasCapsBits) {
      output.WriteRawTag(120);
      output.WriteUInt32(CapsBits);
    }
    if (HasSessionId) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(SessionId);
    }
    if (HasEControllerTypeOBSOLETE) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(EControllerTypeOBSOLETE);
    }
    if (HasIsXinputDeviceOBSOLETE) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsXinputDeviceOBSOLETE);
    }
    if (HasSessionRemotePlayTogetherAppid) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(SessionRemotePlayTogetherAppid);
    }
    if (HasIsSteamvrDevice) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsSteamvrDevice);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLocation) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Location);
    }
    if (HasPath) {
      output.WriteRawTag(18);
      output.WriteString(Path);
    }
    if (HasVendorId) {
      output.WriteRawTag(24);
      output.WriteUInt32(VendorId);
    }
    if (HasProductId) {
      output.WriteRawTag(32);
      output.WriteUInt32(ProductId);
    }
    if (HasSerialNumber) {
      output.WriteRawTag(42);
      output.WriteString(SerialNumber);
    }
    if (HasReleaseNumber) {
      output.WriteRawTag(48);
      output.WriteUInt32(ReleaseNumber);
    }
    if (HasManufacturerString) {
      output.WriteRawTag(58);
      output.WriteString(ManufacturerString);
    }
    if (HasProductString) {
      output.WriteRawTag(66);
      output.WriteString(ProductString);
    }
    if (HasUsagePage) {
      output.WriteRawTag(72);
      output.WriteUInt32(UsagePage);
    }
    if (HasUsage) {
      output.WriteRawTag(80);
      output.WriteUInt32(Usage);
    }
    if (HasInterfaceNumber) {
      output.WriteRawTag(88);
      output.WriteInt32(InterfaceNumber);
    }
    if (HasOstype) {
      output.WriteRawTag(96);
      output.WriteInt32(Ostype);
    }
    if (HasIsGenericGamepad) {
      output.WriteRawTag(104);
      output.WriteBool(IsGenericGamepad);
    }
    if (HasIsGenericJoystick) {
      output.WriteRawTag(112);
      output.WriteBool(IsGenericJoystick);
    }
    if (HasCapsBits) {
      output.WriteRawTag(120);
      output.WriteUInt32(CapsBits);
    }
    if (HasSessionId) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(SessionId);
    }
    if (HasEControllerTypeOBSOLETE) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(EControllerTypeOBSOLETE);
    }
    if (HasIsXinputDeviceOBSOLETE) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsXinputDeviceOBSOLETE);
    }
    if (HasSessionRemotePlayTogetherAppid) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(SessionRemotePlayTogetherAppid);
    }
    if (HasIsSteamvrDevice) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsSteamvrDevice);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLocation) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
    }
    if (HasPath) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (HasVendorId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VendorId);
    }
    if (HasProductId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductId);
    }
    if (HasSerialNumber) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
    }
    if (HasReleaseNumber) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReleaseNumber);
    }
    if (HasManufacturerString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ManufacturerString);
    }
    if (HasProductString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductString);
    }
    if (HasUsagePage) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsagePage);
    }
    if (HasUsage) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Usage);
    }
    if (HasInterfaceNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterfaceNumber);
    }
    if (HasOstype) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ostype);
    }
    if (HasIsGenericGamepad) {
      size += 1 + 1;
    }
    if (HasIsGenericJoystick) {
      size += 1 + 1;
    }
    if (HasCapsBits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CapsBits);
    }
    if (HasSessionId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SessionId);
    }
    if (HasEControllerTypeOBSOLETE) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EControllerTypeOBSOLETE);
    }
    if (HasIsXinputDeviceOBSOLETE) {
      size += 2 + 1;
    }
    if (HasSessionRemotePlayTogetherAppid) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SessionRemotePlayTogetherAppid);
    }
    if (HasIsSteamvrDevice) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CHIDDeviceInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasLocation) {
      Location = other.Location;
    }
    if (other.HasPath) {
      Path = other.Path;
    }
    if (other.HasVendorId) {
      VendorId = other.VendorId;
    }
    if (other.HasProductId) {
      ProductId = other.ProductId;
    }
    if (other.HasSerialNumber) {
      SerialNumber = other.SerialNumber;
    }
    if (other.HasReleaseNumber) {
      ReleaseNumber = other.ReleaseNumber;
    }
    if (other.HasManufacturerString) {
      ManufacturerString = other.ManufacturerString;
    }
    if (other.HasProductString) {
      ProductString = other.ProductString;
    }
    if (other.HasUsagePage) {
      UsagePage = other.UsagePage;
    }
    if (other.HasUsage) {
      Usage = other.Usage;
    }
    if (other.HasInterfaceNumber) {
      InterfaceNumber = other.InterfaceNumber;
    }
    if (other.HasOstype) {
      Ostype = other.Ostype;
    }
    if (other.HasIsGenericGamepad) {
      IsGenericGamepad = other.IsGenericGamepad;
    }
    if (other.HasIsGenericJoystick) {
      IsGenericJoystick = other.IsGenericJoystick;
    }
    if (other.HasCapsBits) {
      CapsBits = other.CapsBits;
    }
    if (other.HasSessionId) {
      SessionId = other.SessionId;
    }
    if (other.HasEControllerTypeOBSOLETE) {
      EControllerTypeOBSOLETE = other.EControllerTypeOBSOLETE;
    }
    if (other.HasIsXinputDeviceOBSOLETE) {
      IsXinputDeviceOBSOLETE = other.IsXinputDeviceOBSOLETE;
    }
    if (other.HasSessionRemotePlayTogetherAppid) {
      SessionRemotePlayTogetherAppid = other.SessionRemotePlayTogetherAppid;
    }
    if (other.HasIsSteamvrDevice) {
      IsSteamvrDevice = other.IsSteamvrDevice;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Location = (global::EHIDDeviceLocation) input.ReadEnum();
          break;
        }
        case 18: {
          Path = input.ReadString();
          break;
        }
        case 24: {
          VendorId = input.ReadUInt32();
          break;
        }
        case 32: {
          ProductId = input.ReadUInt32();
          break;
        }
        case 42: {
          SerialNumber = input.ReadString();
          break;
        }
        case 48: {
          ReleaseNumber = input.ReadUInt32();
          break;
        }
        case 58: {
          ManufacturerString = input.ReadString();
          break;
        }
        case 66: {
          ProductString = input.ReadString();
          break;
        }
        case 72: {
          UsagePage = input.ReadUInt32();
          break;
        }
        case 80: {
          Usage = input.ReadUInt32();
          break;
        }
        case 88: {
          InterfaceNumber = input.ReadInt32();
          break;
        }
        case 96: {
          Ostype = input.ReadInt32();
          break;
        }
        case 104: {
          IsGenericGamepad = input.ReadBool();
          break;
        }
        case 112: {
          IsGenericJoystick = input.ReadBool();
          break;
        }
        case 120: {
          CapsBits = input.ReadUInt32();
          break;
        }
        case 128: {
          SessionId = input.ReadUInt32();
          break;
        }
        case 136: {
          EControllerTypeOBSOLETE = input.ReadUInt32();
          break;
        }
        case 144: {
          IsXinputDeviceOBSOLETE = input.ReadBool();
          break;
        }
        case 152: {
          SessionRemotePlayTogetherAppid = input.ReadUInt32();
          break;
        }
        case 160: {
          IsSteamvrDevice = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Location = (global::EHIDDeviceLocation) input.ReadEnum();
          break;
        }
        case 18: {
          Path = input.ReadString();
          break;
        }
        case 24: {
          VendorId = input.ReadUInt32();
          break;
        }
        case 32: {
          ProductId = input.ReadUInt32();
          break;
        }
        case 42: {
          SerialNumber = input.ReadString();
          break;
        }
        case 48: {
          ReleaseNumber = input.ReadUInt32();
          break;
        }
        case 58: {
          ManufacturerString = input.ReadString();
          break;
        }
        case 66: {
          ProductString = input.ReadString();
          break;
        }
        case 72: {
          UsagePage = input.ReadUInt32();
          break;
        }
        case 80: {
          Usage = input.ReadUInt32();
          break;
        }
        case 88: {
          InterfaceNumber = input.ReadInt32();
          break;
        }
        case 96: {
          Ostype = input.ReadInt32();
          break;
        }
        case 104: {
          IsGenericGamepad = input.ReadBool();
          break;
        }
        case 112: {
          IsGenericJoystick = input.ReadBool();
          break;
        }
        case 120: {
          CapsBits = input.ReadUInt32();
          break;
        }
        case 128: {
          SessionId = input.ReadUInt32();
          break;
        }
        case 136: {
          EControllerTypeOBSOLETE = input.ReadUInt32();
          break;
        }
        case 144: {
          IsXinputDeviceOBSOLETE = input.ReadBool();
          break;
        }
        case 152: {
          SessionRemotePlayTogetherAppid = input.ReadUInt32();
          break;
        }
        case 160: {
          IsSteamvrDevice = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CHIDDeviceInputReport : pb::IMessage<CHIDDeviceInputReport>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CHIDDeviceInputReport> _parser = new pb::MessageParser<CHIDDeviceInputReport>(() => new CHIDDeviceInputReport());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CHIDDeviceInputReport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesHiddevicesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInputReport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInputReport(CHIDDeviceInputReport other) : this() {
    _hasBits0 = other._hasBits0;
    fullReport_ = other.fullReport_;
    deltaReport_ = other.deltaReport_;
    deltaReportSize_ = other.deltaReportSize_;
    deltaReportCrc_ = other.deltaReportCrc_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDDeviceInputReport Clone() {
    return new CHIDDeviceInputReport(this);
  }

  /// <summary>Field number for the "full_report" field.</summary>
  public const int FullReportFieldNumber = 1;
  private readonly static pb::ByteString FullReportDefaultValue = pb::ByteString.Empty;

  private pb::ByteString fullReport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString FullReport {
    get { return fullReport_ ?? FullReportDefaultValue; }
    set {
      fullReport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "full_report" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFullReport {
    get { return fullReport_ != null; }
  }
  /// <summary>Clears the value of the "full_report" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFullReport() {
    fullReport_ = null;
  }

  /// <summary>Field number for the "delta_report" field.</summary>
  public const int DeltaReportFieldNumber = 2;
  private readonly static pb::ByteString DeltaReportDefaultValue = pb::ByteString.Empty;

  private pb::ByteString deltaReport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString DeltaReport {
    get { return deltaReport_ ?? DeltaReportDefaultValue; }
    set {
      deltaReport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "delta_report" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaReport {
    get { return deltaReport_ != null; }
  }
  /// <summary>Clears the value of the "delta_report" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaReport() {
    deltaReport_ = null;
  }

  /// <summary>Field number for the "delta_report_size" field.</summary>
  public const int DeltaReportSizeFieldNumber = 3;
  private readonly static uint DeltaReportSizeDefaultValue = 0;

  private uint deltaReportSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeltaReportSize {
    get { if ((_hasBits0 & 1) != 0) { return deltaReportSize_; } else { return DeltaReportSizeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deltaReportSize_ = value;
    }
  }
  /// <summary>Gets whether the "delta_report_size" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaReportSize {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "delta_report_size" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaReportSize() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "delta_report_crc" field.</summary>
  public const int DeltaReportCrcFieldNumber = 4;
  private readonly static uint DeltaReportCrcDefaultValue = 0;

  private uint deltaReportCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeltaReportCrc {
    get { if ((_hasBits0 & 2) != 0) { return deltaReportCrc_; } else { return DeltaReportCrcDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deltaReportCrc_ = value;
    }
  }
  /// <summary>Gets whether the "delta_report_crc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaReportCrc {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "delta_report_crc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaReportCrc() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CHIDDeviceInputReport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CHIDDeviceInputReport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FullReport != other.FullReport) return false;
    if (DeltaReport != other.DeltaReport) return false;
    if (DeltaReportSize != other.DeltaReportSize) return false;
    if (DeltaReportCrc != other.DeltaReportCrc) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFullReport) hash ^= FullReport.GetHashCode();
    if (HasDeltaReport) hash ^= DeltaReport.GetHashCode();
    if (HasDeltaReportSize) hash ^= DeltaReportSize.GetHashCode();
    if (HasDeltaReportCrc) hash ^= DeltaReportCrc.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasFullReport) {
      output.WriteRawTag(10);
      output.WriteBytes(FullReport);
    }
    if (HasDeltaReport) {
      output.WriteRawTag(18);
      output.WriteBytes(DeltaReport);
    }
    if (HasDeltaReportSize) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeltaReportSize);
    }
    if (HasDeltaReportCrc) {
      output.WriteRawTag(32);
      output.WriteUInt32(DeltaReportCrc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasFullReport) {
      output.WriteRawTag(10);
      output.WriteBytes(FullReport);
    }
    if (HasDeltaReport) {
      output.WriteRawTag(18);
      output.WriteBytes(DeltaReport);
    }
    if (HasDeltaReportSize) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeltaReportSize);
    }
    if (HasDeltaReportCrc) {
      output.WriteRawTag(32);
      output.WriteUInt32(DeltaReportCrc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasFullReport) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FullReport);
    }
    if (HasDeltaReport) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeltaReport);
    }
    if (HasDeltaReportSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeltaReportSize);
    }
    if (HasDeltaReportCrc) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeltaReportCrc);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CHIDDeviceInputReport other) {
    if (other == null) {
      return;
    }
    if (other.HasFullReport) {
      FullReport = other.FullReport;
    }
    if (other.HasDeltaReport) {
      DeltaReport = other.DeltaReport;
    }
    if (other.HasDeltaReportSize) {
      DeltaReportSize = other.DeltaReportSize;
    }
    if (other.HasDeltaReportCrc) {
      DeltaReportCrc = other.DeltaReportCrc;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FullReport = input.ReadBytes();
          break;
        }
        case 18: {
          DeltaReport = input.ReadBytes();
          break;
        }
        case 24: {
          DeltaReportSize = input.ReadUInt32();
          break;
        }
        case 32: {
          DeltaReportCrc = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          FullReport = input.ReadBytes();
          break;
        }
        case 18: {
          DeltaReport = input.ReadBytes();
          break;
        }
        case 24: {
          DeltaReportSize = input.ReadUInt32();
          break;
        }
        case 32: {
          DeltaReportCrc = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CHIDMessageToRemote : pb::IMessage<CHIDMessageToRemote>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CHIDMessageToRemote> _parser = new pb::MessageParser<CHIDMessageToRemote>(() => new CHIDMessageToRemote());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CHIDMessageToRemote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesHiddevicesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageToRemote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageToRemote(CHIDMessageToRemote other) : this() {
    _hasBits0 = other._hasBits0;
    requestId_ = other.requestId_;
    switch (other.CommandCase) {
      case CommandOneofCase.DeviceOpen:
        DeviceOpen = other.DeviceOpen.Clone();
        break;
      case CommandOneofCase.DeviceClose:
        DeviceClose = other.DeviceClose.Clone();
        break;
      case CommandOneofCase.DeviceWrite:
        DeviceWrite = other.DeviceWrite.Clone();
        break;
      case CommandOneofCase.DeviceRead:
        DeviceRead = other.DeviceRead.Clone();
        break;
      case CommandOneofCase.DeviceSendFeatureReport:
        DeviceSendFeatureReport = other.DeviceSendFeatureReport.Clone();
        break;
      case CommandOneofCase.DeviceGetFeatureReport:
        DeviceGetFeatureReport = other.DeviceGetFeatureReport.Clone();
        break;
      case CommandOneofCase.DeviceGetVendorString:
        DeviceGetVendorString = other.DeviceGetVendorString.Clone();
        break;
      case CommandOneofCase.DeviceGetProductString:
        DeviceGetProductString = other.DeviceGetProductString.Clone();
        break;
      case CommandOneofCase.DeviceGetSerialNumberString:
        DeviceGetSerialNumberString = other.DeviceGetSerialNumberString.Clone();
        break;
      case CommandOneofCase.DeviceStartInputReports:
        DeviceStartInputReports = other.DeviceStartInputReports.Clone();
        break;
      case CommandOneofCase.DeviceRequestFullReport:
        DeviceRequestFullReport = other.DeviceRequestFullReport.Clone();
        break;
      case CommandOneofCase.DeviceDisconnect:
        DeviceDisconnect = other.DeviceDisconnect.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageToRemote Clone() {
    return new CHIDMessageToRemote(this);
  }

  /// <summary>Field number for the "request_id" field.</summary>
  public const int RequestIdFieldNumber = 1;
  private readonly static uint RequestIdDefaultValue = 0;

  private uint requestId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RequestId {
    get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      requestId_ = value;
    }
  }
  /// <summary>Gets whether the "request_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRequestId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "request_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRequestId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "device_open" field.</summary>
  public const int DeviceOpenFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceOpen DeviceOpen {
    get { return commandCase_ == CommandOneofCase.DeviceOpen ? (global::CHIDMessageToRemote.Types.DeviceOpen) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceOpen;
    }
  }

  /// <summary>Field number for the "device_close" field.</summary>
  public const int DeviceCloseFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceClose DeviceClose {
    get { return commandCase_ == CommandOneofCase.DeviceClose ? (global::CHIDMessageToRemote.Types.DeviceClose) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceClose;
    }
  }

  /// <summary>Field number for the "device_write" field.</summary>
  public const int DeviceWriteFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceWrite DeviceWrite {
    get { return commandCase_ == CommandOneofCase.DeviceWrite ? (global::CHIDMessageToRemote.Types.DeviceWrite) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceWrite;
    }
  }

  /// <summary>Field number for the "device_read" field.</summary>
  public const int DeviceReadFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceRead DeviceRead {
    get { return commandCase_ == CommandOneofCase.DeviceRead ? (global::CHIDMessageToRemote.Types.DeviceRead) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceRead;
    }
  }

  /// <summary>Field number for the "device_send_feature_report" field.</summary>
  public const int DeviceSendFeatureReportFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceSendFeatureReport DeviceSendFeatureReport {
    get { return commandCase_ == CommandOneofCase.DeviceSendFeatureReport ? (global::CHIDMessageToRemote.Types.DeviceSendFeatureReport) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceSendFeatureReport;
    }
  }

  /// <summary>Field number for the "device_get_feature_report" field.</summary>
  public const int DeviceGetFeatureReportFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceGetFeatureReport DeviceGetFeatureReport {
    get { return commandCase_ == CommandOneofCase.DeviceGetFeatureReport ? (global::CHIDMessageToRemote.Types.DeviceGetFeatureReport) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceGetFeatureReport;
    }
  }

  /// <summary>Field number for the "device_get_vendor_string" field.</summary>
  public const int DeviceGetVendorStringFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceGetVendorString DeviceGetVendorString {
    get { return commandCase_ == CommandOneofCase.DeviceGetVendorString ? (global::CHIDMessageToRemote.Types.DeviceGetVendorString) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceGetVendorString;
    }
  }

  /// <summary>Field number for the "device_get_product_string" field.</summary>
  public const int DeviceGetProductStringFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceGetProductString DeviceGetProductString {
    get { return commandCase_ == CommandOneofCase.DeviceGetProductString ? (global::CHIDMessageToRemote.Types.DeviceGetProductString) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceGetProductString;
    }
  }

  /// <summary>Field number for the "device_get_serial_number_string" field.</summary>
  public const int DeviceGetSerialNumberStringFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString DeviceGetSerialNumberString {
    get { return commandCase_ == CommandOneofCase.DeviceGetSerialNumberString ? (global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceGetSerialNumberString;
    }
  }

  /// <summary>Field number for the "device_start_input_reports" field.</summary>
  public const int DeviceStartInputReportsFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceStartInputReports DeviceStartInputReports {
    get { return commandCase_ == CommandOneofCase.DeviceStartInputReports ? (global::CHIDMessageToRemote.Types.DeviceStartInputReports) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceStartInputReports;
    }
  }

  /// <summary>Field number for the "device_request_full_report" field.</summary>
  public const int DeviceRequestFullReportFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceRequestFullReport DeviceRequestFullReport {
    get { return commandCase_ == CommandOneofCase.DeviceRequestFullReport ? (global::CHIDMessageToRemote.Types.DeviceRequestFullReport) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceRequestFullReport;
    }
  }

  /// <summary>Field number for the "device_disconnect" field.</summary>
  public const int DeviceDisconnectFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageToRemote.Types.DeviceDisconnect DeviceDisconnect {
    get { return commandCase_ == CommandOneofCase.DeviceDisconnect ? (global::CHIDMessageToRemote.Types.DeviceDisconnect) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DeviceDisconnect;
    }
  }

  private object command_;
  /// <summary>Enum of possible cases for the "command" oneof.</summary>
  public enum CommandOneofCase {
    None = 0,
    DeviceOpen = 2,
    DeviceClose = 3,
    DeviceWrite = 4,
    DeviceRead = 5,
    DeviceSendFeatureReport = 6,
    DeviceGetFeatureReport = 7,
    DeviceGetVendorString = 8,
    DeviceGetProductString = 9,
    DeviceGetSerialNumberString = 10,
    DeviceStartInputReports = 11,
    DeviceRequestFullReport = 12,
    DeviceDisconnect = 13,
  }
  private CommandOneofCase commandCase_ = CommandOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CommandOneofCase CommandCase {
    get { return commandCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommand() {
    commandCase_ = CommandOneofCase.None;
    command_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CHIDMessageToRemote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CHIDMessageToRemote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestId != other.RequestId) return false;
    if (!object.Equals(DeviceOpen, other.DeviceOpen)) return false;
    if (!object.Equals(DeviceClose, other.DeviceClose)) return false;
    if (!object.Equals(DeviceWrite, other.DeviceWrite)) return false;
    if (!object.Equals(DeviceRead, other.DeviceRead)) return false;
    if (!object.Equals(DeviceSendFeatureReport, other.DeviceSendFeatureReport)) return false;
    if (!object.Equals(DeviceGetFeatureReport, other.DeviceGetFeatureReport)) return false;
    if (!object.Equals(DeviceGetVendorString, other.DeviceGetVendorString)) return false;
    if (!object.Equals(DeviceGetProductString, other.DeviceGetProductString)) return false;
    if (!object.Equals(DeviceGetSerialNumberString, other.DeviceGetSerialNumberString)) return false;
    if (!object.Equals(DeviceStartInputReports, other.DeviceStartInputReports)) return false;
    if (!object.Equals(DeviceRequestFullReport, other.DeviceRequestFullReport)) return false;
    if (!object.Equals(DeviceDisconnect, other.DeviceDisconnect)) return false;
    if (CommandCase != other.CommandCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRequestId) hash ^= RequestId.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceOpen) hash ^= DeviceOpen.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceClose) hash ^= DeviceClose.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceWrite) hash ^= DeviceWrite.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceRead) hash ^= DeviceRead.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) hash ^= DeviceSendFeatureReport.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) hash ^= DeviceGetFeatureReport.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceGetVendorString) hash ^= DeviceGetVendorString.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceGetProductString) hash ^= DeviceGetProductString.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) hash ^= DeviceGetSerialNumberString.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceStartInputReports) hash ^= DeviceStartInputReports.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) hash ^= DeviceRequestFullReport.GetHashCode();
    if (commandCase_ == CommandOneofCase.DeviceDisconnect) hash ^= DeviceDisconnect.GetHashCode();
    hash ^= (int) commandCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRequestId) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestId);
    }
    if (commandCase_ == CommandOneofCase.DeviceOpen) {
      output.WriteRawTag(18);
      output.WriteMessage(DeviceOpen);
    }
    if (commandCase_ == CommandOneofCase.DeviceClose) {
      output.WriteRawTag(26);
      output.WriteMessage(DeviceClose);
    }
    if (commandCase_ == CommandOneofCase.DeviceWrite) {
      output.WriteRawTag(34);
      output.WriteMessage(DeviceWrite);
    }
    if (commandCase_ == CommandOneofCase.DeviceRead) {
      output.WriteRawTag(42);
      output.WriteMessage(DeviceRead);
    }
    if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) {
      output.WriteRawTag(50);
      output.WriteMessage(DeviceSendFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) {
      output.WriteRawTag(58);
      output.WriteMessage(DeviceGetFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetVendorString) {
      output.WriteRawTag(66);
      output.WriteMessage(DeviceGetVendorString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetProductString) {
      output.WriteRawTag(74);
      output.WriteMessage(DeviceGetProductString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) {
      output.WriteRawTag(82);
      output.WriteMessage(DeviceGetSerialNumberString);
    }
    if (commandCase_ == CommandOneofCase.DeviceStartInputReports) {
      output.WriteRawTag(90);
      output.WriteMessage(DeviceStartInputReports);
    }
    if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) {
      output.WriteRawTag(98);
      output.WriteMessage(DeviceRequestFullReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceDisconnect) {
      output.WriteRawTag(106);
      output.WriteMessage(DeviceDisconnect);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRequestId) {
      output.WriteRawTag(8);
      output.WriteUInt32(RequestId);
    }
    if (commandCase_ == CommandOneofCase.DeviceOpen) {
      output.WriteRawTag(18);
      output.WriteMessage(DeviceOpen);
    }
    if (commandCase_ == CommandOneofCase.DeviceClose) {
      output.WriteRawTag(26);
      output.WriteMessage(DeviceClose);
    }
    if (commandCase_ == CommandOneofCase.DeviceWrite) {
      output.WriteRawTag(34);
      output.WriteMessage(DeviceWrite);
    }
    if (commandCase_ == CommandOneofCase.DeviceRead) {
      output.WriteRawTag(42);
      output.WriteMessage(DeviceRead);
    }
    if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) {
      output.WriteRawTag(50);
      output.WriteMessage(DeviceSendFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) {
      output.WriteRawTag(58);
      output.WriteMessage(DeviceGetFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetVendorString) {
      output.WriteRawTag(66);
      output.WriteMessage(DeviceGetVendorString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetProductString) {
      output.WriteRawTag(74);
      output.WriteMessage(DeviceGetProductString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) {
      output.WriteRawTag(82);
      output.WriteMessage(DeviceGetSerialNumberString);
    }
    if (commandCase_ == CommandOneofCase.DeviceStartInputReports) {
      output.WriteRawTag(90);
      output.WriteMessage(DeviceStartInputReports);
    }
    if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) {
      output.WriteRawTag(98);
      output.WriteMessage(DeviceRequestFullReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceDisconnect) {
      output.WriteRawTag(106);
      output.WriteMessage(DeviceDisconnect);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRequestId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
    }
    if (commandCase_ == CommandOneofCase.DeviceOpen) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceOpen);
    }
    if (commandCase_ == CommandOneofCase.DeviceClose) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceClose);
    }
    if (commandCase_ == CommandOneofCase.DeviceWrite) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceWrite);
    }
    if (commandCase_ == CommandOneofCase.DeviceRead) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceRead);
    }
    if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceSendFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceGetFeatureReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetVendorString) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceGetVendorString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetProductString) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceGetProductString);
    }
    if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceGetSerialNumberString);
    }
    if (commandCase_ == CommandOneofCase.DeviceStartInputReports) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceStartInputReports);
    }
    if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceRequestFullReport);
    }
    if (commandCase_ == CommandOneofCase.DeviceDisconnect) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceDisconnect);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CHIDMessageToRemote other) {
    if (other == null) {
      return;
    }
    if (other.HasRequestId) {
      RequestId = other.RequestId;
    }
    switch (other.CommandCase) {
      case CommandOneofCase.DeviceOpen:
        if (DeviceOpen == null) {
          DeviceOpen = new global::CHIDMessageToRemote.Types.DeviceOpen();
        }
        DeviceOpen.MergeFrom(other.DeviceOpen);
        break;
      case CommandOneofCase.DeviceClose:
        if (DeviceClose == null) {
          DeviceClose = new global::CHIDMessageToRemote.Types.DeviceClose();
        }
        DeviceClose.MergeFrom(other.DeviceClose);
        break;
      case CommandOneofCase.DeviceWrite:
        if (DeviceWrite == null) {
          DeviceWrite = new global::CHIDMessageToRemote.Types.DeviceWrite();
        }
        DeviceWrite.MergeFrom(other.DeviceWrite);
        break;
      case CommandOneofCase.DeviceRead:
        if (DeviceRead == null) {
          DeviceRead = new global::CHIDMessageToRemote.Types.DeviceRead();
        }
        DeviceRead.MergeFrom(other.DeviceRead);
        break;
      case CommandOneofCase.DeviceSendFeatureReport:
        if (DeviceSendFeatureReport == null) {
          DeviceSendFeatureReport = new global::CHIDMessageToRemote.Types.DeviceSendFeatureReport();
        }
        DeviceSendFeatureReport.MergeFrom(other.DeviceSendFeatureReport);
        break;
      case CommandOneofCase.DeviceGetFeatureReport:
        if (DeviceGetFeatureReport == null) {
          DeviceGetFeatureReport = new global::CHIDMessageToRemote.Types.DeviceGetFeatureReport();
        }
        DeviceGetFeatureReport.MergeFrom(other.DeviceGetFeatureReport);
        break;
      case CommandOneofCase.DeviceGetVendorString:
        if (DeviceGetVendorString == null) {
          DeviceGetVendorString = new global::CHIDMessageToRemote.Types.DeviceGetVendorString();
        }
        DeviceGetVendorString.MergeFrom(other.DeviceGetVendorString);
        break;
      case CommandOneofCase.DeviceGetProductString:
        if (DeviceGetProductString == null) {
          DeviceGetProductString = new global::CHIDMessageToRemote.Types.DeviceGetProductString();
        }
        DeviceGetProductString.MergeFrom(other.DeviceGetProductString);
        break;
      case CommandOneofCase.DeviceGetSerialNumberString:
        if (DeviceGetSerialNumberString == null) {
          DeviceGetSerialNumberString = new global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString();
        }
        DeviceGetSerialNumberString.MergeFrom(other.DeviceGetSerialNumberString);
        break;
      case CommandOneofCase.DeviceStartInputReports:
        if (DeviceStartInputReports == null) {
          DeviceStartInputReports = new global::CHIDMessageToRemote.Types.DeviceStartInputReports();
        }
        DeviceStartInputReports.MergeFrom(other.DeviceStartInputReports);
        break;
      case CommandOneofCase.DeviceRequestFullReport:
        if (DeviceRequestFullReport == null) {
          DeviceRequestFullReport = new global::CHIDMessageToRemote.Types.DeviceRequestFullReport();
        }
        DeviceRequestFullReport.MergeFrom(other.DeviceRequestFullReport);
        break;
      case CommandOneofCase.DeviceDisconnect:
        if (DeviceDisconnect == null) {
          DeviceDisconnect = new global::CHIDMessageToRemote.Types.DeviceDisconnect();
        }
        DeviceDisconnect.MergeFrom(other.DeviceDisconnect);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestId = input.ReadUInt32();
          break;
        }
        case 18: {
          global::CHIDMessageToRemote.Types.DeviceOpen subBuilder = new global::CHIDMessageToRemote.Types.DeviceOpen();
          if (commandCase_ == CommandOneofCase.DeviceOpen) {
            subBuilder.MergeFrom(DeviceOpen);
          }
          input.ReadMessage(subBuilder);
          DeviceOpen = subBuilder;
          break;
        }
        case 26: {
          global::CHIDMessageToRemote.Types.DeviceClose subBuilder = new global::CHIDMessageToRemote.Types.DeviceClose();
          if (commandCase_ == CommandOneofCase.DeviceClose) {
            subBuilder.MergeFrom(DeviceClose);
          }
          input.ReadMessage(subBuilder);
          DeviceClose = subBuilder;
          break;
        }
        case 34: {
          global::CHIDMessageToRemote.Types.DeviceWrite subBuilder = new global::CHIDMessageToRemote.Types.DeviceWrite();
          if (commandCase_ == CommandOneofCase.DeviceWrite) {
            subBuilder.MergeFrom(DeviceWrite);
          }
          input.ReadMessage(subBuilder);
          DeviceWrite = subBuilder;
          break;
        }
        case 42: {
          global::CHIDMessageToRemote.Types.DeviceRead subBuilder = new global::CHIDMessageToRemote.Types.DeviceRead();
          if (commandCase_ == CommandOneofCase.DeviceRead) {
            subBuilder.MergeFrom(DeviceRead);
          }
          input.ReadMessage(subBuilder);
          DeviceRead = subBuilder;
          break;
        }
        case 50: {
          global::CHIDMessageToRemote.Types.DeviceSendFeatureReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceSendFeatureReport();
          if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) {
            subBuilder.MergeFrom(DeviceSendFeatureReport);
          }
          input.ReadMessage(subBuilder);
          DeviceSendFeatureReport = subBuilder;
          break;
        }
        case 58: {
          global::CHIDMessageToRemote.Types.DeviceGetFeatureReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetFeatureReport();
          if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) {
            subBuilder.MergeFrom(DeviceGetFeatureReport);
          }
          input.ReadMessage(subBuilder);
          DeviceGetFeatureReport = subBuilder;
          break;
        }
        case 66: {
          global::CHIDMessageToRemote.Types.DeviceGetVendorString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetVendorString();
          if (commandCase_ == CommandOneofCase.DeviceGetVendorString) {
            subBuilder.MergeFrom(DeviceGetVendorString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetVendorString = subBuilder;
          break;
        }
        case 74: {
          global::CHIDMessageToRemote.Types.DeviceGetProductString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetProductString();
          if (commandCase_ == CommandOneofCase.DeviceGetProductString) {
            subBuilder.MergeFrom(DeviceGetProductString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetProductString = subBuilder;
          break;
        }
        case 82: {
          global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString();
          if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) {
            subBuilder.MergeFrom(DeviceGetSerialNumberString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetSerialNumberString = subBuilder;
          break;
        }
        case 90: {
          global::CHIDMessageToRemote.Types.DeviceStartInputReports subBuilder = new global::CHIDMessageToRemote.Types.DeviceStartInputReports();
          if (commandCase_ == CommandOneofCase.DeviceStartInputReports) {
            subBuilder.MergeFrom(DeviceStartInputReports);
          }
          input.ReadMessage(subBuilder);
          DeviceStartInputReports = subBuilder;
          break;
        }
        case 98: {
          global::CHIDMessageToRemote.Types.DeviceRequestFullReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceRequestFullReport();
          if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) {
            subBuilder.MergeFrom(DeviceRequestFullReport);
          }
          input.ReadMessage(subBuilder);
          DeviceRequestFullReport = subBuilder;
          break;
        }
        case 106: {
          global::CHIDMessageToRemote.Types.DeviceDisconnect subBuilder = new global::CHIDMessageToRemote.Types.DeviceDisconnect();
          if (commandCase_ == CommandOneofCase.DeviceDisconnect) {
            subBuilder.MergeFrom(DeviceDisconnect);
          }
          input.ReadMessage(subBuilder);
          DeviceDisconnect = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RequestId = input.ReadUInt32();
          break;
        }
        case 18: {
          global::CHIDMessageToRemote.Types.DeviceOpen subBuilder = new global::CHIDMessageToRemote.Types.DeviceOpen();
          if (commandCase_ == CommandOneofCase.DeviceOpen) {
            subBuilder.MergeFrom(DeviceOpen);
          }
          input.ReadMessage(subBuilder);
          DeviceOpen = subBuilder;
          break;
        }
        case 26: {
          global::CHIDMessageToRemote.Types.DeviceClose subBuilder = new global::CHIDMessageToRemote.Types.DeviceClose();
          if (commandCase_ == CommandOneofCase.DeviceClose) {
            subBuilder.MergeFrom(DeviceClose);
          }
          input.ReadMessage(subBuilder);
          DeviceClose = subBuilder;
          break;
        }
        case 34: {
          global::CHIDMessageToRemote.Types.DeviceWrite subBuilder = new global::CHIDMessageToRemote.Types.DeviceWrite();
          if (commandCase_ == CommandOneofCase.DeviceWrite) {
            subBuilder.MergeFrom(DeviceWrite);
          }
          input.ReadMessage(subBuilder);
          DeviceWrite = subBuilder;
          break;
        }
        case 42: {
          global::CHIDMessageToRemote.Types.DeviceRead subBuilder = new global::CHIDMessageToRemote.Types.DeviceRead();
          if (commandCase_ == CommandOneofCase.DeviceRead) {
            subBuilder.MergeFrom(DeviceRead);
          }
          input.ReadMessage(subBuilder);
          DeviceRead = subBuilder;
          break;
        }
        case 50: {
          global::CHIDMessageToRemote.Types.DeviceSendFeatureReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceSendFeatureReport();
          if (commandCase_ == CommandOneofCase.DeviceSendFeatureReport) {
            subBuilder.MergeFrom(DeviceSendFeatureReport);
          }
          input.ReadMessage(subBuilder);
          DeviceSendFeatureReport = subBuilder;
          break;
        }
        case 58: {
          global::CHIDMessageToRemote.Types.DeviceGetFeatureReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetFeatureReport();
          if (commandCase_ == CommandOneofCase.DeviceGetFeatureReport) {
            subBuilder.MergeFrom(DeviceGetFeatureReport);
          }
          input.ReadMessage(subBuilder);
          DeviceGetFeatureReport = subBuilder;
          break;
        }
        case 66: {
          global::CHIDMessageToRemote.Types.DeviceGetVendorString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetVendorString();
          if (commandCase_ == CommandOneofCase.DeviceGetVendorString) {
            subBuilder.MergeFrom(DeviceGetVendorString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetVendorString = subBuilder;
          break;
        }
        case 74: {
          global::CHIDMessageToRemote.Types.DeviceGetProductString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetProductString();
          if (commandCase_ == CommandOneofCase.DeviceGetProductString) {
            subBuilder.MergeFrom(DeviceGetProductString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetProductString = subBuilder;
          break;
        }
        case 82: {
          global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString subBuilder = new global::CHIDMessageToRemote.Types.DeviceGetSerialNumberString();
          if (commandCase_ == CommandOneofCase.DeviceGetSerialNumberString) {
            subBuilder.MergeFrom(DeviceGetSerialNumberString);
          }
          input.ReadMessage(subBuilder);
          DeviceGetSerialNumberString = subBuilder;
          break;
        }
        case 90: {
          global::CHIDMessageToRemote.Types.DeviceStartInputReports subBuilder = new global::CHIDMessageToRemote.Types.DeviceStartInputReports();
          if (commandCase_ == CommandOneofCase.DeviceStartInputReports) {
            subBuilder.MergeFrom(DeviceStartInputReports);
          }
          input.ReadMessage(subBuilder);
          DeviceStartInputReports = subBuilder;
          break;
        }
        case 98: {
          global::CHIDMessageToRemote.Types.DeviceRequestFullReport subBuilder = new global::CHIDMessageToRemote.Types.DeviceRequestFullReport();
          if (commandCase_ == CommandOneofCase.DeviceRequestFullReport) {
            subBuilder.MergeFrom(DeviceRequestFullReport);
          }
          input.ReadMessage(subBuilder);
          DeviceRequestFullReport = subBuilder;
          break;
        }
        case 106: {
          global::CHIDMessageToRemote.Types.DeviceDisconnect subBuilder = new global::CHIDMessageToRemote.Types.DeviceDisconnect();
          if (commandCase_ == CommandOneofCase.DeviceDisconnect) {
            subBuilder.MergeFrom(DeviceDisconnect);
          }
          input.ReadMessage(subBuilder);
          DeviceDisconnect = subBuilder;
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CHIDMessageToRemote message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class DeviceOpen : pb::IMessage<DeviceOpen>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceOpen> _parser = new pb::MessageParser<DeviceOpen>(() => new DeviceOpen());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceOpen> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceOpen() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceOpen(DeviceOpen other) : this() {
        info_ = other.info_ != null ? other.info_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceOpen Clone() {
        return new DeviceOpen(this);
      }

      /// <summary>Field number for the "info" field.</summary>
      public const int InfoFieldNumber = 1;
      private global::CHIDDeviceInfo info_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CHIDDeviceInfo Info {
        get { return info_; }
        set {
          info_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceOpen);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceOpen other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Info, other.Info)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (info_ != null) hash ^= Info.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (info_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Info);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (info_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Info);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (info_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceOpen other) {
        if (other == null) {
          return;
        }
        if (other.info_ != null) {
          if (info_ == null) {
            Info = new global::CHIDDeviceInfo();
          }
          Info.MergeFrom(other.Info);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              if (info_ == null) {
                Info = new global::CHIDDeviceInfo();
              }
              input.ReadMessage(Info);
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              if (info_ == null) {
                Info = new global::CHIDDeviceInfo();
              }
              input.ReadMessage(Info);
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceClose : pb::IMessage<DeviceClose>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceClose> _parser = new pb::MessageParser<DeviceClose>(() => new DeviceClose());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceClose> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceClose() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceClose(DeviceClose other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceClose Clone() {
        return new DeviceClose(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceClose);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceClose other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceClose other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceWrite : pb::IMessage<DeviceWrite>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceWrite> _parser = new pb::MessageParser<DeviceWrite>(() => new DeviceWrite());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceWrite> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceWrite() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceWrite(DeviceWrite other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        data_ = other.data_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceWrite Clone() {
        return new DeviceWrite(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "data" field.</summary>
      public const int DataFieldNumber = 2;
      private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

      private pb::ByteString data_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString Data {
        get { return data_ ?? DataDefaultValue; }
        set {
          data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "data" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasData {
        get { return data_ != null; }
      }
      /// <summary>Clears the value of the "data" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearData() {
        data_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceWrite);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceWrite other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (Data != other.Data) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasData) hash ^= Data.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasData) {
          output.WriteRawTag(18);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasData) {
          output.WriteRawTag(18);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasData) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceWrite other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceRead : pb::IMessage<DeviceRead>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceRead> _parser = new pb::MessageParser<DeviceRead>(() => new DeviceRead());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceRead> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRead() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRead(DeviceRead other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        length_ = other.length_;
        timeoutMs_ = other.timeoutMs_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRead Clone() {
        return new DeviceRead(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "length" field.</summary>
      public const int LengthFieldNumber = 2;
      private readonly static uint LengthDefaultValue = 0;

      private uint length_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Length {
        get { if ((_hasBits0 & 2) != 0) { return length_; } else { return LengthDefaultValue; } }
        set {
          _hasBits0 |= 2;
          length_ = value;
        }
      }
      /// <summary>Gets whether the "length" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLength {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "length" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLength() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "timeout_ms" field.</summary>
      public const int TimeoutMsFieldNumber = 3;
      private readonly static int TimeoutMsDefaultValue = 0;

      private int timeoutMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int TimeoutMs {
        get { if ((_hasBits0 & 4) != 0) { return timeoutMs_; } else { return TimeoutMsDefaultValue; } }
        set {
          _hasBits0 |= 4;
          timeoutMs_ = value;
        }
      }
      /// <summary>Gets whether the "timeout_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTimeoutMs {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "timeout_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTimeoutMs() {
        _hasBits0 &= ~4;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceRead);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceRead other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (Length != other.Length) return false;
        if (TimeoutMs != other.TimeoutMs) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasLength) hash ^= Length.GetHashCode();
        if (HasTimeoutMs) hash ^= TimeoutMs.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasLength) {
          output.WriteRawTag(16);
          output.WriteUInt32(Length);
        }
        if (HasTimeoutMs) {
          output.WriteRawTag(24);
          output.WriteInt32(TimeoutMs);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasLength) {
          output.WriteRawTag(16);
          output.WriteUInt32(Length);
        }
        if (HasTimeoutMs) {
          output.WriteRawTag(24);
          output.WriteInt32(TimeoutMs);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasLength) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
        }
        if (HasTimeoutMs) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutMs);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceRead other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        if (other.HasTimeoutMs) {
          TimeoutMs = other.TimeoutMs;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              Length = input.ReadUInt32();
              break;
            }
            case 24: {
              TimeoutMs = input.ReadInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              Length = input.ReadUInt32();
              break;
            }
            case 24: {
              TimeoutMs = input.ReadInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceSendFeatureReport : pb::IMessage<DeviceSendFeatureReport>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceSendFeatureReport> _parser = new pb::MessageParser<DeviceSendFeatureReport>(() => new DeviceSendFeatureReport());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceSendFeatureReport> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceSendFeatureReport() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceSendFeatureReport(DeviceSendFeatureReport other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        data_ = other.data_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceSendFeatureReport Clone() {
        return new DeviceSendFeatureReport(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "data" field.</summary>
      public const int DataFieldNumber = 2;
      private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

      private pb::ByteString data_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString Data {
        get { return data_ ?? DataDefaultValue; }
        set {
          data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "data" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasData {
        get { return data_ != null; }
      }
      /// <summary>Clears the value of the "data" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearData() {
        data_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceSendFeatureReport);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceSendFeatureReport other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (Data != other.Data) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasData) hash ^= Data.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasData) {
          output.WriteRawTag(18);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasData) {
          output.WriteRawTag(18);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasData) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceSendFeatureReport other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceGetFeatureReport : pb::IMessage<DeviceGetFeatureReport>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceGetFeatureReport> _parser = new pb::MessageParser<DeviceGetFeatureReport>(() => new DeviceGetFeatureReport());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceGetFeatureReport> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[5]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetFeatureReport() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetFeatureReport(DeviceGetFeatureReport other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        reportNumber_ = other.reportNumber_;
        length_ = other.length_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetFeatureReport Clone() {
        return new DeviceGetFeatureReport(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "report_number" field.</summary>
      public const int ReportNumberFieldNumber = 2;
      private readonly static pb::ByteString ReportNumberDefaultValue = pb::ByteString.Empty;

      private pb::ByteString reportNumber_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString ReportNumber {
        get { return reportNumber_ ?? ReportNumberDefaultValue; }
        set {
          reportNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "report_number" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasReportNumber {
        get { return reportNumber_ != null; }
      }
      /// <summary>Clears the value of the "report_number" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearReportNumber() {
        reportNumber_ = null;
      }

      /// <summary>Field number for the "length" field.</summary>
      public const int LengthFieldNumber = 3;
      private readonly static uint LengthDefaultValue = 0;

      private uint length_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Length {
        get { if ((_hasBits0 & 2) != 0) { return length_; } else { return LengthDefaultValue; } }
        set {
          _hasBits0 |= 2;
          length_ = value;
        }
      }
      /// <summary>Gets whether the "length" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLength {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "length" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLength() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceGetFeatureReport);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceGetFeatureReport other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (ReportNumber != other.ReportNumber) return false;
        if (Length != other.Length) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasReportNumber) hash ^= ReportNumber.GetHashCode();
        if (HasLength) hash ^= Length.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasReportNumber) {
          output.WriteRawTag(18);
          output.WriteBytes(ReportNumber);
        }
        if (HasLength) {
          output.WriteRawTag(24);
          output.WriteUInt32(Length);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasReportNumber) {
          output.WriteRawTag(18);
          output.WriteBytes(ReportNumber);
        }
        if (HasLength) {
          output.WriteRawTag(24);
          output.WriteUInt32(Length);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasReportNumber) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReportNumber);
        }
        if (HasLength) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceGetFeatureReport other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasReportNumber) {
          ReportNumber = other.ReportNumber;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              ReportNumber = input.ReadBytes();
              break;
            }
            case 24: {
              Length = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 18: {
              ReportNumber = input.ReadBytes();
              break;
            }
            case 24: {
              Length = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceGetVendorString : pb::IMessage<DeviceGetVendorString>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceGetVendorString> _parser = new pb::MessageParser<DeviceGetVendorString>(() => new DeviceGetVendorString());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceGetVendorString> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[6]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetVendorString() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetVendorString(DeviceGetVendorString other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetVendorString Clone() {
        return new DeviceGetVendorString(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceGetVendorString);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceGetVendorString other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceGetVendorString other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceGetProductString : pb::IMessage<DeviceGetProductString>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceGetProductString> _parser = new pb::MessageParser<DeviceGetProductString>(() => new DeviceGetProductString());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceGetProductString> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[7]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetProductString() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetProductString(DeviceGetProductString other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetProductString Clone() {
        return new DeviceGetProductString(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceGetProductString);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceGetProductString other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceGetProductString other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceGetSerialNumberString : pb::IMessage<DeviceGetSerialNumberString>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceGetSerialNumberString> _parser = new pb::MessageParser<DeviceGetSerialNumberString>(() => new DeviceGetSerialNumberString());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceGetSerialNumberString> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[8]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetSerialNumberString() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetSerialNumberString(DeviceGetSerialNumberString other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceGetSerialNumberString Clone() {
        return new DeviceGetSerialNumberString(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceGetSerialNumberString);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceGetSerialNumberString other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceGetSerialNumberString other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceStartInputReports : pb::IMessage<DeviceStartInputReports>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceStartInputReports> _parser = new pb::MessageParser<DeviceStartInputReports>(() => new DeviceStartInputReports());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceStartInputReports> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[9]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceStartInputReports() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceStartInputReports(DeviceStartInputReports other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        length_ = other.length_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceStartInputReports Clone() {
        return new DeviceStartInputReports(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "length" field.</summary>
      public const int LengthFieldNumber = 2;
      private readonly static uint LengthDefaultValue = 0;

      private uint length_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Length {
        get { if ((_hasBits0 & 2) != 0) { return length_; } else { return LengthDefaultValue; } }
        set {
          _hasBits0 |= 2;
          length_ = value;
        }
      }
      /// <summary>Gets whether the "length" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLength {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "length" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLength() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceStartInputReports);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceStartInputReports other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (Length != other.Length) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasLength) hash ^= Length.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasLength) {
          output.WriteRawTag(16);
          output.WriteUInt32(Length);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasLength) {
          output.WriteRawTag(16);
          output.WriteUInt32(Length);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasLength) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceStartInputReports other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              Length = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              Length = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceRequestFullReport : pb::IMessage<DeviceRequestFullReport>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceRequestFullReport> _parser = new pb::MessageParser<DeviceRequestFullReport>(() => new DeviceRequestFullReport());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceRequestFullReport> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[10]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRequestFullReport() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRequestFullReport(DeviceRequestFullReport other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceRequestFullReport Clone() {
        return new DeviceRequestFullReport(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceRequestFullReport);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceRequestFullReport other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceRequestFullReport other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceDisconnect : pb::IMessage<DeviceDisconnect>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceDisconnect> _parser = new pb::MessageParser<DeviceDisconnect>(() => new DeviceDisconnect());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceDisconnect> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageToRemote.Descriptor.NestedTypes[11]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceDisconnect() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceDisconnect(DeviceDisconnect other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        disconnectMethod_ = other.disconnectMethod_;
        data_ = other.data_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceDisconnect Clone() {
        return new DeviceDisconnect(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "disconnectMethod" field.</summary>
      public const int DisconnectMethodFieldNumber = 2;
      private readonly static global::EHIDDeviceDisconnectMethod DisconnectMethodDefaultValue = global::EHIDDeviceDisconnectMethod.KEdeviceDisconnectMethodUnknown;

      private global::EHIDDeviceDisconnectMethod disconnectMethod_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::EHIDDeviceDisconnectMethod DisconnectMethod {
        get { if ((_hasBits0 & 2) != 0) { return disconnectMethod_; } else { return DisconnectMethodDefaultValue; } }
        set {
          _hasBits0 |= 2;
          disconnectMethod_ = value;
        }
      }
      /// <summary>Gets whether the "disconnectMethod" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDisconnectMethod {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "disconnectMethod" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDisconnectMethod() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "data" field.</summary>
      public const int DataFieldNumber = 3;
      private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

      private pb::ByteString data_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString Data {
        get { return data_ ?? DataDefaultValue; }
        set {
          data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "data" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasData {
        get { return data_ != null; }
      }
      /// <summary>Clears the value of the "data" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearData() {
        data_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceDisconnect);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceDisconnect other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        if (DisconnectMethod != other.DisconnectMethod) return false;
        if (Data != other.Data) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (HasDisconnectMethod) hash ^= DisconnectMethod.GetHashCode();
        if (HasData) hash ^= Data.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasDisconnectMethod) {
          output.WriteRawTag(16);
          output.WriteEnum((int) DisconnectMethod);
        }
        if (HasData) {
          output.WriteRawTag(26);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (HasDisconnectMethod) {
          output.WriteRawTag(16);
          output.WriteEnum((int) DisconnectMethod);
        }
        if (HasData) {
          output.WriteRawTag(26);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (HasDisconnectMethod) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisconnectMethod);
        }
        if (HasData) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceDisconnect other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        if (other.HasDisconnectMethod) {
          DisconnectMethod = other.DisconnectMethod;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              DisconnectMethod = (global::EHIDDeviceDisconnectMethod) input.ReadEnum();
              break;
            }
            case 26: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
            case 16: {
              DisconnectMethod = (global::EHIDDeviceDisconnectMethod) input.ReadEnum();
              break;
            }
            case 26: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CHIDMessageFromRemote : pb::IMessage<CHIDMessageFromRemote>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CHIDMessageFromRemote> _parser = new pb::MessageParser<CHIDMessageFromRemote>(() => new CHIDMessageFromRemote());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CHIDMessageFromRemote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesHiddevicesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageFromRemote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageFromRemote(CHIDMessageFromRemote other) : this() {
    switch (other.CommandCase) {
      case CommandOneofCase.UpdateDeviceList:
        UpdateDeviceList = other.UpdateDeviceList.Clone();
        break;
      case CommandOneofCase.Response:
        Response = other.Response.Clone();
        break;
      case CommandOneofCase.Reports:
        Reports = other.Reports.Clone();
        break;
      case CommandOneofCase.CloseDevice:
        CloseDevice = other.CloseDevice.Clone();
        break;
      case CommandOneofCase.CloseAllDevices:
        CloseAllDevices = other.CloseAllDevices.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CHIDMessageFromRemote Clone() {
    return new CHIDMessageFromRemote(this);
  }

  /// <summary>Field number for the "update_device_list" field.</summary>
  public const int UpdateDeviceListFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageFromRemote.Types.UpdateDeviceList UpdateDeviceList {
    get { return commandCase_ == CommandOneofCase.UpdateDeviceList ? (global::CHIDMessageFromRemote.Types.UpdateDeviceList) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateDeviceList;
    }
  }

  /// <summary>Field number for the "response" field.</summary>
  public const int ResponseFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageFromRemote.Types.RequestResponse Response {
    get { return commandCase_ == CommandOneofCase.Response ? (global::CHIDMessageFromRemote.Types.RequestResponse) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Response;
    }
  }

  /// <summary>Field number for the "reports" field.</summary>
  public const int ReportsFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageFromRemote.Types.DeviceInputReports Reports {
    get { return commandCase_ == CommandOneofCase.Reports ? (global::CHIDMessageFromRemote.Types.DeviceInputReports) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Reports;
    }
  }

  /// <summary>Field number for the "close_device" field.</summary>
  public const int CloseDeviceFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageFromRemote.Types.CloseDevice CloseDevice {
    get { return commandCase_ == CommandOneofCase.CloseDevice ? (global::CHIDMessageFromRemote.Types.CloseDevice) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CloseDevice;
    }
  }

  /// <summary>Field number for the "close_all_devices" field.</summary>
  public const int CloseAllDevicesFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CHIDMessageFromRemote.Types.CloseAllDevices CloseAllDevices {
    get { return commandCase_ == CommandOneofCase.CloseAllDevices ? (global::CHIDMessageFromRemote.Types.CloseAllDevices) command_ : null; }
    set {
      command_ = value;
      commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CloseAllDevices;
    }
  }

  private object command_;
  /// <summary>Enum of possible cases for the "command" oneof.</summary>
  public enum CommandOneofCase {
    None = 0,
    UpdateDeviceList = 1,
    Response = 2,
    Reports = 3,
    CloseDevice = 4,
    CloseAllDevices = 5,
  }
  private CommandOneofCase commandCase_ = CommandOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CommandOneofCase CommandCase {
    get { return commandCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommand() {
    commandCase_ = CommandOneofCase.None;
    command_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CHIDMessageFromRemote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CHIDMessageFromRemote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(UpdateDeviceList, other.UpdateDeviceList)) return false;
    if (!object.Equals(Response, other.Response)) return false;
    if (!object.Equals(Reports, other.Reports)) return false;
    if (!object.Equals(CloseDevice, other.CloseDevice)) return false;
    if (!object.Equals(CloseAllDevices, other.CloseAllDevices)) return false;
    if (CommandCase != other.CommandCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (commandCase_ == CommandOneofCase.UpdateDeviceList) hash ^= UpdateDeviceList.GetHashCode();
    if (commandCase_ == CommandOneofCase.Response) hash ^= Response.GetHashCode();
    if (commandCase_ == CommandOneofCase.Reports) hash ^= Reports.GetHashCode();
    if (commandCase_ == CommandOneofCase.CloseDevice) hash ^= CloseDevice.GetHashCode();
    if (commandCase_ == CommandOneofCase.CloseAllDevices) hash ^= CloseAllDevices.GetHashCode();
    hash ^= (int) commandCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (commandCase_ == CommandOneofCase.UpdateDeviceList) {
      output.WriteRawTag(10);
      output.WriteMessage(UpdateDeviceList);
    }
    if (commandCase_ == CommandOneofCase.Response) {
      output.WriteRawTag(18);
      output.WriteMessage(Response);
    }
    if (commandCase_ == CommandOneofCase.Reports) {
      output.WriteRawTag(26);
      output.WriteMessage(Reports);
    }
    if (commandCase_ == CommandOneofCase.CloseDevice) {
      output.WriteRawTag(34);
      output.WriteMessage(CloseDevice);
    }
    if (commandCase_ == CommandOneofCase.CloseAllDevices) {
      output.WriteRawTag(42);
      output.WriteMessage(CloseAllDevices);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (commandCase_ == CommandOneofCase.UpdateDeviceList) {
      output.WriteRawTag(10);
      output.WriteMessage(UpdateDeviceList);
    }
    if (commandCase_ == CommandOneofCase.Response) {
      output.WriteRawTag(18);
      output.WriteMessage(Response);
    }
    if (commandCase_ == CommandOneofCase.Reports) {
      output.WriteRawTag(26);
      output.WriteMessage(Reports);
    }
    if (commandCase_ == CommandOneofCase.CloseDevice) {
      output.WriteRawTag(34);
      output.WriteMessage(CloseDevice);
    }
    if (commandCase_ == CommandOneofCase.CloseAllDevices) {
      output.WriteRawTag(42);
      output.WriteMessage(CloseAllDevices);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (commandCase_ == CommandOneofCase.UpdateDeviceList) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateDeviceList);
    }
    if (commandCase_ == CommandOneofCase.Response) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
    }
    if (commandCase_ == CommandOneofCase.Reports) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reports);
    }
    if (commandCase_ == CommandOneofCase.CloseDevice) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseDevice);
    }
    if (commandCase_ == CommandOneofCase.CloseAllDevices) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseAllDevices);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CHIDMessageFromRemote other) {
    if (other == null) {
      return;
    }
    switch (other.CommandCase) {
      case CommandOneofCase.UpdateDeviceList:
        if (UpdateDeviceList == null) {
          UpdateDeviceList = new global::CHIDMessageFromRemote.Types.UpdateDeviceList();
        }
        UpdateDeviceList.MergeFrom(other.UpdateDeviceList);
        break;
      case CommandOneofCase.Response:
        if (Response == null) {
          Response = new global::CHIDMessageFromRemote.Types.RequestResponse();
        }
        Response.MergeFrom(other.Response);
        break;
      case CommandOneofCase.Reports:
        if (Reports == null) {
          Reports = new global::CHIDMessageFromRemote.Types.DeviceInputReports();
        }
        Reports.MergeFrom(other.Reports);
        break;
      case CommandOneofCase.CloseDevice:
        if (CloseDevice == null) {
          CloseDevice = new global::CHIDMessageFromRemote.Types.CloseDevice();
        }
        CloseDevice.MergeFrom(other.CloseDevice);
        break;
      case CommandOneofCase.CloseAllDevices:
        if (CloseAllDevices == null) {
          CloseAllDevices = new global::CHIDMessageFromRemote.Types.CloseAllDevices();
        }
        CloseAllDevices.MergeFrom(other.CloseAllDevices);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::CHIDMessageFromRemote.Types.UpdateDeviceList subBuilder = new global::CHIDMessageFromRemote.Types.UpdateDeviceList();
          if (commandCase_ == CommandOneofCase.UpdateDeviceList) {
            subBuilder.MergeFrom(UpdateDeviceList);
          }
          input.ReadMessage(subBuilder);
          UpdateDeviceList = subBuilder;
          break;
        }
        case 18: {
          global::CHIDMessageFromRemote.Types.RequestResponse subBuilder = new global::CHIDMessageFromRemote.Types.RequestResponse();
          if (commandCase_ == CommandOneofCase.Response) {
            subBuilder.MergeFrom(Response);
          }
          input.ReadMessage(subBuilder);
          Response = subBuilder;
          break;
        }
        case 26: {
          global::CHIDMessageFromRemote.Types.DeviceInputReports subBuilder = new global::CHIDMessageFromRemote.Types.DeviceInputReports();
          if (commandCase_ == CommandOneofCase.Reports) {
            subBuilder.MergeFrom(Reports);
          }
          input.ReadMessage(subBuilder);
          Reports = subBuilder;
          break;
        }
        case 34: {
          global::CHIDMessageFromRemote.Types.CloseDevice subBuilder = new global::CHIDMessageFromRemote.Types.CloseDevice();
          if (commandCase_ == CommandOneofCase.CloseDevice) {
            subBuilder.MergeFrom(CloseDevice);
          }
          input.ReadMessage(subBuilder);
          CloseDevice = subBuilder;
          break;
        }
        case 42: {
          global::CHIDMessageFromRemote.Types.CloseAllDevices subBuilder = new global::CHIDMessageFromRemote.Types.CloseAllDevices();
          if (commandCase_ == CommandOneofCase.CloseAllDevices) {
            subBuilder.MergeFrom(CloseAllDevices);
          }
          input.ReadMessage(subBuilder);
          CloseAllDevices = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          global::CHIDMessageFromRemote.Types.UpdateDeviceList subBuilder = new global::CHIDMessageFromRemote.Types.UpdateDeviceList();
          if (commandCase_ == CommandOneofCase.UpdateDeviceList) {
            subBuilder.MergeFrom(UpdateDeviceList);
          }
          input.ReadMessage(subBuilder);
          UpdateDeviceList = subBuilder;
          break;
        }
        case 18: {
          global::CHIDMessageFromRemote.Types.RequestResponse subBuilder = new global::CHIDMessageFromRemote.Types.RequestResponse();
          if (commandCase_ == CommandOneofCase.Response) {
            subBuilder.MergeFrom(Response);
          }
          input.ReadMessage(subBuilder);
          Response = subBuilder;
          break;
        }
        case 26: {
          global::CHIDMessageFromRemote.Types.DeviceInputReports subBuilder = new global::CHIDMessageFromRemote.Types.DeviceInputReports();
          if (commandCase_ == CommandOneofCase.Reports) {
            subBuilder.MergeFrom(Reports);
          }
          input.ReadMessage(subBuilder);
          Reports = subBuilder;
          break;
        }
        case 34: {
          global::CHIDMessageFromRemote.Types.CloseDevice subBuilder = new global::CHIDMessageFromRemote.Types.CloseDevice();
          if (commandCase_ == CommandOneofCase.CloseDevice) {
            subBuilder.MergeFrom(CloseDevice);
          }
          input.ReadMessage(subBuilder);
          CloseDevice = subBuilder;
          break;
        }
        case 42: {
          global::CHIDMessageFromRemote.Types.CloseAllDevices subBuilder = new global::CHIDMessageFromRemote.Types.CloseAllDevices();
          if (commandCase_ == CommandOneofCase.CloseAllDevices) {
            subBuilder.MergeFrom(CloseAllDevices);
          }
          input.ReadMessage(subBuilder);
          CloseAllDevices = subBuilder;
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CHIDMessageFromRemote message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class UpdateDeviceList : pb::IMessage<UpdateDeviceList>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<UpdateDeviceList> _parser = new pb::MessageParser<UpdateDeviceList>(() => new UpdateDeviceList());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<UpdateDeviceList> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageFromRemote.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public UpdateDeviceList() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public UpdateDeviceList(UpdateDeviceList other) : this() {
        devices_ = other.devices_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public UpdateDeviceList Clone() {
        return new UpdateDeviceList(this);
      }

      /// <summary>Field number for the "devices" field.</summary>
      public const int DevicesFieldNumber = 1;
      private static readonly pb::FieldCodec<global::CHIDDeviceInfo> _repeated_devices_codec
          = pb::FieldCodec.ForMessage(10, global::CHIDDeviceInfo.Parser);
      private readonly pbc::RepeatedField<global::CHIDDeviceInfo> devices_ = new pbc::RepeatedField<global::CHIDDeviceInfo>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pbc::RepeatedField<global::CHIDDeviceInfo> Devices {
        get { return devices_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as UpdateDeviceList);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(UpdateDeviceList other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!devices_.Equals(other.devices_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= devices_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        devices_.WriteTo(output, _repeated_devices_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        devices_.WriteTo(ref output, _repeated_devices_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        size += devices_.CalculateSize(_repeated_devices_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(UpdateDeviceList other) {
        if (other == null) {
          return;
        }
        devices_.Add(other.devices_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              devices_.AddEntriesFrom(input, _repeated_devices_codec);
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              devices_.AddEntriesFrom(ref input, _repeated_devices_codec);
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class RequestResponse : pb::IMessage<RequestResponse>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<RequestResponse> _parser = new pb::MessageParser<RequestResponse>(() => new RequestResponse());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<RequestResponse> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageFromRemote.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RequestResponse() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RequestResponse(RequestResponse other) : this() {
        _hasBits0 = other._hasBits0;
        requestId_ = other.requestId_;
        result_ = other.result_;
        data_ = other.data_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RequestResponse Clone() {
        return new RequestResponse(this);
      }

      /// <summary>Field number for the "request_id" field.</summary>
      public const int RequestIdFieldNumber = 1;
      private readonly static uint RequestIdDefaultValue = 0;

      private uint requestId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint RequestId {
        get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          requestId_ = value;
        }
      }
      /// <summary>Gets whether the "request_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasRequestId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "request_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearRequestId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "result" field.</summary>
      public const int ResultFieldNumber = 2;
      private readonly static int ResultDefaultValue = 0;

      private int result_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Result {
        get { if ((_hasBits0 & 2) != 0) { return result_; } else { return ResultDefaultValue; } }
        set {
          _hasBits0 |= 2;
          result_ = value;
        }
      }
      /// <summary>Gets whether the "result" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasResult {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "result" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearResult() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "data" field.</summary>
      public const int DataFieldNumber = 3;
      private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

      private pb::ByteString data_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString Data {
        get { return data_ ?? DataDefaultValue; }
        set {
          data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "data" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasData {
        get { return data_ != null; }
      }
      /// <summary>Clears the value of the "data" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearData() {
        data_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as RequestResponse);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(RequestResponse other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (RequestId != other.RequestId) return false;
        if (Result != other.Result) return false;
        if (Data != other.Data) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasRequestId) hash ^= RequestId.GetHashCode();
        if (HasResult) hash ^= Result.GetHashCode();
        if (HasData) hash ^= Data.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasRequestId) {
          output.WriteRawTag(8);
          output.WriteUInt32(RequestId);
        }
        if (HasResult) {
          output.WriteRawTag(16);
          output.WriteInt32(Result);
        }
        if (HasData) {
          output.WriteRawTag(26);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasRequestId) {
          output.WriteRawTag(8);
          output.WriteUInt32(RequestId);
        }
        if (HasResult) {
          output.WriteRawTag(16);
          output.WriteInt32(Result);
        }
        if (HasData) {
          output.WriteRawTag(26);
          output.WriteBytes(Data);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasRequestId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
        }
        if (HasResult) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        if (HasData) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(RequestResponse other) {
        if (other == null) {
          return;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              RequestId = input.ReadUInt32();
              break;
            }
            case 16: {
              Result = input.ReadInt32();
              break;
            }
            case 26: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              RequestId = input.ReadUInt32();
              break;
            }
            case 16: {
              Result = input.ReadInt32();
              break;
            }
            case 26: {
              Data = input.ReadBytes();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class DeviceInputReports : pb::IMessage<DeviceInputReports>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceInputReports> _parser = new pb::MessageParser<DeviceInputReports>(() => new DeviceInputReports());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceInputReports> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageFromRemote.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceInputReports() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceInputReports(DeviceInputReports other) : this() {
        deviceReports_ = other.deviceReports_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceInputReports Clone() {
        return new DeviceInputReports(this);
      }

      /// <summary>Field number for the "device_reports" field.</summary>
      public const int DeviceReportsFieldNumber = 1;
      private static readonly pb::FieldCodec<global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport> _repeated_deviceReports_codec
          = pb::FieldCodec.ForMessage(10, global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport.Parser);
      private readonly pbc::RepeatedField<global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport> deviceReports_ = new pbc::RepeatedField<global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pbc::RepeatedField<global::CHIDMessageFromRemote.Types.DeviceInputReports.Types.DeviceInputReport> DeviceReports {
        get { return deviceReports_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceInputReports);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceInputReports other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!deviceReports_.Equals(other.deviceReports_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= deviceReports_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        deviceReports_.WriteTo(output, _repeated_deviceReports_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        deviceReports_.WriteTo(ref output, _repeated_deviceReports_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        size += deviceReports_.CalculateSize(_repeated_deviceReports_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceInputReports other) {
        if (other == null) {
          return;
        }
        deviceReports_.Add(other.deviceReports_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              deviceReports_.AddEntriesFrom(input, _repeated_deviceReports_codec);
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              deviceReports_.AddEntriesFrom(ref input, _repeated_deviceReports_codec);
              break;
            }
          }
        }
      }
      #endif

      #region Nested types
      /// <summary>Container for nested types declared in the DeviceInputReports message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static partial class Types {
        public sealed partial class DeviceInputReport : pb::IMessage<DeviceInputReport>
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            , pb::IBufferMessage
        #endif
        {
          private static readonly pb::MessageParser<DeviceInputReport> _parser = new pb::MessageParser<DeviceInputReport>(() => new DeviceInputReport());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pb::MessageParser<DeviceInputReport> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CHIDMessageFromRemote.Types.DeviceInputReports.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public DeviceInputReport() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public DeviceInputReport(DeviceInputReport other) : this() {
            _hasBits0 = other._hasBits0;
            device_ = other.device_;
            reports_ = other.reports_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public DeviceInputReport Clone() {
            return new DeviceInputReport(this);
          }

          /// <summary>Field number for the "device" field.</summary>
          public const int DeviceFieldNumber = 1;
          private readonly static uint DeviceDefaultValue = 0;

          private uint device_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public uint Device {
            get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
            set {
              _hasBits0 |= 1;
              device_ = value;
            }
          }
          /// <summary>Gets whether the "device" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasDevice {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "device" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearDevice() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "reports" field.</summary>
          public const int ReportsFieldNumber = 2;
          private static readonly pb::FieldCodec<global::CHIDDeviceInputReport> _repeated_reports_codec
              = pb::FieldCodec.ForMessage(18, global::CHIDDeviceInputReport.Parser);
          private readonly pbc::RepeatedField<global::CHIDDeviceInputReport> reports_ = new pbc::RepeatedField<global::CHIDDeviceInputReport>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public pbc::RepeatedField<global::CHIDDeviceInputReport> Reports {
            get { return reports_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override bool Equals(object other) {
            return Equals(other as DeviceInputReport);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool Equals(DeviceInputReport other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Device != other.Device) return false;
            if(!reports_.Equals(other.reports_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override int GetHashCode() {
            int hash = 1;
            if (HasDevice) hash ^= Device.GetHashCode();
            hash ^= reports_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void WriteTo(pb::CodedOutputStream output) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
          #else
            if (HasDevice) {
              output.WriteRawTag(8);
              output.WriteUInt32(Device);
            }
            reports_.WriteTo(output, _repeated_reports_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
            if (HasDevice) {
              output.WriteRawTag(8);
              output.WriteUInt32(Device);
            }
            reports_.WriteTo(ref output, _repeated_reports_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(ref output);
            }
          }
          #endif

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public int CalculateSize() {
            int size = 0;
            if (HasDevice) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
            }
            size += reports_.CalculateSize(_repeated_reports_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(DeviceInputReport other) {
            if (other == null) {
              return;
            }
            if (other.HasDevice) {
              Device = other.Device;
            }
            reports_.Add(other.reports_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(pb::CodedInputStream input) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
          #else
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  Device = input.ReadUInt32();
                  break;
                }
                case 18: {
                  reports_.AddEntriesFrom(input, _repeated_reports_codec);
                  break;
                }
              }
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                  break;
                case 8: {
                  Device = input.ReadUInt32();
                  break;
                }
                case 18: {
                  reports_.AddEntriesFrom(ref input, _repeated_reports_codec);
                  break;
                }
              }
            }
          }
          #endif

        }

      }
      #endregion

    }

    public sealed partial class CloseDevice : pb::IMessage<CloseDevice>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<CloseDevice> _parser = new pb::MessageParser<CloseDevice>(() => new CloseDevice());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<CloseDevice> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageFromRemote.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseDevice() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseDevice(CloseDevice other) : this() {
        _hasBits0 = other._hasBits0;
        device_ = other.device_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseDevice Clone() {
        return new CloseDevice(this);
      }

      /// <summary>Field number for the "device" field.</summary>
      public const int DeviceFieldNumber = 1;
      private readonly static uint DeviceDefaultValue = 0;

      private uint device_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Device {
        get { if ((_hasBits0 & 1) != 0) { return device_; } else { return DeviceDefaultValue; } }
        set {
          _hasBits0 |= 1;
          device_ = value;
        }
      }
      /// <summary>Gets whether the "device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDevice {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDevice() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as CloseDevice);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(CloseDevice other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Device != other.Device) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDevice) hash ^= Device.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDevice) {
          output.WriteRawTag(8);
          output.WriteUInt32(Device);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDevice) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Device);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(CloseDevice other) {
        if (other == null) {
          return;
        }
        if (other.HasDevice) {
          Device = other.Device;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Device = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class CloseAllDevices : pb::IMessage<CloseAllDevices>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<CloseAllDevices> _parser = new pb::MessageParser<CloseAllDevices>(() => new CloseAllDevices());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<CloseAllDevices> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CHIDMessageFromRemote.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseAllDevices() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseAllDevices(CloseAllDevices other) : this() {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CloseAllDevices Clone() {
        return new CloseAllDevices(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as CloseAllDevices);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(CloseAllDevices other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(CloseAllDevices other) {
        if (other == null) {
          return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
          }
        }
      }
      #endif

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
