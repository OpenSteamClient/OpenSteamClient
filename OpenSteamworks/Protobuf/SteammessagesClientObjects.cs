// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_client_objects.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_client_objects.proto</summary>
public static partial class SteammessagesClientObjectsReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_client_objects.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesClientObjectsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiJzdGVhbW1lc3NhZ2VzX2NsaWVudF9vYmplY3RzLnByb3RvGgtlbnVtcy5w",
          "cm90byLLAgowU3RlYW1NZXNzYWdlc0NsaWVudElDbGllbnRGb3JjZWRFbnVt",
          "RGVwZW5kZW5jaWVzEj8KAWEYASABKA4yFS5FQmx1ZXRvb3RoRGV2aWNlVHlw",
          "ZToda19CbHVldG9vdGhEZXZpY2VUeXBlX0ludmFsaWQSSAoBYhgCIAEoDjIZ",
          "LkVTdG9yYWdlQmxvY2tDb250ZW50VHlwZToia19FU3RvcmFnZUJsb2NrQ29u",
          "dGVudFR5cGVfSW52YWxpZBJOCgFjGAMgASgOMhwuRVN0b3JhZ2VCbG9ja0Zp",
          "bGVTeXN0ZW1UeXBlOiVrX0VTdG9yYWdlQmxvY2tGaWxlU3lzdGVtVHlwZV9J",
          "bnZhbGlkEjwKAWQYBCABKA4yEy5FU0RDYXJkRm9ybWF0U3RhZ2U6HGtfRVNE",
          "Q2FyZEZvcm1hdFN0YWdlX0ludmFsaWQiPQobQ01zZ05ldHdvcmtEZXZpY2VJ",
          "UDRBZGRyZXNzEg0KAmlwGAEgASgFOgEwEg8KB25ldG1hc2sYAiABKAUivwEK",
          "GkNNc2dOZXR3b3JrRGV2aWNlSVA0Q29uZmlnEi8KCWFkZHJlc3NlcxgBIAMo",
          "CzIcLkNNc2dOZXR3b3JrRGV2aWNlSVA0QWRkcmVzcxIOCgZkbnNfaXAYAiAD",
          "KAUSEgoKZ2F0ZXdheV9pcBgDIAEoBRIXCg9pc19kaGNwX2VuYWJsZWQYBCAB",
          "KAgSGAoQaXNfZGVmYXVsdF9yb3V0ZRgFIAEoCBIZCgppc19lbmFibGVkGAYg",
          "ASgIOgVmYWxzZSIpChtDTXNnTmV0d29ya0RldmljZUlQNkFkZHJlc3MSCgoC",
          "aXAYASABKAkivwEKGkNNc2dOZXR3b3JrRGV2aWNlSVA2Q29uZmlnEi8KCWFk",
          "ZHJlc3NlcxgBIAMoCzIcLkNNc2dOZXR3b3JrRGV2aWNlSVA2QWRkcmVzcxIO",
          "CgZkbnNfaXAYAiADKAkSEgoKZ2F0ZXdheV9pcBgDIAEoCRIXCg9pc19kaGNw",
          "X2VuYWJsZWQYBCABKAgSGAoQaXNfZGVmYXVsdF9yb3V0ZRgFIAEoCBIZCgpp",
          "c19lbmFibGVkGAYgASgIOgVmYWxzZSKXBgoWQ01zZ05ldHdvcmtEZXZpY2Vz",
          "RGF0YRIvCgdkZXZpY2VzGAEgAygLMh4uQ01zZ05ldHdvcmtEZXZpY2VzRGF0",
          "YS5EZXZpY2USFwoPaXNfd2lmaV9lbmFibGVkGAIgASgIEiAKGGlzX3dpZmlf",
          "c2Nhbm5pbmdfZW5hYmxlZBgDIAEoCBqQBQoGRGV2aWNlEg0KAmlkGAEgASgN",
          "OgEwEg0KBWV0eXBlGAIgASgFEg4KBmVzdGF0ZRgDIAEoBRILCgNtYWMYBCAB",
          "KAkSDgoGdmVuZG9yGAUgASgJEg8KB3Byb2R1Y3QYBiABKAkSKAoDaXA0GAcg",
          "ASgLMhsuQ01zZ05ldHdvcmtEZXZpY2VJUDRDb25maWcSKAoDaXA2GAggASgL",
          "MhsuQ01zZ05ldHdvcmtEZXZpY2VJUDZDb25maWcSMwoFd2lyZWQYCSABKAsy",
          "JC5DTXNnTmV0d29ya0RldmljZXNEYXRhLkRldmljZS5XaXJlZBI5Cgh3aXJl",
          "bGVzcxgKIAEoCzInLkNNc2dOZXR3b3JrRGV2aWNlc0RhdGEuRGV2aWNlLldp",
          "cmVsZXNzGlMKBVdpcmVkEh8KEGlzX2NhYmxlX3ByZXNlbnQYASABKAg6BWZh",
          "bHNlEhIKCnNwZWVkX21iaXQYAiABKA0SFQoNZnJpZW5kbHlfbmFtZRgDIAEo",
          "CRqQAgoIV2lyZWxlc3MSNwoDYXBzGAEgAygLMiouQ01zZ05ldHdvcmtEZXZp",
          "Y2VzRGF0YS5EZXZpY2UuV2lyZWxlc3MuQVASGwoTZXNlY3VyaXR5X3N1cHBv",
          "cnRlZBgCIAEoBRqtAQoCQVASDQoCaWQYASABKA06ATASEQoJZXN0cmVuZ3Ro",
          "GAIgASgFEgwKBHNzaWQYAyABKAkSEQoJaXNfYWN0aXZlGAQgASgIEhYKDmlz",
          "X2F1dG9jb25uZWN0GAUgASgIEhEKCWVzZWN1cml0eRgGIAEoBRIRCgl1c2Vy",
          "X25hbWUYByABKAkSEAoIcGFzc3dvcmQYCCABKAkSFAoMc3RyZW5ndGhfcmF3",
          "GAkgASgFIrUDChhDTXNnTmV0d29ya0RldmljZUNvbm5lY3QSFAoJZGV2aWNl",
          "X2lkGAEgASgNOgEwEjoKC2NyZWRlbnRpYWxzGAQgASgLMiUuQ01zZ05ldHdv",
          "cmtEZXZpY2VDb25uZWN0LkNyZWRlbnRpYWxzEigKA2lwNBgFIAEoCzIbLkNN",
          "c2dOZXR3b3JrRGV2aWNlSVA0Q29uZmlnEigKA2lwNhgGIAEoCzIbLkNNc2dO",
          "ZXR3b3JrRGV2aWNlSVA2Q29uZmlnEjUKCGFwX2tub3duGAIgASgLMiEuQ01z",
          "Z05ldHdvcmtEZXZpY2VDb25uZWN0Lktub3duQVBIABI3CglhcF9jdXN0b20Y",
          "AyABKAsyIi5DTXNnTmV0d29ya0RldmljZUNvbm5lY3QuQ3VzdG9tQVBIABoY",
          "CgdLbm93bkFQEg0KBWFwX2lkGAEgASgNGisKCEN1c3RvbUFQEgwKBHNzaWQY",
          "ASABKAkSEQoJZXNlY3VyaXR5GAIgASgFGjEKC0NyZWRlbnRpYWxzEhAKCHVz",
          "ZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJQgkKB2FwX2luZm8inwYK",
          "FkNNc2dTdG9yYWdlRGV2aWNlc0RhdGESLQoGZHJpdmVzGAEgAygLMh0uQ01z",
          "Z1N0b3JhZ2VEZXZpY2VzRGF0YS5Ecml2ZRI6Cg1ibG9ja19kZXZpY2VzGAIg",
          "AygLMiMuQ01zZ1N0b3JhZ2VEZXZpY2VzRGF0YS5CbG9ja0RldmljZRIcChRp",
          "c191bm1vdW50X3N1cHBvcnRlZBgDIAEoCBIZChFpc190cmltX3N1cHBvcnRl",
          "ZBgEIAEoCBIXCg9pc190cmltX3J1bm5pbmcYBSABKAgavgEKBURyaXZlEg0K",
          "AmlkGAEgASgNOgEwEg0KBW1vZGVsGAIgASgJEg4KBnZlbmRvchgDIAEoCRIO",
          "CgZzZXJpYWwYBCABKAkSFAoMaXNfZWplY3RhYmxlGAUgASgIEhIKCnNpemVf",
          "Ynl0ZXMYBiABKAQSTQoKbWVkaWFfdHlwZRgHIAEoDjIXLkVTdG9yYWdlRHJp",
          "dmVNZWRpYVR5cGU6IGtfRVN0b3JhZ2VEcml2ZU1lZGlhVHlwZV9JbnZhbGlk",
          "GoYDCgtCbG9ja0RldmljZRINCgJpZBgBIAEoDToBMBITCghkcml2ZV9pZBgC",
          "IAEoDToBMBIMCgRwYXRoGAMgASgJEhUKDWZyaWVuZGx5X3BhdGgYBCABKAkS",
          "DQoFbGFiZWwYBSABKAkSEgoKc2l6ZV9ieXRlcxgGIAEoBBIWCg5pc19mb3Jt",
          "YXR0YWJsZRgHIAEoCBIUCgxpc19yZWFkX29ubHkYCCABKAgSFgoOaXNfcm9v",
          "dF9kZXZpY2UYCSABKAgSUwoMY29udGVudF90eXBlGAogASgOMhkuRVN0b3Jh",
          "Z2VCbG9ja0NvbnRlbnRUeXBlOiJrX0VTdG9yYWdlQmxvY2tDb250ZW50VHlw",
          "ZV9JbnZhbGlkElwKD2ZpbGVzeXN0ZW1fdHlwZRgLIAEoDjIcLkVTdG9yYWdl",
          "QmxvY2tGaWxlU3lzdGVtVHlwZTola19FU3RvcmFnZUJsb2NrRmlsZVN5c3Rl",
          "bVR5cGVfSW52YWxpZBISCgptb3VudF9wYXRoGAwgASgJIrkBCh1DQ2xvdWRf",
          "UGVuZGluZ1JlbW90ZU9wZXJhdGlvbhJUCglvcGVyYXRpb24YASABKA4yHS5F",
          "Q2xvdWRQZW5kaW5nUmVtb3RlT3BlcmF0aW9uOiJrX0VDbG91ZFBlbmRpbmdS",
          "ZW1vdGVPcGVyYXRpb25Ob25lEhQKDG1hY2hpbmVfbmFtZRgCIAEoCRIRCglj",
          "bGllbnRfaWQYAyABKAQSGQoRdGltZV9sYXN0X3VwZGF0ZWQYBCABKA0iVgog",
          "Q01zZ0Nsb3VkUGVuZGluZ1JlbW90ZU9wZXJhdGlvbnMSMgoKb3BlcmF0aW9u",
          "cxgBIAMoCzIeLkNDbG91ZF9QZW5kaW5nUmVtb3RlT3BlcmF0aW9uIpAEChhD",
          "TXNnQmx1ZXRvb3RoRGV2aWNlc0RhdGESMwoIYWRhcHRlcnMYASADKAsyIS5D",
          "TXNnQmx1ZXRvb3RoRGV2aWNlc0RhdGEuQWRhcHRlchIxCgdkZXZpY2VzGAIg",
          "AygLMiAuQ01zZ0JsdWV0b290aERldmljZXNEYXRhLkRldmljZRIyCgdtYW5h",
          "Z2VyGAMgASgLMiEuQ01zZ0JsdWV0b290aERldmljZXNEYXRhLk1hbmFnZXIa",
          "XwoHQWRhcHRlchINCgJpZBgBIAEoDToBMBILCgNtYWMYAiABKAkSDAoEbmFt",
          "ZRgDIAEoCRISCgppc19lbmFibGVkGAQgASgIEhYKDmlzX2Rpc2NvdmVyaW5n",
          "GAUgASgIGs0BCgZEZXZpY2USDQoCaWQYASABKA06ATASFQoKYWRhcHRlcl9p",
          "ZBgCIAEoDToBMBJDCgVldHlwZRgDIAEoDjIVLkVCbHVldG9vdGhEZXZpY2VU",
          "eXBlOh1rX0JsdWV0b290aERldmljZVR5cGVfSW52YWxpZBILCgNtYWMYBCAB",
          "KAkSDAoEbmFtZRgFIAEoCRIUCgxpc19jb25uZWN0ZWQYBiABKAgSEQoJaXNf",
          "cGFpcmVkGAcgASgIEhQKDHN0cmVuZ3RoX3JhdxgIIAEoBRonCgdNYW5hZ2Vy",
          "EhwKFGlzX2JsdWV0b290aF9lbmFibGVkGAEgASgIIjwKHUNNc2dTeXN0ZW1Q",
          "ZXJmRGlhZ25vc3RpY0VudHJ5EgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiAB",
          "KAkipQEKHkNNc2dTeXN0ZW1QZXJmTmV0d29ya0ludGVyZmFjZRIMCgRuYW1l",
          "GAEgASgJEhEKCXRpbWVzdGFtcBgCIAEoARIWCg50eF9ieXRlc190b3RhbBgD",
          "IAEoAxIWCg5yeF9ieXRlc190b3RhbBgEIAEoAxIYChB0eF9ieXRlc19wZXJf",
          "c2VjGAUgASgFEhgKEHJ4X2J5dGVzX3Blcl9zZWMYBiABKAUinAEKHENNc2dT",
          "eXN0ZW1QZXJmRGlhZ25vc3RpY0luZm8SLwoHZW50cmllcxgBIAMoCzIeLkNN",
          "c2dTeXN0ZW1QZXJmRGlhZ25vc3RpY0VudHJ5EjMKCmludGVyZmFjZXMYAiAD",
          "KAsyHy5DTXNnU3lzdGVtUGVyZk5ldHdvcmtJbnRlcmZhY2USFgoOYmF0dGVy",
          "eV90ZW1wX2MYAyABKAIi6ggKFENNc2dTeXN0ZW1QZXJmTGltaXRzEiMKG2Nw",
          "dV9nb3Zlcm5vcl9tYW51YWxfbWluX21oehgBIAEoBRIjChtjcHVfZ292ZXJu",
          "b3JfbWFudWFsX21heF9taHoYAiABKAUSGQoRZnNyX3NoYXJwbmVzc19taW4Y",
          "AyABKAUSGQoRZnNyX3NoYXJwbmVzc19tYXgYBCABKAUSJgoeZ3B1X3BlcmZv",
          "cm1hbmNlX21hbnVhbF9taW5fbWh6GAUgASgFEiYKHmdwdV9wZXJmb3JtYW5j",
          "ZV9tYW51YWxfbWF4X21oehgGIAEoBRIiChpwZXJmX292ZXJsYXlfaXNfc3Rh",
          "bmRhbG9uZRgHIAEoCBIgChhpc19keW5hbWljX3Zyc19hdmFpbGFibGUYCCAB",
          "KAgSMAooaXNfbWFudWFsX2Rpc3BsYXlfcmVmcmVzaF9yYXRlX2F2YWlsYWJs",
          "ZRgJIAEoCBI/CiBncHVfcGVyZm9ybWFuY2VfbGV2ZWxzX2F2YWlsYWJsZRgK",
          "IAMoDjIVLkVHUFVQZXJmb3JtYW5jZUxldmVsEiUKHWRpc3BsYXlfcmVmcmVz",
          "aF9tYW51YWxfaHpfbWluGAsgASgFEiUKHWRpc3BsYXlfcmVmcmVzaF9tYW51",
          "YWxfaHpfbWF4GAwgASgFEhkKEWZwc19saW1pdF9vcHRpb25zGA0gAygFEhUK",
          "DXRkcF9saW1pdF9taW4YDiABKAUSFQoNdGRwX2xpbWl0X21heBgPIAEoBRIY",
          "ChBpc19uaXNfc3VwcG9ydGVkGBAgASgIEhkKEW5pc19zaGFycG5lc3NfbWlu",
          "GBEgASgFEhkKEW5pc19zaGFycG5lc3NfbWF4GBIgASgFEi4KJmRpc3BsYXlf",
          "ZXh0ZXJuYWxfcmVmcmVzaF9tYW51YWxfaHpfbWluGBMgASgFEi4KJmRpc3Bs",
          "YXlfZXh0ZXJuYWxfcmVmcmVzaF9tYW51YWxfaHpfbWF4GBQgASgFEiIKGmZw",
          "c19saW1pdF9vcHRpb25zX2V4dGVybmFsGBUgAygFEhwKFGlzX3RlYXJpbmdf",
          "c3VwcG9ydGVkGBYgASgIEhgKEGlzX3Zycl9zdXBwb3J0ZWQYFyABKAgSMgoq",
          "aXNfZHluYW1pY19yZWZyZXNoX3JhdGVfaW5fc3RlYW1fc3VwcG9ydGVkGBgg",
          "ASgIEjAKKGlzX3NwbGl0X3NjYWxpbmdfYW5kX2ZpbHRlcmluZ19zdXBwb3J0",
          "ZWQYGSABKAgSPQofc3BsaXRfc2NhbGluZ19maWx0ZXJzX2F2YWlsYWJsZRga",
          "IAMoDjIULkVTcGxpdFNjYWxpbmdGaWx0ZXISPQofc3BsaXRfc2NhbGluZ19z",
          "Y2FsZXJzX2F2YWlsYWJsZRgbIAMoDjIULkVTcGxpdFNjYWxpbmdTY2FsZXIS",
          "GAoQaXNfaGRyX3N1cHBvcnRlZBgcIAEoCBIoCiBkaXNwbGF5X3JlZnJlc2hf",
          "bWFudWFsX2h6X29jX21heBgdIAEoBSLMBwocQ01zZ1N5c3RlbVBlcmZTZXR0",
          "aW5nc0dsb2JhbBIeChZkaWFnbm9zdGljX3VwZGF0ZV9yYXRlGAEgASgCElsK",
          "GnN5c3RlbV90cmFjZV9zZXJ2aWNlX3N0YXRlGAIgASgOMhQuRVN5c3RlbVNl",
          "cnZpY2VTdGF0ZToha19FU3lzdGVtU2VydmljZVN0YXRlX1VuYXZhaWxhYmxl",
          "EmEKIGdyYXBoaWNzX3Byb2ZpbGluZ19zZXJ2aWNlX3N0YXRlGAMgASgOMhQu",
          "RVN5c3RlbVNlcnZpY2VTdGF0ZToha19FU3lzdGVtU2VydmljZVN0YXRlX1Vu",
          "YXZhaWxhYmxlElsKGnBlcmZfb3ZlcmxheV9zZXJ2aWNlX3N0YXRlGAQgASgO",
          "MhQuRVN5c3RlbVNlcnZpY2VTdGF0ZToha19FU3lzdGVtU2VydmljZVN0YXRl",
          "X1VuYXZhaWxhYmxlEloKEnBlcmZfb3ZlcmxheV9sZXZlbBgFIAEoDjIaLkVH",
          "cmFwaGljc1BlcmZPdmVybGF5TGV2ZWw6ImtfRUdyYXBoaWNzUGVyZk92ZXJs",
          "YXlMZXZlbF9IaWRkZW4SLwonaXNfc2hvd19wZXJmX292ZXJsYXlfb3Zlcl9z",
          "dGVhbV9lbmFibGVkGAYgASgIEiQKHGlzX2FkdmFuY2VkX3NldHRpbmdzX2Vu",
          "YWJsZWQYByABKAgSLgomYWxsb3dfZXh0ZXJuYWxfZGlzcGxheV9yZWZyZXNo",
          "X2NvbnRyb2wYCCABKAgSFgoOaXNfaGRyX2VuYWJsZWQYCSABKAgSWAobaGRy",
          "X29uX3Nkcl90b25lbWFwX29wZXJhdG9yGAwgASgOMhQuRUhEUlRvbmVNYXBP",
          "cGVyYXRvcjoda19FSERSVG9uZU1hcE9wZXJhdG9yX0ludmFsaWQSJAocaXNf",
          "aGRyX2RlYnVnX2hlYXRtYXBfZW5hYmxlZBgNIAEoCBIrCh1mb3JjZV9oZHJf",
          "d2lkZV9nYW1tdXRfZm9yX3NkchgPIAEoCDoEdHJ1ZRIeChZhbGxvd19leHBl",
          "cmltZW50YWxfaGRyGBAgASgIEh0KFXNkcl90b19oZHJfYnJpZ2h0bmVzcxgR",
          "IAEoAhIfChdkZWJ1Z19mb3JjZV9oZHJfc3VwcG9ydBgSIAEoCBIjChtmb3Jj",
          "ZV9oZHJfMTBwcV9vdXRwdXRfZGVidWcYEyABKAgSHQoVaXNfZGlzcGxheV9v",
          "Y19lbmFibGVkGBQgASgIEiMKG2lzX2NvbG9yX21hbmFnZW1lbnRfZW5hYmxl",
          "ZBgVIAEoCCLnBwocQ01zZ1N5c3RlbVBlcmZTZXR0aW5nc1BlckFwcBIiChpn",
          "cHVfcGVyZm9ybWFuY2VfbWFudWFsX21oehgBIAEoBRIRCglmcHNfbGltaXQY",
          "AiABKAUSJgoeaXNfdmFyaWFibGVfcmVzb2x1dGlvbl9lbmFibGVkGAMgASgI",
          "EicKH2lzX2R5bmFtaWNfcmVmcmVzaF9yYXRlX2VuYWJsZWQYBCABKAgSEQoJ",
          "dGRwX2xpbWl0GAUgASgFEjsKDGNwdV9nb3Zlcm5vchgGIAEoDjINLkVDUFVH",
          "b3Zlcm5vcjoWa19FQ1BVR292ZXJub3JfSW52YWxpZBIfChdjcHVfZ292ZXJu",
          "b3JfbWFudWFsX21oehgHIAEoBRIWCg5zY2FsaW5nX2ZpbHRlchgIIAEoBRIV",
          "Cg1mc3Jfc2hhcnBuZXNzGAkgASgFEhwKFGlzX2Zwc19saW1pdF9lbmFibGVk",
          "GAogASgIEhwKFGlzX3RkcF9saW1pdF9lbmFibGVkGAsgASgIEiMKG2lzX2xv",
          "d19sYXRlbmN5X21vZGVfZW5hYmxlZBgMIAEoCBIhChlkaXNwbGF5X3JlZnJl",
          "c2hfbWFudWFsX2h6GA0gASgFEiQKHGlzX2dhbWVfcGVyZl9wcm9maWxlX2Vu",
          "YWJsZWQYDiABKAgSVAoVZ3B1X3BlcmZvcm1hbmNlX2xldmVsGA8gASgOMhUu",
          "RUdQVVBlcmZvcm1hbmNlTGV2ZWw6HmtfRUdQVVBlcmZvcm1hbmNlTGV2ZWxf",
          "SW52YWxpZBIVCg1uaXNfc2hhcnBuZXNzGBAgASgFEioKImRpc3BsYXlfZXh0",
          "ZXJuYWxfcmVmcmVzaF9tYW51YWxfaHoYESABKAUSGgoSZnBzX2xpbWl0X2V4",
          "dGVybmFsGBIgASgFEhoKEmlzX3RlYXJpbmdfZW5hYmxlZBgTIAEoCBIWCg5p",
          "c192cnJfZW5hYmxlZBgUIAEoCBIiChppc19jb21wb3NpdGVfZGVidWdfZW5h",
          "YmxlZBgVIAEoCBIXCg9mb3JjZV9jb21wb3NpdGUYFiABKAgSKQohdXNlX2R5",
          "bmFtaWNfcmVmcmVzaF9yYXRlX2luX3N0ZWFtGBcgASgIElEKFHNwbGl0X3Nj",
          "YWxpbmdfZmlsdGVyGBggASgOMhQuRVNwbGl0U2NhbGluZ0ZpbHRlcjoda19F",
          "U3BsaXRTY2FsaW5nRmlsdGVyX0ludmFsaWQSUQoUc3BsaXRfc2NhbGluZ19z",
          "Y2FsZXIYGSABKA4yFC5FU3BsaXRTY2FsaW5nU2NhbGVyOh1rX0VTcGxpdFNj",
          "YWxpbmdTY2FsZXJfSW52YWxpZCJ3ChZDTXNnU3lzdGVtUGVyZlNldHRpbmdz",
          "Ei0KBmdsb2JhbBgBIAEoCzIdLkNNc2dTeXN0ZW1QZXJmU2V0dGluZ3NHbG9i",
          "YWwSLgoHcGVyX2FwcBgCIAEoCzIdLkNNc2dTeXN0ZW1QZXJmU2V0dGluZ3NQ",
          "ZXJBcHAijAgKGENNc2dTeXN0ZW1QZXJmU2V0dGluZ3NWMRIeChZkaWFnbm9z",
          "dGljX3VwZGF0ZV9yYXRlGAEgASgCElsKGnN5c3RlbV90cmFjZV9zZXJ2aWNl",
          "X3N0YXRlGAIgASgOMhQuRVN5c3RlbVNlcnZpY2VTdGF0ZToha19FU3lzdGVt",
          "U2VydmljZVN0YXRlX1VuYXZhaWxhYmxlEmEKIGdyYXBoaWNzX3Byb2ZpbGlu",
          "Z19zZXJ2aWNlX3N0YXRlGAMgASgOMhQuRVN5c3RlbVNlcnZpY2VTdGF0ZToh",
          "a19FU3lzdGVtU2VydmljZVN0YXRlX1VuYXZhaWxhYmxlElsKGnBlcmZfb3Zl",
          "cmxheV9zZXJ2aWNlX3N0YXRlGAQgASgOMhQuRVN5c3RlbVNlcnZpY2VTdGF0",
          "ZToha19FU3lzdGVtU2VydmljZVN0YXRlX1VuYXZhaWxhYmxlEloKEnBlcmZf",
          "b3ZlcmxheV9sZXZlbBgFIAEoDjIaLkVHcmFwaGljc1BlcmZPdmVybGF5TGV2",
          "ZWw6ImtfRUdyYXBoaWNzUGVyZk92ZXJsYXlMZXZlbF9IaWRkZW4SVAoVZ3B1",
          "X3BlcmZvcm1hbmNlX2xldmVsGAYgASgOMhUuRUdQVVBlcmZvcm1hbmNlTGV2",
          "ZWw6HmtfRUdQVVBlcmZvcm1hbmNlTGV2ZWxfSW52YWxpZBIiChpncHVfcGVy",
          "Zm9ybWFuY2VfbWFudWFsX21oehgHIAEoBRIRCglmcHNfbGltaXQYCCABKAUS",
          "JgoeaXNfdmFyaWFibGVfcmVzb2x1dGlvbl9lbmFibGVkGAkgASgIEicKH2lz",
          "X2R5bmFtaWNfcmVmcmVzaF9yYXRlX2VuYWJsZWQYCiABKAgSEQoJdGRwX2xp",
          "bWl0GAsgASgFEjsKDGNwdV9nb3Zlcm5vchgMIAEoDjINLkVDUFVHb3Zlcm5v",
          "cjoWa19FQ1BVR292ZXJub3JfSW52YWxpZBIfChdjcHVfZ292ZXJub3JfbWFu",
          "dWFsX21oehgNIAEoBRIWCg5zY2FsaW5nX2ZpbHRlchgOIAEoBRIVCg1mc3Jf",
          "c2hhcnBuZXNzGA8gASgFEhwKFGlzX2Zwc19saW1pdF9lbmFibGVkGBAgASgI",
          "EhwKFGlzX3RkcF9saW1pdF9lbmFibGVkGBEgASgIEi8KJ2lzX3Nob3dfcGVy",
          "Zl9vdmVybGF5X292ZXJfc3RlYW1fZW5hYmxlZBgSIAEoCBIjChtpc19sb3df",
          "bGF0ZW5jeV9tb2RlX2VuYWJsZWQYEyABKAgSIQoZZGlzcGxheV9yZWZyZXNo",
          "X21hbnVhbF9oehgUIAEoBRIkChxpc19nYW1lX3BlcmZfcHJvZmlsZV9lbmFi",
          "bGVkGBUgASgIIqABChNDTXNnU3lzdGVtUGVyZlN0YXRlEiUKBmxpbWl0cxgB",
          "IAEoCzIVLkNNc2dTeXN0ZW1QZXJmTGltaXRzEikKCHNldHRpbmdzGAIgASgL",
          "MhcuQ01zZ1N5c3RlbVBlcmZTZXR0aW5ncxIXCg9jdXJyZW50X2dhbWVfaWQY",
          "AyABKAQSHgoWYWN0aXZlX3Byb2ZpbGVfZ2FtZV9pZBgEIAEoBCKkAQocQ01z",
          "Z1N5c3RlbVBlcmZVcGRhdGVTZXR0aW5ncxIOCgZnYW1laWQYASABKAQSGwoT",
          "c2tpcF9zdG9yYWdlX3VwZGF0ZRgEIAEoCBIaChByZXNldF90b19kZWZhdWx0",
          "GAIgASgISAASMQoOc2V0dGluZ3NfZGVsdGEYAyABKAsyFy5DTXNnU3lzdGVt",
          "UGVyZlNldHRpbmdzSABCCAoGdXBkYXRlIvoBChlDTXNnU3lzdGVtRG9ja1Vw",
          "ZGF0ZVN0YXRlEjYKBXN0YXRlGAEgASgOMg4uRVVwZGF0ZXJTdGF0ZToXa19F",
          "VXBkYXRlclN0YXRlX0ludmFsaWQSGgoScnRpbWVfbGFzdF9jaGVja2VkGAIg",
          "ASgHEhcKD3ZlcnNpb25fY3VycmVudBgDIAEoCRIZChF2ZXJzaW9uX2F2YWls",
          "YWJsZRgEIAEoCRIWCg5zdGFnZV9wcm9ncmVzcxgFIAEoAhIiChpydGltZV9l",
          "c3RpbWF0ZWRfY29tcGxldGlvbhgGIAEoBxIZChFvbGRfZndfd29ya2Fyb3Vu",
          "ZBgHIAEoBSJHChNDTXNnU3lzdGVtRG9ja1N0YXRlEjAKDHVwZGF0ZV9zdGF0",
          "ZRgBIAEoCzIaLkNNc2dTeXN0ZW1Eb2NrVXBkYXRlU3RhdGUiMgocQ01zZ1N5",
          "c3RlbURvY2tVcGRhdGVGaXJtd2FyZRISCgpjaGVja19vbmx5GAEgASgIIsUB",
          "ChVDTXNnU3lzdGVtQXVkaW9Wb2x1bWUSNAoHZW50cmllcxgBIAMoCzIjLkNN",
          "c2dTeXN0ZW1BdWRpb1ZvbHVtZS5DaGFubmVsRW50cnkSEAoIaXNfbXV0ZWQY",
          "AiABKAgaZAoMQ2hhbm5lbEVudHJ5EkQKCGVjaGFubmVsGAEgASgOMhQuRVN5",
          "c3RlbUF1ZGlvQ2hhbm5lbDoca19TeXN0ZW1BdWRpb0NoYW5uZWxfSW52YWxp",
          "ZBIOCgZ2b2x1bWUYAiABKAIiRQocQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlck9i",
          "amVjdBIKCgJpZBgBIAEoDRIZChFydGltZV9sYXN0X3VwZGF0ZRgCIAEoByKJ",
          "AQocQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlckRldmljZRIrCgRiYXNlGAEgASgL",
          "Mh0uQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlck9iamVjdBIMCgRuYW1lGAIgASgJ",
          "EgwKBG5pY2sYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSCwoDYXBpGAUg",
          "ASgJIoECChpDTXNnU3lzdGVtQXVkaW9NYW5hZ2VyTm9kZRIrCgRiYXNlGAEg",
          "ASgLMh0uQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlck9iamVjdBIRCglkZXZpY2Vf",
          "aWQYAiABKA0SDAoEbmFtZRgDIAEoCRIMCgRuaWNrGAQgASgJEhMKC2Rlc2Ny",
          "aXB0aW9uGAUgASgJEkoKCmVkaXJlY3Rpb24YBiABKA4yFi5FU3lzdGVtQXVk",
          "aW9EaXJlY3Rpb246HmtfU3lzdGVtQXVkaW9EaXJlY3Rpb25fSW52YWxpZBIm",
          "CgZ2b2x1bWUYByABKAsyFi5DTXNnU3lzdGVtQXVkaW9Wb2x1bWUi4gIKGkNN",
          "c2dTeXN0ZW1BdWRpb01hbmFnZXJQb3J0EisKBGJhc2UYASABKAsyHS5DTXNn",
          "U3lzdGVtQXVkaW9NYW5hZ2VyT2JqZWN0Eg8KB25vZGVfaWQYAyABKA0SDAoE",
          "bmFtZRgEIAEoCRINCgVhbGlhcxgFIAEoCRJDCgVldHlwZRgGIAEoDjIVLkVT",
          "eXN0ZW1BdWRpb1BvcnRUeXBlOh1rX1N5c3RlbUF1ZGlvUG9ydFR5cGVfSW52",
          "YWxpZBJSCgplZGlyZWN0aW9uGAcgASgOMhouRVN5c3RlbUF1ZGlvUG9ydERp",
          "cmVjdGlvbjoia19TeXN0ZW1BdWRpb1BvcnREaXJlY3Rpb25fSW52YWxpZBIT",
          "Cgtpc19waHlzaWNhbBgIIAEoCBITCgtpc190ZXJtaW5hbBgJIAEoCBISCgpp",
          "c19jb250cm9sGAogASgIEhIKCmlzX21vbml0b3IYCyABKAgipwEKGkNNc2dT",
          "eXN0ZW1BdWRpb01hbmFnZXJMaW5rEisKBGJhc2UYASABKAsyHS5DTXNnU3lz",
          "dGVtQXVkaW9NYW5hZ2VyT2JqZWN0EhYKDm91dHB1dF9ub2RlX2lkGAIgASgN",
          "EhYKDm91dHB1dF9wb3J0X2lkGAMgASgNEhUKDWlucHV0X25vZGVfaWQYBCAB",
          "KA0SFQoNaW5wdXRfcG9ydF9pZBgFIAEoDSLTAQodQ01zZ1N5c3RlbUF1ZGlv",
          "TWFuYWdlclN0YXRlSFcSLgoHZGV2aWNlcxgBIAMoCzIdLkNNc2dTeXN0ZW1B",
          "dWRpb01hbmFnZXJEZXZpY2USKgoFbm9kZXMYAiADKAsyGy5DTXNnU3lzdGVt",
          "QXVkaW9NYW5hZ2VyTm9kZRIqCgVwb3J0cxgDIAMoCzIbLkNNc2dTeXN0ZW1B",
          "dWRpb01hbmFnZXJQb3J0EioKBWxpbmtzGAQgAygLMhsuQ01zZ1N5c3RlbUF1",
          "ZGlvTWFuYWdlckxpbmsicAobQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlclN0YXRl",
          "EhQKDHJ0aW1lX2ZpbHRlchgBIAEoBxIPCgdjb3VudGVyGAIgASgFEioKAmh3",
          "GAMgASgLMh4uQ01zZ1N5c3RlbUF1ZGlvTWFuYWdlclN0YXRlSFciOAolQ01z",
          "Z1N5c3RlbUF1ZGlvTWFuYWdlclVwZGF0ZVNvbWV0aGluZxIPCgdjb3VudGVy",
          "GAEgASgFIlYKFUNNc2dTeXN0ZW1EaXNwbGF5TW9kZRIKCgJpZBgBIAEoBRIN",
          "CgV3aWR0aBgCIAEoBRIOCgZoZWlnaHQYAyABKAUSEgoKcmVmcmVzaF9oehgE",
          "IAEoBSKTAwoRQ01zZ1N5c3RlbURpc3BsYXkSCgoCaWQYASABKAUSDAoEbmFt",
          "ZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRISCgppc19wcmltYXJ5GAQg",
          "ASgIEhIKCmlzX2VuYWJsZWQYBSABKAgSEwoLaXNfaW50ZXJuYWwYBiABKAgS",
          "GQoRaGFzX21vZGVfb3ZlcnJpZGUYByABKAgSEAoId2lkdGhfbW0YCCABKAUS",
          "EQoJaGVpZ2h0X21tGAkgASgFEhcKD2N1cnJlbnRfbW9kZV9pZBgKIAEoBRIl",
          "CgVtb2RlcxgLIAMoCzIWLkNNc2dTeXN0ZW1EaXNwbGF5TW9kZRIYChByZWZy",
          "ZXNoX3JhdGVfbWluGAwgASgFEhgKEHJlZnJlc2hfcmF0ZV9tYXgYDSABKAUS",
          "FgoOaXNfdnJyX2NhcGFibGUYDiABKAgSFgoOaXNfdnJyX2VuYWJsZWQYDyAB",
          "KAgSFgoOaXNfaGRyX2NhcGFibGUYECABKAgSFgoOaXNfaGRyX2VuYWJsZWQY",
          "ESABKAgi0wEKHUNNc2dTeXN0ZW1EaXNwbGF5TWFuYWdlclN0YXRlEiQKCGRp",
          "c3BsYXlzGAEgAygLMhIuQ01zZ1N5c3RlbURpc3BsYXkSIwobaXNfbW9kZV9z",
          "d2l0Y2hpbmdfc3VwcG9ydGVkGAIgASgIEmcKEmNvbXBhdGliaWxpdHlfbW9k",
          "ZRgDIAEoDjIgLkVTeXN0ZW1EaXNwbGF5Q29tcGF0aWJpbGl0eU1vZGU6KWtf",
          "RVN5c3RlbURpc3BsYXlDb21wYXRpYmlsaXR5TW9kZV9JbnZhbGlkIkYKH0NN",
          "c2dTeXN0ZW1EaXNwbGF5TWFuYWdlclNldE1vZGUSEgoKZGlzcGxheV9pZBgB",
          "IAEoBRIPCgdtb2RlX2lkGAIgASgFIvIIChlDTXNnU3lzdGVtTWFuYWdlclNl",
          "dHRpbmdzEioKImlkbGVfYmFja2xpZ2h0X2RpbV9iYXR0ZXJ5X3NlY29uZHMY",
          "ASABKAISJQodaWRsZV9iYWNrbGlnaHRfZGltX2FjX3NlY29uZHMYAiABKAIS",
          "JAocaWRsZV9zdXNwZW5kX2JhdHRlcnlfc2Vjb25kcxgDIAEoAhIfChdpZGxl",
          "X3N1c3BlbmRfYWNfc2Vjb25kcxgEIAEoAhIeChZpZGxlX3N1c3BlbmRfc3Vw",
          "cmVzc2VkGAUgASgIEigKIGlzX2FkYXB0aXZlX2JyaWdodG5lc3NfYXZhaWxh",
          "YmxlGAYgASgIEisKI2Rpc3BsYXlfYWRhcHRpdmVfYnJpZ2h0bmVzc19lbmFi",
          "bGVkGAcgASgIEiEKGWRpc3BsYXlfbmlnaHRtb2RlX2VuYWJsZWQYCiABKAgS",
          "JgoeZGlzcGxheV9uaWdodG1vZGVfdGludHN0cmVuZ3RoGAsgASgCEiAKGGRp",
          "c3BsYXlfbmlnaHRtb2RlX21heGh1ZRgMIAEoAhIgChhkaXNwbGF5X25pZ2h0",
          "bW9kZV9tYXhzYXQYDSABKAISHwoXZGlzcGxheV9uaWdodG1vZGVfdWlleHAY",
          "DiABKAISHwoXZGlzcGxheV9uaWdodG1vZGVfYmxlbmQYDyABKAISHwoXZGlz",
          "cGxheV9uaWdodG1vZGVfcmVzZXQYECABKAgSKgoiZGlzcGxheV9uaWdodG1v",
          "ZGVfc2NoZWR1bGVfZW5hYmxlZBgRIAEoCBIsCiRkaXNwbGF5X25pZ2h0bW9k",
          "ZV9zY2hlZHVsZV9zdGFydHRpbWUYEiABKAISKgoiZGlzcGxheV9uaWdodG1v",
          "ZGVfc2NoZWR1bGVfZW5kdGltZRgTIAEoAhIjChtkaXNwbGF5X2RpYWdub3N0",
          "aWNzX2VuYWJsZWQYFCABKAgSFgoOYWxzX2x1eF9sYXRlc3QYFSABKAISFgoO",
          "YWxzX2x1eF9tZWRpYW4YFiABKAISHQoVZGlzcGxheV9iYWNrbGlnaHRfcmF3",
          "GBcgASgCEiYKHmRpc3BsYXlfYnJpZ2h0bmVzc19hZGFwdGl2ZW1pbhgYIAEo",
          "AhImCh5kaXNwbGF5X2JyaWdodG5lc3NfYWRhcHRpdmVtYXgYGSABKAISIQoZ",
          "aXNfd2lmaV9wb3dlcnNhdmVfZW5hYmxlZBgaIAEoCBIgChhpc19mYW5fY29u",
          "dHJvbF9hdmFpbGFibGUYGyABKAgSUAoQZmFuX2NvbnRyb2xfbW9kZRgcIAEo",
          "DjIWLkVTeXN0ZW1GYW5Db250cm9sTW9kZToea19TeXN0ZW1GYW5Db250cm9s",
          "TW9kZV9JbnZhbGlkEicKH2lzX2Rpc3BsYXlfYnJpZ2h0bmVzc19hdmFpbGFi",
          "bGUYHSABKAgSLAokaXNfZGlzcGxheV9jb2xvcm1hbmFnZW1lbnRfYXZhaWxh",
          "YmxlGB8gASgIEhoKEmRpc3BsYXlfY29sb3JnYW11dBggIAEoAiJiChhDTXNn",
          "U2VsZWN0T1NCcmFuY2hQYXJhbXMSLwoGYnJhbmNoGAEgASgOMgouRU9TQnJh",
          "bmNoOhNrX0VPU0JyYW5jaF9Vbmtub3duEhUKDWN1c3RvbV9icmFuY2gYAiAB",
          "KAkicAoYQ01zZ1N5c3RlbVVwZGF0ZVByb2dyZXNzEhYKDnN0YWdlX3Byb2dy",
          "ZXNzGAEgASgCEhgKEHN0YWdlX3NpemVfYnl0ZXMYAiABKAMSIgoacnRpbWVf",
          "ZXN0aW1hdGVkX2NvbXBsZXRpb24YAyABKAcitwEKG0NNc2dTeXN0ZW1VcGRh",
          "dGVDaGVja1Jlc3VsdBIzCgR0eXBlGAEgASgOMg0uRVVwZGF0ZXJUeXBlOhZr",
          "X0VVcGRhdGVyVHlwZV9JbnZhbGlkEhIKB2VyZXN1bHQYAiABKA06ATISFQoN",
          "cnRpbWVfY2hlY2tlZBgDIAEoBxIRCglhdmFpbGFibGUYBCABKAgSDwoHdmVy",
          "c2lvbhgFIAEoCRIUCgxhdXRvX21lc3NhZ2UYBiABKAkiQQobQ01zZ1N5c3Rl",
          "bVVwZGF0ZUFwcGx5UGFyYW1zEiIKC2FwcGx5X3R5cGVzGAEgAygOMg0uRVVw",
          "ZGF0ZXJUeXBlIrYBChtDTXNnU3lzdGVtVXBkYXRlQXBwbHlSZXN1bHQSMwoE",
          "dHlwZRgBIAEoDjINLkVVcGRhdGVyVHlwZToWa19FVXBkYXRlclR5cGVfSW52",
          "YWxpZBISCgdlcmVzdWx0GAIgASgNOgEyEiYKF3JlcXVpcmVzX2NsaWVudF9y",
          "ZXN0YXJ0GAMgASgIOgVmYWxzZRImChdyZXF1aXJlc19zeXN0ZW1fcmVzdGFy",
          "dBgEIAEoCDoFZmFsc2UikQIKFUNNc2dTeXN0ZW1VcGRhdGVTdGF0ZRI2CgVz",
          "dGF0ZRgBIAEoDjIOLkVVcGRhdGVyU3RhdGU6F2tfRVVwZGF0ZXJTdGF0ZV9J",
          "bnZhbGlkEisKCHByb2dyZXNzGAIgASgLMhkuQ01zZ1N5c3RlbVVwZGF0ZVBy",
          "b2dyZXNzEjoKFHVwZGF0ZV9jaGVja19yZXN1bHRzGAMgAygLMhwuQ01zZ1N5",
          "c3RlbVVwZGF0ZUNoZWNrUmVzdWx0EjoKFHVwZGF0ZV9hcHBseV9yZXN1bHRz",
          "GAQgAygLMhwuQ01zZ1N5c3RlbVVwZGF0ZUFwcGx5UmVzdWx0EhsKE3N1cHBv",
          "cnRzX29zX3VwZGF0ZXMYBSABKAgiJgoVQ01zZ0FjaGlldmVtZW50Q2hhbmdl",
          "Eg0KBWFwcGlkGAEgASgNIlwKDENNc2dDZWxsTGlzdBIhCgVjZWxscxgBIAMo",
          "CzISLkNNc2dDZWxsTGlzdC5DZWxsGikKBENlbGwSDwoHY2VsbF9pZBgBIAEo",
          "DRIQCghsb2NfbmFtZRgCIAEoCSKOAwoQQ01zZ1Nob3J0Y3V0SW5mbxINCgVh",
          "cHBpZBgBIAEoDRILCgNleGUYAiABKAkSEQoJc3RhcnRfZGlyGAMgASgJEgwK",
          "BGljb24YBCABKAkSDAoEcGF0aBgFIAEoCRIMCgRhcmdzGAYgASgJEhAKCGFw",
          "cF9uYW1lGAcgASgJEhYKDm92ZXJyaWRlX2FwcGlkGAggASgNEhUKDWZsYXRw",
          "YWtfYXBwaWQYCSABKAkSDAoEdGFncxgKIAMoCRIRCglpc19yZW1vdGUYCyAB",
          "KAgSEQoJaXNfaGlkZGVuGAwgASgIEhQKDGlzX3RlbXBvcmFyeRgNIAEoCBIR",
          "Cglpc19vcGVudnIYDiABKAgSHAoUYWxsb3dfZGVza3RvcF9jb25maWcYDyAB",
          "KAgSFQoNYWxsb3dfb3ZlcmxheRgQIAEoCBIbChNydF9sYXN0X3BsYXllZF90",
          "aW1lGBEgASgNEhoKEmlzX2RldmtpdF9zaG9ydGN1dBgSIAEoCBIVCg1kZXZr",
          "aXRfZ2FtZWlkGBMgASgJIiQKEkNNc2dTaG9ydGN1dEFwcElkcxIOCgZhcHBp",
          "ZHMYASADKA0iqgEKD0NNc2dNb25pdG9ySW5mbxIdChVzZWxlY3RlZF9kaXNw",
          "bGF5X25hbWUYASACKAkSLgoIbW9uaXRvcnMYAiADKAsyHC5DTXNnTW9uaXRv",
          "ckluZm8uTW9uaXRvckluZm8aSAoLTW9uaXRvckluZm8SGwoTbW9uaXRvcl9k",
          "ZXZpY2VfbmFtZRgBIAIoCRIcChRtb25pdG9yX2Rpc3BsYXlfbmFtZRgCIAIo",
          "CSIyCh1DTXNnR2VuZXJhdGVTeXN0ZW1SZXBvcnRSZXBseRIRCglyZXBvcnRf",
          "aWQYASABKAkiOAoWQ01zZ1dlYlVJVHJhbnNwb3J0SW5mbxIMCgRwb3J0GAEg",
          "ASgNEhAKCGF1dGhfa2V5GAIgASgJKpYCChxFQ2xvdWRQZW5kaW5nUmVtb3Rl",
          "T3BlcmF0aW9uEiYKImtfRUNsb3VkUGVuZGluZ1JlbW90ZU9wZXJhdGlvbk5v",
          "bmUQABIyCi5rX0VDbG91ZFBlbmRpbmdSZW1vdGVPcGVyYXRpb25BcHBTZXNz",
          "aW9uQWN0aXZlEAESMgoua19FQ2xvdWRQZW5kaW5nUmVtb3RlT3BlcmF0aW9u",
          "VXBsb2FkSW5Qcm9ncmVzcxACEi8KK2tfRUNsb3VkUGVuZGluZ1JlbW90ZU9w",
          "ZXJhdGlvblVwbG9hZFBlbmRpbmcQAxI1CjFrX0VDbG91ZFBlbmRpbmdSZW1v",
          "dGVPcGVyYXRpb25BcHBTZXNzaW9uU3VzcGVuZGVkEAQqnwwKGEVTdGVhbURl",
          "Y2tLZXlib2FyZExheW91dBIlCiFrX0VTdGVhbURlY2tLZXlib2FyZExheW91",
          "dF9RV0VSVFkQABIoCiRrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9CdWxn",
          "YXJpYW4QARIxCi1rX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9DaGluZXNl",
          "X1NpbXBsaWZpZWQQAhIyCi5rX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9D",
          "aGluZXNlX1RyYWRpdGlvbmFsEAMSJAoga19FU3RlYW1EZWNrS2V5Ym9hcmRM",
          "YXlvdXRfQ3plY2gQBBIlCiFrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9E",
          "YW5pc2gQBRImCiJrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9GaW5uaXNo",
          "EAYSJQoha19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfRnJlbmNoEAcSJQoh",
          "a19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfR2VybWFuEAgSJAoga19FU3Rl",
          "YW1EZWNrS2V5Ym9hcmRMYXlvdXRfR3JlZWsQCRIoCiRrX0VTdGVhbURlY2tL",
          "ZXlib2FyZExheW91dF9IdW5nYXJpYW4QChImCiJrX0VTdGVhbURlY2tLZXli",
          "b2FyZExheW91dF9JdGFsaWFuEAsSJwoja19FU3RlYW1EZWNrS2V5Ym9hcmRM",
          "YXlvdXRfSmFwYW5lc2UQDBIlCiFrX0VTdGVhbURlY2tLZXlib2FyZExheW91",
          "dF9Lb3JlYW4QDRIoCiRrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9Ob3J3",
          "ZWdpYW4QDhIlCiFrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9Qb2xpc2gQ",
          "DxIpCiVrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9Qb3J0dWd1ZXNlEBAS",
          "Jwoja19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfUm9tYW5pYW4QERImCiJr",
          "X0VTdGVhbURlY2tLZXlib2FyZExheW91dF9SdXNzaWFuEBISJgoia19FU3Rl",
          "YW1EZWNrS2V5Ym9hcmRMYXlvdXRfU3BhbmlzaBATEiYKImtfRVN0ZWFtRGVj",
          "a0tleWJvYXJkTGF5b3V0X1N3ZWRpc2gQFBIjCh9rX0VTdGVhbURlY2tLZXli",
          "b2FyZExheW91dF9UaGFpEBUSKAoka19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlv",
          "dXRfVHVya2lzaF9GEBYSKAoka19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRf",
          "VHVya2lzaF9REBcSKAoka19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfVWty",
          "YWluaWFuEBgSKQola19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfVmlldG5h",
          "bWVzZRAZEjMKL2tfRVN0ZWFtRGVja0tleWJvYXJkTGF5b3V0X1FXRVJUWV9J",
          "bnRlcm5hdGlvbmFsEBoSJQoha19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRf",
          "RHZvcmFrEBsSJgoia19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRfQ29sZW1h",
          "axAcEj0KOWtfRVN0ZWFtRGVja0tleWJvYXJkTGF5b3V0X0J1bGdhcmlhbl9Q",
          "aG9uZXRpY19UcmFkaXRpb25hbBAdEjEKLWtfRVN0ZWFtRGVja0tleWJvYXJk",
          "TGF5b3V0X0J1bGdhcmlhbl9QaG9uZXRpYxAeEjsKN2tfRVN0ZWFtRGVja0tl",
          "eWJvYXJkTGF5b3V0X0NoaW5lc2VfVHJhZGl0aW9uYWxfQm9wb21vZm8QHxI6",
          "CjZrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9DaGluZXNlX1RyYWRpdGlv",
          "bmFsX0NhbmdqaWUQIBIsCihrX0VTdGVhbURlY2tLZXlib2FyZExheW91dF9K",
          "YXBhbmVzZV9LYW5hECESOAo0a19FU3RlYW1EZWNrS2V5Ym9hcmRMYXlvdXRf",
          "Q2hpbmVzZV9UcmFkaXRpb25hbF9RdWljaxAiQgVIAYABAA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ECloudPendingRemoteOperation), typeof(global::ESteamDeckKeyboardLayout), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SteamMessagesClientIClientForcedEnumDependencies), global::SteamMessagesClientIClientForcedEnumDependencies.Parser, new[]{ "A", "B", "C", "D" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceIP4Address), global::CMsgNetworkDeviceIP4Address.Parser, new[]{ "Ip", "Netmask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceIP4Config), global::CMsgNetworkDeviceIP4Config.Parser, new[]{ "Addresses", "DnsIp", "GatewayIp", "IsDhcpEnabled", "IsDefaultRoute", "IsEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceIP6Address), global::CMsgNetworkDeviceIP6Address.Parser, new[]{ "Ip" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceIP6Config), global::CMsgNetworkDeviceIP6Config.Parser, new[]{ "Addresses", "DnsIp", "GatewayIp", "IsDhcpEnabled", "IsDefaultRoute", "IsEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDevicesData), global::CMsgNetworkDevicesData.Parser, new[]{ "Devices", "IsWifiEnabled", "IsWifiScanningEnabled" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDevicesData.Types.Device), global::CMsgNetworkDevicesData.Types.Device.Parser, new[]{ "Id", "Etype", "Estate", "Mac", "Vendor", "Product", "Ip4", "Ip6", "Wired", "Wireless" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDevicesData.Types.Device.Types.Wired), global::CMsgNetworkDevicesData.Types.Device.Types.Wired.Parser, new[]{ "IsCablePresent", "SpeedMbit", "FriendlyName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDevicesData.Types.Device.Types.Wireless), global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Parser, new[]{ "Aps", "EsecuritySupported" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP), global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP.Parser, new[]{ "Id", "Estrength", "Ssid", "IsActive", "IsAutoconnect", "Esecurity", "UserName", "Password", "StrengthRaw" }, null, null, null, null)})})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceConnect), global::CMsgNetworkDeviceConnect.Parser, new[]{ "DeviceId", "Credentials", "Ip4", "Ip6", "ApKnown", "ApCustom" }, new[]{ "ApInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceConnect.Types.KnownAP), global::CMsgNetworkDeviceConnect.Types.KnownAP.Parser, new[]{ "ApId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceConnect.Types.CustomAP), global::CMsgNetworkDeviceConnect.Types.CustomAP.Parser, new[]{ "Ssid", "Esecurity" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgNetworkDeviceConnect.Types.Credentials), global::CMsgNetworkDeviceConnect.Types.Credentials.Parser, new[]{ "Username", "Password" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgStorageDevicesData), global::CMsgStorageDevicesData.Parser, new[]{ "Drives", "BlockDevices", "IsUnmountSupported", "IsTrimSupported", "IsTrimRunning" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgStorageDevicesData.Types.Drive), global::CMsgStorageDevicesData.Types.Drive.Parser, new[]{ "Id", "Model", "Vendor", "Serial", "IsEjectable", "SizeBytes", "MediaType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgStorageDevicesData.Types.BlockDevice), global::CMsgStorageDevicesData.Types.BlockDevice.Parser, new[]{ "Id", "DriveId", "Path", "FriendlyPath", "Label", "SizeBytes", "IsFormattable", "IsReadOnly", "IsRootDevice", "ContentType", "FilesystemType", "MountPath" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CCloud_PendingRemoteOperation), global::CCloud_PendingRemoteOperation.Parser, new[]{ "Operation", "MachineName", "ClientId", "TimeLastUpdated" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgCloudPendingRemoteOperations), global::CMsgCloudPendingRemoteOperations.Parser, new[]{ "Operations" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgBluetoothDevicesData), global::CMsgBluetoothDevicesData.Parser, new[]{ "Adapters", "Devices", "Manager" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgBluetoothDevicesData.Types.Adapter), global::CMsgBluetoothDevicesData.Types.Adapter.Parser, new[]{ "Id", "Mac", "Name", "IsEnabled", "IsDiscovering" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgBluetoothDevicesData.Types.Device), global::CMsgBluetoothDevicesData.Types.Device.Parser, new[]{ "Id", "AdapterId", "Etype", "Mac", "Name", "IsConnected", "IsPaired", "StrengthRaw" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgBluetoothDevicesData.Types.Manager), global::CMsgBluetoothDevicesData.Types.Manager.Parser, new[]{ "IsBluetoothEnabled" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfDiagnosticEntry), global::CMsgSystemPerfDiagnosticEntry.Parser, new[]{ "Name", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfNetworkInterface), global::CMsgSystemPerfNetworkInterface.Parser, new[]{ "Name", "Timestamp", "TxBytesTotal", "RxBytesTotal", "TxBytesPerSec", "RxBytesPerSec" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfDiagnosticInfo), global::CMsgSystemPerfDiagnosticInfo.Parser, new[]{ "Entries", "Interfaces", "BatteryTempC" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfLimits), global::CMsgSystemPerfLimits.Parser, new[]{ "CpuGovernorManualMinMhz", "CpuGovernorManualMaxMhz", "FsrSharpnessMin", "FsrSharpnessMax", "GpuPerformanceManualMinMhz", "GpuPerformanceManualMaxMhz", "PerfOverlayIsStandalone", "IsDynamicVrsAvailable", "IsManualDisplayRefreshRateAvailable", "GpuPerformanceLevelsAvailable", "DisplayRefreshManualHzMin", "DisplayRefreshManualHzMax", "FpsLimitOptions", "TdpLimitMin", "TdpLimitMax", "IsNisSupported", "NisSharpnessMin", "NisSharpnessMax", "DisplayExternalRefreshManualHzMin", "DisplayExternalRefreshManualHzMax", "FpsLimitOptionsExternal", "IsTearingSupported", "IsVrrSupported", "IsDynamicRefreshRateInSteamSupported", "IsSplitScalingAndFilteringSupported", "SplitScalingFiltersAvailable", "SplitScalingScalersAvailable", "IsHdrSupported", "DisplayRefreshManualHzOcMax" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfSettingsGlobal), global::CMsgSystemPerfSettingsGlobal.Parser, new[]{ "DiagnosticUpdateRate", "SystemTraceServiceState", "GraphicsProfilingServiceState", "PerfOverlayServiceState", "PerfOverlayLevel", "IsShowPerfOverlayOverSteamEnabled", "IsAdvancedSettingsEnabled", "AllowExternalDisplayRefreshControl", "IsHdrEnabled", "HdrOnSdrTonemapOperator", "IsHdrDebugHeatmapEnabled", "ForceHdrWideGammutForSdr", "AllowExperimentalHdr", "SdrToHdrBrightness", "DebugForceHdrSupport", "ForceHdr10PqOutputDebug", "IsDisplayOcEnabled", "IsColorManagementEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfSettingsPerApp), global::CMsgSystemPerfSettingsPerApp.Parser, new[]{ "GpuPerformanceManualMhz", "FpsLimit", "IsVariableResolutionEnabled", "IsDynamicRefreshRateEnabled", "TdpLimit", "CpuGovernor", "CpuGovernorManualMhz", "ScalingFilter", "FsrSharpness", "IsFpsLimitEnabled", "IsTdpLimitEnabled", "IsLowLatencyModeEnabled", "DisplayRefreshManualHz", "IsGamePerfProfileEnabled", "GpuPerformanceLevel", "NisSharpness", "DisplayExternalRefreshManualHz", "FpsLimitExternal", "IsTearingEnabled", "IsVrrEnabled", "IsCompositeDebugEnabled", "ForceComposite", "UseDynamicRefreshRateInSteam", "SplitScalingFilter", "SplitScalingScaler" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfSettings), global::CMsgSystemPerfSettings.Parser, new[]{ "Global", "PerApp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfSettingsV1), global::CMsgSystemPerfSettingsV1.Parser, new[]{ "DiagnosticUpdateRate", "SystemTraceServiceState", "GraphicsProfilingServiceState", "PerfOverlayServiceState", "PerfOverlayLevel", "GpuPerformanceLevel", "GpuPerformanceManualMhz", "FpsLimit", "IsVariableResolutionEnabled", "IsDynamicRefreshRateEnabled", "TdpLimit", "CpuGovernor", "CpuGovernorManualMhz", "ScalingFilter", "FsrSharpness", "IsFpsLimitEnabled", "IsTdpLimitEnabled", "IsShowPerfOverlayOverSteamEnabled", "IsLowLatencyModeEnabled", "DisplayRefreshManualHz", "IsGamePerfProfileEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfState), global::CMsgSystemPerfState.Parser, new[]{ "Limits", "Settings", "CurrentGameId", "ActiveProfileGameId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemPerfUpdateSettings), global::CMsgSystemPerfUpdateSettings.Parser, new[]{ "Gameid", "SkipStorageUpdate", "ResetToDefault", "SettingsDelta" }, new[]{ "Update" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDockUpdateState), global::CMsgSystemDockUpdateState.Parser, new[]{ "State", "RtimeLastChecked", "VersionCurrent", "VersionAvailable", "StageProgress", "RtimeEstimatedCompletion", "OldFwWorkaround" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDockState), global::CMsgSystemDockState.Parser, new[]{ "UpdateState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDockUpdateFirmware), global::CMsgSystemDockUpdateFirmware.Parser, new[]{ "CheckOnly" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioVolume), global::CMsgSystemAudioVolume.Parser, new[]{ "Entries", "IsMuted" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioVolume.Types.ChannelEntry), global::CMsgSystemAudioVolume.Types.ChannelEntry.Parser, new[]{ "Echannel", "Volume" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerObject), global::CMsgSystemAudioManagerObject.Parser, new[]{ "Id", "RtimeLastUpdate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerDevice), global::CMsgSystemAudioManagerDevice.Parser, new[]{ "Base", "Name", "Nick", "Description", "Api" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerNode), global::CMsgSystemAudioManagerNode.Parser, new[]{ "Base", "DeviceId", "Name", "Nick", "Description", "Edirection", "Volume" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerPort), global::CMsgSystemAudioManagerPort.Parser, new[]{ "Base", "NodeId", "Name", "Alias", "Etype", "Edirection", "IsPhysical", "IsTerminal", "IsControl", "IsMonitor" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerLink), global::CMsgSystemAudioManagerLink.Parser, new[]{ "Base", "OutputNodeId", "OutputPortId", "InputNodeId", "InputPortId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerStateHW), global::CMsgSystemAudioManagerStateHW.Parser, new[]{ "Devices", "Nodes", "Ports", "Links" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerState), global::CMsgSystemAudioManagerState.Parser, new[]{ "RtimeFilter", "Counter", "Hw" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemAudioManagerUpdateSomething), global::CMsgSystemAudioManagerUpdateSomething.Parser, new[]{ "Counter" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDisplayMode), global::CMsgSystemDisplayMode.Parser, new[]{ "Id", "Width", "Height", "RefreshHz" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDisplay), global::CMsgSystemDisplay.Parser, new[]{ "Id", "Name", "Description", "IsPrimary", "IsEnabled", "IsInternal", "HasModeOverride", "WidthMm", "HeightMm", "CurrentModeId", "Modes", "RefreshRateMin", "RefreshRateMax", "IsVrrCapable", "IsVrrEnabled", "IsHdrCapable", "IsHdrEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDisplayManagerState), global::CMsgSystemDisplayManagerState.Parser, new[]{ "Displays", "IsModeSwitchingSupported", "CompatibilityMode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemDisplayManagerSetMode), global::CMsgSystemDisplayManagerSetMode.Parser, new[]{ "DisplayId", "ModeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemManagerSettings), global::CMsgSystemManagerSettings.Parser, new[]{ "IdleBacklightDimBatterySeconds", "IdleBacklightDimAcSeconds", "IdleSuspendBatterySeconds", "IdleSuspendAcSeconds", "IdleSuspendSupressed", "IsAdaptiveBrightnessAvailable", "DisplayAdaptiveBrightnessEnabled", "DisplayNightmodeEnabled", "DisplayNightmodeTintstrength", "DisplayNightmodeMaxhue", "DisplayNightmodeMaxsat", "DisplayNightmodeUiexp", "DisplayNightmodeBlend", "DisplayNightmodeReset", "DisplayNightmodeScheduleEnabled", "DisplayNightmodeScheduleStarttime", "DisplayNightmodeScheduleEndtime", "DisplayDiagnosticsEnabled", "AlsLuxLatest", "AlsLuxMedian", "DisplayBacklightRaw", "DisplayBrightnessAdaptivemin", "DisplayBrightnessAdaptivemax", "IsWifiPowersaveEnabled", "IsFanControlAvailable", "FanControlMode", "IsDisplayBrightnessAvailable", "IsDisplayColormanagementAvailable", "DisplayColorgamut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSelectOSBranchParams), global::CMsgSelectOSBranchParams.Parser, new[]{ "Branch", "CustomBranch" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemUpdateProgress), global::CMsgSystemUpdateProgress.Parser, new[]{ "StageProgress", "StageSizeBytes", "RtimeEstimatedCompletion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemUpdateCheckResult), global::CMsgSystemUpdateCheckResult.Parser, new[]{ "Type", "Eresult", "RtimeChecked", "Available", "Version", "AutoMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemUpdateApplyParams), global::CMsgSystemUpdateApplyParams.Parser, new[]{ "ApplyTypes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemUpdateApplyResult), global::CMsgSystemUpdateApplyResult.Parser, new[]{ "Type", "Eresult", "RequiresClientRestart", "RequiresSystemRestart" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSystemUpdateState), global::CMsgSystemUpdateState.Parser, new[]{ "State", "Progress", "UpdateCheckResults", "UpdateApplyResults", "SupportsOsUpdates" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgAchievementChange), global::CMsgAchievementChange.Parser, new[]{ "Appid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgCellList), global::CMsgCellList.Parser, new[]{ "Cells" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgCellList.Types.Cell), global::CMsgCellList.Types.Cell.Parser, new[]{ "CellId", "LocName" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgShortcutInfo), global::CMsgShortcutInfo.Parser, new[]{ "Appid", "Exe", "StartDir", "Icon", "Path", "Args", "AppName", "OverrideAppid", "FlatpakAppid", "Tags", "IsRemote", "IsHidden", "IsTemporary", "IsOpenvr", "AllowDesktopConfig", "AllowOverlay", "RtLastPlayedTime", "IsDevkitShortcut", "DevkitGameid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgShortcutAppIds), global::CMsgShortcutAppIds.Parser, new[]{ "Appids" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgMonitorInfo), global::CMsgMonitorInfo.Parser, new[]{ "SelectedDisplayName", "Monitors" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgMonitorInfo.Types.MonitorInfo), global::CMsgMonitorInfo.Types.MonitorInfo.Parser, new[]{ "MonitorDeviceName", "MonitorDisplayName" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGenerateSystemReportReply), global::CMsgGenerateSystemReportReply.Parser, new[]{ "ReportId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgWebUITransportInfo), global::CMsgWebUITransportInfo.Parser, new[]{ "Port", "AuthKey" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ECloudPendingRemoteOperation {
  [pbr::OriginalName("k_ECloudPendingRemoteOperationNone")] KEcloudPendingRemoteOperationNone = 0,
  [pbr::OriginalName("k_ECloudPendingRemoteOperationAppSessionActive")] KEcloudPendingRemoteOperationAppSessionActive = 1,
  [pbr::OriginalName("k_ECloudPendingRemoteOperationUploadInProgress")] KEcloudPendingRemoteOperationUploadInProgress = 2,
  [pbr::OriginalName("k_ECloudPendingRemoteOperationUploadPending")] KEcloudPendingRemoteOperationUploadPending = 3,
  [pbr::OriginalName("k_ECloudPendingRemoteOperationAppSessionSuspended")] KEcloudPendingRemoteOperationAppSessionSuspended = 4,
}

public enum ESteamDeckKeyboardLayout {
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_QWERTY")] KEsteamDeckKeyboardLayoutQwerty = 0,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Bulgarian")] KEsteamDeckKeyboardLayoutBulgarian = 1,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Chinese_Simplified")] KEsteamDeckKeyboardLayoutChineseSimplified = 2,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Chinese_Traditional")] KEsteamDeckKeyboardLayoutChineseTraditional = 3,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Czech")] KEsteamDeckKeyboardLayoutCzech = 4,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Danish")] KEsteamDeckKeyboardLayoutDanish = 5,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Finnish")] KEsteamDeckKeyboardLayoutFinnish = 6,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_French")] KEsteamDeckKeyboardLayoutFrench = 7,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_German")] KEsteamDeckKeyboardLayoutGerman = 8,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Greek")] KEsteamDeckKeyboardLayoutGreek = 9,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Hungarian")] KEsteamDeckKeyboardLayoutHungarian = 10,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Italian")] KEsteamDeckKeyboardLayoutItalian = 11,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Japanese")] KEsteamDeckKeyboardLayoutJapanese = 12,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Korean")] KEsteamDeckKeyboardLayoutKorean = 13,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Norwegian")] KEsteamDeckKeyboardLayoutNorwegian = 14,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Polish")] KEsteamDeckKeyboardLayoutPolish = 15,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Portuguese")] KEsteamDeckKeyboardLayoutPortuguese = 16,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Romanian")] KEsteamDeckKeyboardLayoutRomanian = 17,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Russian")] KEsteamDeckKeyboardLayoutRussian = 18,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Spanish")] KEsteamDeckKeyboardLayoutSpanish = 19,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Swedish")] KEsteamDeckKeyboardLayoutSwedish = 20,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Thai")] KEsteamDeckKeyboardLayoutThai = 21,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Turkish_F")] KEsteamDeckKeyboardLayoutTurkishF = 22,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Turkish_Q")] KEsteamDeckKeyboardLayoutTurkishQ = 23,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Ukrainian")] KEsteamDeckKeyboardLayoutUkrainian = 24,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Vietnamese")] KEsteamDeckKeyboardLayoutVietnamese = 25,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_QWERTY_International")] KEsteamDeckKeyboardLayoutQwertyInternational = 26,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Dvorak")] KEsteamDeckKeyboardLayoutDvorak = 27,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Colemak")] KEsteamDeckKeyboardLayoutColemak = 28,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional")] KEsteamDeckKeyboardLayoutBulgarianPhoneticTraditional = 29,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic")] KEsteamDeckKeyboardLayoutBulgarianPhonetic = 30,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo")] KEsteamDeckKeyboardLayoutChineseTraditionalBopomofo = 31,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie")] KEsteamDeckKeyboardLayoutChineseTraditionalCangjie = 32,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Japanese_Kana")] KEsteamDeckKeyboardLayoutJapaneseKana = 33,
  [pbr::OriginalName("k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick")] KEsteamDeckKeyboardLayoutChineseTraditionalQuick = 34,
}

#endregion

#region Messages
public sealed partial class SteamMessagesClientIClientForcedEnumDependencies : pb::IMessage<SteamMessagesClientIClientForcedEnumDependencies>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SteamMessagesClientIClientForcedEnumDependencies> _parser = new pb::MessageParser<SteamMessagesClientIClientForcedEnumDependencies>(() => new SteamMessagesClientIClientForcedEnumDependencies());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SteamMessagesClientIClientForcedEnumDependencies> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SteamMessagesClientIClientForcedEnumDependencies() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SteamMessagesClientIClientForcedEnumDependencies(SteamMessagesClientIClientForcedEnumDependencies other) : this() {
    _hasBits0 = other._hasBits0;
    a_ = other.a_;
    b_ = other.b_;
    c_ = other.c_;
    d_ = other.d_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SteamMessagesClientIClientForcedEnumDependencies Clone() {
    return new SteamMessagesClientIClientForcedEnumDependencies(this);
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 1;
  private readonly static global::EBluetoothDeviceType ADefaultValue = global::EBluetoothDeviceType.KBluetoothDeviceTypeInvalid;

  private global::EBluetoothDeviceType a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EBluetoothDeviceType A {
    get { if ((_hasBits0 & 1) != 0) { return a_; } else { return ADefaultValue; } }
    set {
      _hasBits0 |= 1;
      a_ = value;
    }
  }
  /// <summary>Gets whether the "a" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasA {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "a" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearA() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 2;
  private readonly static global::EStorageBlockContentType BDefaultValue = global::EStorageBlockContentType.KEstorageBlockContentTypeInvalid;

  private global::EStorageBlockContentType b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EStorageBlockContentType B {
    get { if ((_hasBits0 & 2) != 0) { return b_; } else { return BDefaultValue; } }
    set {
      _hasBits0 |= 2;
      b_ = value;
    }
  }
  /// <summary>Gets whether the "b" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasB {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "b" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearB() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "c" field.</summary>
  public const int CFieldNumber = 3;
  private readonly static global::EStorageBlockFileSystemType CDefaultValue = global::EStorageBlockFileSystemType.KEstorageBlockFileSystemTypeInvalid;

  private global::EStorageBlockFileSystemType c_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EStorageBlockFileSystemType C {
    get { if ((_hasBits0 & 4) != 0) { return c_; } else { return CDefaultValue; } }
    set {
      _hasBits0 |= 4;
      c_ = value;
    }
  }
  /// <summary>Gets whether the "c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasC {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearC() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "d" field.</summary>
  public const int DFieldNumber = 4;
  private readonly static global::ESDCardFormatStage DDefaultValue = global::ESDCardFormatStage.KEsdcardFormatStageInvalid;

  private global::ESDCardFormatStage d_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESDCardFormatStage D {
    get { if ((_hasBits0 & 8) != 0) { return d_; } else { return DDefaultValue; } }
    set {
      _hasBits0 |= 8;
      d_ = value;
    }
  }
  /// <summary>Gets whether the "d" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasD {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "d" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearD() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SteamMessagesClientIClientForcedEnumDependencies);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SteamMessagesClientIClientForcedEnumDependencies other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (A != other.A) return false;
    if (B != other.B) return false;
    if (C != other.C) return false;
    if (D != other.D) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasA) hash ^= A.GetHashCode();
    if (HasB) hash ^= B.GetHashCode();
    if (HasC) hash ^= C.GetHashCode();
    if (HasD) hash ^= D.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasA) {
      output.WriteRawTag(8);
      output.WriteEnum((int) A);
    }
    if (HasB) {
      output.WriteRawTag(16);
      output.WriteEnum((int) B);
    }
    if (HasC) {
      output.WriteRawTag(24);
      output.WriteEnum((int) C);
    }
    if (HasD) {
      output.WriteRawTag(32);
      output.WriteEnum((int) D);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasA) {
      output.WriteRawTag(8);
      output.WriteEnum((int) A);
    }
    if (HasB) {
      output.WriteRawTag(16);
      output.WriteEnum((int) B);
    }
    if (HasC) {
      output.WriteRawTag(24);
      output.WriteEnum((int) C);
    }
    if (HasD) {
      output.WriteRawTag(32);
      output.WriteEnum((int) D);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasA) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) A);
    }
    if (HasB) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) B);
    }
    if (HasC) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) C);
    }
    if (HasD) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SteamMessagesClientIClientForcedEnumDependencies other) {
    if (other == null) {
      return;
    }
    if (other.HasA) {
      A = other.A;
    }
    if (other.HasB) {
      B = other.B;
    }
    if (other.HasC) {
      C = other.C;
    }
    if (other.HasD) {
      D = other.D;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          A = (global::EBluetoothDeviceType) input.ReadEnum();
          break;
        }
        case 16: {
          B = (global::EStorageBlockContentType) input.ReadEnum();
          break;
        }
        case 24: {
          C = (global::EStorageBlockFileSystemType) input.ReadEnum();
          break;
        }
        case 32: {
          D = (global::ESDCardFormatStage) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          A = (global::EBluetoothDeviceType) input.ReadEnum();
          break;
        }
        case 16: {
          B = (global::EStorageBlockContentType) input.ReadEnum();
          break;
        }
        case 24: {
          C = (global::EStorageBlockFileSystemType) input.ReadEnum();
          break;
        }
        case 32: {
          D = (global::ESDCardFormatStage) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgNetworkDeviceIP4Address : pb::IMessage<CMsgNetworkDeviceIP4Address>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDeviceIP4Address> _parser = new pb::MessageParser<CMsgNetworkDeviceIP4Address>(() => new CMsgNetworkDeviceIP4Address());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDeviceIP4Address> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Address() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Address(CMsgNetworkDeviceIP4Address other) : this() {
    _hasBits0 = other._hasBits0;
    ip_ = other.ip_;
    netmask_ = other.netmask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Address Clone() {
    return new CMsgNetworkDeviceIP4Address(this);
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 1;
  private readonly static int IpDefaultValue = 0;

  private int ip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Ip {
    get { if ((_hasBits0 & 1) != 0) { return ip_; } else { return IpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ip_ = value;
    }
  }
  /// <summary>Gets whether the "ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "netmask" field.</summary>
  public const int NetmaskFieldNumber = 2;
  private readonly static int NetmaskDefaultValue = 0;

  private int netmask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Netmask {
    get { if ((_hasBits0 & 2) != 0) { return netmask_; } else { return NetmaskDefaultValue; } }
    set {
      _hasBits0 |= 2;
      netmask_ = value;
    }
  }
  /// <summary>Gets whether the "netmask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNetmask {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "netmask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNetmask() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDeviceIP4Address);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDeviceIP4Address other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ip != other.Ip) return false;
    if (Netmask != other.Netmask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIp) hash ^= Ip.GetHashCode();
    if (HasNetmask) hash ^= Netmask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasIp) {
      output.WriteRawTag(8);
      output.WriteInt32(Ip);
    }
    if (HasNetmask) {
      output.WriteRawTag(16);
      output.WriteInt32(Netmask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasIp) {
      output.WriteRawTag(8);
      output.WriteInt32(Ip);
    }
    if (HasNetmask) {
      output.WriteRawTag(16);
      output.WriteInt32(Netmask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasIp) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ip);
    }
    if (HasNetmask) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netmask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDeviceIP4Address other) {
    if (other == null) {
      return;
    }
    if (other.HasIp) {
      Ip = other.Ip;
    }
    if (other.HasNetmask) {
      Netmask = other.Netmask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Ip = input.ReadInt32();
          break;
        }
        case 16: {
          Netmask = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Ip = input.ReadInt32();
          break;
        }
        case 16: {
          Netmask = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgNetworkDeviceIP4Config : pb::IMessage<CMsgNetworkDeviceIP4Config>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDeviceIP4Config> _parser = new pb::MessageParser<CMsgNetworkDeviceIP4Config>(() => new CMsgNetworkDeviceIP4Config());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDeviceIP4Config> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Config() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Config(CMsgNetworkDeviceIP4Config other) : this() {
    _hasBits0 = other._hasBits0;
    addresses_ = other.addresses_.Clone();
    dnsIp_ = other.dnsIp_.Clone();
    gatewayIp_ = other.gatewayIp_;
    isDhcpEnabled_ = other.isDhcpEnabled_;
    isDefaultRoute_ = other.isDefaultRoute_;
    isEnabled_ = other.isEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP4Config Clone() {
    return new CMsgNetworkDeviceIP4Config(this);
  }

  /// <summary>Field number for the "addresses" field.</summary>
  public const int AddressesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgNetworkDeviceIP4Address> _repeated_addresses_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgNetworkDeviceIP4Address.Parser);
  private readonly pbc::RepeatedField<global::CMsgNetworkDeviceIP4Address> addresses_ = new pbc::RepeatedField<global::CMsgNetworkDeviceIP4Address>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgNetworkDeviceIP4Address> Addresses {
    get { return addresses_; }
  }

  /// <summary>Field number for the "dns_ip" field.</summary>
  public const int DnsIpFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_dnsIp_codec
      = pb::FieldCodec.ForInt32(16);
  private readonly pbc::RepeatedField<int> dnsIp_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<int> DnsIp {
    get { return dnsIp_; }
  }

  /// <summary>Field number for the "gateway_ip" field.</summary>
  public const int GatewayIpFieldNumber = 3;
  private readonly static int GatewayIpDefaultValue = 0;

  private int gatewayIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GatewayIp {
    get { if ((_hasBits0 & 1) != 0) { return gatewayIp_; } else { return GatewayIpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gatewayIp_ = value;
    }
  }
  /// <summary>Gets whether the "gateway_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGatewayIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gateway_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGatewayIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "is_dhcp_enabled" field.</summary>
  public const int IsDhcpEnabledFieldNumber = 4;
  private readonly static bool IsDhcpEnabledDefaultValue = false;

  private bool isDhcpEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDhcpEnabled {
    get { if ((_hasBits0 & 2) != 0) { return isDhcpEnabled_; } else { return IsDhcpEnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isDhcpEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_dhcp_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDhcpEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_dhcp_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDhcpEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_default_route" field.</summary>
  public const int IsDefaultRouteFieldNumber = 5;
  private readonly static bool IsDefaultRouteDefaultValue = false;

  private bool isDefaultRoute_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDefaultRoute {
    get { if ((_hasBits0 & 4) != 0) { return isDefaultRoute_; } else { return IsDefaultRouteDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isDefaultRoute_ = value;
    }
  }
  /// <summary>Gets whether the "is_default_route" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDefaultRoute {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_default_route" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDefaultRoute() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_enabled" field.</summary>
  public const int IsEnabledFieldNumber = 6;
  private readonly static bool IsEnabledDefaultValue = false;

  private bool isEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsEnabled {
    get { if ((_hasBits0 & 8) != 0) { return isEnabled_; } else { return IsEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsEnabled {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsEnabled() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDeviceIP4Config);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDeviceIP4Config other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!addresses_.Equals(other.addresses_)) return false;
    if(!dnsIp_.Equals(other.dnsIp_)) return false;
    if (GatewayIp != other.GatewayIp) return false;
    if (IsDhcpEnabled != other.IsDhcpEnabled) return false;
    if (IsDefaultRoute != other.IsDefaultRoute) return false;
    if (IsEnabled != other.IsEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= addresses_.GetHashCode();
    hash ^= dnsIp_.GetHashCode();
    if (HasGatewayIp) hash ^= GatewayIp.GetHashCode();
    if (HasIsDhcpEnabled) hash ^= IsDhcpEnabled.GetHashCode();
    if (HasIsDefaultRoute) hash ^= IsDefaultRoute.GetHashCode();
    if (HasIsEnabled) hash ^= IsEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    addresses_.WriteTo(output, _repeated_addresses_codec);
    dnsIp_.WriteTo(output, _repeated_dnsIp_codec);
    if (HasGatewayIp) {
      output.WriteRawTag(24);
      output.WriteInt32(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDhcpEnabled);
    }
    if (HasIsDefaultRoute) {
      output.WriteRawTag(40);
      output.WriteBool(IsDefaultRoute);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    addresses_.WriteTo(ref output, _repeated_addresses_codec);
    dnsIp_.WriteTo(ref output, _repeated_dnsIp_codec);
    if (HasGatewayIp) {
      output.WriteRawTag(24);
      output.WriteInt32(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDhcpEnabled);
    }
    if (HasIsDefaultRoute) {
      output.WriteRawTag(40);
      output.WriteBool(IsDefaultRoute);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += addresses_.CalculateSize(_repeated_addresses_codec);
    size += dnsIp_.CalculateSize(_repeated_dnsIp_codec);
    if (HasGatewayIp) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      size += 1 + 1;
    }
    if (HasIsDefaultRoute) {
      size += 1 + 1;
    }
    if (HasIsEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDeviceIP4Config other) {
    if (other == null) {
      return;
    }
    addresses_.Add(other.addresses_);
    dnsIp_.Add(other.dnsIp_);
    if (other.HasGatewayIp) {
      GatewayIp = other.GatewayIp;
    }
    if (other.HasIsDhcpEnabled) {
      IsDhcpEnabled = other.IsDhcpEnabled;
    }
    if (other.HasIsDefaultRoute) {
      IsDefaultRoute = other.IsDefaultRoute;
    }
    if (other.HasIsEnabled) {
      IsEnabled = other.IsEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
          break;
        }
        case 18:
        case 16: {
          dnsIp_.AddEntriesFrom(input, _repeated_dnsIp_codec);
          break;
        }
        case 24: {
          GatewayIp = input.ReadInt32();
          break;
        }
        case 32: {
          IsDhcpEnabled = input.ReadBool();
          break;
        }
        case 40: {
          IsDefaultRoute = input.ReadBool();
          break;
        }
        case 48: {
          IsEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          addresses_.AddEntriesFrom(ref input, _repeated_addresses_codec);
          break;
        }
        case 18:
        case 16: {
          dnsIp_.AddEntriesFrom(ref input, _repeated_dnsIp_codec);
          break;
        }
        case 24: {
          GatewayIp = input.ReadInt32();
          break;
        }
        case 32: {
          IsDhcpEnabled = input.ReadBool();
          break;
        }
        case 40: {
          IsDefaultRoute = input.ReadBool();
          break;
        }
        case 48: {
          IsEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgNetworkDeviceIP6Address : pb::IMessage<CMsgNetworkDeviceIP6Address>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDeviceIP6Address> _parser = new pb::MessageParser<CMsgNetworkDeviceIP6Address>(() => new CMsgNetworkDeviceIP6Address());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDeviceIP6Address> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Address() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Address(CMsgNetworkDeviceIP6Address other) : this() {
    ip_ = other.ip_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Address Clone() {
    return new CMsgNetworkDeviceIP6Address(this);
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 1;
  private readonly static string IpDefaultValue = "";

  private string ip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Ip {
    get { return ip_ ?? IpDefaultValue; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIp {
    get { return ip_ != null; }
  }
  /// <summary>Clears the value of the "ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIp() {
    ip_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDeviceIP6Address);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDeviceIP6Address other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ip != other.Ip) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIp) hash ^= Ip.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasIp) {
      output.WriteRawTag(10);
      output.WriteString(Ip);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasIp) {
      output.WriteRawTag(10);
      output.WriteString(Ip);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasIp) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDeviceIP6Address other) {
    if (other == null) {
      return;
    }
    if (other.HasIp) {
      Ip = other.Ip;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ip = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Ip = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgNetworkDeviceIP6Config : pb::IMessage<CMsgNetworkDeviceIP6Config>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDeviceIP6Config> _parser = new pb::MessageParser<CMsgNetworkDeviceIP6Config>(() => new CMsgNetworkDeviceIP6Config());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDeviceIP6Config> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Config() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Config(CMsgNetworkDeviceIP6Config other) : this() {
    _hasBits0 = other._hasBits0;
    addresses_ = other.addresses_.Clone();
    dnsIp_ = other.dnsIp_.Clone();
    gatewayIp_ = other.gatewayIp_;
    isDhcpEnabled_ = other.isDhcpEnabled_;
    isDefaultRoute_ = other.isDefaultRoute_;
    isEnabled_ = other.isEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceIP6Config Clone() {
    return new CMsgNetworkDeviceIP6Config(this);
  }

  /// <summary>Field number for the "addresses" field.</summary>
  public const int AddressesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgNetworkDeviceIP6Address> _repeated_addresses_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgNetworkDeviceIP6Address.Parser);
  private readonly pbc::RepeatedField<global::CMsgNetworkDeviceIP6Address> addresses_ = new pbc::RepeatedField<global::CMsgNetworkDeviceIP6Address>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgNetworkDeviceIP6Address> Addresses {
    get { return addresses_; }
  }

  /// <summary>Field number for the "dns_ip" field.</summary>
  public const int DnsIpFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_dnsIp_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> dnsIp_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> DnsIp {
    get { return dnsIp_; }
  }

  /// <summary>Field number for the "gateway_ip" field.</summary>
  public const int GatewayIpFieldNumber = 3;
  private readonly static string GatewayIpDefaultValue = "";

  private string gatewayIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GatewayIp {
    get { return gatewayIp_ ?? GatewayIpDefaultValue; }
    set {
      gatewayIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gateway_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGatewayIp {
    get { return gatewayIp_ != null; }
  }
  /// <summary>Clears the value of the "gateway_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGatewayIp() {
    gatewayIp_ = null;
  }

  /// <summary>Field number for the "is_dhcp_enabled" field.</summary>
  public const int IsDhcpEnabledFieldNumber = 4;
  private readonly static bool IsDhcpEnabledDefaultValue = false;

  private bool isDhcpEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDhcpEnabled {
    get { if ((_hasBits0 & 1) != 0) { return isDhcpEnabled_; } else { return IsDhcpEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isDhcpEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_dhcp_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDhcpEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_dhcp_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDhcpEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "is_default_route" field.</summary>
  public const int IsDefaultRouteFieldNumber = 5;
  private readonly static bool IsDefaultRouteDefaultValue = false;

  private bool isDefaultRoute_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDefaultRoute {
    get { if ((_hasBits0 & 2) != 0) { return isDefaultRoute_; } else { return IsDefaultRouteDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isDefaultRoute_ = value;
    }
  }
  /// <summary>Gets whether the "is_default_route" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDefaultRoute {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_default_route" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDefaultRoute() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_enabled" field.</summary>
  public const int IsEnabledFieldNumber = 6;
  private readonly static bool IsEnabledDefaultValue = false;

  private bool isEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsEnabled {
    get { if ((_hasBits0 & 4) != 0) { return isEnabled_; } else { return IsEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsEnabled() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDeviceIP6Config);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDeviceIP6Config other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!addresses_.Equals(other.addresses_)) return false;
    if(!dnsIp_.Equals(other.dnsIp_)) return false;
    if (GatewayIp != other.GatewayIp) return false;
    if (IsDhcpEnabled != other.IsDhcpEnabled) return false;
    if (IsDefaultRoute != other.IsDefaultRoute) return false;
    if (IsEnabled != other.IsEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= addresses_.GetHashCode();
    hash ^= dnsIp_.GetHashCode();
    if (HasGatewayIp) hash ^= GatewayIp.GetHashCode();
    if (HasIsDhcpEnabled) hash ^= IsDhcpEnabled.GetHashCode();
    if (HasIsDefaultRoute) hash ^= IsDefaultRoute.GetHashCode();
    if (HasIsEnabled) hash ^= IsEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    addresses_.WriteTo(output, _repeated_addresses_codec);
    dnsIp_.WriteTo(output, _repeated_dnsIp_codec);
    if (HasGatewayIp) {
      output.WriteRawTag(26);
      output.WriteString(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDhcpEnabled);
    }
    if (HasIsDefaultRoute) {
      output.WriteRawTag(40);
      output.WriteBool(IsDefaultRoute);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    addresses_.WriteTo(ref output, _repeated_addresses_codec);
    dnsIp_.WriteTo(ref output, _repeated_dnsIp_codec);
    if (HasGatewayIp) {
      output.WriteRawTag(26);
      output.WriteString(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDhcpEnabled);
    }
    if (HasIsDefaultRoute) {
      output.WriteRawTag(40);
      output.WriteBool(IsDefaultRoute);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += addresses_.CalculateSize(_repeated_addresses_codec);
    size += dnsIp_.CalculateSize(_repeated_dnsIp_codec);
    if (HasGatewayIp) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayIp);
    }
    if (HasIsDhcpEnabled) {
      size += 1 + 1;
    }
    if (HasIsDefaultRoute) {
      size += 1 + 1;
    }
    if (HasIsEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDeviceIP6Config other) {
    if (other == null) {
      return;
    }
    addresses_.Add(other.addresses_);
    dnsIp_.Add(other.dnsIp_);
    if (other.HasGatewayIp) {
      GatewayIp = other.GatewayIp;
    }
    if (other.HasIsDhcpEnabled) {
      IsDhcpEnabled = other.IsDhcpEnabled;
    }
    if (other.HasIsDefaultRoute) {
      IsDefaultRoute = other.IsDefaultRoute;
    }
    if (other.HasIsEnabled) {
      IsEnabled = other.IsEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
          break;
        }
        case 18: {
          dnsIp_.AddEntriesFrom(input, _repeated_dnsIp_codec);
          break;
        }
        case 26: {
          GatewayIp = input.ReadString();
          break;
        }
        case 32: {
          IsDhcpEnabled = input.ReadBool();
          break;
        }
        case 40: {
          IsDefaultRoute = input.ReadBool();
          break;
        }
        case 48: {
          IsEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          addresses_.AddEntriesFrom(ref input, _repeated_addresses_codec);
          break;
        }
        case 18: {
          dnsIp_.AddEntriesFrom(ref input, _repeated_dnsIp_codec);
          break;
        }
        case 26: {
          GatewayIp = input.ReadString();
          break;
        }
        case 32: {
          IsDhcpEnabled = input.ReadBool();
          break;
        }
        case 40: {
          IsDefaultRoute = input.ReadBool();
          break;
        }
        case 48: {
          IsEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgNetworkDevicesData : pb::IMessage<CMsgNetworkDevicesData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDevicesData> _parser = new pb::MessageParser<CMsgNetworkDevicesData>(() => new CMsgNetworkDevicesData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDevicesData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDevicesData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDevicesData(CMsgNetworkDevicesData other) : this() {
    _hasBits0 = other._hasBits0;
    devices_ = other.devices_.Clone();
    isWifiEnabled_ = other.isWifiEnabled_;
    isWifiScanningEnabled_ = other.isWifiScanningEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDevicesData Clone() {
    return new CMsgNetworkDevicesData(this);
  }

  /// <summary>Field number for the "devices" field.</summary>
  public const int DevicesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgNetworkDevicesData.Types.Device> _repeated_devices_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgNetworkDevicesData.Types.Device.Parser);
  private readonly pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device> devices_ = new pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device> Devices {
    get { return devices_; }
  }

  /// <summary>Field number for the "is_wifi_enabled" field.</summary>
  public const int IsWifiEnabledFieldNumber = 2;
  private readonly static bool IsWifiEnabledDefaultValue = false;

  private bool isWifiEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsWifiEnabled {
    get { if ((_hasBits0 & 1) != 0) { return isWifiEnabled_; } else { return IsWifiEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isWifiEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_wifi_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsWifiEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_wifi_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsWifiEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "is_wifi_scanning_enabled" field.</summary>
  public const int IsWifiScanningEnabledFieldNumber = 3;
  private readonly static bool IsWifiScanningEnabledDefaultValue = false;

  private bool isWifiScanningEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsWifiScanningEnabled {
    get { if ((_hasBits0 & 2) != 0) { return isWifiScanningEnabled_; } else { return IsWifiScanningEnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isWifiScanningEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_wifi_scanning_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsWifiScanningEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_wifi_scanning_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsWifiScanningEnabled() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDevicesData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDevicesData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!devices_.Equals(other.devices_)) return false;
    if (IsWifiEnabled != other.IsWifiEnabled) return false;
    if (IsWifiScanningEnabled != other.IsWifiScanningEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= devices_.GetHashCode();
    if (HasIsWifiEnabled) hash ^= IsWifiEnabled.GetHashCode();
    if (HasIsWifiScanningEnabled) hash ^= IsWifiScanningEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    devices_.WriteTo(output, _repeated_devices_codec);
    if (HasIsWifiEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(IsWifiEnabled);
    }
    if (HasIsWifiScanningEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(IsWifiScanningEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    devices_.WriteTo(ref output, _repeated_devices_codec);
    if (HasIsWifiEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(IsWifiEnabled);
    }
    if (HasIsWifiScanningEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(IsWifiScanningEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += devices_.CalculateSize(_repeated_devices_codec);
    if (HasIsWifiEnabled) {
      size += 1 + 1;
    }
    if (HasIsWifiScanningEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDevicesData other) {
    if (other == null) {
      return;
    }
    devices_.Add(other.devices_);
    if (other.HasIsWifiEnabled) {
      IsWifiEnabled = other.IsWifiEnabled;
    }
    if (other.HasIsWifiScanningEnabled) {
      IsWifiScanningEnabled = other.IsWifiScanningEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          devices_.AddEntriesFrom(input, _repeated_devices_codec);
          break;
        }
        case 16: {
          IsWifiEnabled = input.ReadBool();
          break;
        }
        case 24: {
          IsWifiScanningEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          devices_.AddEntriesFrom(ref input, _repeated_devices_codec);
          break;
        }
        case 16: {
          IsWifiEnabled = input.ReadBool();
          break;
        }
        case 24: {
          IsWifiScanningEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgNetworkDevicesData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Device : pb::IMessage<Device>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Device> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgNetworkDevicesData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device(Device other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        etype_ = other.etype_;
        estate_ = other.estate_;
        mac_ = other.mac_;
        vendor_ = other.vendor_;
        product_ = other.product_;
        ip4_ = other.ip4_ != null ? other.ip4_.Clone() : null;
        ip6_ = other.ip6_ != null ? other.ip6_.Clone() : null;
        wired_ = other.wired_ != null ? other.wired_.Clone() : null;
        wireless_ = other.wireless_ != null ? other.wireless_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device Clone() {
        return new Device(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static uint IdDefaultValue = 0;

      private uint id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "etype" field.</summary>
      public const int EtypeFieldNumber = 2;
      private readonly static int EtypeDefaultValue = 0;

      private int etype_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Etype {
        get { if ((_hasBits0 & 2) != 0) { return etype_; } else { return EtypeDefaultValue; } }
        set {
          _hasBits0 |= 2;
          etype_ = value;
        }
      }
      /// <summary>Gets whether the "etype" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasEtype {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "etype" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearEtype() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "estate" field.</summary>
      public const int EstateFieldNumber = 3;
      private readonly static int EstateDefaultValue = 0;

      private int estate_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Estate {
        get { if ((_hasBits0 & 4) != 0) { return estate_; } else { return EstateDefaultValue; } }
        set {
          _hasBits0 |= 4;
          estate_ = value;
        }
      }
      /// <summary>Gets whether the "estate" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasEstate {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "estate" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearEstate() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "mac" field.</summary>
      public const int MacFieldNumber = 4;
      private readonly static string MacDefaultValue = "";

      private string mac_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Mac {
        get { return mac_ ?? MacDefaultValue; }
        set {
          mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "mac" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMac {
        get { return mac_ != null; }
      }
      /// <summary>Clears the value of the "mac" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMac() {
        mac_ = null;
      }

      /// <summary>Field number for the "vendor" field.</summary>
      public const int VendorFieldNumber = 5;
      private readonly static string VendorDefaultValue = "";

      private string vendor_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Vendor {
        get { return vendor_ ?? VendorDefaultValue; }
        set {
          vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "vendor" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVendor {
        get { return vendor_ != null; }
      }
      /// <summary>Clears the value of the "vendor" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVendor() {
        vendor_ = null;
      }

      /// <summary>Field number for the "product" field.</summary>
      public const int ProductFieldNumber = 6;
      private readonly static string ProductDefaultValue = "";

      private string product_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Product {
        get { return product_ ?? ProductDefaultValue; }
        set {
          product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "product" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasProduct {
        get { return product_ != null; }
      }
      /// <summary>Clears the value of the "product" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearProduct() {
        product_ = null;
      }

      /// <summary>Field number for the "ip4" field.</summary>
      public const int Ip4FieldNumber = 7;
      private global::CMsgNetworkDeviceIP4Config ip4_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgNetworkDeviceIP4Config Ip4 {
        get { return ip4_; }
        set {
          ip4_ = value;
        }
      }

      /// <summary>Field number for the "ip6" field.</summary>
      public const int Ip6FieldNumber = 8;
      private global::CMsgNetworkDeviceIP6Config ip6_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgNetworkDeviceIP6Config Ip6 {
        get { return ip6_; }
        set {
          ip6_ = value;
        }
      }

      /// <summary>Field number for the "wired" field.</summary>
      public const int WiredFieldNumber = 9;
      private global::CMsgNetworkDevicesData.Types.Device.Types.Wired wired_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgNetworkDevicesData.Types.Device.Types.Wired Wired {
        get { return wired_; }
        set {
          wired_ = value;
        }
      }

      /// <summary>Field number for the "wireless" field.</summary>
      public const int WirelessFieldNumber = 10;
      private global::CMsgNetworkDevicesData.Types.Device.Types.Wireless wireless_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgNetworkDevicesData.Types.Device.Types.Wireless Wireless {
        get { return wireless_; }
        set {
          wireless_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Device);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Device other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (Etype != other.Etype) return false;
        if (Estate != other.Estate) return false;
        if (Mac != other.Mac) return false;
        if (Vendor != other.Vendor) return false;
        if (Product != other.Product) return false;
        if (!object.Equals(Ip4, other.Ip4)) return false;
        if (!object.Equals(Ip6, other.Ip6)) return false;
        if (!object.Equals(Wired, other.Wired)) return false;
        if (!object.Equals(Wireless, other.Wireless)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasEtype) hash ^= Etype.GetHashCode();
        if (HasEstate) hash ^= Estate.GetHashCode();
        if (HasMac) hash ^= Mac.GetHashCode();
        if (HasVendor) hash ^= Vendor.GetHashCode();
        if (HasProduct) hash ^= Product.GetHashCode();
        if (ip4_ != null) hash ^= Ip4.GetHashCode();
        if (ip6_ != null) hash ^= Ip6.GetHashCode();
        if (wired_ != null) hash ^= Wired.GetHashCode();
        if (wireless_ != null) hash ^= Wireless.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasEtype) {
          output.WriteRawTag(16);
          output.WriteInt32(Etype);
        }
        if (HasEstate) {
          output.WriteRawTag(24);
          output.WriteInt32(Estate);
        }
        if (HasMac) {
          output.WriteRawTag(34);
          output.WriteString(Mac);
        }
        if (HasVendor) {
          output.WriteRawTag(42);
          output.WriteString(Vendor);
        }
        if (HasProduct) {
          output.WriteRawTag(50);
          output.WriteString(Product);
        }
        if (ip4_ != null) {
          output.WriteRawTag(58);
          output.WriteMessage(Ip4);
        }
        if (ip6_ != null) {
          output.WriteRawTag(66);
          output.WriteMessage(Ip6);
        }
        if (wired_ != null) {
          output.WriteRawTag(74);
          output.WriteMessage(Wired);
        }
        if (wireless_ != null) {
          output.WriteRawTag(82);
          output.WriteMessage(Wireless);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasEtype) {
          output.WriteRawTag(16);
          output.WriteInt32(Etype);
        }
        if (HasEstate) {
          output.WriteRawTag(24);
          output.WriteInt32(Estate);
        }
        if (HasMac) {
          output.WriteRawTag(34);
          output.WriteString(Mac);
        }
        if (HasVendor) {
          output.WriteRawTag(42);
          output.WriteString(Vendor);
        }
        if (HasProduct) {
          output.WriteRawTag(50);
          output.WriteString(Product);
        }
        if (ip4_ != null) {
          output.WriteRawTag(58);
          output.WriteMessage(Ip4);
        }
        if (ip6_ != null) {
          output.WriteRawTag(66);
          output.WriteMessage(Ip6);
        }
        if (wired_ != null) {
          output.WriteRawTag(74);
          output.WriteMessage(Wired);
        }
        if (wireless_ != null) {
          output.WriteRawTag(82);
          output.WriteMessage(Wireless);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
        }
        if (HasEtype) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Etype);
        }
        if (HasEstate) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Estate);
        }
        if (HasMac) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
        }
        if (HasVendor) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
        }
        if (HasProduct) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
        }
        if (ip4_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip4);
        }
        if (ip6_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip6);
        }
        if (wired_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wired);
        }
        if (wireless_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wireless);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Device other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEtype) {
          Etype = other.Etype;
        }
        if (other.HasEstate) {
          Estate = other.Estate;
        }
        if (other.HasMac) {
          Mac = other.Mac;
        }
        if (other.HasVendor) {
          Vendor = other.Vendor;
        }
        if (other.HasProduct) {
          Product = other.Product;
        }
        if (other.ip4_ != null) {
          if (ip4_ == null) {
            Ip4 = new global::CMsgNetworkDeviceIP4Config();
          }
          Ip4.MergeFrom(other.Ip4);
        }
        if (other.ip6_ != null) {
          if (ip6_ == null) {
            Ip6 = new global::CMsgNetworkDeviceIP6Config();
          }
          Ip6.MergeFrom(other.Ip6);
        }
        if (other.wired_ != null) {
          if (wired_ == null) {
            Wired = new global::CMsgNetworkDevicesData.Types.Device.Types.Wired();
          }
          Wired.MergeFrom(other.Wired);
        }
        if (other.wireless_ != null) {
          if (wireless_ == null) {
            Wireless = new global::CMsgNetworkDevicesData.Types.Device.Types.Wireless();
          }
          Wireless.MergeFrom(other.Wireless);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              Etype = input.ReadInt32();
              break;
            }
            case 24: {
              Estate = input.ReadInt32();
              break;
            }
            case 34: {
              Mac = input.ReadString();
              break;
            }
            case 42: {
              Vendor = input.ReadString();
              break;
            }
            case 50: {
              Product = input.ReadString();
              break;
            }
            case 58: {
              if (ip4_ == null) {
                Ip4 = new global::CMsgNetworkDeviceIP4Config();
              }
              input.ReadMessage(Ip4);
              break;
            }
            case 66: {
              if (ip6_ == null) {
                Ip6 = new global::CMsgNetworkDeviceIP6Config();
              }
              input.ReadMessage(Ip6);
              break;
            }
            case 74: {
              if (wired_ == null) {
                Wired = new global::CMsgNetworkDevicesData.Types.Device.Types.Wired();
              }
              input.ReadMessage(Wired);
              break;
            }
            case 82: {
              if (wireless_ == null) {
                Wireless = new global::CMsgNetworkDevicesData.Types.Device.Types.Wireless();
              }
              input.ReadMessage(Wireless);
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              Etype = input.ReadInt32();
              break;
            }
            case 24: {
              Estate = input.ReadInt32();
              break;
            }
            case 34: {
              Mac = input.ReadString();
              break;
            }
            case 42: {
              Vendor = input.ReadString();
              break;
            }
            case 50: {
              Product = input.ReadString();
              break;
            }
            case 58: {
              if (ip4_ == null) {
                Ip4 = new global::CMsgNetworkDeviceIP4Config();
              }
              input.ReadMessage(Ip4);
              break;
            }
            case 66: {
              if (ip6_ == null) {
                Ip6 = new global::CMsgNetworkDeviceIP6Config();
              }
              input.ReadMessage(Ip6);
              break;
            }
            case 74: {
              if (wired_ == null) {
                Wired = new global::CMsgNetworkDevicesData.Types.Device.Types.Wired();
              }
              input.ReadMessage(Wired);
              break;
            }
            case 82: {
              if (wireless_ == null) {
                Wireless = new global::CMsgNetworkDevicesData.Types.Device.Types.Wireless();
              }
              input.ReadMessage(Wireless);
              break;
            }
          }
        }
      }
      #endif

      #region Nested types
      /// <summary>Container for nested types declared in the Device message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static partial class Types {
        public sealed partial class Wired : pb::IMessage<Wired>
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            , pb::IBufferMessage
        #endif
        {
          private static readonly pb::MessageParser<Wired> _parser = new pb::MessageParser<Wired>(() => new Wired());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pb::MessageParser<Wired> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CMsgNetworkDevicesData.Types.Device.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wired() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wired(Wired other) : this() {
            _hasBits0 = other._hasBits0;
            isCablePresent_ = other.isCablePresent_;
            speedMbit_ = other.speedMbit_;
            friendlyName_ = other.friendlyName_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wired Clone() {
            return new Wired(this);
          }

          /// <summary>Field number for the "is_cable_present" field.</summary>
          public const int IsCablePresentFieldNumber = 1;
          private readonly static bool IsCablePresentDefaultValue = false;

          private bool isCablePresent_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool IsCablePresent {
            get { if ((_hasBits0 & 1) != 0) { return isCablePresent_; } else { return IsCablePresentDefaultValue; } }
            set {
              _hasBits0 |= 1;
              isCablePresent_ = value;
            }
          }
          /// <summary>Gets whether the "is_cable_present" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasIsCablePresent {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "is_cable_present" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearIsCablePresent() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "speed_mbit" field.</summary>
          public const int SpeedMbitFieldNumber = 2;
          private readonly static uint SpeedMbitDefaultValue = 0;

          private uint speedMbit_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public uint SpeedMbit {
            get { if ((_hasBits0 & 2) != 0) { return speedMbit_; } else { return SpeedMbitDefaultValue; } }
            set {
              _hasBits0 |= 2;
              speedMbit_ = value;
            }
          }
          /// <summary>Gets whether the "speed_mbit" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasSpeedMbit {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "speed_mbit" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearSpeedMbit() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "friendly_name" field.</summary>
          public const int FriendlyNameFieldNumber = 3;
          private readonly static string FriendlyNameDefaultValue = "";

          private string friendlyName_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public string FriendlyName {
            get { return friendlyName_ ?? FriendlyNameDefaultValue; }
            set {
              friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "friendly_name" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasFriendlyName {
            get { return friendlyName_ != null; }
          }
          /// <summary>Clears the value of the "friendly_name" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearFriendlyName() {
            friendlyName_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override bool Equals(object other) {
            return Equals(other as Wired);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool Equals(Wired other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (IsCablePresent != other.IsCablePresent) return false;
            if (SpeedMbit != other.SpeedMbit) return false;
            if (FriendlyName != other.FriendlyName) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override int GetHashCode() {
            int hash = 1;
            if (HasIsCablePresent) hash ^= IsCablePresent.GetHashCode();
            if (HasSpeedMbit) hash ^= SpeedMbit.GetHashCode();
            if (HasFriendlyName) hash ^= FriendlyName.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void WriteTo(pb::CodedOutputStream output) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
          #else
            if (HasIsCablePresent) {
              output.WriteRawTag(8);
              output.WriteBool(IsCablePresent);
            }
            if (HasSpeedMbit) {
              output.WriteRawTag(16);
              output.WriteUInt32(SpeedMbit);
            }
            if (HasFriendlyName) {
              output.WriteRawTag(26);
              output.WriteString(FriendlyName);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
            if (HasIsCablePresent) {
              output.WriteRawTag(8);
              output.WriteBool(IsCablePresent);
            }
            if (HasSpeedMbit) {
              output.WriteRawTag(16);
              output.WriteUInt32(SpeedMbit);
            }
            if (HasFriendlyName) {
              output.WriteRawTag(26);
              output.WriteString(FriendlyName);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(ref output);
            }
          }
          #endif

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public int CalculateSize() {
            int size = 0;
            if (HasIsCablePresent) {
              size += 1 + 1;
            }
            if (HasSpeedMbit) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedMbit);
            }
            if (HasFriendlyName) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(Wired other) {
            if (other == null) {
              return;
            }
            if (other.HasIsCablePresent) {
              IsCablePresent = other.IsCablePresent;
            }
            if (other.HasSpeedMbit) {
              SpeedMbit = other.SpeedMbit;
            }
            if (other.HasFriendlyName) {
              FriendlyName = other.FriendlyName;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(pb::CodedInputStream input) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
          #else
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  IsCablePresent = input.ReadBool();
                  break;
                }
                case 16: {
                  SpeedMbit = input.ReadUInt32();
                  break;
                }
                case 26: {
                  FriendlyName = input.ReadString();
                  break;
                }
              }
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                  break;
                case 8: {
                  IsCablePresent = input.ReadBool();
                  break;
                }
                case 16: {
                  SpeedMbit = input.ReadUInt32();
                  break;
                }
                case 26: {
                  FriendlyName = input.ReadString();
                  break;
                }
              }
            }
          }
          #endif

        }

        public sealed partial class Wireless : pb::IMessage<Wireless>
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            , pb::IBufferMessage
        #endif
        {
          private static readonly pb::MessageParser<Wireless> _parser = new pb::MessageParser<Wireless>(() => new Wireless());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pb::MessageParser<Wireless> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CMsgNetworkDevicesData.Types.Device.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wireless() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wireless(Wireless other) : this() {
            _hasBits0 = other._hasBits0;
            aps_ = other.aps_.Clone();
            esecuritySupported_ = other.esecuritySupported_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public Wireless Clone() {
            return new Wireless(this);
          }

          /// <summary>Field number for the "aps" field.</summary>
          public const int ApsFieldNumber = 1;
          private static readonly pb::FieldCodec<global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP> _repeated_aps_codec
              = pb::FieldCodec.ForMessage(10, global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP.Parser);
          private readonly pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP> aps_ = new pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public pbc::RepeatedField<global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Types.AP> Aps {
            get { return aps_; }
          }

          /// <summary>Field number for the "esecurity_supported" field.</summary>
          public const int EsecuritySupportedFieldNumber = 2;
          private readonly static int EsecuritySupportedDefaultValue = 0;

          private int esecuritySupported_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public int EsecuritySupported {
            get { if ((_hasBits0 & 1) != 0) { return esecuritySupported_; } else { return EsecuritySupportedDefaultValue; } }
            set {
              _hasBits0 |= 1;
              esecuritySupported_ = value;
            }
          }
          /// <summary>Gets whether the "esecurity_supported" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasEsecuritySupported {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "esecurity_supported" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearEsecuritySupported() {
            _hasBits0 &= ~1;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override bool Equals(object other) {
            return Equals(other as Wireless);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool Equals(Wireless other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!aps_.Equals(other.aps_)) return false;
            if (EsecuritySupported != other.EsecuritySupported) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= aps_.GetHashCode();
            if (HasEsecuritySupported) hash ^= EsecuritySupported.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void WriteTo(pb::CodedOutputStream output) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
          #else
            aps_.WriteTo(output, _repeated_aps_codec);
            if (HasEsecuritySupported) {
              output.WriteRawTag(16);
              output.WriteInt32(EsecuritySupported);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
            aps_.WriteTo(ref output, _repeated_aps_codec);
            if (HasEsecuritySupported) {
              output.WriteRawTag(16);
              output.WriteInt32(EsecuritySupported);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(ref output);
            }
          }
          #endif

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public int CalculateSize() {
            int size = 0;
            size += aps_.CalculateSize(_repeated_aps_codec);
            if (HasEsecuritySupported) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(EsecuritySupported);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(Wireless other) {
            if (other == null) {
              return;
            }
            aps_.Add(other.aps_);
            if (other.HasEsecuritySupported) {
              EsecuritySupported = other.EsecuritySupported;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(pb::CodedInputStream input) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
          #else
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  aps_.AddEntriesFrom(input, _repeated_aps_codec);
                  break;
                }
                case 16: {
                  EsecuritySupported = input.ReadInt32();
                  break;
                }
              }
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                  break;
                case 10: {
                  aps_.AddEntriesFrom(ref input, _repeated_aps_codec);
                  break;
                }
                case 16: {
                  EsecuritySupported = input.ReadInt32();
                  break;
                }
              }
            }
          }
          #endif

          #region Nested types
          /// <summary>Container for nested types declared in the Wireless message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static partial class Types {
            public sealed partial class AP : pb::IMessage<AP>
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                , pb::IBufferMessage
            #endif
            {
              private static readonly pb::MessageParser<AP> _parser = new pb::MessageParser<AP>(() => new AP());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public static pb::MessageParser<AP> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::CMsgNetworkDevicesData.Types.Device.Types.Wireless.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public AP() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public AP(AP other) : this() {
                _hasBits0 = other._hasBits0;
                id_ = other.id_;
                estrength_ = other.estrength_;
                ssid_ = other.ssid_;
                isActive_ = other.isActive_;
                isAutoconnect_ = other.isAutoconnect_;
                esecurity_ = other.esecurity_;
                userName_ = other.userName_;
                password_ = other.password_;
                strengthRaw_ = other.strengthRaw_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public AP Clone() {
                return new AP(this);
              }

              /// <summary>Field number for the "id" field.</summary>
              public const int IdFieldNumber = 1;
              private readonly static uint IdDefaultValue = 0;

              private uint id_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public uint Id {
                get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  id_ = value;
                }
              }
              /// <summary>Gets whether the "id" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasId {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "id" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearId() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "estrength" field.</summary>
              public const int EstrengthFieldNumber = 2;
              private readonly static int EstrengthDefaultValue = 0;

              private int estrength_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public int Estrength {
                get { if ((_hasBits0 & 2) != 0) { return estrength_; } else { return EstrengthDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  estrength_ = value;
                }
              }
              /// <summary>Gets whether the "estrength" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasEstrength {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "estrength" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearEstrength() {
                _hasBits0 &= ~2;
              }

              /// <summary>Field number for the "ssid" field.</summary>
              public const int SsidFieldNumber = 3;
              private readonly static string SsidDefaultValue = "";

              private string ssid_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public string Ssid {
                get { return ssid_ ?? SsidDefaultValue; }
                set {
                  ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                }
              }
              /// <summary>Gets whether the "ssid" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasSsid {
                get { return ssid_ != null; }
              }
              /// <summary>Clears the value of the "ssid" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearSsid() {
                ssid_ = null;
              }

              /// <summary>Field number for the "is_active" field.</summary>
              public const int IsActiveFieldNumber = 4;
              private readonly static bool IsActiveDefaultValue = false;

              private bool isActive_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool IsActive {
                get { if ((_hasBits0 & 4) != 0) { return isActive_; } else { return IsActiveDefaultValue; } }
                set {
                  _hasBits0 |= 4;
                  isActive_ = value;
                }
              }
              /// <summary>Gets whether the "is_active" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasIsActive {
                get { return (_hasBits0 & 4) != 0; }
              }
              /// <summary>Clears the value of the "is_active" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearIsActive() {
                _hasBits0 &= ~4;
              }

              /// <summary>Field number for the "is_autoconnect" field.</summary>
              public const int IsAutoconnectFieldNumber = 5;
              private readonly static bool IsAutoconnectDefaultValue = false;

              private bool isAutoconnect_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool IsAutoconnect {
                get { if ((_hasBits0 & 8) != 0) { return isAutoconnect_; } else { return IsAutoconnectDefaultValue; } }
                set {
                  _hasBits0 |= 8;
                  isAutoconnect_ = value;
                }
              }
              /// <summary>Gets whether the "is_autoconnect" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasIsAutoconnect {
                get { return (_hasBits0 & 8) != 0; }
              }
              /// <summary>Clears the value of the "is_autoconnect" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearIsAutoconnect() {
                _hasBits0 &= ~8;
              }

              /// <summary>Field number for the "esecurity" field.</summary>
              public const int EsecurityFieldNumber = 6;
              private readonly static int EsecurityDefaultValue = 0;

              private int esecurity_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public int Esecurity {
                get { if ((_hasBits0 & 16) != 0) { return esecurity_; } else { return EsecurityDefaultValue; } }
                set {
                  _hasBits0 |= 16;
                  esecurity_ = value;
                }
              }
              /// <summary>Gets whether the "esecurity" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasEsecurity {
                get { return (_hasBits0 & 16) != 0; }
              }
              /// <summary>Clears the value of the "esecurity" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearEsecurity() {
                _hasBits0 &= ~16;
              }

              /// <summary>Field number for the "user_name" field.</summary>
              public const int UserNameFieldNumber = 7;
              private readonly static string UserNameDefaultValue = "";

              private string userName_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public string UserName {
                get { return userName_ ?? UserNameDefaultValue; }
                set {
                  userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                }
              }
              /// <summary>Gets whether the "user_name" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasUserName {
                get { return userName_ != null; }
              }
              /// <summary>Clears the value of the "user_name" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearUserName() {
                userName_ = null;
              }

              /// <summary>Field number for the "password" field.</summary>
              public const int PasswordFieldNumber = 8;
              private readonly static string PasswordDefaultValue = "";

              private string password_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public string Password {
                get { return password_ ?? PasswordDefaultValue; }
                set {
                  password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                }
              }
              /// <summary>Gets whether the "password" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasPassword {
                get { return password_ != null; }
              }
              /// <summary>Clears the value of the "password" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearPassword() {
                password_ = null;
              }

              /// <summary>Field number for the "strength_raw" field.</summary>
              public const int StrengthRawFieldNumber = 9;
              private readonly static int StrengthRawDefaultValue = 0;

              private int strengthRaw_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public int StrengthRaw {
                get { if ((_hasBits0 & 32) != 0) { return strengthRaw_; } else { return StrengthRawDefaultValue; } }
                set {
                  _hasBits0 |= 32;
                  strengthRaw_ = value;
                }
              }
              /// <summary>Gets whether the "strength_raw" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool HasStrengthRaw {
                get { return (_hasBits0 & 32) != 0; }
              }
              /// <summary>Clears the value of the "strength_raw" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void ClearStrengthRaw() {
                _hasBits0 &= ~32;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public override bool Equals(object other) {
                return Equals(other as AP);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public bool Equals(AP other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (Id != other.Id) return false;
                if (Estrength != other.Estrength) return false;
                if (Ssid != other.Ssid) return false;
                if (IsActive != other.IsActive) return false;
                if (IsAutoconnect != other.IsAutoconnect) return false;
                if (Esecurity != other.Esecurity) return false;
                if (UserName != other.UserName) return false;
                if (Password != other.Password) return false;
                if (StrengthRaw != other.StrengthRaw) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public override int GetHashCode() {
                int hash = 1;
                if (HasId) hash ^= Id.GetHashCode();
                if (HasEstrength) hash ^= Estrength.GetHashCode();
                if (HasSsid) hash ^= Ssid.GetHashCode();
                if (HasIsActive) hash ^= IsActive.GetHashCode();
                if (HasIsAutoconnect) hash ^= IsAutoconnect.GetHashCode();
                if (HasEsecurity) hash ^= Esecurity.GetHashCode();
                if (HasUserName) hash ^= UserName.GetHashCode();
                if (HasPassword) hash ^= Password.GetHashCode();
                if (HasStrengthRaw) hash ^= StrengthRaw.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void WriteTo(pb::CodedOutputStream output) {
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                output.WriteRawMessage(this);
              #else
                if (HasId) {
                  output.WriteRawTag(8);
                  output.WriteUInt32(Id);
                }
                if (HasEstrength) {
                  output.WriteRawTag(16);
                  output.WriteInt32(Estrength);
                }
                if (HasSsid) {
                  output.WriteRawTag(26);
                  output.WriteString(Ssid);
                }
                if (HasIsActive) {
                  output.WriteRawTag(32);
                  output.WriteBool(IsActive);
                }
                if (HasIsAutoconnect) {
                  output.WriteRawTag(40);
                  output.WriteBool(IsAutoconnect);
                }
                if (HasEsecurity) {
                  output.WriteRawTag(48);
                  output.WriteInt32(Esecurity);
                }
                if (HasUserName) {
                  output.WriteRawTag(58);
                  output.WriteString(UserName);
                }
                if (HasPassword) {
                  output.WriteRawTag(66);
                  output.WriteString(Password);
                }
                if (HasStrengthRaw) {
                  output.WriteRawTag(72);
                  output.WriteInt32(StrengthRaw);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              #endif
              }

              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                if (HasId) {
                  output.WriteRawTag(8);
                  output.WriteUInt32(Id);
                }
                if (HasEstrength) {
                  output.WriteRawTag(16);
                  output.WriteInt32(Estrength);
                }
                if (HasSsid) {
                  output.WriteRawTag(26);
                  output.WriteString(Ssid);
                }
                if (HasIsActive) {
                  output.WriteRawTag(32);
                  output.WriteBool(IsActive);
                }
                if (HasIsAutoconnect) {
                  output.WriteRawTag(40);
                  output.WriteBool(IsAutoconnect);
                }
                if (HasEsecurity) {
                  output.WriteRawTag(48);
                  output.WriteInt32(Esecurity);
                }
                if (HasUserName) {
                  output.WriteRawTag(58);
                  output.WriteString(UserName);
                }
                if (HasPassword) {
                  output.WriteRawTag(66);
                  output.WriteString(Password);
                }
                if (HasStrengthRaw) {
                  output.WriteRawTag(72);
                  output.WriteInt32(StrengthRaw);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(ref output);
                }
              }
              #endif

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public int CalculateSize() {
                int size = 0;
                if (HasId) {
                  size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
                }
                if (HasEstrength) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Estrength);
                }
                if (HasSsid) {
                  size += 1 + pb::CodedOutputStream.ComputeStringSize(Ssid);
                }
                if (HasIsActive) {
                  size += 1 + 1;
                }
                if (HasIsAutoconnect) {
                  size += 1 + 1;
                }
                if (HasEsecurity) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Esecurity);
                }
                if (HasUserName) {
                  size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
                }
                if (HasPassword) {
                  size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
                }
                if (HasStrengthRaw) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrengthRaw);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void MergeFrom(AP other) {
                if (other == null) {
                  return;
                }
                if (other.HasId) {
                  Id = other.Id;
                }
                if (other.HasEstrength) {
                  Estrength = other.Estrength;
                }
                if (other.HasSsid) {
                  Ssid = other.Ssid;
                }
                if (other.HasIsActive) {
                  IsActive = other.IsActive;
                }
                if (other.HasIsAutoconnect) {
                  IsAutoconnect = other.IsAutoconnect;
                }
                if (other.HasEsecurity) {
                  Esecurity = other.Esecurity;
                }
                if (other.HasUserName) {
                  UserName = other.UserName;
                }
                if (other.HasPassword) {
                  Password = other.Password;
                }
                if (other.HasStrengthRaw) {
                  StrengthRaw = other.StrengthRaw;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              public void MergeFrom(pb::CodedInputStream input) {
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                input.ReadRawMessage(this);
              #else
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 8: {
                      Id = input.ReadUInt32();
                      break;
                    }
                    case 16: {
                      Estrength = input.ReadInt32();
                      break;
                    }
                    case 26: {
                      Ssid = input.ReadString();
                      break;
                    }
                    case 32: {
                      IsActive = input.ReadBool();
                      break;
                    }
                    case 40: {
                      IsAutoconnect = input.ReadBool();
                      break;
                    }
                    case 48: {
                      Esecurity = input.ReadInt32();
                      break;
                    }
                    case 58: {
                      UserName = input.ReadString();
                      break;
                    }
                    case 66: {
                      Password = input.ReadString();
                      break;
                    }
                    case 72: {
                      StrengthRaw = input.ReadInt32();
                      break;
                    }
                  }
                }
              #endif
              }

              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
              void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                      break;
                    case 8: {
                      Id = input.ReadUInt32();
                      break;
                    }
                    case 16: {
                      Estrength = input.ReadInt32();
                      break;
                    }
                    case 26: {
                      Ssid = input.ReadString();
                      break;
                    }
                    case 32: {
                      IsActive = input.ReadBool();
                      break;
                    }
                    case 40: {
                      IsAutoconnect = input.ReadBool();
                      break;
                    }
                    case 48: {
                      Esecurity = input.ReadInt32();
                      break;
                    }
                    case 58: {
                      UserName = input.ReadString();
                      break;
                    }
                    case 66: {
                      Password = input.ReadString();
                      break;
                    }
                    case 72: {
                      StrengthRaw = input.ReadInt32();
                      break;
                    }
                  }
                }
              }
              #endif

            }

          }
          #endregion

        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class CMsgNetworkDeviceConnect : pb::IMessage<CMsgNetworkDeviceConnect>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgNetworkDeviceConnect> _parser = new pb::MessageParser<CMsgNetworkDeviceConnect>(() => new CMsgNetworkDeviceConnect());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgNetworkDeviceConnect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceConnect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceConnect(CMsgNetworkDeviceConnect other) : this() {
    _hasBits0 = other._hasBits0;
    deviceId_ = other.deviceId_;
    credentials_ = other.credentials_ != null ? other.credentials_.Clone() : null;
    ip4_ = other.ip4_ != null ? other.ip4_.Clone() : null;
    ip6_ = other.ip6_ != null ? other.ip6_.Clone() : null;
    switch (other.ApInfoCase) {
      case ApInfoOneofCase.ApKnown:
        ApKnown = other.ApKnown.Clone();
        break;
      case ApInfoOneofCase.ApCustom:
        ApCustom = other.ApCustom.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgNetworkDeviceConnect Clone() {
    return new CMsgNetworkDeviceConnect(this);
  }

  /// <summary>Field number for the "device_id" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private readonly static uint DeviceIdDefaultValue = 0;

  private uint deviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeviceId {
    get { if ((_hasBits0 & 1) != 0) { return deviceId_; } else { return DeviceIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deviceId_ = value;
    }
  }
  /// <summary>Gets whether the "device_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeviceId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "device_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeviceId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "credentials" field.</summary>
  public const int CredentialsFieldNumber = 4;
  private global::CMsgNetworkDeviceConnect.Types.Credentials credentials_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgNetworkDeviceConnect.Types.Credentials Credentials {
    get { return credentials_; }
    set {
      credentials_ = value;
    }
  }

  /// <summary>Field number for the "ip4" field.</summary>
  public const int Ip4FieldNumber = 5;
  private global::CMsgNetworkDeviceIP4Config ip4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgNetworkDeviceIP4Config Ip4 {
    get { return ip4_; }
    set {
      ip4_ = value;
    }
  }

  /// <summary>Field number for the "ip6" field.</summary>
  public const int Ip6FieldNumber = 6;
  private global::CMsgNetworkDeviceIP6Config ip6_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgNetworkDeviceIP6Config Ip6 {
    get { return ip6_; }
    set {
      ip6_ = value;
    }
  }

  /// <summary>Field number for the "ap_known" field.</summary>
  public const int ApKnownFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgNetworkDeviceConnect.Types.KnownAP ApKnown {
    get { return apInfoCase_ == ApInfoOneofCase.ApKnown ? (global::CMsgNetworkDeviceConnect.Types.KnownAP) apInfo_ : null; }
    set {
      apInfo_ = value;
      apInfoCase_ = value == null ? ApInfoOneofCase.None : ApInfoOneofCase.ApKnown;
    }
  }

  /// <summary>Field number for the "ap_custom" field.</summary>
  public const int ApCustomFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgNetworkDeviceConnect.Types.CustomAP ApCustom {
    get { return apInfoCase_ == ApInfoOneofCase.ApCustom ? (global::CMsgNetworkDeviceConnect.Types.CustomAP) apInfo_ : null; }
    set {
      apInfo_ = value;
      apInfoCase_ = value == null ? ApInfoOneofCase.None : ApInfoOneofCase.ApCustom;
    }
  }

  private object apInfo_;
  /// <summary>Enum of possible cases for the "ap_info" oneof.</summary>
  public enum ApInfoOneofCase {
    None = 0,
    ApKnown = 2,
    ApCustom = 3,
  }
  private ApInfoOneofCase apInfoCase_ = ApInfoOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ApInfoOneofCase ApInfoCase {
    get { return apInfoCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearApInfo() {
    apInfoCase_ = ApInfoOneofCase.None;
    apInfo_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgNetworkDeviceConnect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgNetworkDeviceConnect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(Credentials, other.Credentials)) return false;
    if (!object.Equals(Ip4, other.Ip4)) return false;
    if (!object.Equals(Ip6, other.Ip6)) return false;
    if (!object.Equals(ApKnown, other.ApKnown)) return false;
    if (!object.Equals(ApCustom, other.ApCustom)) return false;
    if (ApInfoCase != other.ApInfoCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeviceId) hash ^= DeviceId.GetHashCode();
    if (credentials_ != null) hash ^= Credentials.GetHashCode();
    if (ip4_ != null) hash ^= Ip4.GetHashCode();
    if (ip6_ != null) hash ^= Ip6.GetHashCode();
    if (apInfoCase_ == ApInfoOneofCase.ApKnown) hash ^= ApKnown.GetHashCode();
    if (apInfoCase_ == ApInfoOneofCase.ApCustom) hash ^= ApCustom.GetHashCode();
    hash ^= (int) apInfoCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDeviceId) {
      output.WriteRawTag(8);
      output.WriteUInt32(DeviceId);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApKnown) {
      output.WriteRawTag(18);
      output.WriteMessage(ApKnown);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApCustom) {
      output.WriteRawTag(26);
      output.WriteMessage(ApCustom);
    }
    if (credentials_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Credentials);
    }
    if (ip4_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Ip4);
    }
    if (ip6_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Ip6);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDeviceId) {
      output.WriteRawTag(8);
      output.WriteUInt32(DeviceId);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApKnown) {
      output.WriteRawTag(18);
      output.WriteMessage(ApKnown);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApCustom) {
      output.WriteRawTag(26);
      output.WriteMessage(ApCustom);
    }
    if (credentials_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Credentials);
    }
    if (ip4_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Ip4);
    }
    if (ip6_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Ip6);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDeviceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceId);
    }
    if (credentials_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Credentials);
    }
    if (ip4_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip4);
    }
    if (ip6_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip6);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApKnown) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApKnown);
    }
    if (apInfoCase_ == ApInfoOneofCase.ApCustom) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApCustom);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgNetworkDeviceConnect other) {
    if (other == null) {
      return;
    }
    if (other.HasDeviceId) {
      DeviceId = other.DeviceId;
    }
    if (other.credentials_ != null) {
      if (credentials_ == null) {
        Credentials = new global::CMsgNetworkDeviceConnect.Types.Credentials();
      }
      Credentials.MergeFrom(other.Credentials);
    }
    if (other.ip4_ != null) {
      if (ip4_ == null) {
        Ip4 = new global::CMsgNetworkDeviceIP4Config();
      }
      Ip4.MergeFrom(other.Ip4);
    }
    if (other.ip6_ != null) {
      if (ip6_ == null) {
        Ip6 = new global::CMsgNetworkDeviceIP6Config();
      }
      Ip6.MergeFrom(other.Ip6);
    }
    switch (other.ApInfoCase) {
      case ApInfoOneofCase.ApKnown:
        if (ApKnown == null) {
          ApKnown = new global::CMsgNetworkDeviceConnect.Types.KnownAP();
        }
        ApKnown.MergeFrom(other.ApKnown);
        break;
      case ApInfoOneofCase.ApCustom:
        if (ApCustom == null) {
          ApCustom = new global::CMsgNetworkDeviceConnect.Types.CustomAP();
        }
        ApCustom.MergeFrom(other.ApCustom);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DeviceId = input.ReadUInt32();
          break;
        }
        case 18: {
          global::CMsgNetworkDeviceConnect.Types.KnownAP subBuilder = new global::CMsgNetworkDeviceConnect.Types.KnownAP();
          if (apInfoCase_ == ApInfoOneofCase.ApKnown) {
            subBuilder.MergeFrom(ApKnown);
          }
          input.ReadMessage(subBuilder);
          ApKnown = subBuilder;
          break;
        }
        case 26: {
          global::CMsgNetworkDeviceConnect.Types.CustomAP subBuilder = new global::CMsgNetworkDeviceConnect.Types.CustomAP();
          if (apInfoCase_ == ApInfoOneofCase.ApCustom) {
            subBuilder.MergeFrom(ApCustom);
          }
          input.ReadMessage(subBuilder);
          ApCustom = subBuilder;
          break;
        }
        case 34: {
          if (credentials_ == null) {
            Credentials = new global::CMsgNetworkDeviceConnect.Types.Credentials();
          }
          input.ReadMessage(Credentials);
          break;
        }
        case 42: {
          if (ip4_ == null) {
            Ip4 = new global::CMsgNetworkDeviceIP4Config();
          }
          input.ReadMessage(Ip4);
          break;
        }
        case 50: {
          if (ip6_ == null) {
            Ip6 = new global::CMsgNetworkDeviceIP6Config();
          }
          input.ReadMessage(Ip6);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DeviceId = input.ReadUInt32();
          break;
        }
        case 18: {
          global::CMsgNetworkDeviceConnect.Types.KnownAP subBuilder = new global::CMsgNetworkDeviceConnect.Types.KnownAP();
          if (apInfoCase_ == ApInfoOneofCase.ApKnown) {
            subBuilder.MergeFrom(ApKnown);
          }
          input.ReadMessage(subBuilder);
          ApKnown = subBuilder;
          break;
        }
        case 26: {
          global::CMsgNetworkDeviceConnect.Types.CustomAP subBuilder = new global::CMsgNetworkDeviceConnect.Types.CustomAP();
          if (apInfoCase_ == ApInfoOneofCase.ApCustom) {
            subBuilder.MergeFrom(ApCustom);
          }
          input.ReadMessage(subBuilder);
          ApCustom = subBuilder;
          break;
        }
        case 34: {
          if (credentials_ == null) {
            Credentials = new global::CMsgNetworkDeviceConnect.Types.Credentials();
          }
          input.ReadMessage(Credentials);
          break;
        }
        case 42: {
          if (ip4_ == null) {
            Ip4 = new global::CMsgNetworkDeviceIP4Config();
          }
          input.ReadMessage(Ip4);
          break;
        }
        case 50: {
          if (ip6_ == null) {
            Ip6 = new global::CMsgNetworkDeviceIP6Config();
          }
          input.ReadMessage(Ip6);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgNetworkDeviceConnect message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class KnownAP : pb::IMessage<KnownAP>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<KnownAP> _parser = new pb::MessageParser<KnownAP>(() => new KnownAP());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<KnownAP> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgNetworkDeviceConnect.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public KnownAP() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public KnownAP(KnownAP other) : this() {
        _hasBits0 = other._hasBits0;
        apId_ = other.apId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public KnownAP Clone() {
        return new KnownAP(this);
      }

      /// <summary>Field number for the "ap_id" field.</summary>
      public const int ApIdFieldNumber = 1;
      private readonly static uint ApIdDefaultValue = 0;

      private uint apId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint ApId {
        get { if ((_hasBits0 & 1) != 0) { return apId_; } else { return ApIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          apId_ = value;
        }
      }
      /// <summary>Gets whether the "ap_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasApId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "ap_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearApId() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as KnownAP);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(KnownAP other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (ApId != other.ApId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasApId) hash ^= ApId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasApId) {
          output.WriteRawTag(8);
          output.WriteUInt32(ApId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasApId) {
          output.WriteRawTag(8);
          output.WriteUInt32(ApId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasApId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApId);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(KnownAP other) {
        if (other == null) {
          return;
        }
        if (other.HasApId) {
          ApId = other.ApId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              ApId = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              ApId = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class CustomAP : pb::IMessage<CustomAP>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<CustomAP> _parser = new pb::MessageParser<CustomAP>(() => new CustomAP());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<CustomAP> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgNetworkDeviceConnect.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CustomAP() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CustomAP(CustomAP other) : this() {
        _hasBits0 = other._hasBits0;
        ssid_ = other.ssid_;
        esecurity_ = other.esecurity_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public CustomAP Clone() {
        return new CustomAP(this);
      }

      /// <summary>Field number for the "ssid" field.</summary>
      public const int SsidFieldNumber = 1;
      private readonly static string SsidDefaultValue = "";

      private string ssid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Ssid {
        get { return ssid_ ?? SsidDefaultValue; }
        set {
          ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "ssid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSsid {
        get { return ssid_ != null; }
      }
      /// <summary>Clears the value of the "ssid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSsid() {
        ssid_ = null;
      }

      /// <summary>Field number for the "esecurity" field.</summary>
      public const int EsecurityFieldNumber = 2;
      private readonly static int EsecurityDefaultValue = 0;

      private int esecurity_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Esecurity {
        get { if ((_hasBits0 & 1) != 0) { return esecurity_; } else { return EsecurityDefaultValue; } }
        set {
          _hasBits0 |= 1;
          esecurity_ = value;
        }
      }
      /// <summary>Gets whether the "esecurity" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasEsecurity {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "esecurity" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearEsecurity() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as CustomAP);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(CustomAP other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Ssid != other.Ssid) return false;
        if (Esecurity != other.Esecurity) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasSsid) hash ^= Ssid.GetHashCode();
        if (HasEsecurity) hash ^= Esecurity.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasSsid) {
          output.WriteRawTag(10);
          output.WriteString(Ssid);
        }
        if (HasEsecurity) {
          output.WriteRawTag(16);
          output.WriteInt32(Esecurity);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasSsid) {
          output.WriteRawTag(10);
          output.WriteString(Ssid);
        }
        if (HasEsecurity) {
          output.WriteRawTag(16);
          output.WriteInt32(Esecurity);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasSsid) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Ssid);
        }
        if (HasEsecurity) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Esecurity);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(CustomAP other) {
        if (other == null) {
          return;
        }
        if (other.HasSsid) {
          Ssid = other.Ssid;
        }
        if (other.HasEsecurity) {
          Esecurity = other.Esecurity;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Ssid = input.ReadString();
              break;
            }
            case 16: {
              Esecurity = input.ReadInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Ssid = input.ReadString();
              break;
            }
            case 16: {
              Esecurity = input.ReadInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class Credentials : pb::IMessage<Credentials>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Credentials> _parser = new pb::MessageParser<Credentials>(() => new Credentials());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Credentials> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgNetworkDeviceConnect.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Credentials() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Credentials(Credentials other) : this() {
        username_ = other.username_;
        password_ = other.password_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Credentials Clone() {
        return new Credentials(this);
      }

      /// <summary>Field number for the "username" field.</summary>
      public const int UsernameFieldNumber = 1;
      private readonly static string UsernameDefaultValue = "";

      private string username_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Username {
        get { return username_ ?? UsernameDefaultValue; }
        set {
          username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "username" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasUsername {
        get { return username_ != null; }
      }
      /// <summary>Clears the value of the "username" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearUsername() {
        username_ = null;
      }

      /// <summary>Field number for the "password" field.</summary>
      public const int PasswordFieldNumber = 2;
      private readonly static string PasswordDefaultValue = "";

      private string password_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Password {
        get { return password_ ?? PasswordDefaultValue; }
        set {
          password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "password" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPassword {
        get { return password_ != null; }
      }
      /// <summary>Clears the value of the "password" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPassword() {
        password_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Credentials);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Credentials other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Username != other.Username) return false;
        if (Password != other.Password) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasUsername) hash ^= Username.GetHashCode();
        if (HasPassword) hash ^= Password.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasUsername) {
          output.WriteRawTag(10);
          output.WriteString(Username);
        }
        if (HasPassword) {
          output.WriteRawTag(18);
          output.WriteString(Password);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasUsername) {
          output.WriteRawTag(10);
          output.WriteString(Username);
        }
        if (HasPassword) {
          output.WriteRawTag(18);
          output.WriteString(Password);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasUsername) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
        }
        if (HasPassword) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Credentials other) {
        if (other == null) {
          return;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Username = input.ReadString();
              break;
            }
            case 18: {
              Password = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Username = input.ReadString();
              break;
            }
            case 18: {
              Password = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgStorageDevicesData : pb::IMessage<CMsgStorageDevicesData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgStorageDevicesData> _parser = new pb::MessageParser<CMsgStorageDevicesData>(() => new CMsgStorageDevicesData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgStorageDevicesData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgStorageDevicesData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgStorageDevicesData(CMsgStorageDevicesData other) : this() {
    _hasBits0 = other._hasBits0;
    drives_ = other.drives_.Clone();
    blockDevices_ = other.blockDevices_.Clone();
    isUnmountSupported_ = other.isUnmountSupported_;
    isTrimSupported_ = other.isTrimSupported_;
    isTrimRunning_ = other.isTrimRunning_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgStorageDevicesData Clone() {
    return new CMsgStorageDevicesData(this);
  }

  /// <summary>Field number for the "drives" field.</summary>
  public const int DrivesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgStorageDevicesData.Types.Drive> _repeated_drives_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgStorageDevicesData.Types.Drive.Parser);
  private readonly pbc::RepeatedField<global::CMsgStorageDevicesData.Types.Drive> drives_ = new pbc::RepeatedField<global::CMsgStorageDevicesData.Types.Drive>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgStorageDevicesData.Types.Drive> Drives {
    get { return drives_; }
  }

  /// <summary>Field number for the "block_devices" field.</summary>
  public const int BlockDevicesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgStorageDevicesData.Types.BlockDevice> _repeated_blockDevices_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgStorageDevicesData.Types.BlockDevice.Parser);
  private readonly pbc::RepeatedField<global::CMsgStorageDevicesData.Types.BlockDevice> blockDevices_ = new pbc::RepeatedField<global::CMsgStorageDevicesData.Types.BlockDevice>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgStorageDevicesData.Types.BlockDevice> BlockDevices {
    get { return blockDevices_; }
  }

  /// <summary>Field number for the "is_unmount_supported" field.</summary>
  public const int IsUnmountSupportedFieldNumber = 3;
  private readonly static bool IsUnmountSupportedDefaultValue = false;

  private bool isUnmountSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsUnmountSupported {
    get { if ((_hasBits0 & 1) != 0) { return isUnmountSupported_; } else { return IsUnmountSupportedDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isUnmountSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_unmount_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsUnmountSupported {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_unmount_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsUnmountSupported() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "is_trim_supported" field.</summary>
  public const int IsTrimSupportedFieldNumber = 4;
  private readonly static bool IsTrimSupportedDefaultValue = false;

  private bool isTrimSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTrimSupported {
    get { if ((_hasBits0 & 2) != 0) { return isTrimSupported_; } else { return IsTrimSupportedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isTrimSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_trim_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTrimSupported {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_trim_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTrimSupported() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_trim_running" field.</summary>
  public const int IsTrimRunningFieldNumber = 5;
  private readonly static bool IsTrimRunningDefaultValue = false;

  private bool isTrimRunning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTrimRunning {
    get { if ((_hasBits0 & 4) != 0) { return isTrimRunning_; } else { return IsTrimRunningDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isTrimRunning_ = value;
    }
  }
  /// <summary>Gets whether the "is_trim_running" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTrimRunning {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_trim_running" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTrimRunning() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgStorageDevicesData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgStorageDevicesData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!drives_.Equals(other.drives_)) return false;
    if(!blockDevices_.Equals(other.blockDevices_)) return false;
    if (IsUnmountSupported != other.IsUnmountSupported) return false;
    if (IsTrimSupported != other.IsTrimSupported) return false;
    if (IsTrimRunning != other.IsTrimRunning) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= drives_.GetHashCode();
    hash ^= blockDevices_.GetHashCode();
    if (HasIsUnmountSupported) hash ^= IsUnmountSupported.GetHashCode();
    if (HasIsTrimSupported) hash ^= IsTrimSupported.GetHashCode();
    if (HasIsTrimRunning) hash ^= IsTrimRunning.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    drives_.WriteTo(output, _repeated_drives_codec);
    blockDevices_.WriteTo(output, _repeated_blockDevices_codec);
    if (HasIsUnmountSupported) {
      output.WriteRawTag(24);
      output.WriteBool(IsUnmountSupported);
    }
    if (HasIsTrimSupported) {
      output.WriteRawTag(32);
      output.WriteBool(IsTrimSupported);
    }
    if (HasIsTrimRunning) {
      output.WriteRawTag(40);
      output.WriteBool(IsTrimRunning);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    drives_.WriteTo(ref output, _repeated_drives_codec);
    blockDevices_.WriteTo(ref output, _repeated_blockDevices_codec);
    if (HasIsUnmountSupported) {
      output.WriteRawTag(24);
      output.WriteBool(IsUnmountSupported);
    }
    if (HasIsTrimSupported) {
      output.WriteRawTag(32);
      output.WriteBool(IsTrimSupported);
    }
    if (HasIsTrimRunning) {
      output.WriteRawTag(40);
      output.WriteBool(IsTrimRunning);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += drives_.CalculateSize(_repeated_drives_codec);
    size += blockDevices_.CalculateSize(_repeated_blockDevices_codec);
    if (HasIsUnmountSupported) {
      size += 1 + 1;
    }
    if (HasIsTrimSupported) {
      size += 1 + 1;
    }
    if (HasIsTrimRunning) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgStorageDevicesData other) {
    if (other == null) {
      return;
    }
    drives_.Add(other.drives_);
    blockDevices_.Add(other.blockDevices_);
    if (other.HasIsUnmountSupported) {
      IsUnmountSupported = other.IsUnmountSupported;
    }
    if (other.HasIsTrimSupported) {
      IsTrimSupported = other.IsTrimSupported;
    }
    if (other.HasIsTrimRunning) {
      IsTrimRunning = other.IsTrimRunning;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          drives_.AddEntriesFrom(input, _repeated_drives_codec);
          break;
        }
        case 18: {
          blockDevices_.AddEntriesFrom(input, _repeated_blockDevices_codec);
          break;
        }
        case 24: {
          IsUnmountSupported = input.ReadBool();
          break;
        }
        case 32: {
          IsTrimSupported = input.ReadBool();
          break;
        }
        case 40: {
          IsTrimRunning = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          drives_.AddEntriesFrom(ref input, _repeated_drives_codec);
          break;
        }
        case 18: {
          blockDevices_.AddEntriesFrom(ref input, _repeated_blockDevices_codec);
          break;
        }
        case 24: {
          IsUnmountSupported = input.ReadBool();
          break;
        }
        case 32: {
          IsTrimSupported = input.ReadBool();
          break;
        }
        case 40: {
          IsTrimRunning = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgStorageDevicesData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Drive : pb::IMessage<Drive>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Drive> _parser = new pb::MessageParser<Drive>(() => new Drive());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Drive> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgStorageDevicesData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Drive() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Drive(Drive other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        model_ = other.model_;
        vendor_ = other.vendor_;
        serial_ = other.serial_;
        isEjectable_ = other.isEjectable_;
        sizeBytes_ = other.sizeBytes_;
        mediaType_ = other.mediaType_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Drive Clone() {
        return new Drive(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static uint IdDefaultValue = 0;

      private uint id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "model" field.</summary>
      public const int ModelFieldNumber = 2;
      private readonly static string ModelDefaultValue = "";

      private string model_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Model {
        get { return model_ ?? ModelDefaultValue; }
        set {
          model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "model" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasModel {
        get { return model_ != null; }
      }
      /// <summary>Clears the value of the "model" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearModel() {
        model_ = null;
      }

      /// <summary>Field number for the "vendor" field.</summary>
      public const int VendorFieldNumber = 3;
      private readonly static string VendorDefaultValue = "";

      private string vendor_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Vendor {
        get { return vendor_ ?? VendorDefaultValue; }
        set {
          vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "vendor" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVendor {
        get { return vendor_ != null; }
      }
      /// <summary>Clears the value of the "vendor" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVendor() {
        vendor_ = null;
      }

      /// <summary>Field number for the "serial" field.</summary>
      public const int SerialFieldNumber = 4;
      private readonly static string SerialDefaultValue = "";

      private string serial_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Serial {
        get { return serial_ ?? SerialDefaultValue; }
        set {
          serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "serial" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSerial {
        get { return serial_ != null; }
      }
      /// <summary>Clears the value of the "serial" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSerial() {
        serial_ = null;
      }

      /// <summary>Field number for the "is_ejectable" field.</summary>
      public const int IsEjectableFieldNumber = 5;
      private readonly static bool IsEjectableDefaultValue = false;

      private bool isEjectable_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsEjectable {
        get { if ((_hasBits0 & 2) != 0) { return isEjectable_; } else { return IsEjectableDefaultValue; } }
        set {
          _hasBits0 |= 2;
          isEjectable_ = value;
        }
      }
      /// <summary>Gets whether the "is_ejectable" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsEjectable {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "is_ejectable" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsEjectable() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "size_bytes" field.</summary>
      public const int SizeBytesFieldNumber = 6;
      private readonly static ulong SizeBytesDefaultValue = 0UL;

      private ulong sizeBytes_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong SizeBytes {
        get { if ((_hasBits0 & 4) != 0) { return sizeBytes_; } else { return SizeBytesDefaultValue; } }
        set {
          _hasBits0 |= 4;
          sizeBytes_ = value;
        }
      }
      /// <summary>Gets whether the "size_bytes" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSizeBytes {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "size_bytes" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSizeBytes() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "media_type" field.</summary>
      public const int MediaTypeFieldNumber = 7;
      private readonly static global::EStorageDriveMediaType MediaTypeDefaultValue = global::EStorageDriveMediaType.KEstorageDriveMediaTypeInvalid;

      private global::EStorageDriveMediaType mediaType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::EStorageDriveMediaType MediaType {
        get { if ((_hasBits0 & 8) != 0) { return mediaType_; } else { return MediaTypeDefaultValue; } }
        set {
          _hasBits0 |= 8;
          mediaType_ = value;
        }
      }
      /// <summary>Gets whether the "media_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMediaType {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "media_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMediaType() {
        _hasBits0 &= ~8;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Drive);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Drive other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (Model != other.Model) return false;
        if (Vendor != other.Vendor) return false;
        if (Serial != other.Serial) return false;
        if (IsEjectable != other.IsEjectable) return false;
        if (SizeBytes != other.SizeBytes) return false;
        if (MediaType != other.MediaType) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasModel) hash ^= Model.GetHashCode();
        if (HasVendor) hash ^= Vendor.GetHashCode();
        if (HasSerial) hash ^= Serial.GetHashCode();
        if (HasIsEjectable) hash ^= IsEjectable.GetHashCode();
        if (HasSizeBytes) hash ^= SizeBytes.GetHashCode();
        if (HasMediaType) hash ^= MediaType.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasModel) {
          output.WriteRawTag(18);
          output.WriteString(Model);
        }
        if (HasVendor) {
          output.WriteRawTag(26);
          output.WriteString(Vendor);
        }
        if (HasSerial) {
          output.WriteRawTag(34);
          output.WriteString(Serial);
        }
        if (HasIsEjectable) {
          output.WriteRawTag(40);
          output.WriteBool(IsEjectable);
        }
        if (HasSizeBytes) {
          output.WriteRawTag(48);
          output.WriteUInt64(SizeBytes);
        }
        if (HasMediaType) {
          output.WriteRawTag(56);
          output.WriteEnum((int) MediaType);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasModel) {
          output.WriteRawTag(18);
          output.WriteString(Model);
        }
        if (HasVendor) {
          output.WriteRawTag(26);
          output.WriteString(Vendor);
        }
        if (HasSerial) {
          output.WriteRawTag(34);
          output.WriteString(Serial);
        }
        if (HasIsEjectable) {
          output.WriteRawTag(40);
          output.WriteBool(IsEjectable);
        }
        if (HasSizeBytes) {
          output.WriteRawTag(48);
          output.WriteUInt64(SizeBytes);
        }
        if (HasMediaType) {
          output.WriteRawTag(56);
          output.WriteEnum((int) MediaType);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
        }
        if (HasModel) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
        }
        if (HasVendor) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
        }
        if (HasSerial) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
        }
        if (HasIsEjectable) {
          size += 1 + 1;
        }
        if (HasSizeBytes) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeBytes);
        }
        if (HasMediaType) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MediaType);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Drive other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasModel) {
          Model = other.Model;
        }
        if (other.HasVendor) {
          Vendor = other.Vendor;
        }
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasIsEjectable) {
          IsEjectable = other.IsEjectable;
        }
        if (other.HasSizeBytes) {
          SizeBytes = other.SizeBytes;
        }
        if (other.HasMediaType) {
          MediaType = other.MediaType;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 18: {
              Model = input.ReadString();
              break;
            }
            case 26: {
              Vendor = input.ReadString();
              break;
            }
            case 34: {
              Serial = input.ReadString();
              break;
            }
            case 40: {
              IsEjectable = input.ReadBool();
              break;
            }
            case 48: {
              SizeBytes = input.ReadUInt64();
              break;
            }
            case 56: {
              MediaType = (global::EStorageDriveMediaType) input.ReadEnum();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 18: {
              Model = input.ReadString();
              break;
            }
            case 26: {
              Vendor = input.ReadString();
              break;
            }
            case 34: {
              Serial = input.ReadString();
              break;
            }
            case 40: {
              IsEjectable = input.ReadBool();
              break;
            }
            case 48: {
              SizeBytes = input.ReadUInt64();
              break;
            }
            case 56: {
              MediaType = (global::EStorageDriveMediaType) input.ReadEnum();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class BlockDevice : pb::IMessage<BlockDevice>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<BlockDevice> _parser = new pb::MessageParser<BlockDevice>(() => new BlockDevice());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<BlockDevice> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgStorageDevicesData.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public BlockDevice() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public BlockDevice(BlockDevice other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        driveId_ = other.driveId_;
        path_ = other.path_;
        friendlyPath_ = other.friendlyPath_;
        label_ = other.label_;
        sizeBytes_ = other.sizeBytes_;
        isFormattable_ = other.isFormattable_;
        isReadOnly_ = other.isReadOnly_;
        isRootDevice_ = other.isRootDevice_;
        contentType_ = other.contentType_;
        filesystemType_ = other.filesystemType_;
        mountPath_ = other.mountPath_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public BlockDevice Clone() {
        return new BlockDevice(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static uint IdDefaultValue = 0;

      private uint id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "drive_id" field.</summary>
      public const int DriveIdFieldNumber = 2;
      private readonly static uint DriveIdDefaultValue = 0;

      private uint driveId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DriveId {
        get { if ((_hasBits0 & 2) != 0) { return driveId_; } else { return DriveIdDefaultValue; } }
        set {
          _hasBits0 |= 2;
          driveId_ = value;
        }
      }
      /// <summary>Gets whether the "drive_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDriveId {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "drive_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDriveId() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "path" field.</summary>
      public const int PathFieldNumber = 3;
      private readonly static string PathDefaultValue = "";

      private string path_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Path {
        get { return path_ ?? PathDefaultValue; }
        set {
          path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "path" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPath {
        get { return path_ != null; }
      }
      /// <summary>Clears the value of the "path" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPath() {
        path_ = null;
      }

      /// <summary>Field number for the "friendly_path" field.</summary>
      public const int FriendlyPathFieldNumber = 4;
      private readonly static string FriendlyPathDefaultValue = "";

      private string friendlyPath_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string FriendlyPath {
        get { return friendlyPath_ ?? FriendlyPathDefaultValue; }
        set {
          friendlyPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "friendly_path" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFriendlyPath {
        get { return friendlyPath_ != null; }
      }
      /// <summary>Clears the value of the "friendly_path" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFriendlyPath() {
        friendlyPath_ = null;
      }

      /// <summary>Field number for the "label" field.</summary>
      public const int LabelFieldNumber = 5;
      private readonly static string LabelDefaultValue = "";

      private string label_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Label {
        get { return label_ ?? LabelDefaultValue; }
        set {
          label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "label" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLabel {
        get { return label_ != null; }
      }
      /// <summary>Clears the value of the "label" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLabel() {
        label_ = null;
      }

      /// <summary>Field number for the "size_bytes" field.</summary>
      public const int SizeBytesFieldNumber = 6;
      private readonly static ulong SizeBytesDefaultValue = 0UL;

      private ulong sizeBytes_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong SizeBytes {
        get { if ((_hasBits0 & 4) != 0) { return sizeBytes_; } else { return SizeBytesDefaultValue; } }
        set {
          _hasBits0 |= 4;
          sizeBytes_ = value;
        }
      }
      /// <summary>Gets whether the "size_bytes" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSizeBytes {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "size_bytes" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSizeBytes() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "is_formattable" field.</summary>
      public const int IsFormattableFieldNumber = 7;
      private readonly static bool IsFormattableDefaultValue = false;

      private bool isFormattable_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsFormattable {
        get { if ((_hasBits0 & 8) != 0) { return isFormattable_; } else { return IsFormattableDefaultValue; } }
        set {
          _hasBits0 |= 8;
          isFormattable_ = value;
        }
      }
      /// <summary>Gets whether the "is_formattable" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsFormattable {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "is_formattable" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsFormattable() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "is_read_only" field.</summary>
      public const int IsReadOnlyFieldNumber = 8;
      private readonly static bool IsReadOnlyDefaultValue = false;

      private bool isReadOnly_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsReadOnly {
        get { if ((_hasBits0 & 16) != 0) { return isReadOnly_; } else { return IsReadOnlyDefaultValue; } }
        set {
          _hasBits0 |= 16;
          isReadOnly_ = value;
        }
      }
      /// <summary>Gets whether the "is_read_only" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsReadOnly {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "is_read_only" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsReadOnly() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "is_root_device" field.</summary>
      public const int IsRootDeviceFieldNumber = 9;
      private readonly static bool IsRootDeviceDefaultValue = false;

      private bool isRootDevice_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsRootDevice {
        get { if ((_hasBits0 & 32) != 0) { return isRootDevice_; } else { return IsRootDeviceDefaultValue; } }
        set {
          _hasBits0 |= 32;
          isRootDevice_ = value;
        }
      }
      /// <summary>Gets whether the "is_root_device" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsRootDevice {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "is_root_device" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsRootDevice() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "content_type" field.</summary>
      public const int ContentTypeFieldNumber = 10;
      private readonly static global::EStorageBlockContentType ContentTypeDefaultValue = global::EStorageBlockContentType.KEstorageBlockContentTypeInvalid;

      private global::EStorageBlockContentType contentType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::EStorageBlockContentType ContentType {
        get { if ((_hasBits0 & 64) != 0) { return contentType_; } else { return ContentTypeDefaultValue; } }
        set {
          _hasBits0 |= 64;
          contentType_ = value;
        }
      }
      /// <summary>Gets whether the "content_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasContentType {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "content_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearContentType() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "filesystem_type" field.</summary>
      public const int FilesystemTypeFieldNumber = 11;
      private readonly static global::EStorageBlockFileSystemType FilesystemTypeDefaultValue = global::EStorageBlockFileSystemType.KEstorageBlockFileSystemTypeInvalid;

      private global::EStorageBlockFileSystemType filesystemType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::EStorageBlockFileSystemType FilesystemType {
        get { if ((_hasBits0 & 128) != 0) { return filesystemType_; } else { return FilesystemTypeDefaultValue; } }
        set {
          _hasBits0 |= 128;
          filesystemType_ = value;
        }
      }
      /// <summary>Gets whether the "filesystem_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFilesystemType {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "filesystem_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFilesystemType() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "mount_path" field.</summary>
      public const int MountPathFieldNumber = 12;
      private readonly static string MountPathDefaultValue = "";

      private string mountPath_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string MountPath {
        get { return mountPath_ ?? MountPathDefaultValue; }
        set {
          mountPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "mount_path" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMountPath {
        get { return mountPath_ != null; }
      }
      /// <summary>Clears the value of the "mount_path" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMountPath() {
        mountPath_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as BlockDevice);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(BlockDevice other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (DriveId != other.DriveId) return false;
        if (Path != other.Path) return false;
        if (FriendlyPath != other.FriendlyPath) return false;
        if (Label != other.Label) return false;
        if (SizeBytes != other.SizeBytes) return false;
        if (IsFormattable != other.IsFormattable) return false;
        if (IsReadOnly != other.IsReadOnly) return false;
        if (IsRootDevice != other.IsRootDevice) return false;
        if (ContentType != other.ContentType) return false;
        if (FilesystemType != other.FilesystemType) return false;
        if (MountPath != other.MountPath) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasDriveId) hash ^= DriveId.GetHashCode();
        if (HasPath) hash ^= Path.GetHashCode();
        if (HasFriendlyPath) hash ^= FriendlyPath.GetHashCode();
        if (HasLabel) hash ^= Label.GetHashCode();
        if (HasSizeBytes) hash ^= SizeBytes.GetHashCode();
        if (HasIsFormattable) hash ^= IsFormattable.GetHashCode();
        if (HasIsReadOnly) hash ^= IsReadOnly.GetHashCode();
        if (HasIsRootDevice) hash ^= IsRootDevice.GetHashCode();
        if (HasContentType) hash ^= ContentType.GetHashCode();
        if (HasFilesystemType) hash ^= FilesystemType.GetHashCode();
        if (HasMountPath) hash ^= MountPath.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasDriveId) {
          output.WriteRawTag(16);
          output.WriteUInt32(DriveId);
        }
        if (HasPath) {
          output.WriteRawTag(26);
          output.WriteString(Path);
        }
        if (HasFriendlyPath) {
          output.WriteRawTag(34);
          output.WriteString(FriendlyPath);
        }
        if (HasLabel) {
          output.WriteRawTag(42);
          output.WriteString(Label);
        }
        if (HasSizeBytes) {
          output.WriteRawTag(48);
          output.WriteUInt64(SizeBytes);
        }
        if (HasIsFormattable) {
          output.WriteRawTag(56);
          output.WriteBool(IsFormattable);
        }
        if (HasIsReadOnly) {
          output.WriteRawTag(64);
          output.WriteBool(IsReadOnly);
        }
        if (HasIsRootDevice) {
          output.WriteRawTag(72);
          output.WriteBool(IsRootDevice);
        }
        if (HasContentType) {
          output.WriteRawTag(80);
          output.WriteEnum((int) ContentType);
        }
        if (HasFilesystemType) {
          output.WriteRawTag(88);
          output.WriteEnum((int) FilesystemType);
        }
        if (HasMountPath) {
          output.WriteRawTag(98);
          output.WriteString(MountPath);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasDriveId) {
          output.WriteRawTag(16);
          output.WriteUInt32(DriveId);
        }
        if (HasPath) {
          output.WriteRawTag(26);
          output.WriteString(Path);
        }
        if (HasFriendlyPath) {
          output.WriteRawTag(34);
          output.WriteString(FriendlyPath);
        }
        if (HasLabel) {
          output.WriteRawTag(42);
          output.WriteString(Label);
        }
        if (HasSizeBytes) {
          output.WriteRawTag(48);
          output.WriteUInt64(SizeBytes);
        }
        if (HasIsFormattable) {
          output.WriteRawTag(56);
          output.WriteBool(IsFormattable);
        }
        if (HasIsReadOnly) {
          output.WriteRawTag(64);
          output.WriteBool(IsReadOnly);
        }
        if (HasIsRootDevice) {
          output.WriteRawTag(72);
          output.WriteBool(IsRootDevice);
        }
        if (HasContentType) {
          output.WriteRawTag(80);
          output.WriteEnum((int) ContentType);
        }
        if (HasFilesystemType) {
          output.WriteRawTag(88);
          output.WriteEnum((int) FilesystemType);
        }
        if (HasMountPath) {
          output.WriteRawTag(98);
          output.WriteString(MountPath);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
        }
        if (HasDriveId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DriveId);
        }
        if (HasPath) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
        }
        if (HasFriendlyPath) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyPath);
        }
        if (HasLabel) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
        }
        if (HasSizeBytes) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeBytes);
        }
        if (HasIsFormattable) {
          size += 1 + 1;
        }
        if (HasIsReadOnly) {
          size += 1 + 1;
        }
        if (HasIsRootDevice) {
          size += 1 + 1;
        }
        if (HasContentType) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
        }
        if (HasFilesystemType) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilesystemType);
        }
        if (HasMountPath) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(MountPath);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(BlockDevice other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasDriveId) {
          DriveId = other.DriveId;
        }
        if (other.HasPath) {
          Path = other.Path;
        }
        if (other.HasFriendlyPath) {
          FriendlyPath = other.FriendlyPath;
        }
        if (other.HasLabel) {
          Label = other.Label;
        }
        if (other.HasSizeBytes) {
          SizeBytes = other.SizeBytes;
        }
        if (other.HasIsFormattable) {
          IsFormattable = other.IsFormattable;
        }
        if (other.HasIsReadOnly) {
          IsReadOnly = other.IsReadOnly;
        }
        if (other.HasIsRootDevice) {
          IsRootDevice = other.IsRootDevice;
        }
        if (other.HasContentType) {
          ContentType = other.ContentType;
        }
        if (other.HasFilesystemType) {
          FilesystemType = other.FilesystemType;
        }
        if (other.HasMountPath) {
          MountPath = other.MountPath;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              DriveId = input.ReadUInt32();
              break;
            }
            case 26: {
              Path = input.ReadString();
              break;
            }
            case 34: {
              FriendlyPath = input.ReadString();
              break;
            }
            case 42: {
              Label = input.ReadString();
              break;
            }
            case 48: {
              SizeBytes = input.ReadUInt64();
              break;
            }
            case 56: {
              IsFormattable = input.ReadBool();
              break;
            }
            case 64: {
              IsReadOnly = input.ReadBool();
              break;
            }
            case 72: {
              IsRootDevice = input.ReadBool();
              break;
            }
            case 80: {
              ContentType = (global::EStorageBlockContentType) input.ReadEnum();
              break;
            }
            case 88: {
              FilesystemType = (global::EStorageBlockFileSystemType) input.ReadEnum();
              break;
            }
            case 98: {
              MountPath = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              DriveId = input.ReadUInt32();
              break;
            }
            case 26: {
              Path = input.ReadString();
              break;
            }
            case 34: {
              FriendlyPath = input.ReadString();
              break;
            }
            case 42: {
              Label = input.ReadString();
              break;
            }
            case 48: {
              SizeBytes = input.ReadUInt64();
              break;
            }
            case 56: {
              IsFormattable = input.ReadBool();
              break;
            }
            case 64: {
              IsReadOnly = input.ReadBool();
              break;
            }
            case 72: {
              IsRootDevice = input.ReadBool();
              break;
            }
            case 80: {
              ContentType = (global::EStorageBlockContentType) input.ReadEnum();
              break;
            }
            case 88: {
              FilesystemType = (global::EStorageBlockFileSystemType) input.ReadEnum();
              break;
            }
            case 98: {
              MountPath = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CCloud_PendingRemoteOperation : pb::IMessage<CCloud_PendingRemoteOperation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CCloud_PendingRemoteOperation> _parser = new pb::MessageParser<CCloud_PendingRemoteOperation>(() => new CCloud_PendingRemoteOperation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CCloud_PendingRemoteOperation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CCloud_PendingRemoteOperation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CCloud_PendingRemoteOperation(CCloud_PendingRemoteOperation other) : this() {
    _hasBits0 = other._hasBits0;
    operation_ = other.operation_;
    machineName_ = other.machineName_;
    clientId_ = other.clientId_;
    timeLastUpdated_ = other.timeLastUpdated_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CCloud_PendingRemoteOperation Clone() {
    return new CCloud_PendingRemoteOperation(this);
  }

  /// <summary>Field number for the "operation" field.</summary>
  public const int OperationFieldNumber = 1;
  private readonly static global::ECloudPendingRemoteOperation OperationDefaultValue = global::ECloudPendingRemoteOperation.KEcloudPendingRemoteOperationNone;

  private global::ECloudPendingRemoteOperation operation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ECloudPendingRemoteOperation Operation {
    get { if ((_hasBits0 & 1) != 0) { return operation_; } else { return OperationDefaultValue; } }
    set {
      _hasBits0 |= 1;
      operation_ = value;
    }
  }
  /// <summary>Gets whether the "operation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOperation {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "operation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOperation() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "machine_name" field.</summary>
  public const int MachineNameFieldNumber = 2;
  private readonly static string MachineNameDefaultValue = "";

  private string machineName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MachineName {
    get { return machineName_ ?? MachineNameDefaultValue; }
    set {
      machineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "machine_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMachineName {
    get { return machineName_ != null; }
  }
  /// <summary>Clears the value of the "machine_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMachineName() {
    machineName_ = null;
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 3;
  private readonly static ulong ClientIdDefaultValue = 0UL;

  private ulong clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ClientId {
    get { if ((_hasBits0 & 2) != 0) { return clientId_; } else { return ClientIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientId_ = value;
    }
  }
  /// <summary>Gets whether the "client_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "client_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "time_last_updated" field.</summary>
  public const int TimeLastUpdatedFieldNumber = 4;
  private readonly static uint TimeLastUpdatedDefaultValue = 0;

  private uint timeLastUpdated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TimeLastUpdated {
    get { if ((_hasBits0 & 4) != 0) { return timeLastUpdated_; } else { return TimeLastUpdatedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      timeLastUpdated_ = value;
    }
  }
  /// <summary>Gets whether the "time_last_updated" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimeLastUpdated {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "time_last_updated" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimeLastUpdated() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CCloud_PendingRemoteOperation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CCloud_PendingRemoteOperation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Operation != other.Operation) return false;
    if (MachineName != other.MachineName) return false;
    if (ClientId != other.ClientId) return false;
    if (TimeLastUpdated != other.TimeLastUpdated) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOperation) hash ^= Operation.GetHashCode();
    if (HasMachineName) hash ^= MachineName.GetHashCode();
    if (HasClientId) hash ^= ClientId.GetHashCode();
    if (HasTimeLastUpdated) hash ^= TimeLastUpdated.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOperation) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Operation);
    }
    if (HasMachineName) {
      output.WriteRawTag(18);
      output.WriteString(MachineName);
    }
    if (HasClientId) {
      output.WriteRawTag(24);
      output.WriteUInt64(ClientId);
    }
    if (HasTimeLastUpdated) {
      output.WriteRawTag(32);
      output.WriteUInt32(TimeLastUpdated);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOperation) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Operation);
    }
    if (HasMachineName) {
      output.WriteRawTag(18);
      output.WriteString(MachineName);
    }
    if (HasClientId) {
      output.WriteRawTag(24);
      output.WriteUInt64(ClientId);
    }
    if (HasTimeLastUpdated) {
      output.WriteRawTag(32);
      output.WriteUInt32(TimeLastUpdated);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOperation) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
    }
    if (HasMachineName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineName);
    }
    if (HasClientId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientId);
    }
    if (HasTimeLastUpdated) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLastUpdated);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CCloud_PendingRemoteOperation other) {
    if (other == null) {
      return;
    }
    if (other.HasOperation) {
      Operation = other.Operation;
    }
    if (other.HasMachineName) {
      MachineName = other.MachineName;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    if (other.HasTimeLastUpdated) {
      TimeLastUpdated = other.TimeLastUpdated;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Operation = (global::ECloudPendingRemoteOperation) input.ReadEnum();
          break;
        }
        case 18: {
          MachineName = input.ReadString();
          break;
        }
        case 24: {
          ClientId = input.ReadUInt64();
          break;
        }
        case 32: {
          TimeLastUpdated = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Operation = (global::ECloudPendingRemoteOperation) input.ReadEnum();
          break;
        }
        case 18: {
          MachineName = input.ReadString();
          break;
        }
        case 24: {
          ClientId = input.ReadUInt64();
          break;
        }
        case 32: {
          TimeLastUpdated = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgCloudPendingRemoteOperations : pb::IMessage<CMsgCloudPendingRemoteOperations>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgCloudPendingRemoteOperations> _parser = new pb::MessageParser<CMsgCloudPendingRemoteOperations>(() => new CMsgCloudPendingRemoteOperations());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgCloudPendingRemoteOperations> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCloudPendingRemoteOperations() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCloudPendingRemoteOperations(CMsgCloudPendingRemoteOperations other) : this() {
    operations_ = other.operations_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCloudPendingRemoteOperations Clone() {
    return new CMsgCloudPendingRemoteOperations(this);
  }

  /// <summary>Field number for the "operations" field.</summary>
  public const int OperationsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CCloud_PendingRemoteOperation> _repeated_operations_codec
      = pb::FieldCodec.ForMessage(10, global::CCloud_PendingRemoteOperation.Parser);
  private readonly pbc::RepeatedField<global::CCloud_PendingRemoteOperation> operations_ = new pbc::RepeatedField<global::CCloud_PendingRemoteOperation>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CCloud_PendingRemoteOperation> Operations {
    get { return operations_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgCloudPendingRemoteOperations);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgCloudPendingRemoteOperations other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!operations_.Equals(other.operations_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= operations_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    operations_.WriteTo(output, _repeated_operations_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    operations_.WriteTo(ref output, _repeated_operations_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += operations_.CalculateSize(_repeated_operations_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgCloudPendingRemoteOperations other) {
    if (other == null) {
      return;
    }
    operations_.Add(other.operations_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          operations_.AddEntriesFrom(input, _repeated_operations_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          operations_.AddEntriesFrom(ref input, _repeated_operations_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgBluetoothDevicesData : pb::IMessage<CMsgBluetoothDevicesData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgBluetoothDevicesData> _parser = new pb::MessageParser<CMsgBluetoothDevicesData>(() => new CMsgBluetoothDevicesData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgBluetoothDevicesData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgBluetoothDevicesData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgBluetoothDevicesData(CMsgBluetoothDevicesData other) : this() {
    adapters_ = other.adapters_.Clone();
    devices_ = other.devices_.Clone();
    manager_ = other.manager_ != null ? other.manager_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgBluetoothDevicesData Clone() {
    return new CMsgBluetoothDevicesData(this);
  }

  /// <summary>Field number for the "adapters" field.</summary>
  public const int AdaptersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgBluetoothDevicesData.Types.Adapter> _repeated_adapters_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgBluetoothDevicesData.Types.Adapter.Parser);
  private readonly pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Adapter> adapters_ = new pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Adapter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Adapter> Adapters {
    get { return adapters_; }
  }

  /// <summary>Field number for the "devices" field.</summary>
  public const int DevicesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgBluetoothDevicesData.Types.Device> _repeated_devices_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgBluetoothDevicesData.Types.Device.Parser);
  private readonly pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Device> devices_ = new pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Device>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgBluetoothDevicesData.Types.Device> Devices {
    get { return devices_; }
  }

  /// <summary>Field number for the "manager" field.</summary>
  public const int ManagerFieldNumber = 3;
  private global::CMsgBluetoothDevicesData.Types.Manager manager_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgBluetoothDevicesData.Types.Manager Manager {
    get { return manager_; }
    set {
      manager_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgBluetoothDevicesData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgBluetoothDevicesData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!adapters_.Equals(other.adapters_)) return false;
    if(!devices_.Equals(other.devices_)) return false;
    if (!object.Equals(Manager, other.Manager)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= adapters_.GetHashCode();
    hash ^= devices_.GetHashCode();
    if (manager_ != null) hash ^= Manager.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    adapters_.WriteTo(output, _repeated_adapters_codec);
    devices_.WriteTo(output, _repeated_devices_codec);
    if (manager_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Manager);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    adapters_.WriteTo(ref output, _repeated_adapters_codec);
    devices_.WriteTo(ref output, _repeated_devices_codec);
    if (manager_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Manager);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += adapters_.CalculateSize(_repeated_adapters_codec);
    size += devices_.CalculateSize(_repeated_devices_codec);
    if (manager_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgBluetoothDevicesData other) {
    if (other == null) {
      return;
    }
    adapters_.Add(other.adapters_);
    devices_.Add(other.devices_);
    if (other.manager_ != null) {
      if (manager_ == null) {
        Manager = new global::CMsgBluetoothDevicesData.Types.Manager();
      }
      Manager.MergeFrom(other.Manager);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          adapters_.AddEntriesFrom(input, _repeated_adapters_codec);
          break;
        }
        case 18: {
          devices_.AddEntriesFrom(input, _repeated_devices_codec);
          break;
        }
        case 26: {
          if (manager_ == null) {
            Manager = new global::CMsgBluetoothDevicesData.Types.Manager();
          }
          input.ReadMessage(Manager);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          adapters_.AddEntriesFrom(ref input, _repeated_adapters_codec);
          break;
        }
        case 18: {
          devices_.AddEntriesFrom(ref input, _repeated_devices_codec);
          break;
        }
        case 26: {
          if (manager_ == null) {
            Manager = new global::CMsgBluetoothDevicesData.Types.Manager();
          }
          input.ReadMessage(Manager);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgBluetoothDevicesData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Adapter : pb::IMessage<Adapter>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Adapter> _parser = new pb::MessageParser<Adapter>(() => new Adapter());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Adapter> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgBluetoothDevicesData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Adapter() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Adapter(Adapter other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        mac_ = other.mac_;
        name_ = other.name_;
        isEnabled_ = other.isEnabled_;
        isDiscovering_ = other.isDiscovering_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Adapter Clone() {
        return new Adapter(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static uint IdDefaultValue = 0;

      private uint id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "mac" field.</summary>
      public const int MacFieldNumber = 2;
      private readonly static string MacDefaultValue = "";

      private string mac_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Mac {
        get { return mac_ ?? MacDefaultValue; }
        set {
          mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "mac" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMac {
        get { return mac_ != null; }
      }
      /// <summary>Clears the value of the "mac" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMac() {
        mac_ = null;
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 3;
      private readonly static string NameDefaultValue = "";

      private string name_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "is_enabled" field.</summary>
      public const int IsEnabledFieldNumber = 4;
      private readonly static bool IsEnabledDefaultValue = false;

      private bool isEnabled_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsEnabled {
        get { if ((_hasBits0 & 2) != 0) { return isEnabled_; } else { return IsEnabledDefaultValue; } }
        set {
          _hasBits0 |= 2;
          isEnabled_ = value;
        }
      }
      /// <summary>Gets whether the "is_enabled" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsEnabled {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "is_enabled" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsEnabled() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "is_discovering" field.</summary>
      public const int IsDiscoveringFieldNumber = 5;
      private readonly static bool IsDiscoveringDefaultValue = false;

      private bool isDiscovering_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsDiscovering {
        get { if ((_hasBits0 & 4) != 0) { return isDiscovering_; } else { return IsDiscoveringDefaultValue; } }
        set {
          _hasBits0 |= 4;
          isDiscovering_ = value;
        }
      }
      /// <summary>Gets whether the "is_discovering" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsDiscovering {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "is_discovering" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsDiscovering() {
        _hasBits0 &= ~4;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Adapter);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Adapter other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (Mac != other.Mac) return false;
        if (Name != other.Name) return false;
        if (IsEnabled != other.IsEnabled) return false;
        if (IsDiscovering != other.IsDiscovering) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasMac) hash ^= Mac.GetHashCode();
        if (HasName) hash ^= Name.GetHashCode();
        if (HasIsEnabled) hash ^= IsEnabled.GetHashCode();
        if (HasIsDiscovering) hash ^= IsDiscovering.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasMac) {
          output.WriteRawTag(18);
          output.WriteString(Mac);
        }
        if (HasName) {
          output.WriteRawTag(26);
          output.WriteString(Name);
        }
        if (HasIsEnabled) {
          output.WriteRawTag(32);
          output.WriteBool(IsEnabled);
        }
        if (HasIsDiscovering) {
          output.WriteRawTag(40);
          output.WriteBool(IsDiscovering);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasMac) {
          output.WriteRawTag(18);
          output.WriteString(Mac);
        }
        if (HasName) {
          output.WriteRawTag(26);
          output.WriteString(Name);
        }
        if (HasIsEnabled) {
          output.WriteRawTag(32);
          output.WriteBool(IsEnabled);
        }
        if (HasIsDiscovering) {
          output.WriteRawTag(40);
          output.WriteBool(IsDiscovering);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
        }
        if (HasMac) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
        }
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasIsEnabled) {
          size += 1 + 1;
        }
        if (HasIsDiscovering) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Adapter other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasMac) {
          Mac = other.Mac;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasIsEnabled) {
          IsEnabled = other.IsEnabled;
        }
        if (other.HasIsDiscovering) {
          IsDiscovering = other.IsDiscovering;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 18: {
              Mac = input.ReadString();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 32: {
              IsEnabled = input.ReadBool();
              break;
            }
            case 40: {
              IsDiscovering = input.ReadBool();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 18: {
              Mac = input.ReadString();
              break;
            }
            case 26: {
              Name = input.ReadString();
              break;
            }
            case 32: {
              IsEnabled = input.ReadBool();
              break;
            }
            case 40: {
              IsDiscovering = input.ReadBool();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class Device : pb::IMessage<Device>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Device> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgBluetoothDevicesData.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device(Device other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        adapterId_ = other.adapterId_;
        etype_ = other.etype_;
        mac_ = other.mac_;
        name_ = other.name_;
        isConnected_ = other.isConnected_;
        isPaired_ = other.isPaired_;
        strengthRaw_ = other.strengthRaw_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Device Clone() {
        return new Device(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static uint IdDefaultValue = 0;

      private uint id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "adapter_id" field.</summary>
      public const int AdapterIdFieldNumber = 2;
      private readonly static uint AdapterIdDefaultValue = 0;

      private uint adapterId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint AdapterId {
        get { if ((_hasBits0 & 2) != 0) { return adapterId_; } else { return AdapterIdDefaultValue; } }
        set {
          _hasBits0 |= 2;
          adapterId_ = value;
        }
      }
      /// <summary>Gets whether the "adapter_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAdapterId {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "adapter_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAdapterId() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "etype" field.</summary>
      public const int EtypeFieldNumber = 3;
      private readonly static global::EBluetoothDeviceType EtypeDefaultValue = global::EBluetoothDeviceType.KBluetoothDeviceTypeInvalid;

      private global::EBluetoothDeviceType etype_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::EBluetoothDeviceType Etype {
        get { if ((_hasBits0 & 4) != 0) { return etype_; } else { return EtypeDefaultValue; } }
        set {
          _hasBits0 |= 4;
          etype_ = value;
        }
      }
      /// <summary>Gets whether the "etype" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasEtype {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "etype" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearEtype() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "mac" field.</summary>
      public const int MacFieldNumber = 4;
      private readonly static string MacDefaultValue = "";

      private string mac_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Mac {
        get { return mac_ ?? MacDefaultValue; }
        set {
          mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "mac" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMac {
        get { return mac_ != null; }
      }
      /// <summary>Clears the value of the "mac" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMac() {
        mac_ = null;
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 5;
      private readonly static string NameDefaultValue = "";

      private string name_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "is_connected" field.</summary>
      public const int IsConnectedFieldNumber = 6;
      private readonly static bool IsConnectedDefaultValue = false;

      private bool isConnected_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsConnected {
        get { if ((_hasBits0 & 8) != 0) { return isConnected_; } else { return IsConnectedDefaultValue; } }
        set {
          _hasBits0 |= 8;
          isConnected_ = value;
        }
      }
      /// <summary>Gets whether the "is_connected" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsConnected {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "is_connected" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsConnected() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "is_paired" field.</summary>
      public const int IsPairedFieldNumber = 7;
      private readonly static bool IsPairedDefaultValue = false;

      private bool isPaired_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsPaired {
        get { if ((_hasBits0 & 16) != 0) { return isPaired_; } else { return IsPairedDefaultValue; } }
        set {
          _hasBits0 |= 16;
          isPaired_ = value;
        }
      }
      /// <summary>Gets whether the "is_paired" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsPaired {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "is_paired" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsPaired() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "strength_raw" field.</summary>
      public const int StrengthRawFieldNumber = 8;
      private readonly static int StrengthRawDefaultValue = 0;

      private int strengthRaw_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int StrengthRaw {
        get { if ((_hasBits0 & 32) != 0) { return strengthRaw_; } else { return StrengthRawDefaultValue; } }
        set {
          _hasBits0 |= 32;
          strengthRaw_ = value;
        }
      }
      /// <summary>Gets whether the "strength_raw" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasStrengthRaw {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "strength_raw" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearStrengthRaw() {
        _hasBits0 &= ~32;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Device);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Device other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (AdapterId != other.AdapterId) return false;
        if (Etype != other.Etype) return false;
        if (Mac != other.Mac) return false;
        if (Name != other.Name) return false;
        if (IsConnected != other.IsConnected) return false;
        if (IsPaired != other.IsPaired) return false;
        if (StrengthRaw != other.StrengthRaw) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasAdapterId) hash ^= AdapterId.GetHashCode();
        if (HasEtype) hash ^= Etype.GetHashCode();
        if (HasMac) hash ^= Mac.GetHashCode();
        if (HasName) hash ^= Name.GetHashCode();
        if (HasIsConnected) hash ^= IsConnected.GetHashCode();
        if (HasIsPaired) hash ^= IsPaired.GetHashCode();
        if (HasStrengthRaw) hash ^= StrengthRaw.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasAdapterId) {
          output.WriteRawTag(16);
          output.WriteUInt32(AdapterId);
        }
        if (HasEtype) {
          output.WriteRawTag(24);
          output.WriteEnum((int) Etype);
        }
        if (HasMac) {
          output.WriteRawTag(34);
          output.WriteString(Mac);
        }
        if (HasName) {
          output.WriteRawTag(42);
          output.WriteString(Name);
        }
        if (HasIsConnected) {
          output.WriteRawTag(48);
          output.WriteBool(IsConnected);
        }
        if (HasIsPaired) {
          output.WriteRawTag(56);
          output.WriteBool(IsPaired);
        }
        if (HasStrengthRaw) {
          output.WriteRawTag(64);
          output.WriteInt32(StrengthRaw);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteUInt32(Id);
        }
        if (HasAdapterId) {
          output.WriteRawTag(16);
          output.WriteUInt32(AdapterId);
        }
        if (HasEtype) {
          output.WriteRawTag(24);
          output.WriteEnum((int) Etype);
        }
        if (HasMac) {
          output.WriteRawTag(34);
          output.WriteString(Mac);
        }
        if (HasName) {
          output.WriteRawTag(42);
          output.WriteString(Name);
        }
        if (HasIsConnected) {
          output.WriteRawTag(48);
          output.WriteBool(IsConnected);
        }
        if (HasIsPaired) {
          output.WriteRawTag(56);
          output.WriteBool(IsPaired);
        }
        if (HasStrengthRaw) {
          output.WriteRawTag(64);
          output.WriteInt32(StrengthRaw);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
        }
        if (HasAdapterId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdapterId);
        }
        if (HasEtype) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Etype);
        }
        if (HasMac) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
        }
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasIsConnected) {
          size += 1 + 1;
        }
        if (HasIsPaired) {
          size += 1 + 1;
        }
        if (HasStrengthRaw) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(StrengthRaw);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Device other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAdapterId) {
          AdapterId = other.AdapterId;
        }
        if (other.HasEtype) {
          Etype = other.Etype;
        }
        if (other.HasMac) {
          Mac = other.Mac;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasIsConnected) {
          IsConnected = other.IsConnected;
        }
        if (other.HasIsPaired) {
          IsPaired = other.IsPaired;
        }
        if (other.HasStrengthRaw) {
          StrengthRaw = other.StrengthRaw;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              AdapterId = input.ReadUInt32();
              break;
            }
            case 24: {
              Etype = (global::EBluetoothDeviceType) input.ReadEnum();
              break;
            }
            case 34: {
              Mac = input.ReadString();
              break;
            }
            case 42: {
              Name = input.ReadString();
              break;
            }
            case 48: {
              IsConnected = input.ReadBool();
              break;
            }
            case 56: {
              IsPaired = input.ReadBool();
              break;
            }
            case 64: {
              StrengthRaw = input.ReadInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Id = input.ReadUInt32();
              break;
            }
            case 16: {
              AdapterId = input.ReadUInt32();
              break;
            }
            case 24: {
              Etype = (global::EBluetoothDeviceType) input.ReadEnum();
              break;
            }
            case 34: {
              Mac = input.ReadString();
              break;
            }
            case 42: {
              Name = input.ReadString();
              break;
            }
            case 48: {
              IsConnected = input.ReadBool();
              break;
            }
            case 56: {
              IsPaired = input.ReadBool();
              break;
            }
            case 64: {
              StrengthRaw = input.ReadInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class Manager : pb::IMessage<Manager>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Manager> _parser = new pb::MessageParser<Manager>(() => new Manager());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Manager> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgBluetoothDevicesData.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Manager() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Manager(Manager other) : this() {
        _hasBits0 = other._hasBits0;
        isBluetoothEnabled_ = other.isBluetoothEnabled_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Manager Clone() {
        return new Manager(this);
      }

      /// <summary>Field number for the "is_bluetooth_enabled" field.</summary>
      public const int IsBluetoothEnabledFieldNumber = 1;
      private readonly static bool IsBluetoothEnabledDefaultValue = false;

      private bool isBluetoothEnabled_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool IsBluetoothEnabled {
        get { if ((_hasBits0 & 1) != 0) { return isBluetoothEnabled_; } else { return IsBluetoothEnabledDefaultValue; } }
        set {
          _hasBits0 |= 1;
          isBluetoothEnabled_ = value;
        }
      }
      /// <summary>Gets whether the "is_bluetooth_enabled" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIsBluetoothEnabled {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "is_bluetooth_enabled" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIsBluetoothEnabled() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Manager);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Manager other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (IsBluetoothEnabled != other.IsBluetoothEnabled) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasIsBluetoothEnabled) hash ^= IsBluetoothEnabled.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasIsBluetoothEnabled) {
          output.WriteRawTag(8);
          output.WriteBool(IsBluetoothEnabled);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasIsBluetoothEnabled) {
          output.WriteRawTag(8);
          output.WriteBool(IsBluetoothEnabled);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasIsBluetoothEnabled) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Manager other) {
        if (other == null) {
          return;
        }
        if (other.HasIsBluetoothEnabled) {
          IsBluetoothEnabled = other.IsBluetoothEnabled;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              IsBluetoothEnabled = input.ReadBool();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              IsBluetoothEnabled = input.ReadBool();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSystemPerfDiagnosticEntry : pb::IMessage<CMsgSystemPerfDiagnosticEntry>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfDiagnosticEntry> _parser = new pb::MessageParser<CMsgSystemPerfDiagnosticEntry>(() => new CMsgSystemPerfDiagnosticEntry());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfDiagnosticEntry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticEntry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticEntry(CMsgSystemPerfDiagnosticEntry other) : this() {
    name_ = other.name_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticEntry Clone() {
    return new CMsgSystemPerfDiagnosticEntry(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private readonly static string ValueDefaultValue = "";

  private string value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Value {
    get { return value_ ?? ValueDefaultValue; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasValue {
    get { return value_ != null; }
  }
  /// <summary>Clears the value of the "value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearValue() {
    value_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfDiagnosticEntry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfDiagnosticEntry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasName) hash ^= Name.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfDiagnosticEntry other) {
    if (other == null) {
      return;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfNetworkInterface : pb::IMessage<CMsgSystemPerfNetworkInterface>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfNetworkInterface> _parser = new pb::MessageParser<CMsgSystemPerfNetworkInterface>(() => new CMsgSystemPerfNetworkInterface());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfNetworkInterface> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfNetworkInterface() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfNetworkInterface(CMsgSystemPerfNetworkInterface other) : this() {
    _hasBits0 = other._hasBits0;
    name_ = other.name_;
    timestamp_ = other.timestamp_;
    txBytesTotal_ = other.txBytesTotal_;
    rxBytesTotal_ = other.rxBytesTotal_;
    txBytesPerSec_ = other.txBytesPerSec_;
    rxBytesPerSec_ = other.rxBytesPerSec_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfNetworkInterface Clone() {
    return new CMsgSystemPerfNetworkInterface(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private readonly static double TimestampDefaultValue = 0D;

  private double timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Timestamp {
    get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tx_bytes_total" field.</summary>
  public const int TxBytesTotalFieldNumber = 3;
  private readonly static long TxBytesTotalDefaultValue = 0L;

  private long txBytesTotal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TxBytesTotal {
    get { if ((_hasBits0 & 2) != 0) { return txBytesTotal_; } else { return TxBytesTotalDefaultValue; } }
    set {
      _hasBits0 |= 2;
      txBytesTotal_ = value;
    }
  }
  /// <summary>Gets whether the "tx_bytes_total" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTxBytesTotal {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "tx_bytes_total" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTxBytesTotal() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rx_bytes_total" field.</summary>
  public const int RxBytesTotalFieldNumber = 4;
  private readonly static long RxBytesTotalDefaultValue = 0L;

  private long rxBytesTotal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RxBytesTotal {
    get { if ((_hasBits0 & 4) != 0) { return rxBytesTotal_; } else { return RxBytesTotalDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rxBytesTotal_ = value;
    }
  }
  /// <summary>Gets whether the "rx_bytes_total" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRxBytesTotal {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rx_bytes_total" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRxBytesTotal() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "tx_bytes_per_sec" field.</summary>
  public const int TxBytesPerSecFieldNumber = 5;
  private readonly static int TxBytesPerSecDefaultValue = 0;

  private int txBytesPerSec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TxBytesPerSec {
    get { if ((_hasBits0 & 8) != 0) { return txBytesPerSec_; } else { return TxBytesPerSecDefaultValue; } }
    set {
      _hasBits0 |= 8;
      txBytesPerSec_ = value;
    }
  }
  /// <summary>Gets whether the "tx_bytes_per_sec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTxBytesPerSec {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "tx_bytes_per_sec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTxBytesPerSec() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "rx_bytes_per_sec" field.</summary>
  public const int RxBytesPerSecFieldNumber = 6;
  private readonly static int RxBytesPerSecDefaultValue = 0;

  private int rxBytesPerSec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RxBytesPerSec {
    get { if ((_hasBits0 & 16) != 0) { return rxBytesPerSec_; } else { return RxBytesPerSecDefaultValue; } }
    set {
      _hasBits0 |= 16;
      rxBytesPerSec_ = value;
    }
  }
  /// <summary>Gets whether the "rx_bytes_per_sec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRxBytesPerSec {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "rx_bytes_per_sec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRxBytesPerSec() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfNetworkInterface);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfNetworkInterface other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
    if (TxBytesTotal != other.TxBytesTotal) return false;
    if (RxBytesTotal != other.RxBytesTotal) return false;
    if (TxBytesPerSec != other.TxBytesPerSec) return false;
    if (RxBytesPerSec != other.RxBytesPerSec) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasName) hash ^= Name.GetHashCode();
    if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
    if (HasTxBytesTotal) hash ^= TxBytesTotal.GetHashCode();
    if (HasRxBytesTotal) hash ^= RxBytesTotal.GetHashCode();
    if (HasTxBytesPerSec) hash ^= TxBytesPerSec.GetHashCode();
    if (HasRxBytesPerSec) hash ^= RxBytesPerSec.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasTimestamp) {
      output.WriteRawTag(17);
      output.WriteDouble(Timestamp);
    }
    if (HasTxBytesTotal) {
      output.WriteRawTag(24);
      output.WriteInt64(TxBytesTotal);
    }
    if (HasRxBytesTotal) {
      output.WriteRawTag(32);
      output.WriteInt64(RxBytesTotal);
    }
    if (HasTxBytesPerSec) {
      output.WriteRawTag(40);
      output.WriteInt32(TxBytesPerSec);
    }
    if (HasRxBytesPerSec) {
      output.WriteRawTag(48);
      output.WriteInt32(RxBytesPerSec);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasName) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (HasTimestamp) {
      output.WriteRawTag(17);
      output.WriteDouble(Timestamp);
    }
    if (HasTxBytesTotal) {
      output.WriteRawTag(24);
      output.WriteInt64(TxBytesTotal);
    }
    if (HasRxBytesTotal) {
      output.WriteRawTag(32);
      output.WriteInt64(RxBytesTotal);
    }
    if (HasTxBytesPerSec) {
      output.WriteRawTag(40);
      output.WriteInt32(TxBytesPerSec);
    }
    if (HasRxBytesPerSec) {
      output.WriteRawTag(48);
      output.WriteInt32(RxBytesPerSec);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasTimestamp) {
      size += 1 + 8;
    }
    if (HasTxBytesTotal) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TxBytesTotal);
    }
    if (HasRxBytesTotal) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RxBytesTotal);
    }
    if (HasTxBytesPerSec) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TxBytesPerSec);
    }
    if (HasRxBytesPerSec) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RxBytesPerSec);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfNetworkInterface other) {
    if (other == null) {
      return;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.HasTxBytesTotal) {
      TxBytesTotal = other.TxBytesTotal;
    }
    if (other.HasRxBytesTotal) {
      RxBytesTotal = other.RxBytesTotal;
    }
    if (other.HasTxBytesPerSec) {
      TxBytesPerSec = other.TxBytesPerSec;
    }
    if (other.HasRxBytesPerSec) {
      RxBytesPerSec = other.RxBytesPerSec;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 17: {
          Timestamp = input.ReadDouble();
          break;
        }
        case 24: {
          TxBytesTotal = input.ReadInt64();
          break;
        }
        case 32: {
          RxBytesTotal = input.ReadInt64();
          break;
        }
        case 40: {
          TxBytesPerSec = input.ReadInt32();
          break;
        }
        case 48: {
          RxBytesPerSec = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 17: {
          Timestamp = input.ReadDouble();
          break;
        }
        case 24: {
          TxBytesTotal = input.ReadInt64();
          break;
        }
        case 32: {
          RxBytesTotal = input.ReadInt64();
          break;
        }
        case 40: {
          TxBytesPerSec = input.ReadInt32();
          break;
        }
        case 48: {
          RxBytesPerSec = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfDiagnosticInfo : pb::IMessage<CMsgSystemPerfDiagnosticInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfDiagnosticInfo> _parser = new pb::MessageParser<CMsgSystemPerfDiagnosticInfo>(() => new CMsgSystemPerfDiagnosticInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfDiagnosticInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticInfo(CMsgSystemPerfDiagnosticInfo other) : this() {
    _hasBits0 = other._hasBits0;
    entries_ = other.entries_.Clone();
    interfaces_ = other.interfaces_.Clone();
    batteryTempC_ = other.batteryTempC_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfDiagnosticInfo Clone() {
    return new CMsgSystemPerfDiagnosticInfo(this);
  }

  /// <summary>Field number for the "entries" field.</summary>
  public const int EntriesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgSystemPerfDiagnosticEntry> _repeated_entries_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgSystemPerfDiagnosticEntry.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemPerfDiagnosticEntry> entries_ = new pbc::RepeatedField<global::CMsgSystemPerfDiagnosticEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemPerfDiagnosticEntry> Entries {
    get { return entries_; }
  }

  /// <summary>Field number for the "interfaces" field.</summary>
  public const int InterfacesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgSystemPerfNetworkInterface> _repeated_interfaces_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgSystemPerfNetworkInterface.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemPerfNetworkInterface> interfaces_ = new pbc::RepeatedField<global::CMsgSystemPerfNetworkInterface>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemPerfNetworkInterface> Interfaces {
    get { return interfaces_; }
  }

  /// <summary>Field number for the "battery_temp_c" field.</summary>
  public const int BatteryTempCFieldNumber = 3;
  private readonly static float BatteryTempCDefaultValue = 0F;

  private float batteryTempC_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BatteryTempC {
    get { if ((_hasBits0 & 1) != 0) { return batteryTempC_; } else { return BatteryTempCDefaultValue; } }
    set {
      _hasBits0 |= 1;
      batteryTempC_ = value;
    }
  }
  /// <summary>Gets whether the "battery_temp_c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBatteryTempC {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "battery_temp_c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBatteryTempC() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfDiagnosticInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfDiagnosticInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!entries_.Equals(other.entries_)) return false;
    if(!interfaces_.Equals(other.interfaces_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryTempC, other.BatteryTempC)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= entries_.GetHashCode();
    hash ^= interfaces_.GetHashCode();
    if (HasBatteryTempC) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryTempC);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    entries_.WriteTo(output, _repeated_entries_codec);
    interfaces_.WriteTo(output, _repeated_interfaces_codec);
    if (HasBatteryTempC) {
      output.WriteRawTag(29);
      output.WriteFloat(BatteryTempC);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    entries_.WriteTo(ref output, _repeated_entries_codec);
    interfaces_.WriteTo(ref output, _repeated_interfaces_codec);
    if (HasBatteryTempC) {
      output.WriteRawTag(29);
      output.WriteFloat(BatteryTempC);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += entries_.CalculateSize(_repeated_entries_codec);
    size += interfaces_.CalculateSize(_repeated_interfaces_codec);
    if (HasBatteryTempC) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfDiagnosticInfo other) {
    if (other == null) {
      return;
    }
    entries_.Add(other.entries_);
    interfaces_.Add(other.interfaces_);
    if (other.HasBatteryTempC) {
      BatteryTempC = other.BatteryTempC;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          entries_.AddEntriesFrom(input, _repeated_entries_codec);
          break;
        }
        case 18: {
          interfaces_.AddEntriesFrom(input, _repeated_interfaces_codec);
          break;
        }
        case 29: {
          BatteryTempC = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          entries_.AddEntriesFrom(ref input, _repeated_entries_codec);
          break;
        }
        case 18: {
          interfaces_.AddEntriesFrom(ref input, _repeated_interfaces_codec);
          break;
        }
        case 29: {
          BatteryTempC = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfLimits : pb::IMessage<CMsgSystemPerfLimits>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfLimits> _parser = new pb::MessageParser<CMsgSystemPerfLimits>(() => new CMsgSystemPerfLimits());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfLimits> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfLimits() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfLimits(CMsgSystemPerfLimits other) : this() {
    _hasBits0 = other._hasBits0;
    cpuGovernorManualMinMhz_ = other.cpuGovernorManualMinMhz_;
    cpuGovernorManualMaxMhz_ = other.cpuGovernorManualMaxMhz_;
    fsrSharpnessMin_ = other.fsrSharpnessMin_;
    fsrSharpnessMax_ = other.fsrSharpnessMax_;
    gpuPerformanceManualMinMhz_ = other.gpuPerformanceManualMinMhz_;
    gpuPerformanceManualMaxMhz_ = other.gpuPerformanceManualMaxMhz_;
    perfOverlayIsStandalone_ = other.perfOverlayIsStandalone_;
    isDynamicVrsAvailable_ = other.isDynamicVrsAvailable_;
    isManualDisplayRefreshRateAvailable_ = other.isManualDisplayRefreshRateAvailable_;
    gpuPerformanceLevelsAvailable_ = other.gpuPerformanceLevelsAvailable_.Clone();
    displayRefreshManualHzMin_ = other.displayRefreshManualHzMin_;
    displayRefreshManualHzMax_ = other.displayRefreshManualHzMax_;
    fpsLimitOptions_ = other.fpsLimitOptions_.Clone();
    tdpLimitMin_ = other.tdpLimitMin_;
    tdpLimitMax_ = other.tdpLimitMax_;
    isNisSupported_ = other.isNisSupported_;
    nisSharpnessMin_ = other.nisSharpnessMin_;
    nisSharpnessMax_ = other.nisSharpnessMax_;
    displayExternalRefreshManualHzMin_ = other.displayExternalRefreshManualHzMin_;
    displayExternalRefreshManualHzMax_ = other.displayExternalRefreshManualHzMax_;
    fpsLimitOptionsExternal_ = other.fpsLimitOptionsExternal_.Clone();
    isTearingSupported_ = other.isTearingSupported_;
    isVrrSupported_ = other.isVrrSupported_;
    isDynamicRefreshRateInSteamSupported_ = other.isDynamicRefreshRateInSteamSupported_;
    isSplitScalingAndFilteringSupported_ = other.isSplitScalingAndFilteringSupported_;
    splitScalingFiltersAvailable_ = other.splitScalingFiltersAvailable_.Clone();
    splitScalingScalersAvailable_ = other.splitScalingScalersAvailable_.Clone();
    isHdrSupported_ = other.isHdrSupported_;
    displayRefreshManualHzOcMax_ = other.displayRefreshManualHzOcMax_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfLimits Clone() {
    return new CMsgSystemPerfLimits(this);
  }

  /// <summary>Field number for the "cpu_governor_manual_min_mhz" field.</summary>
  public const int CpuGovernorManualMinMhzFieldNumber = 1;
  private readonly static int CpuGovernorManualMinMhzDefaultValue = 0;

  private int cpuGovernorManualMinMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CpuGovernorManualMinMhz {
    get { if ((_hasBits0 & 1) != 0) { return cpuGovernorManualMinMhz_; } else { return CpuGovernorManualMinMhzDefaultValue; } }
    set {
      _hasBits0 |= 1;
      cpuGovernorManualMinMhz_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor_manual_min_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernorManualMinMhz {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor_manual_min_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernorManualMinMhz() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "cpu_governor_manual_max_mhz" field.</summary>
  public const int CpuGovernorManualMaxMhzFieldNumber = 2;
  private readonly static int CpuGovernorManualMaxMhzDefaultValue = 0;

  private int cpuGovernorManualMaxMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CpuGovernorManualMaxMhz {
    get { if ((_hasBits0 & 2) != 0) { return cpuGovernorManualMaxMhz_; } else { return CpuGovernorManualMaxMhzDefaultValue; } }
    set {
      _hasBits0 |= 2;
      cpuGovernorManualMaxMhz_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor_manual_max_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernorManualMaxMhz {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor_manual_max_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernorManualMaxMhz() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fsr_sharpness_min" field.</summary>
  public const int FsrSharpnessMinFieldNumber = 3;
  private readonly static int FsrSharpnessMinDefaultValue = 0;

  private int fsrSharpnessMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FsrSharpnessMin {
    get { if ((_hasBits0 & 4) != 0) { return fsrSharpnessMin_; } else { return FsrSharpnessMinDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fsrSharpnessMin_ = value;
    }
  }
  /// <summary>Gets whether the "fsr_sharpness_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFsrSharpnessMin {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fsr_sharpness_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFsrSharpnessMin() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "fsr_sharpness_max" field.</summary>
  public const int FsrSharpnessMaxFieldNumber = 4;
  private readonly static int FsrSharpnessMaxDefaultValue = 0;

  private int fsrSharpnessMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FsrSharpnessMax {
    get { if ((_hasBits0 & 8) != 0) { return fsrSharpnessMax_; } else { return FsrSharpnessMaxDefaultValue; } }
    set {
      _hasBits0 |= 8;
      fsrSharpnessMax_ = value;
    }
  }
  /// <summary>Gets whether the "fsr_sharpness_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFsrSharpnessMax {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "fsr_sharpness_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFsrSharpnessMax() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "gpu_performance_manual_min_mhz" field.</summary>
  public const int GpuPerformanceManualMinMhzFieldNumber = 5;
  private readonly static int GpuPerformanceManualMinMhzDefaultValue = 0;

  private int gpuPerformanceManualMinMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GpuPerformanceManualMinMhz {
    get { if ((_hasBits0 & 16) != 0) { return gpuPerformanceManualMinMhz_; } else { return GpuPerformanceManualMinMhzDefaultValue; } }
    set {
      _hasBits0 |= 16;
      gpuPerformanceManualMinMhz_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_manual_min_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceManualMinMhz {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_manual_min_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceManualMinMhz() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "gpu_performance_manual_max_mhz" field.</summary>
  public const int GpuPerformanceManualMaxMhzFieldNumber = 6;
  private readonly static int GpuPerformanceManualMaxMhzDefaultValue = 0;

  private int gpuPerformanceManualMaxMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GpuPerformanceManualMaxMhz {
    get { if ((_hasBits0 & 32) != 0) { return gpuPerformanceManualMaxMhz_; } else { return GpuPerformanceManualMaxMhzDefaultValue; } }
    set {
      _hasBits0 |= 32;
      gpuPerformanceManualMaxMhz_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_manual_max_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceManualMaxMhz {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_manual_max_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceManualMaxMhz() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "perf_overlay_is_standalone" field.</summary>
  public const int PerfOverlayIsStandaloneFieldNumber = 7;
  private readonly static bool PerfOverlayIsStandaloneDefaultValue = false;

  private bool perfOverlayIsStandalone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool PerfOverlayIsStandalone {
    get { if ((_hasBits0 & 64) != 0) { return perfOverlayIsStandalone_; } else { return PerfOverlayIsStandaloneDefaultValue; } }
    set {
      _hasBits0 |= 64;
      perfOverlayIsStandalone_ = value;
    }
  }
  /// <summary>Gets whether the "perf_overlay_is_standalone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPerfOverlayIsStandalone {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "perf_overlay_is_standalone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPerfOverlayIsStandalone() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "is_dynamic_vrs_available" field.</summary>
  public const int IsDynamicVrsAvailableFieldNumber = 8;
  private readonly static bool IsDynamicVrsAvailableDefaultValue = false;

  private bool isDynamicVrsAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDynamicVrsAvailable {
    get { if ((_hasBits0 & 128) != 0) { return isDynamicVrsAvailable_; } else { return IsDynamicVrsAvailableDefaultValue; } }
    set {
      _hasBits0 |= 128;
      isDynamicVrsAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_dynamic_vrs_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDynamicVrsAvailable {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "is_dynamic_vrs_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDynamicVrsAvailable() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "is_manual_display_refresh_rate_available" field.</summary>
  public const int IsManualDisplayRefreshRateAvailableFieldNumber = 9;
  private readonly static bool IsManualDisplayRefreshRateAvailableDefaultValue = false;

  private bool isManualDisplayRefreshRateAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsManualDisplayRefreshRateAvailable {
    get { if ((_hasBits0 & 256) != 0) { return isManualDisplayRefreshRateAvailable_; } else { return IsManualDisplayRefreshRateAvailableDefaultValue; } }
    set {
      _hasBits0 |= 256;
      isManualDisplayRefreshRateAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_manual_display_refresh_rate_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsManualDisplayRefreshRateAvailable {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "is_manual_display_refresh_rate_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsManualDisplayRefreshRateAvailable() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "gpu_performance_levels_available" field.</summary>
  public const int GpuPerformanceLevelsAvailableFieldNumber = 10;
  private static readonly pb::FieldCodec<global::EGPUPerformanceLevel> _repeated_gpuPerformanceLevelsAvailable_codec
      = pb::FieldCodec.ForEnum(80, x => (int) x, x => (global::EGPUPerformanceLevel) x);
  private readonly pbc::RepeatedField<global::EGPUPerformanceLevel> gpuPerformanceLevelsAvailable_ = new pbc::RepeatedField<global::EGPUPerformanceLevel>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::EGPUPerformanceLevel> GpuPerformanceLevelsAvailable {
    get { return gpuPerformanceLevelsAvailable_; }
  }

  /// <summary>Field number for the "display_refresh_manual_hz_min" field.</summary>
  public const int DisplayRefreshManualHzMinFieldNumber = 11;
  private readonly static int DisplayRefreshManualHzMinDefaultValue = 0;

  private int displayRefreshManualHzMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayRefreshManualHzMin {
    get { if ((_hasBits0 & 512) != 0) { return displayRefreshManualHzMin_; } else { return DisplayRefreshManualHzMinDefaultValue; } }
    set {
      _hasBits0 |= 512;
      displayRefreshManualHzMin_ = value;
    }
  }
  /// <summary>Gets whether the "display_refresh_manual_hz_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayRefreshManualHzMin {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "display_refresh_manual_hz_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayRefreshManualHzMin() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "display_refresh_manual_hz_max" field.</summary>
  public const int DisplayRefreshManualHzMaxFieldNumber = 12;
  private readonly static int DisplayRefreshManualHzMaxDefaultValue = 0;

  private int displayRefreshManualHzMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayRefreshManualHzMax {
    get { if ((_hasBits0 & 1024) != 0) { return displayRefreshManualHzMax_; } else { return DisplayRefreshManualHzMaxDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      displayRefreshManualHzMax_ = value;
    }
  }
  /// <summary>Gets whether the "display_refresh_manual_hz_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayRefreshManualHzMax {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "display_refresh_manual_hz_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayRefreshManualHzMax() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "fps_limit_options" field.</summary>
  public const int FpsLimitOptionsFieldNumber = 13;
  private static readonly pb::FieldCodec<int> _repeated_fpsLimitOptions_codec
      = pb::FieldCodec.ForInt32(104);
  private readonly pbc::RepeatedField<int> fpsLimitOptions_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<int> FpsLimitOptions {
    get { return fpsLimitOptions_; }
  }

  /// <summary>Field number for the "tdp_limit_min" field.</summary>
  public const int TdpLimitMinFieldNumber = 14;
  private readonly static int TdpLimitMinDefaultValue = 0;

  private int tdpLimitMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TdpLimitMin {
    get { if ((_hasBits0 & 2048) != 0) { return tdpLimitMin_; } else { return TdpLimitMinDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      tdpLimitMin_ = value;
    }
  }
  /// <summary>Gets whether the "tdp_limit_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTdpLimitMin {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "tdp_limit_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTdpLimitMin() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "tdp_limit_max" field.</summary>
  public const int TdpLimitMaxFieldNumber = 15;
  private readonly static int TdpLimitMaxDefaultValue = 0;

  private int tdpLimitMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TdpLimitMax {
    get { if ((_hasBits0 & 4096) != 0) { return tdpLimitMax_; } else { return TdpLimitMaxDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      tdpLimitMax_ = value;
    }
  }
  /// <summary>Gets whether the "tdp_limit_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTdpLimitMax {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "tdp_limit_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTdpLimitMax() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "is_nis_supported" field.</summary>
  public const int IsNisSupportedFieldNumber = 16;
  private readonly static bool IsNisSupportedDefaultValue = false;

  private bool isNisSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsNisSupported {
    get { if ((_hasBits0 & 8192) != 0) { return isNisSupported_; } else { return IsNisSupportedDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      isNisSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_nis_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsNisSupported {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "is_nis_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsNisSupported() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "nis_sharpness_min" field.</summary>
  public const int NisSharpnessMinFieldNumber = 17;
  private readonly static int NisSharpnessMinDefaultValue = 0;

  private int nisSharpnessMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int NisSharpnessMin {
    get { if ((_hasBits0 & 16384) != 0) { return nisSharpnessMin_; } else { return NisSharpnessMinDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      nisSharpnessMin_ = value;
    }
  }
  /// <summary>Gets whether the "nis_sharpness_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNisSharpnessMin {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "nis_sharpness_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNisSharpnessMin() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "nis_sharpness_max" field.</summary>
  public const int NisSharpnessMaxFieldNumber = 18;
  private readonly static int NisSharpnessMaxDefaultValue = 0;

  private int nisSharpnessMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int NisSharpnessMax {
    get { if ((_hasBits0 & 32768) != 0) { return nisSharpnessMax_; } else { return NisSharpnessMaxDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      nisSharpnessMax_ = value;
    }
  }
  /// <summary>Gets whether the "nis_sharpness_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNisSharpnessMax {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "nis_sharpness_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNisSharpnessMax() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "display_external_refresh_manual_hz_min" field.</summary>
  public const int DisplayExternalRefreshManualHzMinFieldNumber = 19;
  private readonly static int DisplayExternalRefreshManualHzMinDefaultValue = 0;

  private int displayExternalRefreshManualHzMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayExternalRefreshManualHzMin {
    get { if ((_hasBits0 & 65536) != 0) { return displayExternalRefreshManualHzMin_; } else { return DisplayExternalRefreshManualHzMinDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      displayExternalRefreshManualHzMin_ = value;
    }
  }
  /// <summary>Gets whether the "display_external_refresh_manual_hz_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayExternalRefreshManualHzMin {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "display_external_refresh_manual_hz_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayExternalRefreshManualHzMin() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "display_external_refresh_manual_hz_max" field.</summary>
  public const int DisplayExternalRefreshManualHzMaxFieldNumber = 20;
  private readonly static int DisplayExternalRefreshManualHzMaxDefaultValue = 0;

  private int displayExternalRefreshManualHzMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayExternalRefreshManualHzMax {
    get { if ((_hasBits0 & 131072) != 0) { return displayExternalRefreshManualHzMax_; } else { return DisplayExternalRefreshManualHzMaxDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      displayExternalRefreshManualHzMax_ = value;
    }
  }
  /// <summary>Gets whether the "display_external_refresh_manual_hz_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayExternalRefreshManualHzMax {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "display_external_refresh_manual_hz_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayExternalRefreshManualHzMax() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "fps_limit_options_external" field.</summary>
  public const int FpsLimitOptionsExternalFieldNumber = 21;
  private static readonly pb::FieldCodec<int> _repeated_fpsLimitOptionsExternal_codec
      = pb::FieldCodec.ForInt32(168);
  private readonly pbc::RepeatedField<int> fpsLimitOptionsExternal_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<int> FpsLimitOptionsExternal {
    get { return fpsLimitOptionsExternal_; }
  }

  /// <summary>Field number for the "is_tearing_supported" field.</summary>
  public const int IsTearingSupportedFieldNumber = 22;
  private readonly static bool IsTearingSupportedDefaultValue = false;

  private bool isTearingSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTearingSupported {
    get { if ((_hasBits0 & 262144) != 0) { return isTearingSupported_; } else { return IsTearingSupportedDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      isTearingSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_tearing_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTearingSupported {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "is_tearing_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTearingSupported() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "is_vrr_supported" field.</summary>
  public const int IsVrrSupportedFieldNumber = 23;
  private readonly static bool IsVrrSupportedDefaultValue = false;

  private bool isVrrSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVrrSupported {
    get { if ((_hasBits0 & 524288) != 0) { return isVrrSupported_; } else { return IsVrrSupportedDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      isVrrSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_vrr_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVrrSupported {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "is_vrr_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVrrSupported() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "is_dynamic_refresh_rate_in_steam_supported" field.</summary>
  public const int IsDynamicRefreshRateInSteamSupportedFieldNumber = 24;
  private readonly static bool IsDynamicRefreshRateInSteamSupportedDefaultValue = false;

  private bool isDynamicRefreshRateInSteamSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDynamicRefreshRateInSteamSupported {
    get { if ((_hasBits0 & 1048576) != 0) { return isDynamicRefreshRateInSteamSupported_; } else { return IsDynamicRefreshRateInSteamSupportedDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      isDynamicRefreshRateInSteamSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_dynamic_refresh_rate_in_steam_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDynamicRefreshRateInSteamSupported {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "is_dynamic_refresh_rate_in_steam_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDynamicRefreshRateInSteamSupported() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "is_split_scaling_and_filtering_supported" field.</summary>
  public const int IsSplitScalingAndFilteringSupportedFieldNumber = 25;
  private readonly static bool IsSplitScalingAndFilteringSupportedDefaultValue = false;

  private bool isSplitScalingAndFilteringSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsSplitScalingAndFilteringSupported {
    get { if ((_hasBits0 & 2097152) != 0) { return isSplitScalingAndFilteringSupported_; } else { return IsSplitScalingAndFilteringSupportedDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      isSplitScalingAndFilteringSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_split_scaling_and_filtering_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsSplitScalingAndFilteringSupported {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "is_split_scaling_and_filtering_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsSplitScalingAndFilteringSupported() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "split_scaling_filters_available" field.</summary>
  public const int SplitScalingFiltersAvailableFieldNumber = 26;
  private static readonly pb::FieldCodec<global::ESplitScalingFilter> _repeated_splitScalingFiltersAvailable_codec
      = pb::FieldCodec.ForEnum(208, x => (int) x, x => (global::ESplitScalingFilter) x);
  private readonly pbc::RepeatedField<global::ESplitScalingFilter> splitScalingFiltersAvailable_ = new pbc::RepeatedField<global::ESplitScalingFilter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ESplitScalingFilter> SplitScalingFiltersAvailable {
    get { return splitScalingFiltersAvailable_; }
  }

  /// <summary>Field number for the "split_scaling_scalers_available" field.</summary>
  public const int SplitScalingScalersAvailableFieldNumber = 27;
  private static readonly pb::FieldCodec<global::ESplitScalingScaler> _repeated_splitScalingScalersAvailable_codec
      = pb::FieldCodec.ForEnum(216, x => (int) x, x => (global::ESplitScalingScaler) x);
  private readonly pbc::RepeatedField<global::ESplitScalingScaler> splitScalingScalersAvailable_ = new pbc::RepeatedField<global::ESplitScalingScaler>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ESplitScalingScaler> SplitScalingScalersAvailable {
    get { return splitScalingScalersAvailable_; }
  }

  /// <summary>Field number for the "is_hdr_supported" field.</summary>
  public const int IsHdrSupportedFieldNumber = 28;
  private readonly static bool IsHdrSupportedDefaultValue = false;

  private bool isHdrSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHdrSupported {
    get { if ((_hasBits0 & 4194304) != 0) { return isHdrSupported_; } else { return IsHdrSupportedDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      isHdrSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_hdr_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHdrSupported {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "is_hdr_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHdrSupported() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "display_refresh_manual_hz_oc_max" field.</summary>
  public const int DisplayRefreshManualHzOcMaxFieldNumber = 29;
  private readonly static int DisplayRefreshManualHzOcMaxDefaultValue = 0;

  private int displayRefreshManualHzOcMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayRefreshManualHzOcMax {
    get { if ((_hasBits0 & 8388608) != 0) { return displayRefreshManualHzOcMax_; } else { return DisplayRefreshManualHzOcMaxDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      displayRefreshManualHzOcMax_ = value;
    }
  }
  /// <summary>Gets whether the "display_refresh_manual_hz_oc_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayRefreshManualHzOcMax {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "display_refresh_manual_hz_oc_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayRefreshManualHzOcMax() {
    _hasBits0 &= ~8388608;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfLimits);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfLimits other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CpuGovernorManualMinMhz != other.CpuGovernorManualMinMhz) return false;
    if (CpuGovernorManualMaxMhz != other.CpuGovernorManualMaxMhz) return false;
    if (FsrSharpnessMin != other.FsrSharpnessMin) return false;
    if (FsrSharpnessMax != other.FsrSharpnessMax) return false;
    if (GpuPerformanceManualMinMhz != other.GpuPerformanceManualMinMhz) return false;
    if (GpuPerformanceManualMaxMhz != other.GpuPerformanceManualMaxMhz) return false;
    if (PerfOverlayIsStandalone != other.PerfOverlayIsStandalone) return false;
    if (IsDynamicVrsAvailable != other.IsDynamicVrsAvailable) return false;
    if (IsManualDisplayRefreshRateAvailable != other.IsManualDisplayRefreshRateAvailable) return false;
    if(!gpuPerformanceLevelsAvailable_.Equals(other.gpuPerformanceLevelsAvailable_)) return false;
    if (DisplayRefreshManualHzMin != other.DisplayRefreshManualHzMin) return false;
    if (DisplayRefreshManualHzMax != other.DisplayRefreshManualHzMax) return false;
    if(!fpsLimitOptions_.Equals(other.fpsLimitOptions_)) return false;
    if (TdpLimitMin != other.TdpLimitMin) return false;
    if (TdpLimitMax != other.TdpLimitMax) return false;
    if (IsNisSupported != other.IsNisSupported) return false;
    if (NisSharpnessMin != other.NisSharpnessMin) return false;
    if (NisSharpnessMax != other.NisSharpnessMax) return false;
    if (DisplayExternalRefreshManualHzMin != other.DisplayExternalRefreshManualHzMin) return false;
    if (DisplayExternalRefreshManualHzMax != other.DisplayExternalRefreshManualHzMax) return false;
    if(!fpsLimitOptionsExternal_.Equals(other.fpsLimitOptionsExternal_)) return false;
    if (IsTearingSupported != other.IsTearingSupported) return false;
    if (IsVrrSupported != other.IsVrrSupported) return false;
    if (IsDynamicRefreshRateInSteamSupported != other.IsDynamicRefreshRateInSteamSupported) return false;
    if (IsSplitScalingAndFilteringSupported != other.IsSplitScalingAndFilteringSupported) return false;
    if(!splitScalingFiltersAvailable_.Equals(other.splitScalingFiltersAvailable_)) return false;
    if(!splitScalingScalersAvailable_.Equals(other.splitScalingScalersAvailable_)) return false;
    if (IsHdrSupported != other.IsHdrSupported) return false;
    if (DisplayRefreshManualHzOcMax != other.DisplayRefreshManualHzOcMax) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCpuGovernorManualMinMhz) hash ^= CpuGovernorManualMinMhz.GetHashCode();
    if (HasCpuGovernorManualMaxMhz) hash ^= CpuGovernorManualMaxMhz.GetHashCode();
    if (HasFsrSharpnessMin) hash ^= FsrSharpnessMin.GetHashCode();
    if (HasFsrSharpnessMax) hash ^= FsrSharpnessMax.GetHashCode();
    if (HasGpuPerformanceManualMinMhz) hash ^= GpuPerformanceManualMinMhz.GetHashCode();
    if (HasGpuPerformanceManualMaxMhz) hash ^= GpuPerformanceManualMaxMhz.GetHashCode();
    if (HasPerfOverlayIsStandalone) hash ^= PerfOverlayIsStandalone.GetHashCode();
    if (HasIsDynamicVrsAvailable) hash ^= IsDynamicVrsAvailable.GetHashCode();
    if (HasIsManualDisplayRefreshRateAvailable) hash ^= IsManualDisplayRefreshRateAvailable.GetHashCode();
    hash ^= gpuPerformanceLevelsAvailable_.GetHashCode();
    if (HasDisplayRefreshManualHzMin) hash ^= DisplayRefreshManualHzMin.GetHashCode();
    if (HasDisplayRefreshManualHzMax) hash ^= DisplayRefreshManualHzMax.GetHashCode();
    hash ^= fpsLimitOptions_.GetHashCode();
    if (HasTdpLimitMin) hash ^= TdpLimitMin.GetHashCode();
    if (HasTdpLimitMax) hash ^= TdpLimitMax.GetHashCode();
    if (HasIsNisSupported) hash ^= IsNisSupported.GetHashCode();
    if (HasNisSharpnessMin) hash ^= NisSharpnessMin.GetHashCode();
    if (HasNisSharpnessMax) hash ^= NisSharpnessMax.GetHashCode();
    if (HasDisplayExternalRefreshManualHzMin) hash ^= DisplayExternalRefreshManualHzMin.GetHashCode();
    if (HasDisplayExternalRefreshManualHzMax) hash ^= DisplayExternalRefreshManualHzMax.GetHashCode();
    hash ^= fpsLimitOptionsExternal_.GetHashCode();
    if (HasIsTearingSupported) hash ^= IsTearingSupported.GetHashCode();
    if (HasIsVrrSupported) hash ^= IsVrrSupported.GetHashCode();
    if (HasIsDynamicRefreshRateInSteamSupported) hash ^= IsDynamicRefreshRateInSteamSupported.GetHashCode();
    if (HasIsSplitScalingAndFilteringSupported) hash ^= IsSplitScalingAndFilteringSupported.GetHashCode();
    hash ^= splitScalingFiltersAvailable_.GetHashCode();
    hash ^= splitScalingScalersAvailable_.GetHashCode();
    if (HasIsHdrSupported) hash ^= IsHdrSupported.GetHashCode();
    if (HasDisplayRefreshManualHzOcMax) hash ^= DisplayRefreshManualHzOcMax.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCpuGovernorManualMinMhz) {
      output.WriteRawTag(8);
      output.WriteInt32(CpuGovernorManualMinMhz);
    }
    if (HasCpuGovernorManualMaxMhz) {
      output.WriteRawTag(16);
      output.WriteInt32(CpuGovernorManualMaxMhz);
    }
    if (HasFsrSharpnessMin) {
      output.WriteRawTag(24);
      output.WriteInt32(FsrSharpnessMin);
    }
    if (HasFsrSharpnessMax) {
      output.WriteRawTag(32);
      output.WriteInt32(FsrSharpnessMax);
    }
    if (HasGpuPerformanceManualMinMhz) {
      output.WriteRawTag(40);
      output.WriteInt32(GpuPerformanceManualMinMhz);
    }
    if (HasGpuPerformanceManualMaxMhz) {
      output.WriteRawTag(48);
      output.WriteInt32(GpuPerformanceManualMaxMhz);
    }
    if (HasPerfOverlayIsStandalone) {
      output.WriteRawTag(56);
      output.WriteBool(PerfOverlayIsStandalone);
    }
    if (HasIsDynamicVrsAvailable) {
      output.WriteRawTag(64);
      output.WriteBool(IsDynamicVrsAvailable);
    }
    if (HasIsManualDisplayRefreshRateAvailable) {
      output.WriteRawTag(72);
      output.WriteBool(IsManualDisplayRefreshRateAvailable);
    }
    gpuPerformanceLevelsAvailable_.WriteTo(output, _repeated_gpuPerformanceLevelsAvailable_codec);
    if (HasDisplayRefreshManualHzMin) {
      output.WriteRawTag(88);
      output.WriteInt32(DisplayRefreshManualHzMin);
    }
    if (HasDisplayRefreshManualHzMax) {
      output.WriteRawTag(96);
      output.WriteInt32(DisplayRefreshManualHzMax);
    }
    fpsLimitOptions_.WriteTo(output, _repeated_fpsLimitOptions_codec);
    if (HasTdpLimitMin) {
      output.WriteRawTag(112);
      output.WriteInt32(TdpLimitMin);
    }
    if (HasTdpLimitMax) {
      output.WriteRawTag(120);
      output.WriteInt32(TdpLimitMax);
    }
    if (HasIsNisSupported) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsNisSupported);
    }
    if (HasNisSharpnessMin) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(NisSharpnessMin);
    }
    if (HasNisSharpnessMax) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(NisSharpnessMax);
    }
    if (HasDisplayExternalRefreshManualHzMin) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(DisplayExternalRefreshManualHzMin);
    }
    if (HasDisplayExternalRefreshManualHzMax) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(DisplayExternalRefreshManualHzMax);
    }
    fpsLimitOptionsExternal_.WriteTo(output, _repeated_fpsLimitOptionsExternal_codec);
    if (HasIsTearingSupported) {
      output.WriteRawTag(176, 1);
      output.WriteBool(IsTearingSupported);
    }
    if (HasIsVrrSupported) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsVrrSupported);
    }
    if (HasIsDynamicRefreshRateInSteamSupported) {
      output.WriteRawTag(192, 1);
      output.WriteBool(IsDynamicRefreshRateInSteamSupported);
    }
    if (HasIsSplitScalingAndFilteringSupported) {
      output.WriteRawTag(200, 1);
      output.WriteBool(IsSplitScalingAndFilteringSupported);
    }
    splitScalingFiltersAvailable_.WriteTo(output, _repeated_splitScalingFiltersAvailable_codec);
    splitScalingScalersAvailable_.WriteTo(output, _repeated_splitScalingScalersAvailable_codec);
    if (HasIsHdrSupported) {
      output.WriteRawTag(224, 1);
      output.WriteBool(IsHdrSupported);
    }
    if (HasDisplayRefreshManualHzOcMax) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(DisplayRefreshManualHzOcMax);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCpuGovernorManualMinMhz) {
      output.WriteRawTag(8);
      output.WriteInt32(CpuGovernorManualMinMhz);
    }
    if (HasCpuGovernorManualMaxMhz) {
      output.WriteRawTag(16);
      output.WriteInt32(CpuGovernorManualMaxMhz);
    }
    if (HasFsrSharpnessMin) {
      output.WriteRawTag(24);
      output.WriteInt32(FsrSharpnessMin);
    }
    if (HasFsrSharpnessMax) {
      output.WriteRawTag(32);
      output.WriteInt32(FsrSharpnessMax);
    }
    if (HasGpuPerformanceManualMinMhz) {
      output.WriteRawTag(40);
      output.WriteInt32(GpuPerformanceManualMinMhz);
    }
    if (HasGpuPerformanceManualMaxMhz) {
      output.WriteRawTag(48);
      output.WriteInt32(GpuPerformanceManualMaxMhz);
    }
    if (HasPerfOverlayIsStandalone) {
      output.WriteRawTag(56);
      output.WriteBool(PerfOverlayIsStandalone);
    }
    if (HasIsDynamicVrsAvailable) {
      output.WriteRawTag(64);
      output.WriteBool(IsDynamicVrsAvailable);
    }
    if (HasIsManualDisplayRefreshRateAvailable) {
      output.WriteRawTag(72);
      output.WriteBool(IsManualDisplayRefreshRateAvailable);
    }
    gpuPerformanceLevelsAvailable_.WriteTo(ref output, _repeated_gpuPerformanceLevelsAvailable_codec);
    if (HasDisplayRefreshManualHzMin) {
      output.WriteRawTag(88);
      output.WriteInt32(DisplayRefreshManualHzMin);
    }
    if (HasDisplayRefreshManualHzMax) {
      output.WriteRawTag(96);
      output.WriteInt32(DisplayRefreshManualHzMax);
    }
    fpsLimitOptions_.WriteTo(ref output, _repeated_fpsLimitOptions_codec);
    if (HasTdpLimitMin) {
      output.WriteRawTag(112);
      output.WriteInt32(TdpLimitMin);
    }
    if (HasTdpLimitMax) {
      output.WriteRawTag(120);
      output.WriteInt32(TdpLimitMax);
    }
    if (HasIsNisSupported) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsNisSupported);
    }
    if (HasNisSharpnessMin) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(NisSharpnessMin);
    }
    if (HasNisSharpnessMax) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(NisSharpnessMax);
    }
    if (HasDisplayExternalRefreshManualHzMin) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(DisplayExternalRefreshManualHzMin);
    }
    if (HasDisplayExternalRefreshManualHzMax) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(DisplayExternalRefreshManualHzMax);
    }
    fpsLimitOptionsExternal_.WriteTo(ref output, _repeated_fpsLimitOptionsExternal_codec);
    if (HasIsTearingSupported) {
      output.WriteRawTag(176, 1);
      output.WriteBool(IsTearingSupported);
    }
    if (HasIsVrrSupported) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsVrrSupported);
    }
    if (HasIsDynamicRefreshRateInSteamSupported) {
      output.WriteRawTag(192, 1);
      output.WriteBool(IsDynamicRefreshRateInSteamSupported);
    }
    if (HasIsSplitScalingAndFilteringSupported) {
      output.WriteRawTag(200, 1);
      output.WriteBool(IsSplitScalingAndFilteringSupported);
    }
    splitScalingFiltersAvailable_.WriteTo(ref output, _repeated_splitScalingFiltersAvailable_codec);
    splitScalingScalersAvailable_.WriteTo(ref output, _repeated_splitScalingScalersAvailable_codec);
    if (HasIsHdrSupported) {
      output.WriteRawTag(224, 1);
      output.WriteBool(IsHdrSupported);
    }
    if (HasDisplayRefreshManualHzOcMax) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(DisplayRefreshManualHzOcMax);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCpuGovernorManualMinMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuGovernorManualMinMhz);
    }
    if (HasCpuGovernorManualMaxMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuGovernorManualMaxMhz);
    }
    if (HasFsrSharpnessMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsrSharpnessMin);
    }
    if (HasFsrSharpnessMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsrSharpnessMax);
    }
    if (HasGpuPerformanceManualMinMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuPerformanceManualMinMhz);
    }
    if (HasGpuPerformanceManualMaxMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuPerformanceManualMaxMhz);
    }
    if (HasPerfOverlayIsStandalone) {
      size += 1 + 1;
    }
    if (HasIsDynamicVrsAvailable) {
      size += 1 + 1;
    }
    if (HasIsManualDisplayRefreshRateAvailable) {
      size += 1 + 1;
    }
    size += gpuPerformanceLevelsAvailable_.CalculateSize(_repeated_gpuPerformanceLevelsAvailable_codec);
    if (HasDisplayRefreshManualHzMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayRefreshManualHzMin);
    }
    if (HasDisplayRefreshManualHzMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayRefreshManualHzMax);
    }
    size += fpsLimitOptions_.CalculateSize(_repeated_fpsLimitOptions_codec);
    if (HasTdpLimitMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TdpLimitMin);
    }
    if (HasTdpLimitMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TdpLimitMax);
    }
    if (HasIsNisSupported) {
      size += 2 + 1;
    }
    if (HasNisSharpnessMin) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NisSharpnessMin);
    }
    if (HasNisSharpnessMax) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NisSharpnessMax);
    }
    if (HasDisplayExternalRefreshManualHzMin) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayExternalRefreshManualHzMin);
    }
    if (HasDisplayExternalRefreshManualHzMax) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayExternalRefreshManualHzMax);
    }
    size += fpsLimitOptionsExternal_.CalculateSize(_repeated_fpsLimitOptionsExternal_codec);
    if (HasIsTearingSupported) {
      size += 2 + 1;
    }
    if (HasIsVrrSupported) {
      size += 2 + 1;
    }
    if (HasIsDynamicRefreshRateInSteamSupported) {
      size += 2 + 1;
    }
    if (HasIsSplitScalingAndFilteringSupported) {
      size += 2 + 1;
    }
    size += splitScalingFiltersAvailable_.CalculateSize(_repeated_splitScalingFiltersAvailable_codec);
    size += splitScalingScalersAvailable_.CalculateSize(_repeated_splitScalingScalersAvailable_codec);
    if (HasIsHdrSupported) {
      size += 2 + 1;
    }
    if (HasDisplayRefreshManualHzOcMax) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayRefreshManualHzOcMax);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfLimits other) {
    if (other == null) {
      return;
    }
    if (other.HasCpuGovernorManualMinMhz) {
      CpuGovernorManualMinMhz = other.CpuGovernorManualMinMhz;
    }
    if (other.HasCpuGovernorManualMaxMhz) {
      CpuGovernorManualMaxMhz = other.CpuGovernorManualMaxMhz;
    }
    if (other.HasFsrSharpnessMin) {
      FsrSharpnessMin = other.FsrSharpnessMin;
    }
    if (other.HasFsrSharpnessMax) {
      FsrSharpnessMax = other.FsrSharpnessMax;
    }
    if (other.HasGpuPerformanceManualMinMhz) {
      GpuPerformanceManualMinMhz = other.GpuPerformanceManualMinMhz;
    }
    if (other.HasGpuPerformanceManualMaxMhz) {
      GpuPerformanceManualMaxMhz = other.GpuPerformanceManualMaxMhz;
    }
    if (other.HasPerfOverlayIsStandalone) {
      PerfOverlayIsStandalone = other.PerfOverlayIsStandalone;
    }
    if (other.HasIsDynamicVrsAvailable) {
      IsDynamicVrsAvailable = other.IsDynamicVrsAvailable;
    }
    if (other.HasIsManualDisplayRefreshRateAvailable) {
      IsManualDisplayRefreshRateAvailable = other.IsManualDisplayRefreshRateAvailable;
    }
    gpuPerformanceLevelsAvailable_.Add(other.gpuPerformanceLevelsAvailable_);
    if (other.HasDisplayRefreshManualHzMin) {
      DisplayRefreshManualHzMin = other.DisplayRefreshManualHzMin;
    }
    if (other.HasDisplayRefreshManualHzMax) {
      DisplayRefreshManualHzMax = other.DisplayRefreshManualHzMax;
    }
    fpsLimitOptions_.Add(other.fpsLimitOptions_);
    if (other.HasTdpLimitMin) {
      TdpLimitMin = other.TdpLimitMin;
    }
    if (other.HasTdpLimitMax) {
      TdpLimitMax = other.TdpLimitMax;
    }
    if (other.HasIsNisSupported) {
      IsNisSupported = other.IsNisSupported;
    }
    if (other.HasNisSharpnessMin) {
      NisSharpnessMin = other.NisSharpnessMin;
    }
    if (other.HasNisSharpnessMax) {
      NisSharpnessMax = other.NisSharpnessMax;
    }
    if (other.HasDisplayExternalRefreshManualHzMin) {
      DisplayExternalRefreshManualHzMin = other.DisplayExternalRefreshManualHzMin;
    }
    if (other.HasDisplayExternalRefreshManualHzMax) {
      DisplayExternalRefreshManualHzMax = other.DisplayExternalRefreshManualHzMax;
    }
    fpsLimitOptionsExternal_.Add(other.fpsLimitOptionsExternal_);
    if (other.HasIsTearingSupported) {
      IsTearingSupported = other.IsTearingSupported;
    }
    if (other.HasIsVrrSupported) {
      IsVrrSupported = other.IsVrrSupported;
    }
    if (other.HasIsDynamicRefreshRateInSteamSupported) {
      IsDynamicRefreshRateInSteamSupported = other.IsDynamicRefreshRateInSteamSupported;
    }
    if (other.HasIsSplitScalingAndFilteringSupported) {
      IsSplitScalingAndFilteringSupported = other.IsSplitScalingAndFilteringSupported;
    }
    splitScalingFiltersAvailable_.Add(other.splitScalingFiltersAvailable_);
    splitScalingScalersAvailable_.Add(other.splitScalingScalersAvailable_);
    if (other.HasIsHdrSupported) {
      IsHdrSupported = other.IsHdrSupported;
    }
    if (other.HasDisplayRefreshManualHzOcMax) {
      DisplayRefreshManualHzOcMax = other.DisplayRefreshManualHzOcMax;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CpuGovernorManualMinMhz = input.ReadInt32();
          break;
        }
        case 16: {
          CpuGovernorManualMaxMhz = input.ReadInt32();
          break;
        }
        case 24: {
          FsrSharpnessMin = input.ReadInt32();
          break;
        }
        case 32: {
          FsrSharpnessMax = input.ReadInt32();
          break;
        }
        case 40: {
          GpuPerformanceManualMinMhz = input.ReadInt32();
          break;
        }
        case 48: {
          GpuPerformanceManualMaxMhz = input.ReadInt32();
          break;
        }
        case 56: {
          PerfOverlayIsStandalone = input.ReadBool();
          break;
        }
        case 64: {
          IsDynamicVrsAvailable = input.ReadBool();
          break;
        }
        case 72: {
          IsManualDisplayRefreshRateAvailable = input.ReadBool();
          break;
        }
        case 82:
        case 80: {
          gpuPerformanceLevelsAvailable_.AddEntriesFrom(input, _repeated_gpuPerformanceLevelsAvailable_codec);
          break;
        }
        case 88: {
          DisplayRefreshManualHzMin = input.ReadInt32();
          break;
        }
        case 96: {
          DisplayRefreshManualHzMax = input.ReadInt32();
          break;
        }
        case 106:
        case 104: {
          fpsLimitOptions_.AddEntriesFrom(input, _repeated_fpsLimitOptions_codec);
          break;
        }
        case 112: {
          TdpLimitMin = input.ReadInt32();
          break;
        }
        case 120: {
          TdpLimitMax = input.ReadInt32();
          break;
        }
        case 128: {
          IsNisSupported = input.ReadBool();
          break;
        }
        case 136: {
          NisSharpnessMin = input.ReadInt32();
          break;
        }
        case 144: {
          NisSharpnessMax = input.ReadInt32();
          break;
        }
        case 152: {
          DisplayExternalRefreshManualHzMin = input.ReadInt32();
          break;
        }
        case 160: {
          DisplayExternalRefreshManualHzMax = input.ReadInt32();
          break;
        }
        case 170:
        case 168: {
          fpsLimitOptionsExternal_.AddEntriesFrom(input, _repeated_fpsLimitOptionsExternal_codec);
          break;
        }
        case 176: {
          IsTearingSupported = input.ReadBool();
          break;
        }
        case 184: {
          IsVrrSupported = input.ReadBool();
          break;
        }
        case 192: {
          IsDynamicRefreshRateInSteamSupported = input.ReadBool();
          break;
        }
        case 200: {
          IsSplitScalingAndFilteringSupported = input.ReadBool();
          break;
        }
        case 210:
        case 208: {
          splitScalingFiltersAvailable_.AddEntriesFrom(input, _repeated_splitScalingFiltersAvailable_codec);
          break;
        }
        case 218:
        case 216: {
          splitScalingScalersAvailable_.AddEntriesFrom(input, _repeated_splitScalingScalersAvailable_codec);
          break;
        }
        case 224: {
          IsHdrSupported = input.ReadBool();
          break;
        }
        case 232: {
          DisplayRefreshManualHzOcMax = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CpuGovernorManualMinMhz = input.ReadInt32();
          break;
        }
        case 16: {
          CpuGovernorManualMaxMhz = input.ReadInt32();
          break;
        }
        case 24: {
          FsrSharpnessMin = input.ReadInt32();
          break;
        }
        case 32: {
          FsrSharpnessMax = input.ReadInt32();
          break;
        }
        case 40: {
          GpuPerformanceManualMinMhz = input.ReadInt32();
          break;
        }
        case 48: {
          GpuPerformanceManualMaxMhz = input.ReadInt32();
          break;
        }
        case 56: {
          PerfOverlayIsStandalone = input.ReadBool();
          break;
        }
        case 64: {
          IsDynamicVrsAvailable = input.ReadBool();
          break;
        }
        case 72: {
          IsManualDisplayRefreshRateAvailable = input.ReadBool();
          break;
        }
        case 82:
        case 80: {
          gpuPerformanceLevelsAvailable_.AddEntriesFrom(ref input, _repeated_gpuPerformanceLevelsAvailable_codec);
          break;
        }
        case 88: {
          DisplayRefreshManualHzMin = input.ReadInt32();
          break;
        }
        case 96: {
          DisplayRefreshManualHzMax = input.ReadInt32();
          break;
        }
        case 106:
        case 104: {
          fpsLimitOptions_.AddEntriesFrom(ref input, _repeated_fpsLimitOptions_codec);
          break;
        }
        case 112: {
          TdpLimitMin = input.ReadInt32();
          break;
        }
        case 120: {
          TdpLimitMax = input.ReadInt32();
          break;
        }
        case 128: {
          IsNisSupported = input.ReadBool();
          break;
        }
        case 136: {
          NisSharpnessMin = input.ReadInt32();
          break;
        }
        case 144: {
          NisSharpnessMax = input.ReadInt32();
          break;
        }
        case 152: {
          DisplayExternalRefreshManualHzMin = input.ReadInt32();
          break;
        }
        case 160: {
          DisplayExternalRefreshManualHzMax = input.ReadInt32();
          break;
        }
        case 170:
        case 168: {
          fpsLimitOptionsExternal_.AddEntriesFrom(ref input, _repeated_fpsLimitOptionsExternal_codec);
          break;
        }
        case 176: {
          IsTearingSupported = input.ReadBool();
          break;
        }
        case 184: {
          IsVrrSupported = input.ReadBool();
          break;
        }
        case 192: {
          IsDynamicRefreshRateInSteamSupported = input.ReadBool();
          break;
        }
        case 200: {
          IsSplitScalingAndFilteringSupported = input.ReadBool();
          break;
        }
        case 210:
        case 208: {
          splitScalingFiltersAvailable_.AddEntriesFrom(ref input, _repeated_splitScalingFiltersAvailable_codec);
          break;
        }
        case 218:
        case 216: {
          splitScalingScalersAvailable_.AddEntriesFrom(ref input, _repeated_splitScalingScalersAvailable_codec);
          break;
        }
        case 224: {
          IsHdrSupported = input.ReadBool();
          break;
        }
        case 232: {
          DisplayRefreshManualHzOcMax = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfSettingsGlobal : pb::IMessage<CMsgSystemPerfSettingsGlobal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfSettingsGlobal> _parser = new pb::MessageParser<CMsgSystemPerfSettingsGlobal>(() => new CMsgSystemPerfSettingsGlobal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfSettingsGlobal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsGlobal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsGlobal(CMsgSystemPerfSettingsGlobal other) : this() {
    _hasBits0 = other._hasBits0;
    diagnosticUpdateRate_ = other.diagnosticUpdateRate_;
    systemTraceServiceState_ = other.systemTraceServiceState_;
    graphicsProfilingServiceState_ = other.graphicsProfilingServiceState_;
    perfOverlayServiceState_ = other.perfOverlayServiceState_;
    perfOverlayLevel_ = other.perfOverlayLevel_;
    isShowPerfOverlayOverSteamEnabled_ = other.isShowPerfOverlayOverSteamEnabled_;
    isAdvancedSettingsEnabled_ = other.isAdvancedSettingsEnabled_;
    allowExternalDisplayRefreshControl_ = other.allowExternalDisplayRefreshControl_;
    isHdrEnabled_ = other.isHdrEnabled_;
    hdrOnSdrTonemapOperator_ = other.hdrOnSdrTonemapOperator_;
    isHdrDebugHeatmapEnabled_ = other.isHdrDebugHeatmapEnabled_;
    forceHdrWideGammutForSdr_ = other.forceHdrWideGammutForSdr_;
    allowExperimentalHdr_ = other.allowExperimentalHdr_;
    sdrToHdrBrightness_ = other.sdrToHdrBrightness_;
    debugForceHdrSupport_ = other.debugForceHdrSupport_;
    forceHdr10PqOutputDebug_ = other.forceHdr10PqOutputDebug_;
    isDisplayOcEnabled_ = other.isDisplayOcEnabled_;
    isColorManagementEnabled_ = other.isColorManagementEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsGlobal Clone() {
    return new CMsgSystemPerfSettingsGlobal(this);
  }

  /// <summary>Field number for the "diagnostic_update_rate" field.</summary>
  public const int DiagnosticUpdateRateFieldNumber = 1;
  private readonly static float DiagnosticUpdateRateDefaultValue = 0F;

  private float diagnosticUpdateRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DiagnosticUpdateRate {
    get { if ((_hasBits0 & 1) != 0) { return diagnosticUpdateRate_; } else { return DiagnosticUpdateRateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      diagnosticUpdateRate_ = value;
    }
  }
  /// <summary>Gets whether the "diagnostic_update_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDiagnosticUpdateRate {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "diagnostic_update_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDiagnosticUpdateRate() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "system_trace_service_state" field.</summary>
  public const int SystemTraceServiceStateFieldNumber = 2;
  private readonly static global::ESystemServiceState SystemTraceServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState systemTraceServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState SystemTraceServiceState {
    get { if ((_hasBits0 & 2) != 0) { return systemTraceServiceState_; } else { return SystemTraceServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      systemTraceServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "system_trace_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSystemTraceServiceState {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "system_trace_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSystemTraceServiceState() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "graphics_profiling_service_state" field.</summary>
  public const int GraphicsProfilingServiceStateFieldNumber = 3;
  private readonly static global::ESystemServiceState GraphicsProfilingServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState graphicsProfilingServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState GraphicsProfilingServiceState {
    get { if ((_hasBits0 & 4) != 0) { return graphicsProfilingServiceState_; } else { return GraphicsProfilingServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 4;
      graphicsProfilingServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "graphics_profiling_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGraphicsProfilingServiceState {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "graphics_profiling_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGraphicsProfilingServiceState() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "perf_overlay_service_state" field.</summary>
  public const int PerfOverlayServiceStateFieldNumber = 4;
  private readonly static global::ESystemServiceState PerfOverlayServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState perfOverlayServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState PerfOverlayServiceState {
    get { if ((_hasBits0 & 8) != 0) { return perfOverlayServiceState_; } else { return PerfOverlayServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 8;
      perfOverlayServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "perf_overlay_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPerfOverlayServiceState {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "perf_overlay_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPerfOverlayServiceState() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "perf_overlay_level" field.</summary>
  public const int PerfOverlayLevelFieldNumber = 5;
  private readonly static global::EGraphicsPerfOverlayLevel PerfOverlayLevelDefaultValue = global::EGraphicsPerfOverlayLevel.KEgraphicsPerfOverlayLevelHidden;

  private global::EGraphicsPerfOverlayLevel perfOverlayLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EGraphicsPerfOverlayLevel PerfOverlayLevel {
    get { if ((_hasBits0 & 16) != 0) { return perfOverlayLevel_; } else { return PerfOverlayLevelDefaultValue; } }
    set {
      _hasBits0 |= 16;
      perfOverlayLevel_ = value;
    }
  }
  /// <summary>Gets whether the "perf_overlay_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPerfOverlayLevel {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "perf_overlay_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPerfOverlayLevel() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "is_show_perf_overlay_over_steam_enabled" field.</summary>
  public const int IsShowPerfOverlayOverSteamEnabledFieldNumber = 6;
  private readonly static bool IsShowPerfOverlayOverSteamEnabledDefaultValue = false;

  private bool isShowPerfOverlayOverSteamEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsShowPerfOverlayOverSteamEnabled {
    get { if ((_hasBits0 & 32) != 0) { return isShowPerfOverlayOverSteamEnabled_; } else { return IsShowPerfOverlayOverSteamEnabledDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isShowPerfOverlayOverSteamEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_show_perf_overlay_over_steam_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsShowPerfOverlayOverSteamEnabled {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "is_show_perf_overlay_over_steam_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsShowPerfOverlayOverSteamEnabled() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "is_advanced_settings_enabled" field.</summary>
  public const int IsAdvancedSettingsEnabledFieldNumber = 7;
  private readonly static bool IsAdvancedSettingsEnabledDefaultValue = false;

  private bool isAdvancedSettingsEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAdvancedSettingsEnabled {
    get { if ((_hasBits0 & 64) != 0) { return isAdvancedSettingsEnabled_; } else { return IsAdvancedSettingsEnabledDefaultValue; } }
    set {
      _hasBits0 |= 64;
      isAdvancedSettingsEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_advanced_settings_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsAdvancedSettingsEnabled {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "is_advanced_settings_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsAdvancedSettingsEnabled() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "allow_external_display_refresh_control" field.</summary>
  public const int AllowExternalDisplayRefreshControlFieldNumber = 8;
  private readonly static bool AllowExternalDisplayRefreshControlDefaultValue = false;

  private bool allowExternalDisplayRefreshControl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowExternalDisplayRefreshControl {
    get { if ((_hasBits0 & 128) != 0) { return allowExternalDisplayRefreshControl_; } else { return AllowExternalDisplayRefreshControlDefaultValue; } }
    set {
      _hasBits0 |= 128;
      allowExternalDisplayRefreshControl_ = value;
    }
  }
  /// <summary>Gets whether the "allow_external_display_refresh_control" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowExternalDisplayRefreshControl {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "allow_external_display_refresh_control" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowExternalDisplayRefreshControl() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "is_hdr_enabled" field.</summary>
  public const int IsHdrEnabledFieldNumber = 9;
  private readonly static bool IsHdrEnabledDefaultValue = false;

  private bool isHdrEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHdrEnabled {
    get { if ((_hasBits0 & 256) != 0) { return isHdrEnabled_; } else { return IsHdrEnabledDefaultValue; } }
    set {
      _hasBits0 |= 256;
      isHdrEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_hdr_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHdrEnabled {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "is_hdr_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHdrEnabled() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "hdr_on_sdr_tonemap_operator" field.</summary>
  public const int HdrOnSdrTonemapOperatorFieldNumber = 12;
  private readonly static global::EHDRToneMapOperator HdrOnSdrTonemapOperatorDefaultValue = global::EHDRToneMapOperator.KEhdrtoneMapOperatorInvalid;

  private global::EHDRToneMapOperator hdrOnSdrTonemapOperator_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EHDRToneMapOperator HdrOnSdrTonemapOperator {
    get { if ((_hasBits0 & 512) != 0) { return hdrOnSdrTonemapOperator_; } else { return HdrOnSdrTonemapOperatorDefaultValue; } }
    set {
      _hasBits0 |= 512;
      hdrOnSdrTonemapOperator_ = value;
    }
  }
  /// <summary>Gets whether the "hdr_on_sdr_tonemap_operator" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHdrOnSdrTonemapOperator {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "hdr_on_sdr_tonemap_operator" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHdrOnSdrTonemapOperator() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "is_hdr_debug_heatmap_enabled" field.</summary>
  public const int IsHdrDebugHeatmapEnabledFieldNumber = 13;
  private readonly static bool IsHdrDebugHeatmapEnabledDefaultValue = false;

  private bool isHdrDebugHeatmapEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHdrDebugHeatmapEnabled {
    get { if ((_hasBits0 & 1024) != 0) { return isHdrDebugHeatmapEnabled_; } else { return IsHdrDebugHeatmapEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      isHdrDebugHeatmapEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_hdr_debug_heatmap_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHdrDebugHeatmapEnabled {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "is_hdr_debug_heatmap_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHdrDebugHeatmapEnabled() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "force_hdr_wide_gammut_for_sdr" field.</summary>
  public const int ForceHdrWideGammutForSdrFieldNumber = 15;
  private readonly static bool ForceHdrWideGammutForSdrDefaultValue = true;

  private bool forceHdrWideGammutForSdr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ForceHdrWideGammutForSdr {
    get { if ((_hasBits0 & 2048) != 0) { return forceHdrWideGammutForSdr_; } else { return ForceHdrWideGammutForSdrDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      forceHdrWideGammutForSdr_ = value;
    }
  }
  /// <summary>Gets whether the "force_hdr_wide_gammut_for_sdr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForceHdrWideGammutForSdr {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "force_hdr_wide_gammut_for_sdr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForceHdrWideGammutForSdr() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "allow_experimental_hdr" field.</summary>
  public const int AllowExperimentalHdrFieldNumber = 16;
  private readonly static bool AllowExperimentalHdrDefaultValue = false;

  private bool allowExperimentalHdr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowExperimentalHdr {
    get { if ((_hasBits0 & 4096) != 0) { return allowExperimentalHdr_; } else { return AllowExperimentalHdrDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      allowExperimentalHdr_ = value;
    }
  }
  /// <summary>Gets whether the "allow_experimental_hdr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowExperimentalHdr {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "allow_experimental_hdr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowExperimentalHdr() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "sdr_to_hdr_brightness" field.</summary>
  public const int SdrToHdrBrightnessFieldNumber = 17;
  private readonly static float SdrToHdrBrightnessDefaultValue = 0F;

  private float sdrToHdrBrightness_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SdrToHdrBrightness {
    get { if ((_hasBits0 & 8192) != 0) { return sdrToHdrBrightness_; } else { return SdrToHdrBrightnessDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      sdrToHdrBrightness_ = value;
    }
  }
  /// <summary>Gets whether the "sdr_to_hdr_brightness" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSdrToHdrBrightness {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "sdr_to_hdr_brightness" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSdrToHdrBrightness() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "debug_force_hdr_support" field.</summary>
  public const int DebugForceHdrSupportFieldNumber = 18;
  private readonly static bool DebugForceHdrSupportDefaultValue = false;

  private bool debugForceHdrSupport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DebugForceHdrSupport {
    get { if ((_hasBits0 & 16384) != 0) { return debugForceHdrSupport_; } else { return DebugForceHdrSupportDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      debugForceHdrSupport_ = value;
    }
  }
  /// <summary>Gets whether the "debug_force_hdr_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDebugForceHdrSupport {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "debug_force_hdr_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDebugForceHdrSupport() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "force_hdr_10pq_output_debug" field.</summary>
  public const int ForceHdr10PqOutputDebugFieldNumber = 19;
  private readonly static bool ForceHdr10PqOutputDebugDefaultValue = false;

  private bool forceHdr10PqOutputDebug_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ForceHdr10PqOutputDebug {
    get { if ((_hasBits0 & 32768) != 0) { return forceHdr10PqOutputDebug_; } else { return ForceHdr10PqOutputDebugDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      forceHdr10PqOutputDebug_ = value;
    }
  }
  /// <summary>Gets whether the "force_hdr_10pq_output_debug" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForceHdr10PqOutputDebug {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "force_hdr_10pq_output_debug" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForceHdr10PqOutputDebug() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "is_display_oc_enabled" field.</summary>
  public const int IsDisplayOcEnabledFieldNumber = 20;
  private readonly static bool IsDisplayOcEnabledDefaultValue = false;

  private bool isDisplayOcEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDisplayOcEnabled {
    get { if ((_hasBits0 & 65536) != 0) { return isDisplayOcEnabled_; } else { return IsDisplayOcEnabledDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      isDisplayOcEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_display_oc_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDisplayOcEnabled {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "is_display_oc_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDisplayOcEnabled() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "is_color_management_enabled" field.</summary>
  public const int IsColorManagementEnabledFieldNumber = 21;
  private readonly static bool IsColorManagementEnabledDefaultValue = false;

  private bool isColorManagementEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsColorManagementEnabled {
    get { if ((_hasBits0 & 131072) != 0) { return isColorManagementEnabled_; } else { return IsColorManagementEnabledDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      isColorManagementEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_color_management_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsColorManagementEnabled {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "is_color_management_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsColorManagementEnabled() {
    _hasBits0 &= ~131072;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfSettingsGlobal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfSettingsGlobal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DiagnosticUpdateRate, other.DiagnosticUpdateRate)) return false;
    if (SystemTraceServiceState != other.SystemTraceServiceState) return false;
    if (GraphicsProfilingServiceState != other.GraphicsProfilingServiceState) return false;
    if (PerfOverlayServiceState != other.PerfOverlayServiceState) return false;
    if (PerfOverlayLevel != other.PerfOverlayLevel) return false;
    if (IsShowPerfOverlayOverSteamEnabled != other.IsShowPerfOverlayOverSteamEnabled) return false;
    if (IsAdvancedSettingsEnabled != other.IsAdvancedSettingsEnabled) return false;
    if (AllowExternalDisplayRefreshControl != other.AllowExternalDisplayRefreshControl) return false;
    if (IsHdrEnabled != other.IsHdrEnabled) return false;
    if (HdrOnSdrTonemapOperator != other.HdrOnSdrTonemapOperator) return false;
    if (IsHdrDebugHeatmapEnabled != other.IsHdrDebugHeatmapEnabled) return false;
    if (ForceHdrWideGammutForSdr != other.ForceHdrWideGammutForSdr) return false;
    if (AllowExperimentalHdr != other.AllowExperimentalHdr) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdrToHdrBrightness, other.SdrToHdrBrightness)) return false;
    if (DebugForceHdrSupport != other.DebugForceHdrSupport) return false;
    if (ForceHdr10PqOutputDebug != other.ForceHdr10PqOutputDebug) return false;
    if (IsDisplayOcEnabled != other.IsDisplayOcEnabled) return false;
    if (IsColorManagementEnabled != other.IsColorManagementEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDiagnosticUpdateRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DiagnosticUpdateRate);
    if (HasSystemTraceServiceState) hash ^= SystemTraceServiceState.GetHashCode();
    if (HasGraphicsProfilingServiceState) hash ^= GraphicsProfilingServiceState.GetHashCode();
    if (HasPerfOverlayServiceState) hash ^= PerfOverlayServiceState.GetHashCode();
    if (HasPerfOverlayLevel) hash ^= PerfOverlayLevel.GetHashCode();
    if (HasIsShowPerfOverlayOverSteamEnabled) hash ^= IsShowPerfOverlayOverSteamEnabled.GetHashCode();
    if (HasIsAdvancedSettingsEnabled) hash ^= IsAdvancedSettingsEnabled.GetHashCode();
    if (HasAllowExternalDisplayRefreshControl) hash ^= AllowExternalDisplayRefreshControl.GetHashCode();
    if (HasIsHdrEnabled) hash ^= IsHdrEnabled.GetHashCode();
    if (HasHdrOnSdrTonemapOperator) hash ^= HdrOnSdrTonemapOperator.GetHashCode();
    if (HasIsHdrDebugHeatmapEnabled) hash ^= IsHdrDebugHeatmapEnabled.GetHashCode();
    if (HasForceHdrWideGammutForSdr) hash ^= ForceHdrWideGammutForSdr.GetHashCode();
    if (HasAllowExperimentalHdr) hash ^= AllowExperimentalHdr.GetHashCode();
    if (HasSdrToHdrBrightness) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdrToHdrBrightness);
    if (HasDebugForceHdrSupport) hash ^= DebugForceHdrSupport.GetHashCode();
    if (HasForceHdr10PqOutputDebug) hash ^= ForceHdr10PqOutputDebug.GetHashCode();
    if (HasIsDisplayOcEnabled) hash ^= IsDisplayOcEnabled.GetHashCode();
    if (HasIsColorManagementEnabled) hash ^= IsColorManagementEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDiagnosticUpdateRate) {
      output.WriteRawTag(13);
      output.WriteFloat(DiagnosticUpdateRate);
    }
    if (HasSystemTraceServiceState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      output.WriteRawTag(40);
      output.WriteEnum((int) PerfOverlayLevel);
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsShowPerfOverlayOverSteamEnabled);
    }
    if (HasIsAdvancedSettingsEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(IsAdvancedSettingsEnabled);
    }
    if (HasAllowExternalDisplayRefreshControl) {
      output.WriteRawTag(64);
      output.WriteBool(AllowExternalDisplayRefreshControl);
    }
    if (HasIsHdrEnabled) {
      output.WriteRawTag(72);
      output.WriteBool(IsHdrEnabled);
    }
    if (HasHdrOnSdrTonemapOperator) {
      output.WriteRawTag(96);
      output.WriteEnum((int) HdrOnSdrTonemapOperator);
    }
    if (HasIsHdrDebugHeatmapEnabled) {
      output.WriteRawTag(104);
      output.WriteBool(IsHdrDebugHeatmapEnabled);
    }
    if (HasForceHdrWideGammutForSdr) {
      output.WriteRawTag(120);
      output.WriteBool(ForceHdrWideGammutForSdr);
    }
    if (HasAllowExperimentalHdr) {
      output.WriteRawTag(128, 1);
      output.WriteBool(AllowExperimentalHdr);
    }
    if (HasSdrToHdrBrightness) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(SdrToHdrBrightness);
    }
    if (HasDebugForceHdrSupport) {
      output.WriteRawTag(144, 1);
      output.WriteBool(DebugForceHdrSupport);
    }
    if (HasForceHdr10PqOutputDebug) {
      output.WriteRawTag(152, 1);
      output.WriteBool(ForceHdr10PqOutputDebug);
    }
    if (HasIsDisplayOcEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsDisplayOcEnabled);
    }
    if (HasIsColorManagementEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsColorManagementEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDiagnosticUpdateRate) {
      output.WriteRawTag(13);
      output.WriteFloat(DiagnosticUpdateRate);
    }
    if (HasSystemTraceServiceState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      output.WriteRawTag(40);
      output.WriteEnum((int) PerfOverlayLevel);
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      output.WriteRawTag(48);
      output.WriteBool(IsShowPerfOverlayOverSteamEnabled);
    }
    if (HasIsAdvancedSettingsEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(IsAdvancedSettingsEnabled);
    }
    if (HasAllowExternalDisplayRefreshControl) {
      output.WriteRawTag(64);
      output.WriteBool(AllowExternalDisplayRefreshControl);
    }
    if (HasIsHdrEnabled) {
      output.WriteRawTag(72);
      output.WriteBool(IsHdrEnabled);
    }
    if (HasHdrOnSdrTonemapOperator) {
      output.WriteRawTag(96);
      output.WriteEnum((int) HdrOnSdrTonemapOperator);
    }
    if (HasIsHdrDebugHeatmapEnabled) {
      output.WriteRawTag(104);
      output.WriteBool(IsHdrDebugHeatmapEnabled);
    }
    if (HasForceHdrWideGammutForSdr) {
      output.WriteRawTag(120);
      output.WriteBool(ForceHdrWideGammutForSdr);
    }
    if (HasAllowExperimentalHdr) {
      output.WriteRawTag(128, 1);
      output.WriteBool(AllowExperimentalHdr);
    }
    if (HasSdrToHdrBrightness) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(SdrToHdrBrightness);
    }
    if (HasDebugForceHdrSupport) {
      output.WriteRawTag(144, 1);
      output.WriteBool(DebugForceHdrSupport);
    }
    if (HasForceHdr10PqOutputDebug) {
      output.WriteRawTag(152, 1);
      output.WriteBool(ForceHdr10PqOutputDebug);
    }
    if (HasIsDisplayOcEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsDisplayOcEnabled);
    }
    if (HasIsColorManagementEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsColorManagementEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDiagnosticUpdateRate) {
      size += 1 + 4;
    }
    if (HasSystemTraceServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfOverlayLevel);
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      size += 1 + 1;
    }
    if (HasIsAdvancedSettingsEnabled) {
      size += 1 + 1;
    }
    if (HasAllowExternalDisplayRefreshControl) {
      size += 1 + 1;
    }
    if (HasIsHdrEnabled) {
      size += 1 + 1;
    }
    if (HasHdrOnSdrTonemapOperator) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HdrOnSdrTonemapOperator);
    }
    if (HasIsHdrDebugHeatmapEnabled) {
      size += 1 + 1;
    }
    if (HasForceHdrWideGammutForSdr) {
      size += 1 + 1;
    }
    if (HasAllowExperimentalHdr) {
      size += 2 + 1;
    }
    if (HasSdrToHdrBrightness) {
      size += 2 + 4;
    }
    if (HasDebugForceHdrSupport) {
      size += 2 + 1;
    }
    if (HasForceHdr10PqOutputDebug) {
      size += 2 + 1;
    }
    if (HasIsDisplayOcEnabled) {
      size += 2 + 1;
    }
    if (HasIsColorManagementEnabled) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfSettingsGlobal other) {
    if (other == null) {
      return;
    }
    if (other.HasDiagnosticUpdateRate) {
      DiagnosticUpdateRate = other.DiagnosticUpdateRate;
    }
    if (other.HasSystemTraceServiceState) {
      SystemTraceServiceState = other.SystemTraceServiceState;
    }
    if (other.HasGraphicsProfilingServiceState) {
      GraphicsProfilingServiceState = other.GraphicsProfilingServiceState;
    }
    if (other.HasPerfOverlayServiceState) {
      PerfOverlayServiceState = other.PerfOverlayServiceState;
    }
    if (other.HasPerfOverlayLevel) {
      PerfOverlayLevel = other.PerfOverlayLevel;
    }
    if (other.HasIsShowPerfOverlayOverSteamEnabled) {
      IsShowPerfOverlayOverSteamEnabled = other.IsShowPerfOverlayOverSteamEnabled;
    }
    if (other.HasIsAdvancedSettingsEnabled) {
      IsAdvancedSettingsEnabled = other.IsAdvancedSettingsEnabled;
    }
    if (other.HasAllowExternalDisplayRefreshControl) {
      AllowExternalDisplayRefreshControl = other.AllowExternalDisplayRefreshControl;
    }
    if (other.HasIsHdrEnabled) {
      IsHdrEnabled = other.IsHdrEnabled;
    }
    if (other.HasHdrOnSdrTonemapOperator) {
      HdrOnSdrTonemapOperator = other.HdrOnSdrTonemapOperator;
    }
    if (other.HasIsHdrDebugHeatmapEnabled) {
      IsHdrDebugHeatmapEnabled = other.IsHdrDebugHeatmapEnabled;
    }
    if (other.HasForceHdrWideGammutForSdr) {
      ForceHdrWideGammutForSdr = other.ForceHdrWideGammutForSdr;
    }
    if (other.HasAllowExperimentalHdr) {
      AllowExperimentalHdr = other.AllowExperimentalHdr;
    }
    if (other.HasSdrToHdrBrightness) {
      SdrToHdrBrightness = other.SdrToHdrBrightness;
    }
    if (other.HasDebugForceHdrSupport) {
      DebugForceHdrSupport = other.DebugForceHdrSupport;
    }
    if (other.HasForceHdr10PqOutputDebug) {
      ForceHdr10PqOutputDebug = other.ForceHdr10PqOutputDebug;
    }
    if (other.HasIsDisplayOcEnabled) {
      IsDisplayOcEnabled = other.IsDisplayOcEnabled;
    }
    if (other.HasIsColorManagementEnabled) {
      IsColorManagementEnabled = other.IsColorManagementEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          DiagnosticUpdateRate = input.ReadFloat();
          break;
        }
        case 16: {
          SystemTraceServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 24: {
          GraphicsProfilingServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 32: {
          PerfOverlayServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 40: {
          PerfOverlayLevel = (global::EGraphicsPerfOverlayLevel) input.ReadEnum();
          break;
        }
        case 48: {
          IsShowPerfOverlayOverSteamEnabled = input.ReadBool();
          break;
        }
        case 56: {
          IsAdvancedSettingsEnabled = input.ReadBool();
          break;
        }
        case 64: {
          AllowExternalDisplayRefreshControl = input.ReadBool();
          break;
        }
        case 72: {
          IsHdrEnabled = input.ReadBool();
          break;
        }
        case 96: {
          HdrOnSdrTonemapOperator = (global::EHDRToneMapOperator) input.ReadEnum();
          break;
        }
        case 104: {
          IsHdrDebugHeatmapEnabled = input.ReadBool();
          break;
        }
        case 120: {
          ForceHdrWideGammutForSdr = input.ReadBool();
          break;
        }
        case 128: {
          AllowExperimentalHdr = input.ReadBool();
          break;
        }
        case 141: {
          SdrToHdrBrightness = input.ReadFloat();
          break;
        }
        case 144: {
          DebugForceHdrSupport = input.ReadBool();
          break;
        }
        case 152: {
          ForceHdr10PqOutputDebug = input.ReadBool();
          break;
        }
        case 160: {
          IsDisplayOcEnabled = input.ReadBool();
          break;
        }
        case 168: {
          IsColorManagementEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          DiagnosticUpdateRate = input.ReadFloat();
          break;
        }
        case 16: {
          SystemTraceServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 24: {
          GraphicsProfilingServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 32: {
          PerfOverlayServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 40: {
          PerfOverlayLevel = (global::EGraphicsPerfOverlayLevel) input.ReadEnum();
          break;
        }
        case 48: {
          IsShowPerfOverlayOverSteamEnabled = input.ReadBool();
          break;
        }
        case 56: {
          IsAdvancedSettingsEnabled = input.ReadBool();
          break;
        }
        case 64: {
          AllowExternalDisplayRefreshControl = input.ReadBool();
          break;
        }
        case 72: {
          IsHdrEnabled = input.ReadBool();
          break;
        }
        case 96: {
          HdrOnSdrTonemapOperator = (global::EHDRToneMapOperator) input.ReadEnum();
          break;
        }
        case 104: {
          IsHdrDebugHeatmapEnabled = input.ReadBool();
          break;
        }
        case 120: {
          ForceHdrWideGammutForSdr = input.ReadBool();
          break;
        }
        case 128: {
          AllowExperimentalHdr = input.ReadBool();
          break;
        }
        case 141: {
          SdrToHdrBrightness = input.ReadFloat();
          break;
        }
        case 144: {
          DebugForceHdrSupport = input.ReadBool();
          break;
        }
        case 152: {
          ForceHdr10PqOutputDebug = input.ReadBool();
          break;
        }
        case 160: {
          IsDisplayOcEnabled = input.ReadBool();
          break;
        }
        case 168: {
          IsColorManagementEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfSettingsPerApp : pb::IMessage<CMsgSystemPerfSettingsPerApp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfSettingsPerApp> _parser = new pb::MessageParser<CMsgSystemPerfSettingsPerApp>(() => new CMsgSystemPerfSettingsPerApp());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfSettingsPerApp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsPerApp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsPerApp(CMsgSystemPerfSettingsPerApp other) : this() {
    _hasBits0 = other._hasBits0;
    gpuPerformanceManualMhz_ = other.gpuPerformanceManualMhz_;
    fpsLimit_ = other.fpsLimit_;
    isVariableResolutionEnabled_ = other.isVariableResolutionEnabled_;
    isDynamicRefreshRateEnabled_ = other.isDynamicRefreshRateEnabled_;
    tdpLimit_ = other.tdpLimit_;
    cpuGovernor_ = other.cpuGovernor_;
    cpuGovernorManualMhz_ = other.cpuGovernorManualMhz_;
    scalingFilter_ = other.scalingFilter_;
    fsrSharpness_ = other.fsrSharpness_;
    isFpsLimitEnabled_ = other.isFpsLimitEnabled_;
    isTdpLimitEnabled_ = other.isTdpLimitEnabled_;
    isLowLatencyModeEnabled_ = other.isLowLatencyModeEnabled_;
    displayRefreshManualHz_ = other.displayRefreshManualHz_;
    isGamePerfProfileEnabled_ = other.isGamePerfProfileEnabled_;
    gpuPerformanceLevel_ = other.gpuPerformanceLevel_;
    nisSharpness_ = other.nisSharpness_;
    displayExternalRefreshManualHz_ = other.displayExternalRefreshManualHz_;
    fpsLimitExternal_ = other.fpsLimitExternal_;
    isTearingEnabled_ = other.isTearingEnabled_;
    isVrrEnabled_ = other.isVrrEnabled_;
    isCompositeDebugEnabled_ = other.isCompositeDebugEnabled_;
    forceComposite_ = other.forceComposite_;
    useDynamicRefreshRateInSteam_ = other.useDynamicRefreshRateInSteam_;
    splitScalingFilter_ = other.splitScalingFilter_;
    splitScalingScaler_ = other.splitScalingScaler_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsPerApp Clone() {
    return new CMsgSystemPerfSettingsPerApp(this);
  }

  /// <summary>Field number for the "gpu_performance_manual_mhz" field.</summary>
  public const int GpuPerformanceManualMhzFieldNumber = 1;
  private readonly static int GpuPerformanceManualMhzDefaultValue = 0;

  private int gpuPerformanceManualMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GpuPerformanceManualMhz {
    get { if ((_hasBits0 & 1) != 0) { return gpuPerformanceManualMhz_; } else { return GpuPerformanceManualMhzDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gpuPerformanceManualMhz_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_manual_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceManualMhz {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_manual_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceManualMhz() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fps_limit" field.</summary>
  public const int FpsLimitFieldNumber = 2;
  private readonly static int FpsLimitDefaultValue = 0;

  private int fpsLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FpsLimit {
    get { if ((_hasBits0 & 2) != 0) { return fpsLimit_; } else { return FpsLimitDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fpsLimit_ = value;
    }
  }
  /// <summary>Gets whether the "fps_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFpsLimit {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fps_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFpsLimit() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_variable_resolution_enabled" field.</summary>
  public const int IsVariableResolutionEnabledFieldNumber = 3;
  private readonly static bool IsVariableResolutionEnabledDefaultValue = false;

  private bool isVariableResolutionEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVariableResolutionEnabled {
    get { if ((_hasBits0 & 4) != 0) { return isVariableResolutionEnabled_; } else { return IsVariableResolutionEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isVariableResolutionEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_variable_resolution_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVariableResolutionEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_variable_resolution_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVariableResolutionEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_dynamic_refresh_rate_enabled" field.</summary>
  public const int IsDynamicRefreshRateEnabledFieldNumber = 4;
  private readonly static bool IsDynamicRefreshRateEnabledDefaultValue = false;

  private bool isDynamicRefreshRateEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDynamicRefreshRateEnabled {
    get { if ((_hasBits0 & 8) != 0) { return isDynamicRefreshRateEnabled_; } else { return IsDynamicRefreshRateEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isDynamicRefreshRateEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_dynamic_refresh_rate_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDynamicRefreshRateEnabled {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_dynamic_refresh_rate_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDynamicRefreshRateEnabled() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "tdp_limit" field.</summary>
  public const int TdpLimitFieldNumber = 5;
  private readonly static int TdpLimitDefaultValue = 0;

  private int tdpLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TdpLimit {
    get { if ((_hasBits0 & 16) != 0) { return tdpLimit_; } else { return TdpLimitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      tdpLimit_ = value;
    }
  }
  /// <summary>Gets whether the "tdp_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTdpLimit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "tdp_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTdpLimit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "cpu_governor" field.</summary>
  public const int CpuGovernorFieldNumber = 6;
  private readonly static global::ECPUGovernor CpuGovernorDefaultValue = global::ECPUGovernor.KEcpugovernorInvalid;

  private global::ECPUGovernor cpuGovernor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ECPUGovernor CpuGovernor {
    get { if ((_hasBits0 & 32) != 0) { return cpuGovernor_; } else { return CpuGovernorDefaultValue; } }
    set {
      _hasBits0 |= 32;
      cpuGovernor_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernor {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernor() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "cpu_governor_manual_mhz" field.</summary>
  public const int CpuGovernorManualMhzFieldNumber = 7;
  private readonly static int CpuGovernorManualMhzDefaultValue = 0;

  private int cpuGovernorManualMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CpuGovernorManualMhz {
    get { if ((_hasBits0 & 64) != 0) { return cpuGovernorManualMhz_; } else { return CpuGovernorManualMhzDefaultValue; } }
    set {
      _hasBits0 |= 64;
      cpuGovernorManualMhz_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor_manual_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernorManualMhz {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor_manual_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernorManualMhz() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "scaling_filter" field.</summary>
  public const int ScalingFilterFieldNumber = 8;
  private readonly static int ScalingFilterDefaultValue = 0;

  private int scalingFilter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ScalingFilter {
    get { if ((_hasBits0 & 128) != 0) { return scalingFilter_; } else { return ScalingFilterDefaultValue; } }
    set {
      _hasBits0 |= 128;
      scalingFilter_ = value;
    }
  }
  /// <summary>Gets whether the "scaling_filter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScalingFilter {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "scaling_filter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScalingFilter() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "fsr_sharpness" field.</summary>
  public const int FsrSharpnessFieldNumber = 9;
  private readonly static int FsrSharpnessDefaultValue = 0;

  private int fsrSharpness_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FsrSharpness {
    get { if ((_hasBits0 & 256) != 0) { return fsrSharpness_; } else { return FsrSharpnessDefaultValue; } }
    set {
      _hasBits0 |= 256;
      fsrSharpness_ = value;
    }
  }
  /// <summary>Gets whether the "fsr_sharpness" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFsrSharpness {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "fsr_sharpness" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFsrSharpness() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "is_fps_limit_enabled" field.</summary>
  public const int IsFpsLimitEnabledFieldNumber = 10;
  private readonly static bool IsFpsLimitEnabledDefaultValue = false;

  private bool isFpsLimitEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFpsLimitEnabled {
    get { if ((_hasBits0 & 512) != 0) { return isFpsLimitEnabled_; } else { return IsFpsLimitEnabledDefaultValue; } }
    set {
      _hasBits0 |= 512;
      isFpsLimitEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_fps_limit_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsFpsLimitEnabled {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "is_fps_limit_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsFpsLimitEnabled() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "is_tdp_limit_enabled" field.</summary>
  public const int IsTdpLimitEnabledFieldNumber = 11;
  private readonly static bool IsTdpLimitEnabledDefaultValue = false;

  private bool isTdpLimitEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTdpLimitEnabled {
    get { if ((_hasBits0 & 1024) != 0) { return isTdpLimitEnabled_; } else { return IsTdpLimitEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      isTdpLimitEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_tdp_limit_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTdpLimitEnabled {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "is_tdp_limit_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTdpLimitEnabled() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "is_low_latency_mode_enabled" field.</summary>
  public const int IsLowLatencyModeEnabledFieldNumber = 12;
  private readonly static bool IsLowLatencyModeEnabledDefaultValue = false;

  private bool isLowLatencyModeEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLowLatencyModeEnabled {
    get { if ((_hasBits0 & 2048) != 0) { return isLowLatencyModeEnabled_; } else { return IsLowLatencyModeEnabledDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      isLowLatencyModeEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_low_latency_mode_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsLowLatencyModeEnabled {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "is_low_latency_mode_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsLowLatencyModeEnabled() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "display_refresh_manual_hz" field.</summary>
  public const int DisplayRefreshManualHzFieldNumber = 13;
  private readonly static int DisplayRefreshManualHzDefaultValue = 0;

  private int displayRefreshManualHz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayRefreshManualHz {
    get { if ((_hasBits0 & 4096) != 0) { return displayRefreshManualHz_; } else { return DisplayRefreshManualHzDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      displayRefreshManualHz_ = value;
    }
  }
  /// <summary>Gets whether the "display_refresh_manual_hz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayRefreshManualHz {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "display_refresh_manual_hz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayRefreshManualHz() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "is_game_perf_profile_enabled" field.</summary>
  public const int IsGamePerfProfileEnabledFieldNumber = 14;
  private readonly static bool IsGamePerfProfileEnabledDefaultValue = false;

  private bool isGamePerfProfileEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGamePerfProfileEnabled {
    get { if ((_hasBits0 & 8192) != 0) { return isGamePerfProfileEnabled_; } else { return IsGamePerfProfileEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      isGamePerfProfileEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_game_perf_profile_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGamePerfProfileEnabled {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "is_game_perf_profile_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGamePerfProfileEnabled() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "gpu_performance_level" field.</summary>
  public const int GpuPerformanceLevelFieldNumber = 15;
  private readonly static global::EGPUPerformanceLevel GpuPerformanceLevelDefaultValue = global::EGPUPerformanceLevel.KEgpuperformanceLevelInvalid;

  private global::EGPUPerformanceLevel gpuPerformanceLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EGPUPerformanceLevel GpuPerformanceLevel {
    get { if ((_hasBits0 & 16384) != 0) { return gpuPerformanceLevel_; } else { return GpuPerformanceLevelDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      gpuPerformanceLevel_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceLevel {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceLevel() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "nis_sharpness" field.</summary>
  public const int NisSharpnessFieldNumber = 16;
  private readonly static int NisSharpnessDefaultValue = 0;

  private int nisSharpness_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int NisSharpness {
    get { if ((_hasBits0 & 32768) != 0) { return nisSharpness_; } else { return NisSharpnessDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      nisSharpness_ = value;
    }
  }
  /// <summary>Gets whether the "nis_sharpness" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNisSharpness {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "nis_sharpness" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNisSharpness() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "display_external_refresh_manual_hz" field.</summary>
  public const int DisplayExternalRefreshManualHzFieldNumber = 17;
  private readonly static int DisplayExternalRefreshManualHzDefaultValue = 0;

  private int displayExternalRefreshManualHz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayExternalRefreshManualHz {
    get { if ((_hasBits0 & 65536) != 0) { return displayExternalRefreshManualHz_; } else { return DisplayExternalRefreshManualHzDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      displayExternalRefreshManualHz_ = value;
    }
  }
  /// <summary>Gets whether the "display_external_refresh_manual_hz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayExternalRefreshManualHz {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "display_external_refresh_manual_hz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayExternalRefreshManualHz() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "fps_limit_external" field.</summary>
  public const int FpsLimitExternalFieldNumber = 18;
  private readonly static int FpsLimitExternalDefaultValue = 0;

  private int fpsLimitExternal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FpsLimitExternal {
    get { if ((_hasBits0 & 131072) != 0) { return fpsLimitExternal_; } else { return FpsLimitExternalDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      fpsLimitExternal_ = value;
    }
  }
  /// <summary>Gets whether the "fps_limit_external" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFpsLimitExternal {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "fps_limit_external" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFpsLimitExternal() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "is_tearing_enabled" field.</summary>
  public const int IsTearingEnabledFieldNumber = 19;
  private readonly static bool IsTearingEnabledDefaultValue = false;

  private bool isTearingEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTearingEnabled {
    get { if ((_hasBits0 & 262144) != 0) { return isTearingEnabled_; } else { return IsTearingEnabledDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      isTearingEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_tearing_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTearingEnabled {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "is_tearing_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTearingEnabled() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "is_vrr_enabled" field.</summary>
  public const int IsVrrEnabledFieldNumber = 20;
  private readonly static bool IsVrrEnabledDefaultValue = false;

  private bool isVrrEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVrrEnabled {
    get { if ((_hasBits0 & 524288) != 0) { return isVrrEnabled_; } else { return IsVrrEnabledDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      isVrrEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_vrr_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVrrEnabled {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "is_vrr_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVrrEnabled() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "is_composite_debug_enabled" field.</summary>
  public const int IsCompositeDebugEnabledFieldNumber = 21;
  private readonly static bool IsCompositeDebugEnabledDefaultValue = false;

  private bool isCompositeDebugEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsCompositeDebugEnabled {
    get { if ((_hasBits0 & 1048576) != 0) { return isCompositeDebugEnabled_; } else { return IsCompositeDebugEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      isCompositeDebugEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_composite_debug_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsCompositeDebugEnabled {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "is_composite_debug_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsCompositeDebugEnabled() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "force_composite" field.</summary>
  public const int ForceCompositeFieldNumber = 22;
  private readonly static bool ForceCompositeDefaultValue = false;

  private bool forceComposite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ForceComposite {
    get { if ((_hasBits0 & 2097152) != 0) { return forceComposite_; } else { return ForceCompositeDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      forceComposite_ = value;
    }
  }
  /// <summary>Gets whether the "force_composite" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForceComposite {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "force_composite" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForceComposite() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "use_dynamic_refresh_rate_in_steam" field.</summary>
  public const int UseDynamicRefreshRateInSteamFieldNumber = 23;
  private readonly static bool UseDynamicRefreshRateInSteamDefaultValue = false;

  private bool useDynamicRefreshRateInSteam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool UseDynamicRefreshRateInSteam {
    get { if ((_hasBits0 & 4194304) != 0) { return useDynamicRefreshRateInSteam_; } else { return UseDynamicRefreshRateInSteamDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      useDynamicRefreshRateInSteam_ = value;
    }
  }
  /// <summary>Gets whether the "use_dynamic_refresh_rate_in_steam" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUseDynamicRefreshRateInSteam {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "use_dynamic_refresh_rate_in_steam" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUseDynamicRefreshRateInSteam() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "split_scaling_filter" field.</summary>
  public const int SplitScalingFilterFieldNumber = 24;
  private readonly static global::ESplitScalingFilter SplitScalingFilterDefaultValue = global::ESplitScalingFilter.KEsplitScalingFilterInvalid;

  private global::ESplitScalingFilter splitScalingFilter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESplitScalingFilter SplitScalingFilter {
    get { if ((_hasBits0 & 8388608) != 0) { return splitScalingFilter_; } else { return SplitScalingFilterDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      splitScalingFilter_ = value;
    }
  }
  /// <summary>Gets whether the "split_scaling_filter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSplitScalingFilter {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "split_scaling_filter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSplitScalingFilter() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "split_scaling_scaler" field.</summary>
  public const int SplitScalingScalerFieldNumber = 25;
  private readonly static global::ESplitScalingScaler SplitScalingScalerDefaultValue = global::ESplitScalingScaler.KEsplitScalingScalerInvalid;

  private global::ESplitScalingScaler splitScalingScaler_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESplitScalingScaler SplitScalingScaler {
    get { if ((_hasBits0 & 16777216) != 0) { return splitScalingScaler_; } else { return SplitScalingScalerDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      splitScalingScaler_ = value;
    }
  }
  /// <summary>Gets whether the "split_scaling_scaler" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSplitScalingScaler {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "split_scaling_scaler" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSplitScalingScaler() {
    _hasBits0 &= ~16777216;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfSettingsPerApp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfSettingsPerApp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GpuPerformanceManualMhz != other.GpuPerformanceManualMhz) return false;
    if (FpsLimit != other.FpsLimit) return false;
    if (IsVariableResolutionEnabled != other.IsVariableResolutionEnabled) return false;
    if (IsDynamicRefreshRateEnabled != other.IsDynamicRefreshRateEnabled) return false;
    if (TdpLimit != other.TdpLimit) return false;
    if (CpuGovernor != other.CpuGovernor) return false;
    if (CpuGovernorManualMhz != other.CpuGovernorManualMhz) return false;
    if (ScalingFilter != other.ScalingFilter) return false;
    if (FsrSharpness != other.FsrSharpness) return false;
    if (IsFpsLimitEnabled != other.IsFpsLimitEnabled) return false;
    if (IsTdpLimitEnabled != other.IsTdpLimitEnabled) return false;
    if (IsLowLatencyModeEnabled != other.IsLowLatencyModeEnabled) return false;
    if (DisplayRefreshManualHz != other.DisplayRefreshManualHz) return false;
    if (IsGamePerfProfileEnabled != other.IsGamePerfProfileEnabled) return false;
    if (GpuPerformanceLevel != other.GpuPerformanceLevel) return false;
    if (NisSharpness != other.NisSharpness) return false;
    if (DisplayExternalRefreshManualHz != other.DisplayExternalRefreshManualHz) return false;
    if (FpsLimitExternal != other.FpsLimitExternal) return false;
    if (IsTearingEnabled != other.IsTearingEnabled) return false;
    if (IsVrrEnabled != other.IsVrrEnabled) return false;
    if (IsCompositeDebugEnabled != other.IsCompositeDebugEnabled) return false;
    if (ForceComposite != other.ForceComposite) return false;
    if (UseDynamicRefreshRateInSteam != other.UseDynamicRefreshRateInSteam) return false;
    if (SplitScalingFilter != other.SplitScalingFilter) return false;
    if (SplitScalingScaler != other.SplitScalingScaler) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGpuPerformanceManualMhz) hash ^= GpuPerformanceManualMhz.GetHashCode();
    if (HasFpsLimit) hash ^= FpsLimit.GetHashCode();
    if (HasIsVariableResolutionEnabled) hash ^= IsVariableResolutionEnabled.GetHashCode();
    if (HasIsDynamicRefreshRateEnabled) hash ^= IsDynamicRefreshRateEnabled.GetHashCode();
    if (HasTdpLimit) hash ^= TdpLimit.GetHashCode();
    if (HasCpuGovernor) hash ^= CpuGovernor.GetHashCode();
    if (HasCpuGovernorManualMhz) hash ^= CpuGovernorManualMhz.GetHashCode();
    if (HasScalingFilter) hash ^= ScalingFilter.GetHashCode();
    if (HasFsrSharpness) hash ^= FsrSharpness.GetHashCode();
    if (HasIsFpsLimitEnabled) hash ^= IsFpsLimitEnabled.GetHashCode();
    if (HasIsTdpLimitEnabled) hash ^= IsTdpLimitEnabled.GetHashCode();
    if (HasIsLowLatencyModeEnabled) hash ^= IsLowLatencyModeEnabled.GetHashCode();
    if (HasDisplayRefreshManualHz) hash ^= DisplayRefreshManualHz.GetHashCode();
    if (HasIsGamePerfProfileEnabled) hash ^= IsGamePerfProfileEnabled.GetHashCode();
    if (HasGpuPerformanceLevel) hash ^= GpuPerformanceLevel.GetHashCode();
    if (HasNisSharpness) hash ^= NisSharpness.GetHashCode();
    if (HasDisplayExternalRefreshManualHz) hash ^= DisplayExternalRefreshManualHz.GetHashCode();
    if (HasFpsLimitExternal) hash ^= FpsLimitExternal.GetHashCode();
    if (HasIsTearingEnabled) hash ^= IsTearingEnabled.GetHashCode();
    if (HasIsVrrEnabled) hash ^= IsVrrEnabled.GetHashCode();
    if (HasIsCompositeDebugEnabled) hash ^= IsCompositeDebugEnabled.GetHashCode();
    if (HasForceComposite) hash ^= ForceComposite.GetHashCode();
    if (HasUseDynamicRefreshRateInSteam) hash ^= UseDynamicRefreshRateInSteam.GetHashCode();
    if (HasSplitScalingFilter) hash ^= SplitScalingFilter.GetHashCode();
    if (HasSplitScalingScaler) hash ^= SplitScalingScaler.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGpuPerformanceManualMhz) {
      output.WriteRawTag(8);
      output.WriteInt32(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      output.WriteRawTag(16);
      output.WriteInt32(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(IsVariableResolutionEnabled);
    }
    if (HasIsDynamicRefreshRateEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDynamicRefreshRateEnabled);
    }
    if (HasTdpLimit) {
      output.WriteRawTag(40);
      output.WriteInt32(TdpLimit);
    }
    if (HasCpuGovernor) {
      output.WriteRawTag(48);
      output.WriteEnum((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      output.WriteRawTag(56);
      output.WriteInt32(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      output.WriteRawTag(64);
      output.WriteInt32(ScalingFilter);
    }
    if (HasFsrSharpness) {
      output.WriteRawTag(72);
      output.WriteInt32(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(IsFpsLimitEnabled);
    }
    if (HasIsTdpLimitEnabled) {
      output.WriteRawTag(88);
      output.WriteBool(IsTdpLimitEnabled);
    }
    if (HasIsLowLatencyModeEnabled) {
      output.WriteRawTag(96);
      output.WriteBool(IsLowLatencyModeEnabled);
    }
    if (HasDisplayRefreshManualHz) {
      output.WriteRawTag(104);
      output.WriteInt32(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      output.WriteRawTag(112);
      output.WriteBool(IsGamePerfProfileEnabled);
    }
    if (HasGpuPerformanceLevel) {
      output.WriteRawTag(120);
      output.WriteEnum((int) GpuPerformanceLevel);
    }
    if (HasNisSharpness) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(NisSharpness);
    }
    if (HasDisplayExternalRefreshManualHz) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(DisplayExternalRefreshManualHz);
    }
    if (HasFpsLimitExternal) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(FpsLimitExternal);
    }
    if (HasIsTearingEnabled) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsTearingEnabled);
    }
    if (HasIsVrrEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsVrrEnabled);
    }
    if (HasIsCompositeDebugEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsCompositeDebugEnabled);
    }
    if (HasForceComposite) {
      output.WriteRawTag(176, 1);
      output.WriteBool(ForceComposite);
    }
    if (HasUseDynamicRefreshRateInSteam) {
      output.WriteRawTag(184, 1);
      output.WriteBool(UseDynamicRefreshRateInSteam);
    }
    if (HasSplitScalingFilter) {
      output.WriteRawTag(192, 1);
      output.WriteEnum((int) SplitScalingFilter);
    }
    if (HasSplitScalingScaler) {
      output.WriteRawTag(200, 1);
      output.WriteEnum((int) SplitScalingScaler);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGpuPerformanceManualMhz) {
      output.WriteRawTag(8);
      output.WriteInt32(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      output.WriteRawTag(16);
      output.WriteInt32(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(IsVariableResolutionEnabled);
    }
    if (HasIsDynamicRefreshRateEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(IsDynamicRefreshRateEnabled);
    }
    if (HasTdpLimit) {
      output.WriteRawTag(40);
      output.WriteInt32(TdpLimit);
    }
    if (HasCpuGovernor) {
      output.WriteRawTag(48);
      output.WriteEnum((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      output.WriteRawTag(56);
      output.WriteInt32(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      output.WriteRawTag(64);
      output.WriteInt32(ScalingFilter);
    }
    if (HasFsrSharpness) {
      output.WriteRawTag(72);
      output.WriteInt32(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(IsFpsLimitEnabled);
    }
    if (HasIsTdpLimitEnabled) {
      output.WriteRawTag(88);
      output.WriteBool(IsTdpLimitEnabled);
    }
    if (HasIsLowLatencyModeEnabled) {
      output.WriteRawTag(96);
      output.WriteBool(IsLowLatencyModeEnabled);
    }
    if (HasDisplayRefreshManualHz) {
      output.WriteRawTag(104);
      output.WriteInt32(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      output.WriteRawTag(112);
      output.WriteBool(IsGamePerfProfileEnabled);
    }
    if (HasGpuPerformanceLevel) {
      output.WriteRawTag(120);
      output.WriteEnum((int) GpuPerformanceLevel);
    }
    if (HasNisSharpness) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(NisSharpness);
    }
    if (HasDisplayExternalRefreshManualHz) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(DisplayExternalRefreshManualHz);
    }
    if (HasFpsLimitExternal) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(FpsLimitExternal);
    }
    if (HasIsTearingEnabled) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsTearingEnabled);
    }
    if (HasIsVrrEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsVrrEnabled);
    }
    if (HasIsCompositeDebugEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsCompositeDebugEnabled);
    }
    if (HasForceComposite) {
      output.WriteRawTag(176, 1);
      output.WriteBool(ForceComposite);
    }
    if (HasUseDynamicRefreshRateInSteam) {
      output.WriteRawTag(184, 1);
      output.WriteBool(UseDynamicRefreshRateInSteam);
    }
    if (HasSplitScalingFilter) {
      output.WriteRawTag(192, 1);
      output.WriteEnum((int) SplitScalingFilter);
    }
    if (HasSplitScalingScaler) {
      output.WriteRawTag(200, 1);
      output.WriteEnum((int) SplitScalingScaler);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasGpuPerformanceManualMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      size += 1 + 1;
    }
    if (HasIsDynamicRefreshRateEnabled) {
      size += 1 + 1;
    }
    if (HasTdpLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TdpLimit);
    }
    if (HasCpuGovernor) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScalingFilter);
    }
    if (HasFsrSharpness) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      size += 1 + 1;
    }
    if (HasIsTdpLimitEnabled) {
      size += 1 + 1;
    }
    if (HasIsLowLatencyModeEnabled) {
      size += 1 + 1;
    }
    if (HasDisplayRefreshManualHz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      size += 1 + 1;
    }
    if (HasGpuPerformanceLevel) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GpuPerformanceLevel);
    }
    if (HasNisSharpness) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NisSharpness);
    }
    if (HasDisplayExternalRefreshManualHz) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayExternalRefreshManualHz);
    }
    if (HasFpsLimitExternal) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(FpsLimitExternal);
    }
    if (HasIsTearingEnabled) {
      size += 2 + 1;
    }
    if (HasIsVrrEnabled) {
      size += 2 + 1;
    }
    if (HasIsCompositeDebugEnabled) {
      size += 2 + 1;
    }
    if (HasForceComposite) {
      size += 2 + 1;
    }
    if (HasUseDynamicRefreshRateInSteam) {
      size += 2 + 1;
    }
    if (HasSplitScalingFilter) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SplitScalingFilter);
    }
    if (HasSplitScalingScaler) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SplitScalingScaler);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfSettingsPerApp other) {
    if (other == null) {
      return;
    }
    if (other.HasGpuPerformanceManualMhz) {
      GpuPerformanceManualMhz = other.GpuPerformanceManualMhz;
    }
    if (other.HasFpsLimit) {
      FpsLimit = other.FpsLimit;
    }
    if (other.HasIsVariableResolutionEnabled) {
      IsVariableResolutionEnabled = other.IsVariableResolutionEnabled;
    }
    if (other.HasIsDynamicRefreshRateEnabled) {
      IsDynamicRefreshRateEnabled = other.IsDynamicRefreshRateEnabled;
    }
    if (other.HasTdpLimit) {
      TdpLimit = other.TdpLimit;
    }
    if (other.HasCpuGovernor) {
      CpuGovernor = other.CpuGovernor;
    }
    if (other.HasCpuGovernorManualMhz) {
      CpuGovernorManualMhz = other.CpuGovernorManualMhz;
    }
    if (other.HasScalingFilter) {
      ScalingFilter = other.ScalingFilter;
    }
    if (other.HasFsrSharpness) {
      FsrSharpness = other.FsrSharpness;
    }
    if (other.HasIsFpsLimitEnabled) {
      IsFpsLimitEnabled = other.IsFpsLimitEnabled;
    }
    if (other.HasIsTdpLimitEnabled) {
      IsTdpLimitEnabled = other.IsTdpLimitEnabled;
    }
    if (other.HasIsLowLatencyModeEnabled) {
      IsLowLatencyModeEnabled = other.IsLowLatencyModeEnabled;
    }
    if (other.HasDisplayRefreshManualHz) {
      DisplayRefreshManualHz = other.DisplayRefreshManualHz;
    }
    if (other.HasIsGamePerfProfileEnabled) {
      IsGamePerfProfileEnabled = other.IsGamePerfProfileEnabled;
    }
    if (other.HasGpuPerformanceLevel) {
      GpuPerformanceLevel = other.GpuPerformanceLevel;
    }
    if (other.HasNisSharpness) {
      NisSharpness = other.NisSharpness;
    }
    if (other.HasDisplayExternalRefreshManualHz) {
      DisplayExternalRefreshManualHz = other.DisplayExternalRefreshManualHz;
    }
    if (other.HasFpsLimitExternal) {
      FpsLimitExternal = other.FpsLimitExternal;
    }
    if (other.HasIsTearingEnabled) {
      IsTearingEnabled = other.IsTearingEnabled;
    }
    if (other.HasIsVrrEnabled) {
      IsVrrEnabled = other.IsVrrEnabled;
    }
    if (other.HasIsCompositeDebugEnabled) {
      IsCompositeDebugEnabled = other.IsCompositeDebugEnabled;
    }
    if (other.HasForceComposite) {
      ForceComposite = other.ForceComposite;
    }
    if (other.HasUseDynamicRefreshRateInSteam) {
      UseDynamicRefreshRateInSteam = other.UseDynamicRefreshRateInSteam;
    }
    if (other.HasSplitScalingFilter) {
      SplitScalingFilter = other.SplitScalingFilter;
    }
    if (other.HasSplitScalingScaler) {
      SplitScalingScaler = other.SplitScalingScaler;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GpuPerformanceManualMhz = input.ReadInt32();
          break;
        }
        case 16: {
          FpsLimit = input.ReadInt32();
          break;
        }
        case 24: {
          IsVariableResolutionEnabled = input.ReadBool();
          break;
        }
        case 32: {
          IsDynamicRefreshRateEnabled = input.ReadBool();
          break;
        }
        case 40: {
          TdpLimit = input.ReadInt32();
          break;
        }
        case 48: {
          CpuGovernor = (global::ECPUGovernor) input.ReadEnum();
          break;
        }
        case 56: {
          CpuGovernorManualMhz = input.ReadInt32();
          break;
        }
        case 64: {
          ScalingFilter = input.ReadInt32();
          break;
        }
        case 72: {
          FsrSharpness = input.ReadInt32();
          break;
        }
        case 80: {
          IsFpsLimitEnabled = input.ReadBool();
          break;
        }
        case 88: {
          IsTdpLimitEnabled = input.ReadBool();
          break;
        }
        case 96: {
          IsLowLatencyModeEnabled = input.ReadBool();
          break;
        }
        case 104: {
          DisplayRefreshManualHz = input.ReadInt32();
          break;
        }
        case 112: {
          IsGamePerfProfileEnabled = input.ReadBool();
          break;
        }
        case 120: {
          GpuPerformanceLevel = (global::EGPUPerformanceLevel) input.ReadEnum();
          break;
        }
        case 128: {
          NisSharpness = input.ReadInt32();
          break;
        }
        case 136: {
          DisplayExternalRefreshManualHz = input.ReadInt32();
          break;
        }
        case 144: {
          FpsLimitExternal = input.ReadInt32();
          break;
        }
        case 152: {
          IsTearingEnabled = input.ReadBool();
          break;
        }
        case 160: {
          IsVrrEnabled = input.ReadBool();
          break;
        }
        case 168: {
          IsCompositeDebugEnabled = input.ReadBool();
          break;
        }
        case 176: {
          ForceComposite = input.ReadBool();
          break;
        }
        case 184: {
          UseDynamicRefreshRateInSteam = input.ReadBool();
          break;
        }
        case 192: {
          SplitScalingFilter = (global::ESplitScalingFilter) input.ReadEnum();
          break;
        }
        case 200: {
          SplitScalingScaler = (global::ESplitScalingScaler) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          GpuPerformanceManualMhz = input.ReadInt32();
          break;
        }
        case 16: {
          FpsLimit = input.ReadInt32();
          break;
        }
        case 24: {
          IsVariableResolutionEnabled = input.ReadBool();
          break;
        }
        case 32: {
          IsDynamicRefreshRateEnabled = input.ReadBool();
          break;
        }
        case 40: {
          TdpLimit = input.ReadInt32();
          break;
        }
        case 48: {
          CpuGovernor = (global::ECPUGovernor) input.ReadEnum();
          break;
        }
        case 56: {
          CpuGovernorManualMhz = input.ReadInt32();
          break;
        }
        case 64: {
          ScalingFilter = input.ReadInt32();
          break;
        }
        case 72: {
          FsrSharpness = input.ReadInt32();
          break;
        }
        case 80: {
          IsFpsLimitEnabled = input.ReadBool();
          break;
        }
        case 88: {
          IsTdpLimitEnabled = input.ReadBool();
          break;
        }
        case 96: {
          IsLowLatencyModeEnabled = input.ReadBool();
          break;
        }
        case 104: {
          DisplayRefreshManualHz = input.ReadInt32();
          break;
        }
        case 112: {
          IsGamePerfProfileEnabled = input.ReadBool();
          break;
        }
        case 120: {
          GpuPerformanceLevel = (global::EGPUPerformanceLevel) input.ReadEnum();
          break;
        }
        case 128: {
          NisSharpness = input.ReadInt32();
          break;
        }
        case 136: {
          DisplayExternalRefreshManualHz = input.ReadInt32();
          break;
        }
        case 144: {
          FpsLimitExternal = input.ReadInt32();
          break;
        }
        case 152: {
          IsTearingEnabled = input.ReadBool();
          break;
        }
        case 160: {
          IsVrrEnabled = input.ReadBool();
          break;
        }
        case 168: {
          IsCompositeDebugEnabled = input.ReadBool();
          break;
        }
        case 176: {
          ForceComposite = input.ReadBool();
          break;
        }
        case 184: {
          UseDynamicRefreshRateInSteam = input.ReadBool();
          break;
        }
        case 192: {
          SplitScalingFilter = (global::ESplitScalingFilter) input.ReadEnum();
          break;
        }
        case 200: {
          SplitScalingScaler = (global::ESplitScalingScaler) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfSettings : pb::IMessage<CMsgSystemPerfSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfSettings> _parser = new pb::MessageParser<CMsgSystemPerfSettings>(() => new CMsgSystemPerfSettings());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettings(CMsgSystemPerfSettings other) : this() {
    global_ = other.global_ != null ? other.global_.Clone() : null;
    perApp_ = other.perApp_ != null ? other.perApp_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettings Clone() {
    return new CMsgSystemPerfSettings(this);
  }

  /// <summary>Field number for the "global" field.</summary>
  public const int GlobalFieldNumber = 1;
  private global::CMsgSystemPerfSettingsGlobal global_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemPerfSettingsGlobal Global {
    get { return global_; }
    set {
      global_ = value;
    }
  }

  /// <summary>Field number for the "per_app" field.</summary>
  public const int PerAppFieldNumber = 2;
  private global::CMsgSystemPerfSettingsPerApp perApp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemPerfSettingsPerApp PerApp {
    get { return perApp_; }
    set {
      perApp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Global, other.Global)) return false;
    if (!object.Equals(PerApp, other.PerApp)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (global_ != null) hash ^= Global.GetHashCode();
    if (perApp_ != null) hash ^= PerApp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (global_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Global);
    }
    if (perApp_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PerApp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (global_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Global);
    }
    if (perApp_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PerApp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (global_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Global);
    }
    if (perApp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerApp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfSettings other) {
    if (other == null) {
      return;
    }
    if (other.global_ != null) {
      if (global_ == null) {
        Global = new global::CMsgSystemPerfSettingsGlobal();
      }
      Global.MergeFrom(other.Global);
    }
    if (other.perApp_ != null) {
      if (perApp_ == null) {
        PerApp = new global::CMsgSystemPerfSettingsPerApp();
      }
      PerApp.MergeFrom(other.PerApp);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (global_ == null) {
            Global = new global::CMsgSystemPerfSettingsGlobal();
          }
          input.ReadMessage(Global);
          break;
        }
        case 18: {
          if (perApp_ == null) {
            PerApp = new global::CMsgSystemPerfSettingsPerApp();
          }
          input.ReadMessage(PerApp);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (global_ == null) {
            Global = new global::CMsgSystemPerfSettingsGlobal();
          }
          input.ReadMessage(Global);
          break;
        }
        case 18: {
          if (perApp_ == null) {
            PerApp = new global::CMsgSystemPerfSettingsPerApp();
          }
          input.ReadMessage(PerApp);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfSettingsV1 : pb::IMessage<CMsgSystemPerfSettingsV1>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfSettingsV1> _parser = new pb::MessageParser<CMsgSystemPerfSettingsV1>(() => new CMsgSystemPerfSettingsV1());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfSettingsV1> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsV1() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsV1(CMsgSystemPerfSettingsV1 other) : this() {
    _hasBits0 = other._hasBits0;
    diagnosticUpdateRate_ = other.diagnosticUpdateRate_;
    systemTraceServiceState_ = other.systemTraceServiceState_;
    graphicsProfilingServiceState_ = other.graphicsProfilingServiceState_;
    perfOverlayServiceState_ = other.perfOverlayServiceState_;
    perfOverlayLevel_ = other.perfOverlayLevel_;
    gpuPerformanceLevel_ = other.gpuPerformanceLevel_;
    gpuPerformanceManualMhz_ = other.gpuPerformanceManualMhz_;
    fpsLimit_ = other.fpsLimit_;
    isVariableResolutionEnabled_ = other.isVariableResolutionEnabled_;
    isDynamicRefreshRateEnabled_ = other.isDynamicRefreshRateEnabled_;
    tdpLimit_ = other.tdpLimit_;
    cpuGovernor_ = other.cpuGovernor_;
    cpuGovernorManualMhz_ = other.cpuGovernorManualMhz_;
    scalingFilter_ = other.scalingFilter_;
    fsrSharpness_ = other.fsrSharpness_;
    isFpsLimitEnabled_ = other.isFpsLimitEnabled_;
    isTdpLimitEnabled_ = other.isTdpLimitEnabled_;
    isShowPerfOverlayOverSteamEnabled_ = other.isShowPerfOverlayOverSteamEnabled_;
    isLowLatencyModeEnabled_ = other.isLowLatencyModeEnabled_;
    displayRefreshManualHz_ = other.displayRefreshManualHz_;
    isGamePerfProfileEnabled_ = other.isGamePerfProfileEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfSettingsV1 Clone() {
    return new CMsgSystemPerfSettingsV1(this);
  }

  /// <summary>Field number for the "diagnostic_update_rate" field.</summary>
  public const int DiagnosticUpdateRateFieldNumber = 1;
  private readonly static float DiagnosticUpdateRateDefaultValue = 0F;

  private float diagnosticUpdateRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DiagnosticUpdateRate {
    get { if ((_hasBits0 & 1) != 0) { return diagnosticUpdateRate_; } else { return DiagnosticUpdateRateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      diagnosticUpdateRate_ = value;
    }
  }
  /// <summary>Gets whether the "diagnostic_update_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDiagnosticUpdateRate {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "diagnostic_update_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDiagnosticUpdateRate() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "system_trace_service_state" field.</summary>
  public const int SystemTraceServiceStateFieldNumber = 2;
  private readonly static global::ESystemServiceState SystemTraceServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState systemTraceServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState SystemTraceServiceState {
    get { if ((_hasBits0 & 2) != 0) { return systemTraceServiceState_; } else { return SystemTraceServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      systemTraceServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "system_trace_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSystemTraceServiceState {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "system_trace_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSystemTraceServiceState() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "graphics_profiling_service_state" field.</summary>
  public const int GraphicsProfilingServiceStateFieldNumber = 3;
  private readonly static global::ESystemServiceState GraphicsProfilingServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState graphicsProfilingServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState GraphicsProfilingServiceState {
    get { if ((_hasBits0 & 4) != 0) { return graphicsProfilingServiceState_; } else { return GraphicsProfilingServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 4;
      graphicsProfilingServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "graphics_profiling_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGraphicsProfilingServiceState {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "graphics_profiling_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGraphicsProfilingServiceState() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "perf_overlay_service_state" field.</summary>
  public const int PerfOverlayServiceStateFieldNumber = 4;
  private readonly static global::ESystemServiceState PerfOverlayServiceStateDefaultValue = global::ESystemServiceState.KEsystemServiceStateUnavailable;

  private global::ESystemServiceState perfOverlayServiceState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemServiceState PerfOverlayServiceState {
    get { if ((_hasBits0 & 8) != 0) { return perfOverlayServiceState_; } else { return PerfOverlayServiceStateDefaultValue; } }
    set {
      _hasBits0 |= 8;
      perfOverlayServiceState_ = value;
    }
  }
  /// <summary>Gets whether the "perf_overlay_service_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPerfOverlayServiceState {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "perf_overlay_service_state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPerfOverlayServiceState() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "perf_overlay_level" field.</summary>
  public const int PerfOverlayLevelFieldNumber = 5;
  private readonly static global::EGraphicsPerfOverlayLevel PerfOverlayLevelDefaultValue = global::EGraphicsPerfOverlayLevel.KEgraphicsPerfOverlayLevelHidden;

  private global::EGraphicsPerfOverlayLevel perfOverlayLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EGraphicsPerfOverlayLevel PerfOverlayLevel {
    get { if ((_hasBits0 & 16) != 0) { return perfOverlayLevel_; } else { return PerfOverlayLevelDefaultValue; } }
    set {
      _hasBits0 |= 16;
      perfOverlayLevel_ = value;
    }
  }
  /// <summary>Gets whether the "perf_overlay_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPerfOverlayLevel {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "perf_overlay_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPerfOverlayLevel() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "gpu_performance_level" field.</summary>
  public const int GpuPerformanceLevelFieldNumber = 6;
  private readonly static global::EGPUPerformanceLevel GpuPerformanceLevelDefaultValue = global::EGPUPerformanceLevel.KEgpuperformanceLevelInvalid;

  private global::EGPUPerformanceLevel gpuPerformanceLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EGPUPerformanceLevel GpuPerformanceLevel {
    get { if ((_hasBits0 & 32) != 0) { return gpuPerformanceLevel_; } else { return GpuPerformanceLevelDefaultValue; } }
    set {
      _hasBits0 |= 32;
      gpuPerformanceLevel_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceLevel {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceLevel() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "gpu_performance_manual_mhz" field.</summary>
  public const int GpuPerformanceManualMhzFieldNumber = 7;
  private readonly static int GpuPerformanceManualMhzDefaultValue = 0;

  private int gpuPerformanceManualMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GpuPerformanceManualMhz {
    get { if ((_hasBits0 & 64) != 0) { return gpuPerformanceManualMhz_; } else { return GpuPerformanceManualMhzDefaultValue; } }
    set {
      _hasBits0 |= 64;
      gpuPerformanceManualMhz_ = value;
    }
  }
  /// <summary>Gets whether the "gpu_performance_manual_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGpuPerformanceManualMhz {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "gpu_performance_manual_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGpuPerformanceManualMhz() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "fps_limit" field.</summary>
  public const int FpsLimitFieldNumber = 8;
  private readonly static int FpsLimitDefaultValue = 0;

  private int fpsLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FpsLimit {
    get { if ((_hasBits0 & 128) != 0) { return fpsLimit_; } else { return FpsLimitDefaultValue; } }
    set {
      _hasBits0 |= 128;
      fpsLimit_ = value;
    }
  }
  /// <summary>Gets whether the "fps_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFpsLimit {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "fps_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFpsLimit() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "is_variable_resolution_enabled" field.</summary>
  public const int IsVariableResolutionEnabledFieldNumber = 9;
  private readonly static bool IsVariableResolutionEnabledDefaultValue = false;

  private bool isVariableResolutionEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVariableResolutionEnabled {
    get { if ((_hasBits0 & 256) != 0) { return isVariableResolutionEnabled_; } else { return IsVariableResolutionEnabledDefaultValue; } }
    set {
      _hasBits0 |= 256;
      isVariableResolutionEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_variable_resolution_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVariableResolutionEnabled {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "is_variable_resolution_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVariableResolutionEnabled() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "is_dynamic_refresh_rate_enabled" field.</summary>
  public const int IsDynamicRefreshRateEnabledFieldNumber = 10;
  private readonly static bool IsDynamicRefreshRateEnabledDefaultValue = false;

  private bool isDynamicRefreshRateEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDynamicRefreshRateEnabled {
    get { if ((_hasBits0 & 512) != 0) { return isDynamicRefreshRateEnabled_; } else { return IsDynamicRefreshRateEnabledDefaultValue; } }
    set {
      _hasBits0 |= 512;
      isDynamicRefreshRateEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_dynamic_refresh_rate_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDynamicRefreshRateEnabled {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "is_dynamic_refresh_rate_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDynamicRefreshRateEnabled() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "tdp_limit" field.</summary>
  public const int TdpLimitFieldNumber = 11;
  private readonly static int TdpLimitDefaultValue = 0;

  private int tdpLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TdpLimit {
    get { if ((_hasBits0 & 1024) != 0) { return tdpLimit_; } else { return TdpLimitDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      tdpLimit_ = value;
    }
  }
  /// <summary>Gets whether the "tdp_limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTdpLimit {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "tdp_limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTdpLimit() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "cpu_governor" field.</summary>
  public const int CpuGovernorFieldNumber = 12;
  private readonly static global::ECPUGovernor CpuGovernorDefaultValue = global::ECPUGovernor.KEcpugovernorInvalid;

  private global::ECPUGovernor cpuGovernor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ECPUGovernor CpuGovernor {
    get { if ((_hasBits0 & 2048) != 0) { return cpuGovernor_; } else { return CpuGovernorDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      cpuGovernor_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernor {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernor() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "cpu_governor_manual_mhz" field.</summary>
  public const int CpuGovernorManualMhzFieldNumber = 13;
  private readonly static int CpuGovernorManualMhzDefaultValue = 0;

  private int cpuGovernorManualMhz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CpuGovernorManualMhz {
    get { if ((_hasBits0 & 4096) != 0) { return cpuGovernorManualMhz_; } else { return CpuGovernorManualMhzDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      cpuGovernorManualMhz_ = value;
    }
  }
  /// <summary>Gets whether the "cpu_governor_manual_mhz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCpuGovernorManualMhz {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "cpu_governor_manual_mhz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCpuGovernorManualMhz() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "scaling_filter" field.</summary>
  public const int ScalingFilterFieldNumber = 14;
  private readonly static int ScalingFilterDefaultValue = 0;

  private int scalingFilter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ScalingFilter {
    get { if ((_hasBits0 & 8192) != 0) { return scalingFilter_; } else { return ScalingFilterDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      scalingFilter_ = value;
    }
  }
  /// <summary>Gets whether the "scaling_filter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScalingFilter {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "scaling_filter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScalingFilter() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "fsr_sharpness" field.</summary>
  public const int FsrSharpnessFieldNumber = 15;
  private readonly static int FsrSharpnessDefaultValue = 0;

  private int fsrSharpness_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FsrSharpness {
    get { if ((_hasBits0 & 16384) != 0) { return fsrSharpness_; } else { return FsrSharpnessDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      fsrSharpness_ = value;
    }
  }
  /// <summary>Gets whether the "fsr_sharpness" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFsrSharpness {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "fsr_sharpness" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFsrSharpness() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "is_fps_limit_enabled" field.</summary>
  public const int IsFpsLimitEnabledFieldNumber = 16;
  private readonly static bool IsFpsLimitEnabledDefaultValue = false;

  private bool isFpsLimitEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFpsLimitEnabled {
    get { if ((_hasBits0 & 32768) != 0) { return isFpsLimitEnabled_; } else { return IsFpsLimitEnabledDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      isFpsLimitEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_fps_limit_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsFpsLimitEnabled {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "is_fps_limit_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsFpsLimitEnabled() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "is_tdp_limit_enabled" field.</summary>
  public const int IsTdpLimitEnabledFieldNumber = 17;
  private readonly static bool IsTdpLimitEnabledDefaultValue = false;

  private bool isTdpLimitEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTdpLimitEnabled {
    get { if ((_hasBits0 & 65536) != 0) { return isTdpLimitEnabled_; } else { return IsTdpLimitEnabledDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      isTdpLimitEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_tdp_limit_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTdpLimitEnabled {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "is_tdp_limit_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTdpLimitEnabled() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "is_show_perf_overlay_over_steam_enabled" field.</summary>
  public const int IsShowPerfOverlayOverSteamEnabledFieldNumber = 18;
  private readonly static bool IsShowPerfOverlayOverSteamEnabledDefaultValue = false;

  private bool isShowPerfOverlayOverSteamEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsShowPerfOverlayOverSteamEnabled {
    get { if ((_hasBits0 & 131072) != 0) { return isShowPerfOverlayOverSteamEnabled_; } else { return IsShowPerfOverlayOverSteamEnabledDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      isShowPerfOverlayOverSteamEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_show_perf_overlay_over_steam_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsShowPerfOverlayOverSteamEnabled {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "is_show_perf_overlay_over_steam_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsShowPerfOverlayOverSteamEnabled() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "is_low_latency_mode_enabled" field.</summary>
  public const int IsLowLatencyModeEnabledFieldNumber = 19;
  private readonly static bool IsLowLatencyModeEnabledDefaultValue = false;

  private bool isLowLatencyModeEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLowLatencyModeEnabled {
    get { if ((_hasBits0 & 262144) != 0) { return isLowLatencyModeEnabled_; } else { return IsLowLatencyModeEnabledDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      isLowLatencyModeEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_low_latency_mode_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsLowLatencyModeEnabled {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "is_low_latency_mode_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsLowLatencyModeEnabled() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "display_refresh_manual_hz" field.</summary>
  public const int DisplayRefreshManualHzFieldNumber = 20;
  private readonly static int DisplayRefreshManualHzDefaultValue = 0;

  private int displayRefreshManualHz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayRefreshManualHz {
    get { if ((_hasBits0 & 524288) != 0) { return displayRefreshManualHz_; } else { return DisplayRefreshManualHzDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      displayRefreshManualHz_ = value;
    }
  }
  /// <summary>Gets whether the "display_refresh_manual_hz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayRefreshManualHz {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "display_refresh_manual_hz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayRefreshManualHz() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "is_game_perf_profile_enabled" field.</summary>
  public const int IsGamePerfProfileEnabledFieldNumber = 21;
  private readonly static bool IsGamePerfProfileEnabledDefaultValue = false;

  private bool isGamePerfProfileEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGamePerfProfileEnabled {
    get { if ((_hasBits0 & 1048576) != 0) { return isGamePerfProfileEnabled_; } else { return IsGamePerfProfileEnabledDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      isGamePerfProfileEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_game_perf_profile_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGamePerfProfileEnabled {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "is_game_perf_profile_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGamePerfProfileEnabled() {
    _hasBits0 &= ~1048576;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfSettingsV1);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfSettingsV1 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DiagnosticUpdateRate, other.DiagnosticUpdateRate)) return false;
    if (SystemTraceServiceState != other.SystemTraceServiceState) return false;
    if (GraphicsProfilingServiceState != other.GraphicsProfilingServiceState) return false;
    if (PerfOverlayServiceState != other.PerfOverlayServiceState) return false;
    if (PerfOverlayLevel != other.PerfOverlayLevel) return false;
    if (GpuPerformanceLevel != other.GpuPerformanceLevel) return false;
    if (GpuPerformanceManualMhz != other.GpuPerformanceManualMhz) return false;
    if (FpsLimit != other.FpsLimit) return false;
    if (IsVariableResolutionEnabled != other.IsVariableResolutionEnabled) return false;
    if (IsDynamicRefreshRateEnabled != other.IsDynamicRefreshRateEnabled) return false;
    if (TdpLimit != other.TdpLimit) return false;
    if (CpuGovernor != other.CpuGovernor) return false;
    if (CpuGovernorManualMhz != other.CpuGovernorManualMhz) return false;
    if (ScalingFilter != other.ScalingFilter) return false;
    if (FsrSharpness != other.FsrSharpness) return false;
    if (IsFpsLimitEnabled != other.IsFpsLimitEnabled) return false;
    if (IsTdpLimitEnabled != other.IsTdpLimitEnabled) return false;
    if (IsShowPerfOverlayOverSteamEnabled != other.IsShowPerfOverlayOverSteamEnabled) return false;
    if (IsLowLatencyModeEnabled != other.IsLowLatencyModeEnabled) return false;
    if (DisplayRefreshManualHz != other.DisplayRefreshManualHz) return false;
    if (IsGamePerfProfileEnabled != other.IsGamePerfProfileEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDiagnosticUpdateRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DiagnosticUpdateRate);
    if (HasSystemTraceServiceState) hash ^= SystemTraceServiceState.GetHashCode();
    if (HasGraphicsProfilingServiceState) hash ^= GraphicsProfilingServiceState.GetHashCode();
    if (HasPerfOverlayServiceState) hash ^= PerfOverlayServiceState.GetHashCode();
    if (HasPerfOverlayLevel) hash ^= PerfOverlayLevel.GetHashCode();
    if (HasGpuPerformanceLevel) hash ^= GpuPerformanceLevel.GetHashCode();
    if (HasGpuPerformanceManualMhz) hash ^= GpuPerformanceManualMhz.GetHashCode();
    if (HasFpsLimit) hash ^= FpsLimit.GetHashCode();
    if (HasIsVariableResolutionEnabled) hash ^= IsVariableResolutionEnabled.GetHashCode();
    if (HasIsDynamicRefreshRateEnabled) hash ^= IsDynamicRefreshRateEnabled.GetHashCode();
    if (HasTdpLimit) hash ^= TdpLimit.GetHashCode();
    if (HasCpuGovernor) hash ^= CpuGovernor.GetHashCode();
    if (HasCpuGovernorManualMhz) hash ^= CpuGovernorManualMhz.GetHashCode();
    if (HasScalingFilter) hash ^= ScalingFilter.GetHashCode();
    if (HasFsrSharpness) hash ^= FsrSharpness.GetHashCode();
    if (HasIsFpsLimitEnabled) hash ^= IsFpsLimitEnabled.GetHashCode();
    if (HasIsTdpLimitEnabled) hash ^= IsTdpLimitEnabled.GetHashCode();
    if (HasIsShowPerfOverlayOverSteamEnabled) hash ^= IsShowPerfOverlayOverSteamEnabled.GetHashCode();
    if (HasIsLowLatencyModeEnabled) hash ^= IsLowLatencyModeEnabled.GetHashCode();
    if (HasDisplayRefreshManualHz) hash ^= DisplayRefreshManualHz.GetHashCode();
    if (HasIsGamePerfProfileEnabled) hash ^= IsGamePerfProfileEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDiagnosticUpdateRate) {
      output.WriteRawTag(13);
      output.WriteFloat(DiagnosticUpdateRate);
    }
    if (HasSystemTraceServiceState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      output.WriteRawTag(40);
      output.WriteEnum((int) PerfOverlayLevel);
    }
    if (HasGpuPerformanceLevel) {
      output.WriteRawTag(48);
      output.WriteEnum((int) GpuPerformanceLevel);
    }
    if (HasGpuPerformanceManualMhz) {
      output.WriteRawTag(56);
      output.WriteInt32(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      output.WriteRawTag(64);
      output.WriteInt32(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      output.WriteRawTag(72);
      output.WriteBool(IsVariableResolutionEnabled);
    }
    if (HasIsDynamicRefreshRateEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(IsDynamicRefreshRateEnabled);
    }
    if (HasTdpLimit) {
      output.WriteRawTag(88);
      output.WriteInt32(TdpLimit);
    }
    if (HasCpuGovernor) {
      output.WriteRawTag(96);
      output.WriteEnum((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      output.WriteRawTag(104);
      output.WriteInt32(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      output.WriteRawTag(112);
      output.WriteInt32(ScalingFilter);
    }
    if (HasFsrSharpness) {
      output.WriteRawTag(120);
      output.WriteInt32(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsFpsLimitEnabled);
    }
    if (HasIsTdpLimitEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(IsTdpLimitEnabled);
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsShowPerfOverlayOverSteamEnabled);
    }
    if (HasIsLowLatencyModeEnabled) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsLowLatencyModeEnabled);
    }
    if (HasDisplayRefreshManualHz) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsGamePerfProfileEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDiagnosticUpdateRate) {
      output.WriteRawTag(13);
      output.WriteFloat(DiagnosticUpdateRate);
    }
    if (HasSystemTraceServiceState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      output.WriteRawTag(40);
      output.WriteEnum((int) PerfOverlayLevel);
    }
    if (HasGpuPerformanceLevel) {
      output.WriteRawTag(48);
      output.WriteEnum((int) GpuPerformanceLevel);
    }
    if (HasGpuPerformanceManualMhz) {
      output.WriteRawTag(56);
      output.WriteInt32(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      output.WriteRawTag(64);
      output.WriteInt32(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      output.WriteRawTag(72);
      output.WriteBool(IsVariableResolutionEnabled);
    }
    if (HasIsDynamicRefreshRateEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(IsDynamicRefreshRateEnabled);
    }
    if (HasTdpLimit) {
      output.WriteRawTag(88);
      output.WriteInt32(TdpLimit);
    }
    if (HasCpuGovernor) {
      output.WriteRawTag(96);
      output.WriteEnum((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      output.WriteRawTag(104);
      output.WriteInt32(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      output.WriteRawTag(112);
      output.WriteInt32(ScalingFilter);
    }
    if (HasFsrSharpness) {
      output.WriteRawTag(120);
      output.WriteInt32(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsFpsLimitEnabled);
    }
    if (HasIsTdpLimitEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(IsTdpLimitEnabled);
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsShowPerfOverlayOverSteamEnabled);
    }
    if (HasIsLowLatencyModeEnabled) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsLowLatencyModeEnabled);
    }
    if (HasDisplayRefreshManualHz) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsGamePerfProfileEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDiagnosticUpdateRate) {
      size += 1 + 4;
    }
    if (HasSystemTraceServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SystemTraceServiceState);
    }
    if (HasGraphicsProfilingServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GraphicsProfilingServiceState);
    }
    if (HasPerfOverlayServiceState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfOverlayServiceState);
    }
    if (HasPerfOverlayLevel) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerfOverlayLevel);
    }
    if (HasGpuPerformanceLevel) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GpuPerformanceLevel);
    }
    if (HasGpuPerformanceManualMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuPerformanceManualMhz);
    }
    if (HasFpsLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FpsLimit);
    }
    if (HasIsVariableResolutionEnabled) {
      size += 1 + 1;
    }
    if (HasIsDynamicRefreshRateEnabled) {
      size += 1 + 1;
    }
    if (HasTdpLimit) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TdpLimit);
    }
    if (HasCpuGovernor) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CpuGovernor);
    }
    if (HasCpuGovernorManualMhz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuGovernorManualMhz);
    }
    if (HasScalingFilter) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScalingFilter);
    }
    if (HasFsrSharpness) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsrSharpness);
    }
    if (HasIsFpsLimitEnabled) {
      size += 2 + 1;
    }
    if (HasIsTdpLimitEnabled) {
      size += 2 + 1;
    }
    if (HasIsShowPerfOverlayOverSteamEnabled) {
      size += 2 + 1;
    }
    if (HasIsLowLatencyModeEnabled) {
      size += 2 + 1;
    }
    if (HasDisplayRefreshManualHz) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayRefreshManualHz);
    }
    if (HasIsGamePerfProfileEnabled) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfSettingsV1 other) {
    if (other == null) {
      return;
    }
    if (other.HasDiagnosticUpdateRate) {
      DiagnosticUpdateRate = other.DiagnosticUpdateRate;
    }
    if (other.HasSystemTraceServiceState) {
      SystemTraceServiceState = other.SystemTraceServiceState;
    }
    if (other.HasGraphicsProfilingServiceState) {
      GraphicsProfilingServiceState = other.GraphicsProfilingServiceState;
    }
    if (other.HasPerfOverlayServiceState) {
      PerfOverlayServiceState = other.PerfOverlayServiceState;
    }
    if (other.HasPerfOverlayLevel) {
      PerfOverlayLevel = other.PerfOverlayLevel;
    }
    if (other.HasGpuPerformanceLevel) {
      GpuPerformanceLevel = other.GpuPerformanceLevel;
    }
    if (other.HasGpuPerformanceManualMhz) {
      GpuPerformanceManualMhz = other.GpuPerformanceManualMhz;
    }
    if (other.HasFpsLimit) {
      FpsLimit = other.FpsLimit;
    }
    if (other.HasIsVariableResolutionEnabled) {
      IsVariableResolutionEnabled = other.IsVariableResolutionEnabled;
    }
    if (other.HasIsDynamicRefreshRateEnabled) {
      IsDynamicRefreshRateEnabled = other.IsDynamicRefreshRateEnabled;
    }
    if (other.HasTdpLimit) {
      TdpLimit = other.TdpLimit;
    }
    if (other.HasCpuGovernor) {
      CpuGovernor = other.CpuGovernor;
    }
    if (other.HasCpuGovernorManualMhz) {
      CpuGovernorManualMhz = other.CpuGovernorManualMhz;
    }
    if (other.HasScalingFilter) {
      ScalingFilter = other.ScalingFilter;
    }
    if (other.HasFsrSharpness) {
      FsrSharpness = other.FsrSharpness;
    }
    if (other.HasIsFpsLimitEnabled) {
      IsFpsLimitEnabled = other.IsFpsLimitEnabled;
    }
    if (other.HasIsTdpLimitEnabled) {
      IsTdpLimitEnabled = other.IsTdpLimitEnabled;
    }
    if (other.HasIsShowPerfOverlayOverSteamEnabled) {
      IsShowPerfOverlayOverSteamEnabled = other.IsShowPerfOverlayOverSteamEnabled;
    }
    if (other.HasIsLowLatencyModeEnabled) {
      IsLowLatencyModeEnabled = other.IsLowLatencyModeEnabled;
    }
    if (other.HasDisplayRefreshManualHz) {
      DisplayRefreshManualHz = other.DisplayRefreshManualHz;
    }
    if (other.HasIsGamePerfProfileEnabled) {
      IsGamePerfProfileEnabled = other.IsGamePerfProfileEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          DiagnosticUpdateRate = input.ReadFloat();
          break;
        }
        case 16: {
          SystemTraceServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 24: {
          GraphicsProfilingServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 32: {
          PerfOverlayServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 40: {
          PerfOverlayLevel = (global::EGraphicsPerfOverlayLevel) input.ReadEnum();
          break;
        }
        case 48: {
          GpuPerformanceLevel = (global::EGPUPerformanceLevel) input.ReadEnum();
          break;
        }
        case 56: {
          GpuPerformanceManualMhz = input.ReadInt32();
          break;
        }
        case 64: {
          FpsLimit = input.ReadInt32();
          break;
        }
        case 72: {
          IsVariableResolutionEnabled = input.ReadBool();
          break;
        }
        case 80: {
          IsDynamicRefreshRateEnabled = input.ReadBool();
          break;
        }
        case 88: {
          TdpLimit = input.ReadInt32();
          break;
        }
        case 96: {
          CpuGovernor = (global::ECPUGovernor) input.ReadEnum();
          break;
        }
        case 104: {
          CpuGovernorManualMhz = input.ReadInt32();
          break;
        }
        case 112: {
          ScalingFilter = input.ReadInt32();
          break;
        }
        case 120: {
          FsrSharpness = input.ReadInt32();
          break;
        }
        case 128: {
          IsFpsLimitEnabled = input.ReadBool();
          break;
        }
        case 136: {
          IsTdpLimitEnabled = input.ReadBool();
          break;
        }
        case 144: {
          IsShowPerfOverlayOverSteamEnabled = input.ReadBool();
          break;
        }
        case 152: {
          IsLowLatencyModeEnabled = input.ReadBool();
          break;
        }
        case 160: {
          DisplayRefreshManualHz = input.ReadInt32();
          break;
        }
        case 168: {
          IsGamePerfProfileEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          DiagnosticUpdateRate = input.ReadFloat();
          break;
        }
        case 16: {
          SystemTraceServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 24: {
          GraphicsProfilingServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 32: {
          PerfOverlayServiceState = (global::ESystemServiceState) input.ReadEnum();
          break;
        }
        case 40: {
          PerfOverlayLevel = (global::EGraphicsPerfOverlayLevel) input.ReadEnum();
          break;
        }
        case 48: {
          GpuPerformanceLevel = (global::EGPUPerformanceLevel) input.ReadEnum();
          break;
        }
        case 56: {
          GpuPerformanceManualMhz = input.ReadInt32();
          break;
        }
        case 64: {
          FpsLimit = input.ReadInt32();
          break;
        }
        case 72: {
          IsVariableResolutionEnabled = input.ReadBool();
          break;
        }
        case 80: {
          IsDynamicRefreshRateEnabled = input.ReadBool();
          break;
        }
        case 88: {
          TdpLimit = input.ReadInt32();
          break;
        }
        case 96: {
          CpuGovernor = (global::ECPUGovernor) input.ReadEnum();
          break;
        }
        case 104: {
          CpuGovernorManualMhz = input.ReadInt32();
          break;
        }
        case 112: {
          ScalingFilter = input.ReadInt32();
          break;
        }
        case 120: {
          FsrSharpness = input.ReadInt32();
          break;
        }
        case 128: {
          IsFpsLimitEnabled = input.ReadBool();
          break;
        }
        case 136: {
          IsTdpLimitEnabled = input.ReadBool();
          break;
        }
        case 144: {
          IsShowPerfOverlayOverSteamEnabled = input.ReadBool();
          break;
        }
        case 152: {
          IsLowLatencyModeEnabled = input.ReadBool();
          break;
        }
        case 160: {
          DisplayRefreshManualHz = input.ReadInt32();
          break;
        }
        case 168: {
          IsGamePerfProfileEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfState : pb::IMessage<CMsgSystemPerfState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfState> _parser = new pb::MessageParser<CMsgSystemPerfState>(() => new CMsgSystemPerfState());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfState(CMsgSystemPerfState other) : this() {
    _hasBits0 = other._hasBits0;
    limits_ = other.limits_ != null ? other.limits_.Clone() : null;
    settings_ = other.settings_ != null ? other.settings_.Clone() : null;
    currentGameId_ = other.currentGameId_;
    activeProfileGameId_ = other.activeProfileGameId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfState Clone() {
    return new CMsgSystemPerfState(this);
  }

  /// <summary>Field number for the "limits" field.</summary>
  public const int LimitsFieldNumber = 1;
  private global::CMsgSystemPerfLimits limits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemPerfLimits Limits {
    get { return limits_; }
    set {
      limits_ = value;
    }
  }

  /// <summary>Field number for the "settings" field.</summary>
  public const int SettingsFieldNumber = 2;
  private global::CMsgSystemPerfSettings settings_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemPerfSettings Settings {
    get { return settings_; }
    set {
      settings_ = value;
    }
  }

  /// <summary>Field number for the "current_game_id" field.</summary>
  public const int CurrentGameIdFieldNumber = 3;
  private readonly static ulong CurrentGameIdDefaultValue = 0UL;

  private ulong currentGameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong CurrentGameId {
    get { if ((_hasBits0 & 1) != 0) { return currentGameId_; } else { return CurrentGameIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      currentGameId_ = value;
    }
  }
  /// <summary>Gets whether the "current_game_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrentGameId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "current_game_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrentGameId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "active_profile_game_id" field.</summary>
  public const int ActiveProfileGameIdFieldNumber = 4;
  private readonly static ulong ActiveProfileGameIdDefaultValue = 0UL;

  private ulong activeProfileGameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ActiveProfileGameId {
    get { if ((_hasBits0 & 2) != 0) { return activeProfileGameId_; } else { return ActiveProfileGameIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      activeProfileGameId_ = value;
    }
  }
  /// <summary>Gets whether the "active_profile_game_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActiveProfileGameId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "active_profile_game_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActiveProfileGameId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Limits, other.Limits)) return false;
    if (!object.Equals(Settings, other.Settings)) return false;
    if (CurrentGameId != other.CurrentGameId) return false;
    if (ActiveProfileGameId != other.ActiveProfileGameId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (limits_ != null) hash ^= Limits.GetHashCode();
    if (settings_ != null) hash ^= Settings.GetHashCode();
    if (HasCurrentGameId) hash ^= CurrentGameId.GetHashCode();
    if (HasActiveProfileGameId) hash ^= ActiveProfileGameId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (limits_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Limits);
    }
    if (settings_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Settings);
    }
    if (HasCurrentGameId) {
      output.WriteRawTag(24);
      output.WriteUInt64(CurrentGameId);
    }
    if (HasActiveProfileGameId) {
      output.WriteRawTag(32);
      output.WriteUInt64(ActiveProfileGameId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (limits_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Limits);
    }
    if (settings_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Settings);
    }
    if (HasCurrentGameId) {
      output.WriteRawTag(24);
      output.WriteUInt64(CurrentGameId);
    }
    if (HasActiveProfileGameId) {
      output.WriteRawTag(32);
      output.WriteUInt64(ActiveProfileGameId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (limits_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limits);
    }
    if (settings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
    }
    if (HasCurrentGameId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentGameId);
    }
    if (HasActiveProfileGameId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActiveProfileGameId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfState other) {
    if (other == null) {
      return;
    }
    if (other.limits_ != null) {
      if (limits_ == null) {
        Limits = new global::CMsgSystemPerfLimits();
      }
      Limits.MergeFrom(other.Limits);
    }
    if (other.settings_ != null) {
      if (settings_ == null) {
        Settings = new global::CMsgSystemPerfSettings();
      }
      Settings.MergeFrom(other.Settings);
    }
    if (other.HasCurrentGameId) {
      CurrentGameId = other.CurrentGameId;
    }
    if (other.HasActiveProfileGameId) {
      ActiveProfileGameId = other.ActiveProfileGameId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (limits_ == null) {
            Limits = new global::CMsgSystemPerfLimits();
          }
          input.ReadMessage(Limits);
          break;
        }
        case 18: {
          if (settings_ == null) {
            Settings = new global::CMsgSystemPerfSettings();
          }
          input.ReadMessage(Settings);
          break;
        }
        case 24: {
          CurrentGameId = input.ReadUInt64();
          break;
        }
        case 32: {
          ActiveProfileGameId = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (limits_ == null) {
            Limits = new global::CMsgSystemPerfLimits();
          }
          input.ReadMessage(Limits);
          break;
        }
        case 18: {
          if (settings_ == null) {
            Settings = new global::CMsgSystemPerfSettings();
          }
          input.ReadMessage(Settings);
          break;
        }
        case 24: {
          CurrentGameId = input.ReadUInt64();
          break;
        }
        case 32: {
          ActiveProfileGameId = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemPerfUpdateSettings : pb::IMessage<CMsgSystemPerfUpdateSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemPerfUpdateSettings> _parser = new pb::MessageParser<CMsgSystemPerfUpdateSettings>(() => new CMsgSystemPerfUpdateSettings());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemPerfUpdateSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfUpdateSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfUpdateSettings(CMsgSystemPerfUpdateSettings other) : this() {
    _hasBits0 = other._hasBits0;
    gameid_ = other.gameid_;
    skipStorageUpdate_ = other.skipStorageUpdate_;
    switch (other.UpdateCase) {
      case UpdateOneofCase.ResetToDefault:
        ResetToDefault = other.ResetToDefault;
        break;
      case UpdateOneofCase.SettingsDelta:
        SettingsDelta = other.SettingsDelta.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemPerfUpdateSettings Clone() {
    return new CMsgSystemPerfUpdateSettings(this);
  }

  /// <summary>Field number for the "gameid" field.</summary>
  public const int GameidFieldNumber = 1;
  private readonly static ulong GameidDefaultValue = 0UL;

  private ulong gameid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Gameid {
    get { if ((_hasBits0 & 1) != 0) { return gameid_; } else { return GameidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gameid_ = value;
    }
  }
  /// <summary>Gets whether the "gameid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gameid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "skip_storage_update" field.</summary>
  public const int SkipStorageUpdateFieldNumber = 4;
  private readonly static bool SkipStorageUpdateDefaultValue = false;

  private bool skipStorageUpdate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SkipStorageUpdate {
    get { if ((_hasBits0 & 2) != 0) { return skipStorageUpdate_; } else { return SkipStorageUpdateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      skipStorageUpdate_ = value;
    }
  }
  /// <summary>Gets whether the "skip_storage_update" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSkipStorageUpdate {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "skip_storage_update" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSkipStorageUpdate() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "reset_to_default" field.</summary>
  public const int ResetToDefaultFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ResetToDefault {
    get { return HasResetToDefault ? (bool) update_ : false; }
    set {
      update_ = value;
      updateCase_ = UpdateOneofCase.ResetToDefault;
    }
  }
  /// <summary>Gets whether the "reset_to_default" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasResetToDefault {
    get { return updateCase_ == UpdateOneofCase.ResetToDefault; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "reset_to_default" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearResetToDefault() {
    if (HasResetToDefault) {
      ClearUpdate();
    }
  }

  /// <summary>Field number for the "settings_delta" field.</summary>
  public const int SettingsDeltaFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemPerfSettings SettingsDelta {
    get { return updateCase_ == UpdateOneofCase.SettingsDelta ? (global::CMsgSystemPerfSettings) update_ : null; }
    set {
      update_ = value;
      updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.SettingsDelta;
    }
  }

  private object update_;
  /// <summary>Enum of possible cases for the "update" oneof.</summary>
  public enum UpdateOneofCase {
    None = 0,
    ResetToDefault = 2,
    SettingsDelta = 3,
  }
  private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UpdateOneofCase UpdateCase {
    get { return updateCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUpdate() {
    updateCase_ = UpdateOneofCase.None;
    update_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemPerfUpdateSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemPerfUpdateSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gameid != other.Gameid) return false;
    if (SkipStorageUpdate != other.SkipStorageUpdate) return false;
    if (ResetToDefault != other.ResetToDefault) return false;
    if (!object.Equals(SettingsDelta, other.SettingsDelta)) return false;
    if (UpdateCase != other.UpdateCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGameid) hash ^= Gameid.GetHashCode();
    if (HasSkipStorageUpdate) hash ^= SkipStorageUpdate.GetHashCode();
    if (HasResetToDefault) hash ^= ResetToDefault.GetHashCode();
    if (updateCase_ == UpdateOneofCase.SettingsDelta) hash ^= SettingsDelta.GetHashCode();
    hash ^= (int) updateCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGameid) {
      output.WriteRawTag(8);
      output.WriteUInt64(Gameid);
    }
    if (HasResetToDefault) {
      output.WriteRawTag(16);
      output.WriteBool(ResetToDefault);
    }
    if (updateCase_ == UpdateOneofCase.SettingsDelta) {
      output.WriteRawTag(26);
      output.WriteMessage(SettingsDelta);
    }
    if (HasSkipStorageUpdate) {
      output.WriteRawTag(32);
      output.WriteBool(SkipStorageUpdate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGameid) {
      output.WriteRawTag(8);
      output.WriteUInt64(Gameid);
    }
    if (HasResetToDefault) {
      output.WriteRawTag(16);
      output.WriteBool(ResetToDefault);
    }
    if (updateCase_ == UpdateOneofCase.SettingsDelta) {
      output.WriteRawTag(26);
      output.WriteMessage(SettingsDelta);
    }
    if (HasSkipStorageUpdate) {
      output.WriteRawTag(32);
      output.WriteBool(SkipStorageUpdate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasGameid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gameid);
    }
    if (HasSkipStorageUpdate) {
      size += 1 + 1;
    }
    if (HasResetToDefault) {
      size += 1 + 1;
    }
    if (updateCase_ == UpdateOneofCase.SettingsDelta) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SettingsDelta);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemPerfUpdateSettings other) {
    if (other == null) {
      return;
    }
    if (other.HasGameid) {
      Gameid = other.Gameid;
    }
    if (other.HasSkipStorageUpdate) {
      SkipStorageUpdate = other.SkipStorageUpdate;
    }
    switch (other.UpdateCase) {
      case UpdateOneofCase.ResetToDefault:
        ResetToDefault = other.ResetToDefault;
        break;
      case UpdateOneofCase.SettingsDelta:
        if (SettingsDelta == null) {
          SettingsDelta = new global::CMsgSystemPerfSettings();
        }
        SettingsDelta.MergeFrom(other.SettingsDelta);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gameid = input.ReadUInt64();
          break;
        }
        case 16: {
          ResetToDefault = input.ReadBool();
          break;
        }
        case 26: {
          global::CMsgSystemPerfSettings subBuilder = new global::CMsgSystemPerfSettings();
          if (updateCase_ == UpdateOneofCase.SettingsDelta) {
            subBuilder.MergeFrom(SettingsDelta);
          }
          input.ReadMessage(subBuilder);
          SettingsDelta = subBuilder;
          break;
        }
        case 32: {
          SkipStorageUpdate = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Gameid = input.ReadUInt64();
          break;
        }
        case 16: {
          ResetToDefault = input.ReadBool();
          break;
        }
        case 26: {
          global::CMsgSystemPerfSettings subBuilder = new global::CMsgSystemPerfSettings();
          if (updateCase_ == UpdateOneofCase.SettingsDelta) {
            subBuilder.MergeFrom(SettingsDelta);
          }
          input.ReadMessage(subBuilder);
          SettingsDelta = subBuilder;
          break;
        }
        case 32: {
          SkipStorageUpdate = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDockUpdateState : pb::IMessage<CMsgSystemDockUpdateState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDockUpdateState> _parser = new pb::MessageParser<CMsgSystemDockUpdateState>(() => new CMsgSystemDockUpdateState());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDockUpdateState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateState(CMsgSystemDockUpdateState other) : this() {
    _hasBits0 = other._hasBits0;
    state_ = other.state_;
    rtimeLastChecked_ = other.rtimeLastChecked_;
    versionCurrent_ = other.versionCurrent_;
    versionAvailable_ = other.versionAvailable_;
    stageProgress_ = other.stageProgress_;
    rtimeEstimatedCompletion_ = other.rtimeEstimatedCompletion_;
    oldFwWorkaround_ = other.oldFwWorkaround_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateState Clone() {
    return new CMsgSystemDockUpdateState(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private readonly static global::EUpdaterState StateDefaultValue = global::EUpdaterState.KEupdaterStateInvalid;

  private global::EUpdaterState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EUpdaterState State {
    get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      state_ = value;
    }
  }
  /// <summary>Gets whether the "state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasState {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearState() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "rtime_last_checked" field.</summary>
  public const int RtimeLastCheckedFieldNumber = 2;
  private readonly static uint RtimeLastCheckedDefaultValue = 0;

  private uint rtimeLastChecked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeLastChecked {
    get { if ((_hasBits0 & 2) != 0) { return rtimeLastChecked_; } else { return RtimeLastCheckedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rtimeLastChecked_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_last_checked" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeLastChecked {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rtime_last_checked" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeLastChecked() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "version_current" field.</summary>
  public const int VersionCurrentFieldNumber = 3;
  private readonly static string VersionCurrentDefaultValue = "";

  private string versionCurrent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string VersionCurrent {
    get { return versionCurrent_ ?? VersionCurrentDefaultValue; }
    set {
      versionCurrent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version_current" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersionCurrent {
    get { return versionCurrent_ != null; }
  }
  /// <summary>Clears the value of the "version_current" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersionCurrent() {
    versionCurrent_ = null;
  }

  /// <summary>Field number for the "version_available" field.</summary>
  public const int VersionAvailableFieldNumber = 4;
  private readonly static string VersionAvailableDefaultValue = "";

  private string versionAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string VersionAvailable {
    get { return versionAvailable_ ?? VersionAvailableDefaultValue; }
    set {
      versionAvailable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersionAvailable {
    get { return versionAvailable_ != null; }
  }
  /// <summary>Clears the value of the "version_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersionAvailable() {
    versionAvailable_ = null;
  }

  /// <summary>Field number for the "stage_progress" field.</summary>
  public const int StageProgressFieldNumber = 5;
  private readonly static float StageProgressDefaultValue = 0F;

  private float stageProgress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StageProgress {
    get { if ((_hasBits0 & 4) != 0) { return stageProgress_; } else { return StageProgressDefaultValue; } }
    set {
      _hasBits0 |= 4;
      stageProgress_ = value;
    }
  }
  /// <summary>Gets whether the "stage_progress" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStageProgress {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "stage_progress" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStageProgress() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "rtime_estimated_completion" field.</summary>
  public const int RtimeEstimatedCompletionFieldNumber = 6;
  private readonly static uint RtimeEstimatedCompletionDefaultValue = 0;

  private uint rtimeEstimatedCompletion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeEstimatedCompletion {
    get { if ((_hasBits0 & 8) != 0) { return rtimeEstimatedCompletion_; } else { return RtimeEstimatedCompletionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      rtimeEstimatedCompletion_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_estimated_completion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeEstimatedCompletion {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "rtime_estimated_completion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeEstimatedCompletion() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "old_fw_workaround" field.</summary>
  public const int OldFwWorkaroundFieldNumber = 7;
  private readonly static int OldFwWorkaroundDefaultValue = 0;

  private int oldFwWorkaround_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OldFwWorkaround {
    get { if ((_hasBits0 & 16) != 0) { return oldFwWorkaround_; } else { return OldFwWorkaroundDefaultValue; } }
    set {
      _hasBits0 |= 16;
      oldFwWorkaround_ = value;
    }
  }
  /// <summary>Gets whether the "old_fw_workaround" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOldFwWorkaround {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "old_fw_workaround" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOldFwWorkaround() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDockUpdateState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDockUpdateState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (RtimeLastChecked != other.RtimeLastChecked) return false;
    if (VersionCurrent != other.VersionCurrent) return false;
    if (VersionAvailable != other.VersionAvailable) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StageProgress, other.StageProgress)) return false;
    if (RtimeEstimatedCompletion != other.RtimeEstimatedCompletion) return false;
    if (OldFwWorkaround != other.OldFwWorkaround) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasState) hash ^= State.GetHashCode();
    if (HasRtimeLastChecked) hash ^= RtimeLastChecked.GetHashCode();
    if (HasVersionCurrent) hash ^= VersionCurrent.GetHashCode();
    if (HasVersionAvailable) hash ^= VersionAvailable.GetHashCode();
    if (HasStageProgress) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StageProgress);
    if (HasRtimeEstimatedCompletion) hash ^= RtimeEstimatedCompletion.GetHashCode();
    if (HasOldFwWorkaround) hash ^= OldFwWorkaround.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasState) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (HasRtimeLastChecked) {
      output.WriteRawTag(21);
      output.WriteFixed32(RtimeLastChecked);
    }
    if (HasVersionCurrent) {
      output.WriteRawTag(26);
      output.WriteString(VersionCurrent);
    }
    if (HasVersionAvailable) {
      output.WriteRawTag(34);
      output.WriteString(VersionAvailable);
    }
    if (HasStageProgress) {
      output.WriteRawTag(45);
      output.WriteFloat(StageProgress);
    }
    if (HasRtimeEstimatedCompletion) {
      output.WriteRawTag(53);
      output.WriteFixed32(RtimeEstimatedCompletion);
    }
    if (HasOldFwWorkaround) {
      output.WriteRawTag(56);
      output.WriteInt32(OldFwWorkaround);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasState) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (HasRtimeLastChecked) {
      output.WriteRawTag(21);
      output.WriteFixed32(RtimeLastChecked);
    }
    if (HasVersionCurrent) {
      output.WriteRawTag(26);
      output.WriteString(VersionCurrent);
    }
    if (HasVersionAvailable) {
      output.WriteRawTag(34);
      output.WriteString(VersionAvailable);
    }
    if (HasStageProgress) {
      output.WriteRawTag(45);
      output.WriteFloat(StageProgress);
    }
    if (HasRtimeEstimatedCompletion) {
      output.WriteRawTag(53);
      output.WriteFixed32(RtimeEstimatedCompletion);
    }
    if (HasOldFwWorkaround) {
      output.WriteRawTag(56);
      output.WriteInt32(OldFwWorkaround);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (HasRtimeLastChecked) {
      size += 1 + 4;
    }
    if (HasVersionCurrent) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionCurrent);
    }
    if (HasVersionAvailable) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionAvailable);
    }
    if (HasStageProgress) {
      size += 1 + 4;
    }
    if (HasRtimeEstimatedCompletion) {
      size += 1 + 4;
    }
    if (HasOldFwWorkaround) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldFwWorkaround);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDockUpdateState other) {
    if (other == null) {
      return;
    }
    if (other.HasState) {
      State = other.State;
    }
    if (other.HasRtimeLastChecked) {
      RtimeLastChecked = other.RtimeLastChecked;
    }
    if (other.HasVersionCurrent) {
      VersionCurrent = other.VersionCurrent;
    }
    if (other.HasVersionAvailable) {
      VersionAvailable = other.VersionAvailable;
    }
    if (other.HasStageProgress) {
      StageProgress = other.StageProgress;
    }
    if (other.HasRtimeEstimatedCompletion) {
      RtimeEstimatedCompletion = other.RtimeEstimatedCompletion;
    }
    if (other.HasOldFwWorkaround) {
      OldFwWorkaround = other.OldFwWorkaround;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          State = (global::EUpdaterState) input.ReadEnum();
          break;
        }
        case 21: {
          RtimeLastChecked = input.ReadFixed32();
          break;
        }
        case 26: {
          VersionCurrent = input.ReadString();
          break;
        }
        case 34: {
          VersionAvailable = input.ReadString();
          break;
        }
        case 45: {
          StageProgress = input.ReadFloat();
          break;
        }
        case 53: {
          RtimeEstimatedCompletion = input.ReadFixed32();
          break;
        }
        case 56: {
          OldFwWorkaround = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          State = (global::EUpdaterState) input.ReadEnum();
          break;
        }
        case 21: {
          RtimeLastChecked = input.ReadFixed32();
          break;
        }
        case 26: {
          VersionCurrent = input.ReadString();
          break;
        }
        case 34: {
          VersionAvailable = input.ReadString();
          break;
        }
        case 45: {
          StageProgress = input.ReadFloat();
          break;
        }
        case 53: {
          RtimeEstimatedCompletion = input.ReadFixed32();
          break;
        }
        case 56: {
          OldFwWorkaround = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDockState : pb::IMessage<CMsgSystemDockState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDockState> _parser = new pb::MessageParser<CMsgSystemDockState>(() => new CMsgSystemDockState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDockState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockState(CMsgSystemDockState other) : this() {
    updateState_ = other.updateState_ != null ? other.updateState_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockState Clone() {
    return new CMsgSystemDockState(this);
  }

  /// <summary>Field number for the "update_state" field.</summary>
  public const int UpdateStateFieldNumber = 1;
  private global::CMsgSystemDockUpdateState updateState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemDockUpdateState UpdateState {
    get { return updateState_; }
    set {
      updateState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDockState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDockState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(UpdateState, other.UpdateState)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (updateState_ != null) hash ^= UpdateState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (updateState_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(UpdateState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (updateState_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(UpdateState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (updateState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDockState other) {
    if (other == null) {
      return;
    }
    if (other.updateState_ != null) {
      if (updateState_ == null) {
        UpdateState = new global::CMsgSystemDockUpdateState();
      }
      UpdateState.MergeFrom(other.UpdateState);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (updateState_ == null) {
            UpdateState = new global::CMsgSystemDockUpdateState();
          }
          input.ReadMessage(UpdateState);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (updateState_ == null) {
            UpdateState = new global::CMsgSystemDockUpdateState();
          }
          input.ReadMessage(UpdateState);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDockUpdateFirmware : pb::IMessage<CMsgSystemDockUpdateFirmware>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDockUpdateFirmware> _parser = new pb::MessageParser<CMsgSystemDockUpdateFirmware>(() => new CMsgSystemDockUpdateFirmware());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDockUpdateFirmware> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateFirmware() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateFirmware(CMsgSystemDockUpdateFirmware other) : this() {
    _hasBits0 = other._hasBits0;
    checkOnly_ = other.checkOnly_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDockUpdateFirmware Clone() {
    return new CMsgSystemDockUpdateFirmware(this);
  }

  /// <summary>Field number for the "check_only" field.</summary>
  public const int CheckOnlyFieldNumber = 1;
  private readonly static bool CheckOnlyDefaultValue = false;

  private bool checkOnly_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckOnly {
    get { if ((_hasBits0 & 1) != 0) { return checkOnly_; } else { return CheckOnlyDefaultValue; } }
    set {
      _hasBits0 |= 1;
      checkOnly_ = value;
    }
  }
  /// <summary>Gets whether the "check_only" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCheckOnly {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "check_only" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCheckOnly() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDockUpdateFirmware);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDockUpdateFirmware other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheckOnly != other.CheckOnly) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCheckOnly) hash ^= CheckOnly.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCheckOnly) {
      output.WriteRawTag(8);
      output.WriteBool(CheckOnly);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCheckOnly) {
      output.WriteRawTag(8);
      output.WriteBool(CheckOnly);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCheckOnly) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDockUpdateFirmware other) {
    if (other == null) {
      return;
    }
    if (other.HasCheckOnly) {
      CheckOnly = other.CheckOnly;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CheckOnly = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CheckOnly = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioVolume : pb::IMessage<CMsgSystemAudioVolume>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioVolume> _parser = new pb::MessageParser<CMsgSystemAudioVolume>(() => new CMsgSystemAudioVolume());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioVolume> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioVolume() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioVolume(CMsgSystemAudioVolume other) : this() {
    _hasBits0 = other._hasBits0;
    entries_ = other.entries_.Clone();
    isMuted_ = other.isMuted_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioVolume Clone() {
    return new CMsgSystemAudioVolume(this);
  }

  /// <summary>Field number for the "entries" field.</summary>
  public const int EntriesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgSystemAudioVolume.Types.ChannelEntry> _repeated_entries_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgSystemAudioVolume.Types.ChannelEntry.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemAudioVolume.Types.ChannelEntry> entries_ = new pbc::RepeatedField<global::CMsgSystemAudioVolume.Types.ChannelEntry>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemAudioVolume.Types.ChannelEntry> Entries {
    get { return entries_; }
  }

  /// <summary>Field number for the "is_muted" field.</summary>
  public const int IsMutedFieldNumber = 2;
  private readonly static bool IsMutedDefaultValue = false;

  private bool isMuted_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsMuted {
    get { if ((_hasBits0 & 1) != 0) { return isMuted_; } else { return IsMutedDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isMuted_ = value;
    }
  }
  /// <summary>Gets whether the "is_muted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsMuted {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_muted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsMuted() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioVolume);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioVolume other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!entries_.Equals(other.entries_)) return false;
    if (IsMuted != other.IsMuted) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= entries_.GetHashCode();
    if (HasIsMuted) hash ^= IsMuted.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    entries_.WriteTo(output, _repeated_entries_codec);
    if (HasIsMuted) {
      output.WriteRawTag(16);
      output.WriteBool(IsMuted);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    entries_.WriteTo(ref output, _repeated_entries_codec);
    if (HasIsMuted) {
      output.WriteRawTag(16);
      output.WriteBool(IsMuted);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += entries_.CalculateSize(_repeated_entries_codec);
    if (HasIsMuted) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioVolume other) {
    if (other == null) {
      return;
    }
    entries_.Add(other.entries_);
    if (other.HasIsMuted) {
      IsMuted = other.IsMuted;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          entries_.AddEntriesFrom(input, _repeated_entries_codec);
          break;
        }
        case 16: {
          IsMuted = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          entries_.AddEntriesFrom(ref input, _repeated_entries_codec);
          break;
        }
        case 16: {
          IsMuted = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSystemAudioVolume message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class ChannelEntry : pb::IMessage<ChannelEntry>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<ChannelEntry> _parser = new pb::MessageParser<ChannelEntry>(() => new ChannelEntry());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<ChannelEntry> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSystemAudioVolume.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ChannelEntry() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ChannelEntry(ChannelEntry other) : this() {
        _hasBits0 = other._hasBits0;
        echannel_ = other.echannel_;
        volume_ = other.volume_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ChannelEntry Clone() {
        return new ChannelEntry(this);
      }

      /// <summary>Field number for the "echannel" field.</summary>
      public const int EchannelFieldNumber = 1;
      private readonly static global::ESystemAudioChannel EchannelDefaultValue = global::ESystemAudioChannel.KSystemAudioChannelInvalid;

      private global::ESystemAudioChannel echannel_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::ESystemAudioChannel Echannel {
        get { if ((_hasBits0 & 1) != 0) { return echannel_; } else { return EchannelDefaultValue; } }
        set {
          _hasBits0 |= 1;
          echannel_ = value;
        }
      }
      /// <summary>Gets whether the "echannel" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasEchannel {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "echannel" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearEchannel() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "volume" field.</summary>
      public const int VolumeFieldNumber = 2;
      private readonly static float VolumeDefaultValue = 0F;

      private float volume_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public float Volume {
        get { if ((_hasBits0 & 2) != 0) { return volume_; } else { return VolumeDefaultValue; } }
        set {
          _hasBits0 |= 2;
          volume_ = value;
        }
      }
      /// <summary>Gets whether the "volume" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVolume {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "volume" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVolume() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as ChannelEntry);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(ChannelEntry other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Echannel != other.Echannel) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasEchannel) hash ^= Echannel.GetHashCode();
        if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasEchannel) {
          output.WriteRawTag(8);
          output.WriteEnum((int) Echannel);
        }
        if (HasVolume) {
          output.WriteRawTag(21);
          output.WriteFloat(Volume);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasEchannel) {
          output.WriteRawTag(8);
          output.WriteEnum((int) Echannel);
        }
        if (HasVolume) {
          output.WriteRawTag(21);
          output.WriteFloat(Volume);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasEchannel) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Echannel);
        }
        if (HasVolume) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(ChannelEntry other) {
        if (other == null) {
          return;
        }
        if (other.HasEchannel) {
          Echannel = other.Echannel;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Echannel = (global::ESystemAudioChannel) input.ReadEnum();
              break;
            }
            case 21: {
              Volume = input.ReadFloat();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Echannel = (global::ESystemAudioChannel) input.ReadEnum();
              break;
            }
            case 21: {
              Volume = input.ReadFloat();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSystemAudioManagerObject : pb::IMessage<CMsgSystemAudioManagerObject>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerObject> _parser = new pb::MessageParser<CMsgSystemAudioManagerObject>(() => new CMsgSystemAudioManagerObject());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerObject(CMsgSystemAudioManagerObject other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    rtimeLastUpdate_ = other.rtimeLastUpdate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerObject Clone() {
    return new CMsgSystemAudioManagerObject(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static uint IdDefaultValue = 0;

  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "rtime_last_update" field.</summary>
  public const int RtimeLastUpdateFieldNumber = 2;
  private readonly static uint RtimeLastUpdateDefaultValue = 0;

  private uint rtimeLastUpdate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeLastUpdate {
    get { if ((_hasBits0 & 2) != 0) { return rtimeLastUpdate_; } else { return RtimeLastUpdateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rtimeLastUpdate_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_last_update" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeLastUpdate {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rtime_last_update" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeLastUpdate() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RtimeLastUpdate != other.RtimeLastUpdate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasRtimeLastUpdate) hash ^= RtimeLastUpdate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (HasRtimeLastUpdate) {
      output.WriteRawTag(21);
      output.WriteFixed32(RtimeLastUpdate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (HasRtimeLastUpdate) {
      output.WriteRawTag(21);
      output.WriteFixed32(RtimeLastUpdate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (HasRtimeLastUpdate) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerObject other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasRtimeLastUpdate) {
      RtimeLastUpdate = other.RtimeLastUpdate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 21: {
          RtimeLastUpdate = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 21: {
          RtimeLastUpdate = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerDevice : pb::IMessage<CMsgSystemAudioManagerDevice>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerDevice> _parser = new pb::MessageParser<CMsgSystemAudioManagerDevice>(() => new CMsgSystemAudioManagerDevice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerDevice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerDevice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerDevice(CMsgSystemAudioManagerDevice other) : this() {
    base_ = other.base_ != null ? other.base_.Clone() : null;
    name_ = other.name_;
    nick_ = other.nick_;
    description_ = other.description_;
    api_ = other.api_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerDevice Clone() {
    return new CMsgSystemAudioManagerDevice(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CMsgSystemAudioManagerObject base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioManagerObject Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 3;
  private readonly static string NickDefaultValue = "";

  private string nick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Nick {
    get { return nick_ ?? NickDefaultValue; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNick {
    get { return nick_ != null; }
  }
  /// <summary>Clears the value of the "nick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNick() {
    nick_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "api" field.</summary>
  public const int ApiFieldNumber = 5;
  private readonly static string ApiDefaultValue = "";

  private string api_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Api {
    get { return api_ ?? ApiDefaultValue; }
    set {
      api_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "api" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasApi {
    get { return api_ != null; }
  }
  /// <summary>Clears the value of the "api" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearApi() {
    api_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerDevice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerDevice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    if (Name != other.Name) return false;
    if (Nick != other.Nick) return false;
    if (Description != other.Description) return false;
    if (Api != other.Api) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasNick) hash ^= Nick.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasApi) hash ^= Api.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasNick) {
      output.WriteRawTag(26);
      output.WriteString(Nick);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (HasApi) {
      output.WriteRawTag(42);
      output.WriteString(Api);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasNick) {
      output.WriteRawTag(26);
      output.WriteString(Nick);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (HasApi) {
      output.WriteRawTag(42);
      output.WriteString(Api);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasNick) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasApi) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Api);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerDevice other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CMsgSystemAudioManagerObject();
      }
      Base.MergeFrom(other.Base);
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasNick) {
      Nick = other.Nick;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasApi) {
      Api = other.Api;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Nick = input.ReadString();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 42: {
          Api = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Nick = input.ReadString();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 42: {
          Api = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerNode : pb::IMessage<CMsgSystemAudioManagerNode>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerNode> _parser = new pb::MessageParser<CMsgSystemAudioManagerNode>(() => new CMsgSystemAudioManagerNode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerNode(CMsgSystemAudioManagerNode other) : this() {
    _hasBits0 = other._hasBits0;
    base_ = other.base_ != null ? other.base_.Clone() : null;
    deviceId_ = other.deviceId_;
    name_ = other.name_;
    nick_ = other.nick_;
    description_ = other.description_;
    edirection_ = other.edirection_;
    volume_ = other.volume_ != null ? other.volume_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerNode Clone() {
    return new CMsgSystemAudioManagerNode(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CMsgSystemAudioManagerObject base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioManagerObject Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "device_id" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private readonly static uint DeviceIdDefaultValue = 0;

  private uint deviceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DeviceId {
    get { if ((_hasBits0 & 1) != 0) { return deviceId_; } else { return DeviceIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      deviceId_ = value;
    }
  }
  /// <summary>Gets whether the "device_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeviceId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "device_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeviceId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 4;
  private readonly static string NickDefaultValue = "";

  private string nick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Nick {
    get { return nick_ ?? NickDefaultValue; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNick {
    get { return nick_ != null; }
  }
  /// <summary>Clears the value of the "nick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNick() {
    nick_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 5;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "edirection" field.</summary>
  public const int EdirectionFieldNumber = 6;
  private readonly static global::ESystemAudioDirection EdirectionDefaultValue = global::ESystemAudioDirection.KSystemAudioDirectionInvalid;

  private global::ESystemAudioDirection edirection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemAudioDirection Edirection {
    get { if ((_hasBits0 & 2) != 0) { return edirection_; } else { return EdirectionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      edirection_ = value;
    }
  }
  /// <summary>Gets whether the "edirection" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEdirection {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "edirection" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEdirection() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 7;
  private global::CMsgSystemAudioVolume volume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioVolume Volume {
    get { return volume_; }
    set {
      volume_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (Name != other.Name) return false;
    if (Nick != other.Nick) return false;
    if (Description != other.Description) return false;
    if (Edirection != other.Edirection) return false;
    if (!object.Equals(Volume, other.Volume)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    if (HasDeviceId) hash ^= DeviceId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasNick) hash ^= Nick.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasEdirection) hash ^= Edirection.GetHashCode();
    if (volume_ != null) hash ^= Volume.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasDeviceId) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeviceId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasNick) {
      output.WriteRawTag(34);
      output.WriteString(Nick);
    }
    if (HasDescription) {
      output.WriteRawTag(42);
      output.WriteString(Description);
    }
    if (HasEdirection) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Edirection);
    }
    if (volume_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Volume);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasDeviceId) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeviceId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasNick) {
      output.WriteRawTag(34);
      output.WriteString(Nick);
    }
    if (HasDescription) {
      output.WriteRawTag(42);
      output.WriteString(Description);
    }
    if (HasEdirection) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Edirection);
    }
    if (volume_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Volume);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (HasDeviceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasNick) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasEdirection) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Edirection);
    }
    if (volume_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Volume);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerNode other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CMsgSystemAudioManagerObject();
      }
      Base.MergeFrom(other.Base);
    }
    if (other.HasDeviceId) {
      DeviceId = other.DeviceId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasNick) {
      Nick = other.Nick;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasEdirection) {
      Edirection = other.Edirection;
    }
    if (other.volume_ != null) {
      if (volume_ == null) {
        Volume = new global::CMsgSystemAudioVolume();
      }
      Volume.MergeFrom(other.Volume);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 16: {
          DeviceId = input.ReadUInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Nick = input.ReadString();
          break;
        }
        case 42: {
          Description = input.ReadString();
          break;
        }
        case 48: {
          Edirection = (global::ESystemAudioDirection) input.ReadEnum();
          break;
        }
        case 58: {
          if (volume_ == null) {
            Volume = new global::CMsgSystemAudioVolume();
          }
          input.ReadMessage(Volume);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 16: {
          DeviceId = input.ReadUInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Nick = input.ReadString();
          break;
        }
        case 42: {
          Description = input.ReadString();
          break;
        }
        case 48: {
          Edirection = (global::ESystemAudioDirection) input.ReadEnum();
          break;
        }
        case 58: {
          if (volume_ == null) {
            Volume = new global::CMsgSystemAudioVolume();
          }
          input.ReadMessage(Volume);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerPort : pb::IMessage<CMsgSystemAudioManagerPort>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerPort> _parser = new pb::MessageParser<CMsgSystemAudioManagerPort>(() => new CMsgSystemAudioManagerPort());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerPort> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerPort() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerPort(CMsgSystemAudioManagerPort other) : this() {
    _hasBits0 = other._hasBits0;
    base_ = other.base_ != null ? other.base_.Clone() : null;
    nodeId_ = other.nodeId_;
    name_ = other.name_;
    alias_ = other.alias_;
    etype_ = other.etype_;
    edirection_ = other.edirection_;
    isPhysical_ = other.isPhysical_;
    isTerminal_ = other.isTerminal_;
    isControl_ = other.isControl_;
    isMonitor_ = other.isMonitor_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerPort Clone() {
    return new CMsgSystemAudioManagerPort(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CMsgSystemAudioManagerObject base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioManagerObject Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "node_id" field.</summary>
  public const int NodeIdFieldNumber = 3;
  private readonly static uint NodeIdDefaultValue = 0;

  private uint nodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NodeId {
    get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      nodeId_ = value;
    }
  }
  /// <summary>Gets whether the "node_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNodeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "node_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNodeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "alias" field.</summary>
  public const int AliasFieldNumber = 5;
  private readonly static string AliasDefaultValue = "";

  private string alias_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Alias {
    get { return alias_ ?? AliasDefaultValue; }
    set {
      alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "alias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlias {
    get { return alias_ != null; }
  }
  /// <summary>Clears the value of the "alias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlias() {
    alias_ = null;
  }

  /// <summary>Field number for the "etype" field.</summary>
  public const int EtypeFieldNumber = 6;
  private readonly static global::ESystemAudioPortType EtypeDefaultValue = global::ESystemAudioPortType.KSystemAudioPortTypeInvalid;

  private global::ESystemAudioPortType etype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemAudioPortType Etype {
    get { if ((_hasBits0 & 2) != 0) { return etype_; } else { return EtypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      etype_ = value;
    }
  }
  /// <summary>Gets whether the "etype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEtype {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "etype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEtype() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "edirection" field.</summary>
  public const int EdirectionFieldNumber = 7;
  private readonly static global::ESystemAudioPortDirection EdirectionDefaultValue = global::ESystemAudioPortDirection.KSystemAudioPortDirectionInvalid;

  private global::ESystemAudioPortDirection edirection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemAudioPortDirection Edirection {
    get { if ((_hasBits0 & 4) != 0) { return edirection_; } else { return EdirectionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      edirection_ = value;
    }
  }
  /// <summary>Gets whether the "edirection" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEdirection {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "edirection" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEdirection() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_physical" field.</summary>
  public const int IsPhysicalFieldNumber = 8;
  private readonly static bool IsPhysicalDefaultValue = false;

  private bool isPhysical_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsPhysical {
    get { if ((_hasBits0 & 8) != 0) { return isPhysical_; } else { return IsPhysicalDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isPhysical_ = value;
    }
  }
  /// <summary>Gets whether the "is_physical" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsPhysical {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_physical" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsPhysical() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "is_terminal" field.</summary>
  public const int IsTerminalFieldNumber = 9;
  private readonly static bool IsTerminalDefaultValue = false;

  private bool isTerminal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTerminal {
    get { if ((_hasBits0 & 16) != 0) { return isTerminal_; } else { return IsTerminalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      isTerminal_ = value;
    }
  }
  /// <summary>Gets whether the "is_terminal" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTerminal {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "is_terminal" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTerminal() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "is_control" field.</summary>
  public const int IsControlFieldNumber = 10;
  private readonly static bool IsControlDefaultValue = false;

  private bool isControl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsControl {
    get { if ((_hasBits0 & 32) != 0) { return isControl_; } else { return IsControlDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isControl_ = value;
    }
  }
  /// <summary>Gets whether the "is_control" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsControl {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "is_control" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsControl() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "is_monitor" field.</summary>
  public const int IsMonitorFieldNumber = 11;
  private readonly static bool IsMonitorDefaultValue = false;

  private bool isMonitor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsMonitor {
    get { if ((_hasBits0 & 64) != 0) { return isMonitor_; } else { return IsMonitorDefaultValue; } }
    set {
      _hasBits0 |= 64;
      isMonitor_ = value;
    }
  }
  /// <summary>Gets whether the "is_monitor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsMonitor {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "is_monitor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsMonitor() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerPort);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerPort other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    if (NodeId != other.NodeId) return false;
    if (Name != other.Name) return false;
    if (Alias != other.Alias) return false;
    if (Etype != other.Etype) return false;
    if (Edirection != other.Edirection) return false;
    if (IsPhysical != other.IsPhysical) return false;
    if (IsTerminal != other.IsTerminal) return false;
    if (IsControl != other.IsControl) return false;
    if (IsMonitor != other.IsMonitor) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    if (HasNodeId) hash ^= NodeId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasAlias) hash ^= Alias.GetHashCode();
    if (HasEtype) hash ^= Etype.GetHashCode();
    if (HasEdirection) hash ^= Edirection.GetHashCode();
    if (HasIsPhysical) hash ^= IsPhysical.GetHashCode();
    if (HasIsTerminal) hash ^= IsTerminal.GetHashCode();
    if (HasIsControl) hash ^= IsControl.GetHashCode();
    if (HasIsMonitor) hash ^= IsMonitor.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasNodeId) {
      output.WriteRawTag(24);
      output.WriteUInt32(NodeId);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (HasAlias) {
      output.WriteRawTag(42);
      output.WriteString(Alias);
    }
    if (HasEtype) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Etype);
    }
    if (HasEdirection) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Edirection);
    }
    if (HasIsPhysical) {
      output.WriteRawTag(64);
      output.WriteBool(IsPhysical);
    }
    if (HasIsTerminal) {
      output.WriteRawTag(72);
      output.WriteBool(IsTerminal);
    }
    if (HasIsControl) {
      output.WriteRawTag(80);
      output.WriteBool(IsControl);
    }
    if (HasIsMonitor) {
      output.WriteRawTag(88);
      output.WriteBool(IsMonitor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasNodeId) {
      output.WriteRawTag(24);
      output.WriteUInt32(NodeId);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (HasAlias) {
      output.WriteRawTag(42);
      output.WriteString(Alias);
    }
    if (HasEtype) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Etype);
    }
    if (HasEdirection) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Edirection);
    }
    if (HasIsPhysical) {
      output.WriteRawTag(64);
      output.WriteBool(IsPhysical);
    }
    if (HasIsTerminal) {
      output.WriteRawTag(72);
      output.WriteBool(IsTerminal);
    }
    if (HasIsControl) {
      output.WriteRawTag(80);
      output.WriteBool(IsControl);
    }
    if (HasIsMonitor) {
      output.WriteRawTag(88);
      output.WriteBool(IsMonitor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (HasNodeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
    }
    if (HasEtype) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Etype);
    }
    if (HasEdirection) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Edirection);
    }
    if (HasIsPhysical) {
      size += 1 + 1;
    }
    if (HasIsTerminal) {
      size += 1 + 1;
    }
    if (HasIsControl) {
      size += 1 + 1;
    }
    if (HasIsMonitor) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerPort other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CMsgSystemAudioManagerObject();
      }
      Base.MergeFrom(other.Base);
    }
    if (other.HasNodeId) {
      NodeId = other.NodeId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasAlias) {
      Alias = other.Alias;
    }
    if (other.HasEtype) {
      Etype = other.Etype;
    }
    if (other.HasEdirection) {
      Edirection = other.Edirection;
    }
    if (other.HasIsPhysical) {
      IsPhysical = other.IsPhysical;
    }
    if (other.HasIsTerminal) {
      IsTerminal = other.IsTerminal;
    }
    if (other.HasIsControl) {
      IsControl = other.IsControl;
    }
    if (other.HasIsMonitor) {
      IsMonitor = other.IsMonitor;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 24: {
          NodeId = input.ReadUInt32();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Alias = input.ReadString();
          break;
        }
        case 48: {
          Etype = (global::ESystemAudioPortType) input.ReadEnum();
          break;
        }
        case 56: {
          Edirection = (global::ESystemAudioPortDirection) input.ReadEnum();
          break;
        }
        case 64: {
          IsPhysical = input.ReadBool();
          break;
        }
        case 72: {
          IsTerminal = input.ReadBool();
          break;
        }
        case 80: {
          IsControl = input.ReadBool();
          break;
        }
        case 88: {
          IsMonitor = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 24: {
          NodeId = input.ReadUInt32();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Alias = input.ReadString();
          break;
        }
        case 48: {
          Etype = (global::ESystemAudioPortType) input.ReadEnum();
          break;
        }
        case 56: {
          Edirection = (global::ESystemAudioPortDirection) input.ReadEnum();
          break;
        }
        case 64: {
          IsPhysical = input.ReadBool();
          break;
        }
        case 72: {
          IsTerminal = input.ReadBool();
          break;
        }
        case 80: {
          IsControl = input.ReadBool();
          break;
        }
        case 88: {
          IsMonitor = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerLink : pb::IMessage<CMsgSystemAudioManagerLink>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerLink> _parser = new pb::MessageParser<CMsgSystemAudioManagerLink>(() => new CMsgSystemAudioManagerLink());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerLink> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerLink() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerLink(CMsgSystemAudioManagerLink other) : this() {
    _hasBits0 = other._hasBits0;
    base_ = other.base_ != null ? other.base_.Clone() : null;
    outputNodeId_ = other.outputNodeId_;
    outputPortId_ = other.outputPortId_;
    inputNodeId_ = other.inputNodeId_;
    inputPortId_ = other.inputPortId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerLink Clone() {
    return new CMsgSystemAudioManagerLink(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CMsgSystemAudioManagerObject base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioManagerObject Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "output_node_id" field.</summary>
  public const int OutputNodeIdFieldNumber = 2;
  private readonly static uint OutputNodeIdDefaultValue = 0;

  private uint outputNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint OutputNodeId {
    get { if ((_hasBits0 & 1) != 0) { return outputNodeId_; } else { return OutputNodeIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      outputNodeId_ = value;
    }
  }
  /// <summary>Gets whether the "output_node_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOutputNodeId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "output_node_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOutputNodeId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "output_port_id" field.</summary>
  public const int OutputPortIdFieldNumber = 3;
  private readonly static uint OutputPortIdDefaultValue = 0;

  private uint outputPortId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint OutputPortId {
    get { if ((_hasBits0 & 2) != 0) { return outputPortId_; } else { return OutputPortIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      outputPortId_ = value;
    }
  }
  /// <summary>Gets whether the "output_port_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOutputPortId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "output_port_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOutputPortId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "input_node_id" field.</summary>
  public const int InputNodeIdFieldNumber = 4;
  private readonly static uint InputNodeIdDefaultValue = 0;

  private uint inputNodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InputNodeId {
    get { if ((_hasBits0 & 4) != 0) { return inputNodeId_; } else { return InputNodeIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      inputNodeId_ = value;
    }
  }
  /// <summary>Gets whether the "input_node_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInputNodeId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "input_node_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInputNodeId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "input_port_id" field.</summary>
  public const int InputPortIdFieldNumber = 5;
  private readonly static uint InputPortIdDefaultValue = 0;

  private uint inputPortId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InputPortId {
    get { if ((_hasBits0 & 8) != 0) { return inputPortId_; } else { return InputPortIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      inputPortId_ = value;
    }
  }
  /// <summary>Gets whether the "input_port_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInputPortId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "input_port_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInputPortId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerLink);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerLink other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    if (OutputNodeId != other.OutputNodeId) return false;
    if (OutputPortId != other.OutputPortId) return false;
    if (InputNodeId != other.InputNodeId) return false;
    if (InputPortId != other.InputPortId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    if (HasOutputNodeId) hash ^= OutputNodeId.GetHashCode();
    if (HasOutputPortId) hash ^= OutputPortId.GetHashCode();
    if (HasInputNodeId) hash ^= InputNodeId.GetHashCode();
    if (HasInputPortId) hash ^= InputPortId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasOutputNodeId) {
      output.WriteRawTag(16);
      output.WriteUInt32(OutputNodeId);
    }
    if (HasOutputPortId) {
      output.WriteRawTag(24);
      output.WriteUInt32(OutputPortId);
    }
    if (HasInputNodeId) {
      output.WriteRawTag(32);
      output.WriteUInt32(InputNodeId);
    }
    if (HasInputPortId) {
      output.WriteRawTag(40);
      output.WriteUInt32(InputPortId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (HasOutputNodeId) {
      output.WriteRawTag(16);
      output.WriteUInt32(OutputNodeId);
    }
    if (HasOutputPortId) {
      output.WriteRawTag(24);
      output.WriteUInt32(OutputPortId);
    }
    if (HasInputNodeId) {
      output.WriteRawTag(32);
      output.WriteUInt32(InputNodeId);
    }
    if (HasInputPortId) {
      output.WriteRawTag(40);
      output.WriteUInt32(InputPortId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (HasOutputNodeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputNodeId);
    }
    if (HasOutputPortId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputPortId);
    }
    if (HasInputNodeId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputNodeId);
    }
    if (HasInputPortId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputPortId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerLink other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CMsgSystemAudioManagerObject();
      }
      Base.MergeFrom(other.Base);
    }
    if (other.HasOutputNodeId) {
      OutputNodeId = other.OutputNodeId;
    }
    if (other.HasOutputPortId) {
      OutputPortId = other.OutputPortId;
    }
    if (other.HasInputNodeId) {
      InputNodeId = other.InputNodeId;
    }
    if (other.HasInputPortId) {
      InputPortId = other.InputPortId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 16: {
          OutputNodeId = input.ReadUInt32();
          break;
        }
        case 24: {
          OutputPortId = input.ReadUInt32();
          break;
        }
        case 32: {
          InputNodeId = input.ReadUInt32();
          break;
        }
        case 40: {
          InputPortId = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CMsgSystemAudioManagerObject();
          }
          input.ReadMessage(Base);
          break;
        }
        case 16: {
          OutputNodeId = input.ReadUInt32();
          break;
        }
        case 24: {
          OutputPortId = input.ReadUInt32();
          break;
        }
        case 32: {
          InputNodeId = input.ReadUInt32();
          break;
        }
        case 40: {
          InputPortId = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerStateHW : pb::IMessage<CMsgSystemAudioManagerStateHW>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerStateHW> _parser = new pb::MessageParser<CMsgSystemAudioManagerStateHW>(() => new CMsgSystemAudioManagerStateHW());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerStateHW> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerStateHW() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerStateHW(CMsgSystemAudioManagerStateHW other) : this() {
    devices_ = other.devices_.Clone();
    nodes_ = other.nodes_.Clone();
    ports_ = other.ports_.Clone();
    links_ = other.links_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerStateHW Clone() {
    return new CMsgSystemAudioManagerStateHW(this);
  }

  /// <summary>Field number for the "devices" field.</summary>
  public const int DevicesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgSystemAudioManagerDevice> _repeated_devices_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgSystemAudioManagerDevice.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemAudioManagerDevice> devices_ = new pbc::RepeatedField<global::CMsgSystemAudioManagerDevice>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemAudioManagerDevice> Devices {
    get { return devices_; }
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgSystemAudioManagerNode> _repeated_nodes_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgSystemAudioManagerNode.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemAudioManagerNode> nodes_ = new pbc::RepeatedField<global::CMsgSystemAudioManagerNode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemAudioManagerNode> Nodes {
    get { return nodes_; }
  }

  /// <summary>Field number for the "ports" field.</summary>
  public const int PortsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CMsgSystemAudioManagerPort> _repeated_ports_codec
      = pb::FieldCodec.ForMessage(26, global::CMsgSystemAudioManagerPort.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemAudioManagerPort> ports_ = new pbc::RepeatedField<global::CMsgSystemAudioManagerPort>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemAudioManagerPort> Ports {
    get { return ports_; }
  }

  /// <summary>Field number for the "links" field.</summary>
  public const int LinksFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CMsgSystemAudioManagerLink> _repeated_links_codec
      = pb::FieldCodec.ForMessage(34, global::CMsgSystemAudioManagerLink.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemAudioManagerLink> links_ = new pbc::RepeatedField<global::CMsgSystemAudioManagerLink>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemAudioManagerLink> Links {
    get { return links_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerStateHW);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerStateHW other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!devices_.Equals(other.devices_)) return false;
    if(!nodes_.Equals(other.nodes_)) return false;
    if(!ports_.Equals(other.ports_)) return false;
    if(!links_.Equals(other.links_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= devices_.GetHashCode();
    hash ^= nodes_.GetHashCode();
    hash ^= ports_.GetHashCode();
    hash ^= links_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    devices_.WriteTo(output, _repeated_devices_codec);
    nodes_.WriteTo(output, _repeated_nodes_codec);
    ports_.WriteTo(output, _repeated_ports_codec);
    links_.WriteTo(output, _repeated_links_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    devices_.WriteTo(ref output, _repeated_devices_codec);
    nodes_.WriteTo(ref output, _repeated_nodes_codec);
    ports_.WriteTo(ref output, _repeated_ports_codec);
    links_.WriteTo(ref output, _repeated_links_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += devices_.CalculateSize(_repeated_devices_codec);
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    size += ports_.CalculateSize(_repeated_ports_codec);
    size += links_.CalculateSize(_repeated_links_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerStateHW other) {
    if (other == null) {
      return;
    }
    devices_.Add(other.devices_);
    nodes_.Add(other.nodes_);
    ports_.Add(other.ports_);
    links_.Add(other.links_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          devices_.AddEntriesFrom(input, _repeated_devices_codec);
          break;
        }
        case 18: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
        case 26: {
          ports_.AddEntriesFrom(input, _repeated_ports_codec);
          break;
        }
        case 34: {
          links_.AddEntriesFrom(input, _repeated_links_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          devices_.AddEntriesFrom(ref input, _repeated_devices_codec);
          break;
        }
        case 18: {
          nodes_.AddEntriesFrom(ref input, _repeated_nodes_codec);
          break;
        }
        case 26: {
          ports_.AddEntriesFrom(ref input, _repeated_ports_codec);
          break;
        }
        case 34: {
          links_.AddEntriesFrom(ref input, _repeated_links_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerState : pb::IMessage<CMsgSystemAudioManagerState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerState> _parser = new pb::MessageParser<CMsgSystemAudioManagerState>(() => new CMsgSystemAudioManagerState());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerState(CMsgSystemAudioManagerState other) : this() {
    _hasBits0 = other._hasBits0;
    rtimeFilter_ = other.rtimeFilter_;
    counter_ = other.counter_;
    hw_ = other.hw_ != null ? other.hw_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerState Clone() {
    return new CMsgSystemAudioManagerState(this);
  }

  /// <summary>Field number for the "rtime_filter" field.</summary>
  public const int RtimeFilterFieldNumber = 1;
  private readonly static uint RtimeFilterDefaultValue = 0;

  private uint rtimeFilter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeFilter {
    get { if ((_hasBits0 & 1) != 0) { return rtimeFilter_; } else { return RtimeFilterDefaultValue; } }
    set {
      _hasBits0 |= 1;
      rtimeFilter_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_filter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeFilter {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "rtime_filter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeFilter() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "counter" field.</summary>
  public const int CounterFieldNumber = 2;
  private readonly static int CounterDefaultValue = 0;

  private int counter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Counter {
    get { if ((_hasBits0 & 2) != 0) { return counter_; } else { return CounterDefaultValue; } }
    set {
      _hasBits0 |= 2;
      counter_ = value;
    }
  }
  /// <summary>Gets whether the "counter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCounter {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "counter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCounter() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "hw" field.</summary>
  public const int HwFieldNumber = 3;
  private global::CMsgSystemAudioManagerStateHW hw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemAudioManagerStateHW Hw {
    get { return hw_; }
    set {
      hw_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RtimeFilter != other.RtimeFilter) return false;
    if (Counter != other.Counter) return false;
    if (!object.Equals(Hw, other.Hw)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRtimeFilter) hash ^= RtimeFilter.GetHashCode();
    if (HasCounter) hash ^= Counter.GetHashCode();
    if (hw_ != null) hash ^= Hw.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRtimeFilter) {
      output.WriteRawTag(13);
      output.WriteFixed32(RtimeFilter);
    }
    if (HasCounter) {
      output.WriteRawTag(16);
      output.WriteInt32(Counter);
    }
    if (hw_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Hw);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRtimeFilter) {
      output.WriteRawTag(13);
      output.WriteFixed32(RtimeFilter);
    }
    if (HasCounter) {
      output.WriteRawTag(16);
      output.WriteInt32(Counter);
    }
    if (hw_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Hw);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRtimeFilter) {
      size += 1 + 4;
    }
    if (HasCounter) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
    }
    if (hw_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hw);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerState other) {
    if (other == null) {
      return;
    }
    if (other.HasRtimeFilter) {
      RtimeFilter = other.RtimeFilter;
    }
    if (other.HasCounter) {
      Counter = other.Counter;
    }
    if (other.hw_ != null) {
      if (hw_ == null) {
        Hw = new global::CMsgSystemAudioManagerStateHW();
      }
      Hw.MergeFrom(other.Hw);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          RtimeFilter = input.ReadFixed32();
          break;
        }
        case 16: {
          Counter = input.ReadInt32();
          break;
        }
        case 26: {
          if (hw_ == null) {
            Hw = new global::CMsgSystemAudioManagerStateHW();
          }
          input.ReadMessage(Hw);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          RtimeFilter = input.ReadFixed32();
          break;
        }
        case 16: {
          Counter = input.ReadInt32();
          break;
        }
        case 26: {
          if (hw_ == null) {
            Hw = new global::CMsgSystemAudioManagerStateHW();
          }
          input.ReadMessage(Hw);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemAudioManagerUpdateSomething : pb::IMessage<CMsgSystemAudioManagerUpdateSomething>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemAudioManagerUpdateSomething> _parser = new pb::MessageParser<CMsgSystemAudioManagerUpdateSomething>(() => new CMsgSystemAudioManagerUpdateSomething());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemAudioManagerUpdateSomething> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerUpdateSomething() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerUpdateSomething(CMsgSystemAudioManagerUpdateSomething other) : this() {
    _hasBits0 = other._hasBits0;
    counter_ = other.counter_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemAudioManagerUpdateSomething Clone() {
    return new CMsgSystemAudioManagerUpdateSomething(this);
  }

  /// <summary>Field number for the "counter" field.</summary>
  public const int CounterFieldNumber = 1;
  private readonly static int CounterDefaultValue = 0;

  private int counter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Counter {
    get { if ((_hasBits0 & 1) != 0) { return counter_; } else { return CounterDefaultValue; } }
    set {
      _hasBits0 |= 1;
      counter_ = value;
    }
  }
  /// <summary>Gets whether the "counter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCounter {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "counter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCounter() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemAudioManagerUpdateSomething);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemAudioManagerUpdateSomething other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Counter != other.Counter) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCounter) hash ^= Counter.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCounter) {
      output.WriteRawTag(8);
      output.WriteInt32(Counter);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCounter) {
      output.WriteRawTag(8);
      output.WriteInt32(Counter);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCounter) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Counter);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemAudioManagerUpdateSomething other) {
    if (other == null) {
      return;
    }
    if (other.HasCounter) {
      Counter = other.Counter;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Counter = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Counter = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDisplayMode : pb::IMessage<CMsgSystemDisplayMode>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDisplayMode> _parser = new pb::MessageParser<CMsgSystemDisplayMode>(() => new CMsgSystemDisplayMode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDisplayMode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayMode(CMsgSystemDisplayMode other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    width_ = other.width_;
    height_ = other.height_;
    refreshHz_ = other.refreshHz_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayMode Clone() {
    return new CMsgSystemDisplayMode(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 2;
  private readonly static int WidthDefaultValue = 0;

  private int width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Width {
    get { if ((_hasBits0 & 2) != 0) { return width_; } else { return WidthDefaultValue; } }
    set {
      _hasBits0 |= 2;
      width_ = value;
    }
  }
  /// <summary>Gets whether the "width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWidth {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWidth() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 3;
  private readonly static int HeightDefaultValue = 0;

  private int height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Height {
    get { if ((_hasBits0 & 4) != 0) { return height_; } else { return HeightDefaultValue; } }
    set {
      _hasBits0 |= 4;
      height_ = value;
    }
  }
  /// <summary>Gets whether the "height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeight {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeight() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "refresh_hz" field.</summary>
  public const int RefreshHzFieldNumber = 4;
  private readonly static int RefreshHzDefaultValue = 0;

  private int refreshHz_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RefreshHz {
    get { if ((_hasBits0 & 8) != 0) { return refreshHz_; } else { return RefreshHzDefaultValue; } }
    set {
      _hasBits0 |= 8;
      refreshHz_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_hz" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRefreshHz {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "refresh_hz" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRefreshHz() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDisplayMode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDisplayMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (RefreshHz != other.RefreshHz) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasWidth) hash ^= Width.GetHashCode();
    if (HasHeight) hash ^= Height.GetHashCode();
    if (HasRefreshHz) hash ^= RefreshHz.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasWidth) {
      output.WriteRawTag(16);
      output.WriteInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(24);
      output.WriteInt32(Height);
    }
    if (HasRefreshHz) {
      output.WriteRawTag(32);
      output.WriteInt32(RefreshHz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasWidth) {
      output.WriteRawTag(16);
      output.WriteInt32(Width);
    }
    if (HasHeight) {
      output.WriteRawTag(24);
      output.WriteInt32(Height);
    }
    if (HasRefreshHz) {
      output.WriteRawTag(32);
      output.WriteInt32(RefreshHz);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasWidth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (HasHeight) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (HasRefreshHz) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshHz);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDisplayMode other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasWidth) {
      Width = other.Width;
    }
    if (other.HasHeight) {
      Height = other.Height;
    }
    if (other.HasRefreshHz) {
      RefreshHz = other.RefreshHz;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Width = input.ReadInt32();
          break;
        }
        case 24: {
          Height = input.ReadInt32();
          break;
        }
        case 32: {
          RefreshHz = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Width = input.ReadInt32();
          break;
        }
        case 24: {
          Height = input.ReadInt32();
          break;
        }
        case 32: {
          RefreshHz = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDisplay : pb::IMessage<CMsgSystemDisplay>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDisplay> _parser = new pb::MessageParser<CMsgSystemDisplay>(() => new CMsgSystemDisplay());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDisplay> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplay() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplay(CMsgSystemDisplay other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    description_ = other.description_;
    isPrimary_ = other.isPrimary_;
    isEnabled_ = other.isEnabled_;
    isInternal_ = other.isInternal_;
    hasModeOverride_ = other.hasModeOverride_;
    widthMm_ = other.widthMm_;
    heightMm_ = other.heightMm_;
    currentModeId_ = other.currentModeId_;
    modes_ = other.modes_.Clone();
    refreshRateMin_ = other.refreshRateMin_;
    refreshRateMax_ = other.refreshRateMax_;
    isVrrCapable_ = other.isVrrCapable_;
    isVrrEnabled_ = other.isVrrEnabled_;
    isHdrCapable_ = other.isHdrCapable_;
    isHdrEnabled_ = other.isHdrEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplay Clone() {
    return new CMsgSystemDisplay(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "is_primary" field.</summary>
  public const int IsPrimaryFieldNumber = 4;
  private readonly static bool IsPrimaryDefaultValue = false;

  private bool isPrimary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsPrimary {
    get { if ((_hasBits0 & 2) != 0) { return isPrimary_; } else { return IsPrimaryDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isPrimary_ = value;
    }
  }
  /// <summary>Gets whether the "is_primary" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsPrimary {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_primary" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsPrimary() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_enabled" field.</summary>
  public const int IsEnabledFieldNumber = 5;
  private readonly static bool IsEnabledDefaultValue = false;

  private bool isEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsEnabled {
    get { if ((_hasBits0 & 4) != 0) { return isEnabled_; } else { return IsEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_internal" field.</summary>
  public const int IsInternalFieldNumber = 6;
  private readonly static bool IsInternalDefaultValue = false;

  private bool isInternal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsInternal {
    get { if ((_hasBits0 & 8) != 0) { return isInternal_; } else { return IsInternalDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isInternal_ = value;
    }
  }
  /// <summary>Gets whether the "is_internal" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsInternal {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_internal" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsInternal() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "has_mode_override" field.</summary>
  public const int HasModeOverrideFieldNumber = 7;
  private readonly static bool HasModeOverrideDefaultValue = false;

  private bool hasModeOverride_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasModeOverride {
    get { if ((_hasBits0 & 16) != 0) { return hasModeOverride_; } else { return HasModeOverrideDefaultValue; } }
    set {
      _hasBits0 |= 16;
      hasModeOverride_ = value;
    }
  }
  /// <summary>Gets whether the "has_mode_override" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHasModeOverride {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "has_mode_override" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHasModeOverride() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "width_mm" field.</summary>
  public const int WidthMmFieldNumber = 8;
  private readonly static int WidthMmDefaultValue = 0;

  private int widthMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WidthMm {
    get { if ((_hasBits0 & 32) != 0) { return widthMm_; } else { return WidthMmDefaultValue; } }
    set {
      _hasBits0 |= 32;
      widthMm_ = value;
    }
  }
  /// <summary>Gets whether the "width_mm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWidthMm {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "width_mm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWidthMm() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "height_mm" field.</summary>
  public const int HeightMmFieldNumber = 9;
  private readonly static int HeightMmDefaultValue = 0;

  private int heightMm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int HeightMm {
    get { if ((_hasBits0 & 64) != 0) { return heightMm_; } else { return HeightMmDefaultValue; } }
    set {
      _hasBits0 |= 64;
      heightMm_ = value;
    }
  }
  /// <summary>Gets whether the "height_mm" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeightMm {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "height_mm" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeightMm() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "current_mode_id" field.</summary>
  public const int CurrentModeIdFieldNumber = 10;
  private readonly static int CurrentModeIdDefaultValue = 0;

  private int currentModeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CurrentModeId {
    get { if ((_hasBits0 & 128) != 0) { return currentModeId_; } else { return CurrentModeIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      currentModeId_ = value;
    }
  }
  /// <summary>Gets whether the "current_mode_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrentModeId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "current_mode_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrentModeId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "modes" field.</summary>
  public const int ModesFieldNumber = 11;
  private static readonly pb::FieldCodec<global::CMsgSystemDisplayMode> _repeated_modes_codec
      = pb::FieldCodec.ForMessage(90, global::CMsgSystemDisplayMode.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemDisplayMode> modes_ = new pbc::RepeatedField<global::CMsgSystemDisplayMode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemDisplayMode> Modes {
    get { return modes_; }
  }

  /// <summary>Field number for the "refresh_rate_min" field.</summary>
  public const int RefreshRateMinFieldNumber = 12;
  private readonly static int RefreshRateMinDefaultValue = 0;

  private int refreshRateMin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RefreshRateMin {
    get { if ((_hasBits0 & 256) != 0) { return refreshRateMin_; } else { return RefreshRateMinDefaultValue; } }
    set {
      _hasBits0 |= 256;
      refreshRateMin_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_rate_min" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRefreshRateMin {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "refresh_rate_min" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRefreshRateMin() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "refresh_rate_max" field.</summary>
  public const int RefreshRateMaxFieldNumber = 13;
  private readonly static int RefreshRateMaxDefaultValue = 0;

  private int refreshRateMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RefreshRateMax {
    get { if ((_hasBits0 & 512) != 0) { return refreshRateMax_; } else { return RefreshRateMaxDefaultValue; } }
    set {
      _hasBits0 |= 512;
      refreshRateMax_ = value;
    }
  }
  /// <summary>Gets whether the "refresh_rate_max" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRefreshRateMax {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "refresh_rate_max" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRefreshRateMax() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "is_vrr_capable" field.</summary>
  public const int IsVrrCapableFieldNumber = 14;
  private readonly static bool IsVrrCapableDefaultValue = false;

  private bool isVrrCapable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVrrCapable {
    get { if ((_hasBits0 & 1024) != 0) { return isVrrCapable_; } else { return IsVrrCapableDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      isVrrCapable_ = value;
    }
  }
  /// <summary>Gets whether the "is_vrr_capable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVrrCapable {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "is_vrr_capable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVrrCapable() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "is_vrr_enabled" field.</summary>
  public const int IsVrrEnabledFieldNumber = 15;
  private readonly static bool IsVrrEnabledDefaultValue = false;

  private bool isVrrEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsVrrEnabled {
    get { if ((_hasBits0 & 2048) != 0) { return isVrrEnabled_; } else { return IsVrrEnabledDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      isVrrEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_vrr_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsVrrEnabled {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "is_vrr_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsVrrEnabled() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "is_hdr_capable" field.</summary>
  public const int IsHdrCapableFieldNumber = 16;
  private readonly static bool IsHdrCapableDefaultValue = false;

  private bool isHdrCapable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHdrCapable {
    get { if ((_hasBits0 & 4096) != 0) { return isHdrCapable_; } else { return IsHdrCapableDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      isHdrCapable_ = value;
    }
  }
  /// <summary>Gets whether the "is_hdr_capable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHdrCapable {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "is_hdr_capable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHdrCapable() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "is_hdr_enabled" field.</summary>
  public const int IsHdrEnabledFieldNumber = 17;
  private readonly static bool IsHdrEnabledDefaultValue = false;

  private bool isHdrEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHdrEnabled {
    get { if ((_hasBits0 & 8192) != 0) { return isHdrEnabled_; } else { return IsHdrEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      isHdrEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_hdr_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHdrEnabled {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "is_hdr_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHdrEnabled() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDisplay);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDisplay other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (IsPrimary != other.IsPrimary) return false;
    if (IsEnabled != other.IsEnabled) return false;
    if (IsInternal != other.IsInternal) return false;
    if (HasModeOverride != other.HasModeOverride) return false;
    if (WidthMm != other.WidthMm) return false;
    if (HeightMm != other.HeightMm) return false;
    if (CurrentModeId != other.CurrentModeId) return false;
    if(!modes_.Equals(other.modes_)) return false;
    if (RefreshRateMin != other.RefreshRateMin) return false;
    if (RefreshRateMax != other.RefreshRateMax) return false;
    if (IsVrrCapable != other.IsVrrCapable) return false;
    if (IsVrrEnabled != other.IsVrrEnabled) return false;
    if (IsHdrCapable != other.IsHdrCapable) return false;
    if (IsHdrEnabled != other.IsHdrEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasIsPrimary) hash ^= IsPrimary.GetHashCode();
    if (HasIsEnabled) hash ^= IsEnabled.GetHashCode();
    if (HasIsInternal) hash ^= IsInternal.GetHashCode();
    if (HasHasModeOverride) hash ^= HasModeOverride.GetHashCode();
    if (HasWidthMm) hash ^= WidthMm.GetHashCode();
    if (HasHeightMm) hash ^= HeightMm.GetHashCode();
    if (HasCurrentModeId) hash ^= CurrentModeId.GetHashCode();
    hash ^= modes_.GetHashCode();
    if (HasRefreshRateMin) hash ^= RefreshRateMin.GetHashCode();
    if (HasRefreshRateMax) hash ^= RefreshRateMax.GetHashCode();
    if (HasIsVrrCapable) hash ^= IsVrrCapable.GetHashCode();
    if (HasIsVrrEnabled) hash ^= IsVrrEnabled.GetHashCode();
    if (HasIsHdrCapable) hash ^= IsHdrCapable.GetHashCode();
    if (HasIsHdrEnabled) hash ^= IsHdrEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasIsPrimary) {
      output.WriteRawTag(32);
      output.WriteBool(IsPrimary);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(40);
      output.WriteBool(IsEnabled);
    }
    if (HasIsInternal) {
      output.WriteRawTag(48);
      output.WriteBool(IsInternal);
    }
    if (HasHasModeOverride) {
      output.WriteRawTag(56);
      output.WriteBool(HasModeOverride);
    }
    if (HasWidthMm) {
      output.WriteRawTag(64);
      output.WriteInt32(WidthMm);
    }
    if (HasHeightMm) {
      output.WriteRawTag(72);
      output.WriteInt32(HeightMm);
    }
    if (HasCurrentModeId) {
      output.WriteRawTag(80);
      output.WriteInt32(CurrentModeId);
    }
    modes_.WriteTo(output, _repeated_modes_codec);
    if (HasRefreshRateMin) {
      output.WriteRawTag(96);
      output.WriteInt32(RefreshRateMin);
    }
    if (HasRefreshRateMax) {
      output.WriteRawTag(104);
      output.WriteInt32(RefreshRateMax);
    }
    if (HasIsVrrCapable) {
      output.WriteRawTag(112);
      output.WriteBool(IsVrrCapable);
    }
    if (HasIsVrrEnabled) {
      output.WriteRawTag(120);
      output.WriteBool(IsVrrEnabled);
    }
    if (HasIsHdrCapable) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsHdrCapable);
    }
    if (HasIsHdrEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(IsHdrEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasIsPrimary) {
      output.WriteRawTag(32);
      output.WriteBool(IsPrimary);
    }
    if (HasIsEnabled) {
      output.WriteRawTag(40);
      output.WriteBool(IsEnabled);
    }
    if (HasIsInternal) {
      output.WriteRawTag(48);
      output.WriteBool(IsInternal);
    }
    if (HasHasModeOverride) {
      output.WriteRawTag(56);
      output.WriteBool(HasModeOverride);
    }
    if (HasWidthMm) {
      output.WriteRawTag(64);
      output.WriteInt32(WidthMm);
    }
    if (HasHeightMm) {
      output.WriteRawTag(72);
      output.WriteInt32(HeightMm);
    }
    if (HasCurrentModeId) {
      output.WriteRawTag(80);
      output.WriteInt32(CurrentModeId);
    }
    modes_.WriteTo(ref output, _repeated_modes_codec);
    if (HasRefreshRateMin) {
      output.WriteRawTag(96);
      output.WriteInt32(RefreshRateMin);
    }
    if (HasRefreshRateMax) {
      output.WriteRawTag(104);
      output.WriteInt32(RefreshRateMax);
    }
    if (HasIsVrrCapable) {
      output.WriteRawTag(112);
      output.WriteBool(IsVrrCapable);
    }
    if (HasIsVrrEnabled) {
      output.WriteRawTag(120);
      output.WriteBool(IsVrrEnabled);
    }
    if (HasIsHdrCapable) {
      output.WriteRawTag(128, 1);
      output.WriteBool(IsHdrCapable);
    }
    if (HasIsHdrEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(IsHdrEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasIsPrimary) {
      size += 1 + 1;
    }
    if (HasIsEnabled) {
      size += 1 + 1;
    }
    if (HasIsInternal) {
      size += 1 + 1;
    }
    if (HasHasModeOverride) {
      size += 1 + 1;
    }
    if (HasWidthMm) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthMm);
    }
    if (HasHeightMm) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightMm);
    }
    if (HasCurrentModeId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentModeId);
    }
    size += modes_.CalculateSize(_repeated_modes_codec);
    if (HasRefreshRateMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshRateMin);
    }
    if (HasRefreshRateMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshRateMax);
    }
    if (HasIsVrrCapable) {
      size += 1 + 1;
    }
    if (HasIsVrrEnabled) {
      size += 1 + 1;
    }
    if (HasIsHdrCapable) {
      size += 2 + 1;
    }
    if (HasIsHdrEnabled) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDisplay other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasIsPrimary) {
      IsPrimary = other.IsPrimary;
    }
    if (other.HasIsEnabled) {
      IsEnabled = other.IsEnabled;
    }
    if (other.HasIsInternal) {
      IsInternal = other.IsInternal;
    }
    if (other.HasHasModeOverride) {
      HasModeOverride = other.HasModeOverride;
    }
    if (other.HasWidthMm) {
      WidthMm = other.WidthMm;
    }
    if (other.HasHeightMm) {
      HeightMm = other.HeightMm;
    }
    if (other.HasCurrentModeId) {
      CurrentModeId = other.CurrentModeId;
    }
    modes_.Add(other.modes_);
    if (other.HasRefreshRateMin) {
      RefreshRateMin = other.RefreshRateMin;
    }
    if (other.HasRefreshRateMax) {
      RefreshRateMax = other.RefreshRateMax;
    }
    if (other.HasIsVrrCapable) {
      IsVrrCapable = other.IsVrrCapable;
    }
    if (other.HasIsVrrEnabled) {
      IsVrrEnabled = other.IsVrrEnabled;
    }
    if (other.HasIsHdrCapable) {
      IsHdrCapable = other.IsHdrCapable;
    }
    if (other.HasIsHdrEnabled) {
      IsHdrEnabled = other.IsHdrEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          IsPrimary = input.ReadBool();
          break;
        }
        case 40: {
          IsEnabled = input.ReadBool();
          break;
        }
        case 48: {
          IsInternal = input.ReadBool();
          break;
        }
        case 56: {
          HasModeOverride = input.ReadBool();
          break;
        }
        case 64: {
          WidthMm = input.ReadInt32();
          break;
        }
        case 72: {
          HeightMm = input.ReadInt32();
          break;
        }
        case 80: {
          CurrentModeId = input.ReadInt32();
          break;
        }
        case 90: {
          modes_.AddEntriesFrom(input, _repeated_modes_codec);
          break;
        }
        case 96: {
          RefreshRateMin = input.ReadInt32();
          break;
        }
        case 104: {
          RefreshRateMax = input.ReadInt32();
          break;
        }
        case 112: {
          IsVrrCapable = input.ReadBool();
          break;
        }
        case 120: {
          IsVrrEnabled = input.ReadBool();
          break;
        }
        case 128: {
          IsHdrCapable = input.ReadBool();
          break;
        }
        case 136: {
          IsHdrEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          IsPrimary = input.ReadBool();
          break;
        }
        case 40: {
          IsEnabled = input.ReadBool();
          break;
        }
        case 48: {
          IsInternal = input.ReadBool();
          break;
        }
        case 56: {
          HasModeOverride = input.ReadBool();
          break;
        }
        case 64: {
          WidthMm = input.ReadInt32();
          break;
        }
        case 72: {
          HeightMm = input.ReadInt32();
          break;
        }
        case 80: {
          CurrentModeId = input.ReadInt32();
          break;
        }
        case 90: {
          modes_.AddEntriesFrom(ref input, _repeated_modes_codec);
          break;
        }
        case 96: {
          RefreshRateMin = input.ReadInt32();
          break;
        }
        case 104: {
          RefreshRateMax = input.ReadInt32();
          break;
        }
        case 112: {
          IsVrrCapable = input.ReadBool();
          break;
        }
        case 120: {
          IsVrrEnabled = input.ReadBool();
          break;
        }
        case 128: {
          IsHdrCapable = input.ReadBool();
          break;
        }
        case 136: {
          IsHdrEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDisplayManagerState : pb::IMessage<CMsgSystemDisplayManagerState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDisplayManagerState> _parser = new pb::MessageParser<CMsgSystemDisplayManagerState>(() => new CMsgSystemDisplayManagerState());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDisplayManagerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerState(CMsgSystemDisplayManagerState other) : this() {
    _hasBits0 = other._hasBits0;
    displays_ = other.displays_.Clone();
    isModeSwitchingSupported_ = other.isModeSwitchingSupported_;
    compatibilityMode_ = other.compatibilityMode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerState Clone() {
    return new CMsgSystemDisplayManagerState(this);
  }

  /// <summary>Field number for the "displays" field.</summary>
  public const int DisplaysFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgSystemDisplay> _repeated_displays_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgSystemDisplay.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemDisplay> displays_ = new pbc::RepeatedField<global::CMsgSystemDisplay>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemDisplay> Displays {
    get { return displays_; }
  }

  /// <summary>Field number for the "is_mode_switching_supported" field.</summary>
  public const int IsModeSwitchingSupportedFieldNumber = 2;
  private readonly static bool IsModeSwitchingSupportedDefaultValue = false;

  private bool isModeSwitchingSupported_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsModeSwitchingSupported {
    get { if ((_hasBits0 & 1) != 0) { return isModeSwitchingSupported_; } else { return IsModeSwitchingSupportedDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isModeSwitchingSupported_ = value;
    }
  }
  /// <summary>Gets whether the "is_mode_switching_supported" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsModeSwitchingSupported {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_mode_switching_supported" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsModeSwitchingSupported() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "compatibility_mode" field.</summary>
  public const int CompatibilityModeFieldNumber = 3;
  private readonly static global::ESystemDisplayCompatibilityMode CompatibilityModeDefaultValue = global::ESystemDisplayCompatibilityMode.KEsystemDisplayCompatibilityModeInvalid;

  private global::ESystemDisplayCompatibilityMode compatibilityMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemDisplayCompatibilityMode CompatibilityMode {
    get { if ((_hasBits0 & 2) != 0) { return compatibilityMode_; } else { return CompatibilityModeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      compatibilityMode_ = value;
    }
  }
  /// <summary>Gets whether the "compatibility_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCompatibilityMode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "compatibility_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCompatibilityMode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDisplayManagerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDisplayManagerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!displays_.Equals(other.displays_)) return false;
    if (IsModeSwitchingSupported != other.IsModeSwitchingSupported) return false;
    if (CompatibilityMode != other.CompatibilityMode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= displays_.GetHashCode();
    if (HasIsModeSwitchingSupported) hash ^= IsModeSwitchingSupported.GetHashCode();
    if (HasCompatibilityMode) hash ^= CompatibilityMode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    displays_.WriteTo(output, _repeated_displays_codec);
    if (HasIsModeSwitchingSupported) {
      output.WriteRawTag(16);
      output.WriteBool(IsModeSwitchingSupported);
    }
    if (HasCompatibilityMode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CompatibilityMode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    displays_.WriteTo(ref output, _repeated_displays_codec);
    if (HasIsModeSwitchingSupported) {
      output.WriteRawTag(16);
      output.WriteBool(IsModeSwitchingSupported);
    }
    if (HasCompatibilityMode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CompatibilityMode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += displays_.CalculateSize(_repeated_displays_codec);
    if (HasIsModeSwitchingSupported) {
      size += 1 + 1;
    }
    if (HasCompatibilityMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompatibilityMode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDisplayManagerState other) {
    if (other == null) {
      return;
    }
    displays_.Add(other.displays_);
    if (other.HasIsModeSwitchingSupported) {
      IsModeSwitchingSupported = other.IsModeSwitchingSupported;
    }
    if (other.HasCompatibilityMode) {
      CompatibilityMode = other.CompatibilityMode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          displays_.AddEntriesFrom(input, _repeated_displays_codec);
          break;
        }
        case 16: {
          IsModeSwitchingSupported = input.ReadBool();
          break;
        }
        case 24: {
          CompatibilityMode = (global::ESystemDisplayCompatibilityMode) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          displays_.AddEntriesFrom(ref input, _repeated_displays_codec);
          break;
        }
        case 16: {
          IsModeSwitchingSupported = input.ReadBool();
          break;
        }
        case 24: {
          CompatibilityMode = (global::ESystemDisplayCompatibilityMode) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemDisplayManagerSetMode : pb::IMessage<CMsgSystemDisplayManagerSetMode>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemDisplayManagerSetMode> _parser = new pb::MessageParser<CMsgSystemDisplayManagerSetMode>(() => new CMsgSystemDisplayManagerSetMode());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemDisplayManagerSetMode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerSetMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerSetMode(CMsgSystemDisplayManagerSetMode other) : this() {
    _hasBits0 = other._hasBits0;
    displayId_ = other.displayId_;
    modeId_ = other.modeId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemDisplayManagerSetMode Clone() {
    return new CMsgSystemDisplayManagerSetMode(this);
  }

  /// <summary>Field number for the "display_id" field.</summary>
  public const int DisplayIdFieldNumber = 1;
  private readonly static int DisplayIdDefaultValue = 0;

  private int displayId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DisplayId {
    get { if ((_hasBits0 & 1) != 0) { return displayId_; } else { return DisplayIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      displayId_ = value;
    }
  }
  /// <summary>Gets whether the "display_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "display_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "mode_id" field.</summary>
  public const int ModeIdFieldNumber = 2;
  private readonly static int ModeIdDefaultValue = 0;

  private int modeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ModeId {
    get { if ((_hasBits0 & 2) != 0) { return modeId_; } else { return ModeIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      modeId_ = value;
    }
  }
  /// <summary>Gets whether the "mode_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasModeId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "mode_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearModeId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemDisplayManagerSetMode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemDisplayManagerSetMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DisplayId != other.DisplayId) return false;
    if (ModeId != other.ModeId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDisplayId) hash ^= DisplayId.GetHashCode();
    if (HasModeId) hash ^= ModeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDisplayId) {
      output.WriteRawTag(8);
      output.WriteInt32(DisplayId);
    }
    if (HasModeId) {
      output.WriteRawTag(16);
      output.WriteInt32(ModeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDisplayId) {
      output.WriteRawTag(8);
      output.WriteInt32(DisplayId);
    }
    if (HasModeId) {
      output.WriteRawTag(16);
      output.WriteInt32(ModeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDisplayId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayId);
    }
    if (HasModeId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemDisplayManagerSetMode other) {
    if (other == null) {
      return;
    }
    if (other.HasDisplayId) {
      DisplayId = other.DisplayId;
    }
    if (other.HasModeId) {
      ModeId = other.ModeId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DisplayId = input.ReadInt32();
          break;
        }
        case 16: {
          ModeId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DisplayId = input.ReadInt32();
          break;
        }
        case 16: {
          ModeId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemManagerSettings : pb::IMessage<CMsgSystemManagerSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemManagerSettings> _parser = new pb::MessageParser<CMsgSystemManagerSettings>(() => new CMsgSystemManagerSettings());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemManagerSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemManagerSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemManagerSettings(CMsgSystemManagerSettings other) : this() {
    _hasBits0 = other._hasBits0;
    idleBacklightDimBatterySeconds_ = other.idleBacklightDimBatterySeconds_;
    idleBacklightDimAcSeconds_ = other.idleBacklightDimAcSeconds_;
    idleSuspendBatterySeconds_ = other.idleSuspendBatterySeconds_;
    idleSuspendAcSeconds_ = other.idleSuspendAcSeconds_;
    idleSuspendSupressed_ = other.idleSuspendSupressed_;
    isAdaptiveBrightnessAvailable_ = other.isAdaptiveBrightnessAvailable_;
    displayAdaptiveBrightnessEnabled_ = other.displayAdaptiveBrightnessEnabled_;
    displayNightmodeEnabled_ = other.displayNightmodeEnabled_;
    displayNightmodeTintstrength_ = other.displayNightmodeTintstrength_;
    displayNightmodeMaxhue_ = other.displayNightmodeMaxhue_;
    displayNightmodeMaxsat_ = other.displayNightmodeMaxsat_;
    displayNightmodeUiexp_ = other.displayNightmodeUiexp_;
    displayNightmodeBlend_ = other.displayNightmodeBlend_;
    displayNightmodeReset_ = other.displayNightmodeReset_;
    displayNightmodeScheduleEnabled_ = other.displayNightmodeScheduleEnabled_;
    displayNightmodeScheduleStarttime_ = other.displayNightmodeScheduleStarttime_;
    displayNightmodeScheduleEndtime_ = other.displayNightmodeScheduleEndtime_;
    displayDiagnosticsEnabled_ = other.displayDiagnosticsEnabled_;
    alsLuxLatest_ = other.alsLuxLatest_;
    alsLuxMedian_ = other.alsLuxMedian_;
    displayBacklightRaw_ = other.displayBacklightRaw_;
    displayBrightnessAdaptivemin_ = other.displayBrightnessAdaptivemin_;
    displayBrightnessAdaptivemax_ = other.displayBrightnessAdaptivemax_;
    isWifiPowersaveEnabled_ = other.isWifiPowersaveEnabled_;
    isFanControlAvailable_ = other.isFanControlAvailable_;
    fanControlMode_ = other.fanControlMode_;
    isDisplayBrightnessAvailable_ = other.isDisplayBrightnessAvailable_;
    isDisplayColormanagementAvailable_ = other.isDisplayColormanagementAvailable_;
    displayColorgamut_ = other.displayColorgamut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemManagerSettings Clone() {
    return new CMsgSystemManagerSettings(this);
  }

  /// <summary>Field number for the "idle_backlight_dim_battery_seconds" field.</summary>
  public const int IdleBacklightDimBatterySecondsFieldNumber = 1;
  private readonly static float IdleBacklightDimBatterySecondsDefaultValue = 0F;

  private float idleBacklightDimBatterySeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IdleBacklightDimBatterySeconds {
    get { if ((_hasBits0 & 1) != 0) { return idleBacklightDimBatterySeconds_; } else { return IdleBacklightDimBatterySecondsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      idleBacklightDimBatterySeconds_ = value;
    }
  }
  /// <summary>Gets whether the "idle_backlight_dim_battery_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIdleBacklightDimBatterySeconds {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "idle_backlight_dim_battery_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIdleBacklightDimBatterySeconds() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "idle_backlight_dim_ac_seconds" field.</summary>
  public const int IdleBacklightDimAcSecondsFieldNumber = 2;
  private readonly static float IdleBacklightDimAcSecondsDefaultValue = 0F;

  private float idleBacklightDimAcSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IdleBacklightDimAcSeconds {
    get { if ((_hasBits0 & 2) != 0) { return idleBacklightDimAcSeconds_; } else { return IdleBacklightDimAcSecondsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      idleBacklightDimAcSeconds_ = value;
    }
  }
  /// <summary>Gets whether the "idle_backlight_dim_ac_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIdleBacklightDimAcSeconds {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "idle_backlight_dim_ac_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIdleBacklightDimAcSeconds() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "idle_suspend_battery_seconds" field.</summary>
  public const int IdleSuspendBatterySecondsFieldNumber = 3;
  private readonly static float IdleSuspendBatterySecondsDefaultValue = 0F;

  private float idleSuspendBatterySeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IdleSuspendBatterySeconds {
    get { if ((_hasBits0 & 4) != 0) { return idleSuspendBatterySeconds_; } else { return IdleSuspendBatterySecondsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      idleSuspendBatterySeconds_ = value;
    }
  }
  /// <summary>Gets whether the "idle_suspend_battery_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIdleSuspendBatterySeconds {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "idle_suspend_battery_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIdleSuspendBatterySeconds() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "idle_suspend_ac_seconds" field.</summary>
  public const int IdleSuspendAcSecondsFieldNumber = 4;
  private readonly static float IdleSuspendAcSecondsDefaultValue = 0F;

  private float idleSuspendAcSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IdleSuspendAcSeconds {
    get { if ((_hasBits0 & 8) != 0) { return idleSuspendAcSeconds_; } else { return IdleSuspendAcSecondsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      idleSuspendAcSeconds_ = value;
    }
  }
  /// <summary>Gets whether the "idle_suspend_ac_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIdleSuspendAcSeconds {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "idle_suspend_ac_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIdleSuspendAcSeconds() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "idle_suspend_supressed" field.</summary>
  public const int IdleSuspendSupressedFieldNumber = 5;
  private readonly static bool IdleSuspendSupressedDefaultValue = false;

  private bool idleSuspendSupressed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IdleSuspendSupressed {
    get { if ((_hasBits0 & 16) != 0) { return idleSuspendSupressed_; } else { return IdleSuspendSupressedDefaultValue; } }
    set {
      _hasBits0 |= 16;
      idleSuspendSupressed_ = value;
    }
  }
  /// <summary>Gets whether the "idle_suspend_supressed" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIdleSuspendSupressed {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "idle_suspend_supressed" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIdleSuspendSupressed() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "is_adaptive_brightness_available" field.</summary>
  public const int IsAdaptiveBrightnessAvailableFieldNumber = 6;
  private readonly static bool IsAdaptiveBrightnessAvailableDefaultValue = false;

  private bool isAdaptiveBrightnessAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAdaptiveBrightnessAvailable {
    get { if ((_hasBits0 & 32) != 0) { return isAdaptiveBrightnessAvailable_; } else { return IsAdaptiveBrightnessAvailableDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isAdaptiveBrightnessAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_adaptive_brightness_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsAdaptiveBrightnessAvailable {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "is_adaptive_brightness_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsAdaptiveBrightnessAvailable() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "display_adaptive_brightness_enabled" field.</summary>
  public const int DisplayAdaptiveBrightnessEnabledFieldNumber = 7;
  private readonly static bool DisplayAdaptiveBrightnessEnabledDefaultValue = false;

  private bool displayAdaptiveBrightnessEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisplayAdaptiveBrightnessEnabled {
    get { if ((_hasBits0 & 64) != 0) { return displayAdaptiveBrightnessEnabled_; } else { return DisplayAdaptiveBrightnessEnabledDefaultValue; } }
    set {
      _hasBits0 |= 64;
      displayAdaptiveBrightnessEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "display_adaptive_brightness_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayAdaptiveBrightnessEnabled {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "display_adaptive_brightness_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayAdaptiveBrightnessEnabled() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "display_nightmode_enabled" field.</summary>
  public const int DisplayNightmodeEnabledFieldNumber = 10;
  private readonly static bool DisplayNightmodeEnabledDefaultValue = false;

  private bool displayNightmodeEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisplayNightmodeEnabled {
    get { if ((_hasBits0 & 128) != 0) { return displayNightmodeEnabled_; } else { return DisplayNightmodeEnabledDefaultValue; } }
    set {
      _hasBits0 |= 128;
      displayNightmodeEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeEnabled {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeEnabled() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "display_nightmode_tintstrength" field.</summary>
  public const int DisplayNightmodeTintstrengthFieldNumber = 11;
  private readonly static float DisplayNightmodeTintstrengthDefaultValue = 0F;

  private float displayNightmodeTintstrength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeTintstrength {
    get { if ((_hasBits0 & 256) != 0) { return displayNightmodeTintstrength_; } else { return DisplayNightmodeTintstrengthDefaultValue; } }
    set {
      _hasBits0 |= 256;
      displayNightmodeTintstrength_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_tintstrength" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeTintstrength {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_tintstrength" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeTintstrength() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "display_nightmode_maxhue" field.</summary>
  public const int DisplayNightmodeMaxhueFieldNumber = 12;
  private readonly static float DisplayNightmodeMaxhueDefaultValue = 0F;

  private float displayNightmodeMaxhue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeMaxhue {
    get { if ((_hasBits0 & 512) != 0) { return displayNightmodeMaxhue_; } else { return DisplayNightmodeMaxhueDefaultValue; } }
    set {
      _hasBits0 |= 512;
      displayNightmodeMaxhue_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_maxhue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeMaxhue {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_maxhue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeMaxhue() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "display_nightmode_maxsat" field.</summary>
  public const int DisplayNightmodeMaxsatFieldNumber = 13;
  private readonly static float DisplayNightmodeMaxsatDefaultValue = 0F;

  private float displayNightmodeMaxsat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeMaxsat {
    get { if ((_hasBits0 & 1024) != 0) { return displayNightmodeMaxsat_; } else { return DisplayNightmodeMaxsatDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      displayNightmodeMaxsat_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_maxsat" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeMaxsat {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_maxsat" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeMaxsat() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "display_nightmode_uiexp" field.</summary>
  public const int DisplayNightmodeUiexpFieldNumber = 14;
  private readonly static float DisplayNightmodeUiexpDefaultValue = 0F;

  private float displayNightmodeUiexp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeUiexp {
    get { if ((_hasBits0 & 2048) != 0) { return displayNightmodeUiexp_; } else { return DisplayNightmodeUiexpDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      displayNightmodeUiexp_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_uiexp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeUiexp {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_uiexp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeUiexp() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "display_nightmode_blend" field.</summary>
  public const int DisplayNightmodeBlendFieldNumber = 15;
  private readonly static float DisplayNightmodeBlendDefaultValue = 0F;

  private float displayNightmodeBlend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeBlend {
    get { if ((_hasBits0 & 4096) != 0) { return displayNightmodeBlend_; } else { return DisplayNightmodeBlendDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      displayNightmodeBlend_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_blend" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeBlend {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_blend" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeBlend() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "display_nightmode_reset" field.</summary>
  public const int DisplayNightmodeResetFieldNumber = 16;
  private readonly static bool DisplayNightmodeResetDefaultValue = false;

  private bool displayNightmodeReset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisplayNightmodeReset {
    get { if ((_hasBits0 & 8192) != 0) { return displayNightmodeReset_; } else { return DisplayNightmodeResetDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      displayNightmodeReset_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_reset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeReset {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_reset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeReset() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "display_nightmode_schedule_enabled" field.</summary>
  public const int DisplayNightmodeScheduleEnabledFieldNumber = 17;
  private readonly static bool DisplayNightmodeScheduleEnabledDefaultValue = false;

  private bool displayNightmodeScheduleEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisplayNightmodeScheduleEnabled {
    get { if ((_hasBits0 & 16384) != 0) { return displayNightmodeScheduleEnabled_; } else { return DisplayNightmodeScheduleEnabledDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      displayNightmodeScheduleEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_schedule_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeScheduleEnabled {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_schedule_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeScheduleEnabled() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "display_nightmode_schedule_starttime" field.</summary>
  public const int DisplayNightmodeScheduleStarttimeFieldNumber = 18;
  private readonly static float DisplayNightmodeScheduleStarttimeDefaultValue = 0F;

  private float displayNightmodeScheduleStarttime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeScheduleStarttime {
    get { if ((_hasBits0 & 32768) != 0) { return displayNightmodeScheduleStarttime_; } else { return DisplayNightmodeScheduleStarttimeDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      displayNightmodeScheduleStarttime_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_schedule_starttime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeScheduleStarttime {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_schedule_starttime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeScheduleStarttime() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "display_nightmode_schedule_endtime" field.</summary>
  public const int DisplayNightmodeScheduleEndtimeFieldNumber = 19;
  private readonly static float DisplayNightmodeScheduleEndtimeDefaultValue = 0F;

  private float displayNightmodeScheduleEndtime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayNightmodeScheduleEndtime {
    get { if ((_hasBits0 & 65536) != 0) { return displayNightmodeScheduleEndtime_; } else { return DisplayNightmodeScheduleEndtimeDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      displayNightmodeScheduleEndtime_ = value;
    }
  }
  /// <summary>Gets whether the "display_nightmode_schedule_endtime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayNightmodeScheduleEndtime {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "display_nightmode_schedule_endtime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayNightmodeScheduleEndtime() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "display_diagnostics_enabled" field.</summary>
  public const int DisplayDiagnosticsEnabledFieldNumber = 20;
  private readonly static bool DisplayDiagnosticsEnabledDefaultValue = false;

  private bool displayDiagnosticsEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisplayDiagnosticsEnabled {
    get { if ((_hasBits0 & 131072) != 0) { return displayDiagnosticsEnabled_; } else { return DisplayDiagnosticsEnabledDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      displayDiagnosticsEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "display_diagnostics_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayDiagnosticsEnabled {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "display_diagnostics_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayDiagnosticsEnabled() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "als_lux_latest" field.</summary>
  public const int AlsLuxLatestFieldNumber = 21;
  private readonly static float AlsLuxLatestDefaultValue = 0F;

  private float alsLuxLatest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AlsLuxLatest {
    get { if ((_hasBits0 & 262144) != 0) { return alsLuxLatest_; } else { return AlsLuxLatestDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      alsLuxLatest_ = value;
    }
  }
  /// <summary>Gets whether the "als_lux_latest" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlsLuxLatest {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "als_lux_latest" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlsLuxLatest() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "als_lux_median" field.</summary>
  public const int AlsLuxMedianFieldNumber = 22;
  private readonly static float AlsLuxMedianDefaultValue = 0F;

  private float alsLuxMedian_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AlsLuxMedian {
    get { if ((_hasBits0 & 524288) != 0) { return alsLuxMedian_; } else { return AlsLuxMedianDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      alsLuxMedian_ = value;
    }
  }
  /// <summary>Gets whether the "als_lux_median" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlsLuxMedian {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "als_lux_median" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlsLuxMedian() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "display_backlight_raw" field.</summary>
  public const int DisplayBacklightRawFieldNumber = 23;
  private readonly static float DisplayBacklightRawDefaultValue = 0F;

  private float displayBacklightRaw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayBacklightRaw {
    get { if ((_hasBits0 & 1048576) != 0) { return displayBacklightRaw_; } else { return DisplayBacklightRawDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      displayBacklightRaw_ = value;
    }
  }
  /// <summary>Gets whether the "display_backlight_raw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayBacklightRaw {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "display_backlight_raw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayBacklightRaw() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "display_brightness_adaptivemin" field.</summary>
  public const int DisplayBrightnessAdaptiveminFieldNumber = 24;
  private readonly static float DisplayBrightnessAdaptiveminDefaultValue = 0F;

  private float displayBrightnessAdaptivemin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayBrightnessAdaptivemin {
    get { if ((_hasBits0 & 2097152) != 0) { return displayBrightnessAdaptivemin_; } else { return DisplayBrightnessAdaptiveminDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      displayBrightnessAdaptivemin_ = value;
    }
  }
  /// <summary>Gets whether the "display_brightness_adaptivemin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayBrightnessAdaptivemin {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "display_brightness_adaptivemin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayBrightnessAdaptivemin() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "display_brightness_adaptivemax" field.</summary>
  public const int DisplayBrightnessAdaptivemaxFieldNumber = 25;
  private readonly static float DisplayBrightnessAdaptivemaxDefaultValue = 0F;

  private float displayBrightnessAdaptivemax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayBrightnessAdaptivemax {
    get { if ((_hasBits0 & 4194304) != 0) { return displayBrightnessAdaptivemax_; } else { return DisplayBrightnessAdaptivemaxDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      displayBrightnessAdaptivemax_ = value;
    }
  }
  /// <summary>Gets whether the "display_brightness_adaptivemax" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayBrightnessAdaptivemax {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "display_brightness_adaptivemax" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayBrightnessAdaptivemax() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "is_wifi_powersave_enabled" field.</summary>
  public const int IsWifiPowersaveEnabledFieldNumber = 26;
  private readonly static bool IsWifiPowersaveEnabledDefaultValue = false;

  private bool isWifiPowersaveEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsWifiPowersaveEnabled {
    get { if ((_hasBits0 & 8388608) != 0) { return isWifiPowersaveEnabled_; } else { return IsWifiPowersaveEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      isWifiPowersaveEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "is_wifi_powersave_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsWifiPowersaveEnabled {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "is_wifi_powersave_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsWifiPowersaveEnabled() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "is_fan_control_available" field.</summary>
  public const int IsFanControlAvailableFieldNumber = 27;
  private readonly static bool IsFanControlAvailableDefaultValue = false;

  private bool isFanControlAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFanControlAvailable {
    get { if ((_hasBits0 & 16777216) != 0) { return isFanControlAvailable_; } else { return IsFanControlAvailableDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      isFanControlAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_fan_control_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsFanControlAvailable {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "is_fan_control_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsFanControlAvailable() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "fan_control_mode" field.</summary>
  public const int FanControlModeFieldNumber = 28;
  private readonly static global::ESystemFanControlMode FanControlModeDefaultValue = global::ESystemFanControlMode.KSystemFanControlModeInvalid;

  private global::ESystemFanControlMode fanControlMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ESystemFanControlMode FanControlMode {
    get { if ((_hasBits0 & 33554432) != 0) { return fanControlMode_; } else { return FanControlModeDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      fanControlMode_ = value;
    }
  }
  /// <summary>Gets whether the "fan_control_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFanControlMode {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "fan_control_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFanControlMode() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "is_display_brightness_available" field.</summary>
  public const int IsDisplayBrightnessAvailableFieldNumber = 29;
  private readonly static bool IsDisplayBrightnessAvailableDefaultValue = false;

  private bool isDisplayBrightnessAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDisplayBrightnessAvailable {
    get { if ((_hasBits0 & 67108864) != 0) { return isDisplayBrightnessAvailable_; } else { return IsDisplayBrightnessAvailableDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      isDisplayBrightnessAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_display_brightness_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDisplayBrightnessAvailable {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "is_display_brightness_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDisplayBrightnessAvailable() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "is_display_colormanagement_available" field.</summary>
  public const int IsDisplayColormanagementAvailableFieldNumber = 31;
  private readonly static bool IsDisplayColormanagementAvailableDefaultValue = false;

  private bool isDisplayColormanagementAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDisplayColormanagementAvailable {
    get { if ((_hasBits0 & 134217728) != 0) { return isDisplayColormanagementAvailable_; } else { return IsDisplayColormanagementAvailableDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      isDisplayColormanagementAvailable_ = value;
    }
  }
  /// <summary>Gets whether the "is_display_colormanagement_available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDisplayColormanagementAvailable {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "is_display_colormanagement_available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDisplayColormanagementAvailable() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "display_colorgamut" field.</summary>
  public const int DisplayColorgamutFieldNumber = 32;
  private readonly static float DisplayColorgamutDefaultValue = 0F;

  private float displayColorgamut_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DisplayColorgamut {
    get { if ((_hasBits0 & 268435456) != 0) { return displayColorgamut_; } else { return DisplayColorgamutDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      displayColorgamut_ = value;
    }
  }
  /// <summary>Gets whether the "display_colorgamut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayColorgamut {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "display_colorgamut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayColorgamut() {
    _hasBits0 &= ~268435456;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemManagerSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemManagerSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleBacklightDimBatterySeconds, other.IdleBacklightDimBatterySeconds)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleBacklightDimAcSeconds, other.IdleBacklightDimAcSeconds)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleSuspendBatterySeconds, other.IdleSuspendBatterySeconds)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleSuspendAcSeconds, other.IdleSuspendAcSeconds)) return false;
    if (IdleSuspendSupressed != other.IdleSuspendSupressed) return false;
    if (IsAdaptiveBrightnessAvailable != other.IsAdaptiveBrightnessAvailable) return false;
    if (DisplayAdaptiveBrightnessEnabled != other.DisplayAdaptiveBrightnessEnabled) return false;
    if (DisplayNightmodeEnabled != other.DisplayNightmodeEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeTintstrength, other.DisplayNightmodeTintstrength)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeMaxhue, other.DisplayNightmodeMaxhue)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeMaxsat, other.DisplayNightmodeMaxsat)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeUiexp, other.DisplayNightmodeUiexp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeBlend, other.DisplayNightmodeBlend)) return false;
    if (DisplayNightmodeReset != other.DisplayNightmodeReset) return false;
    if (DisplayNightmodeScheduleEnabled != other.DisplayNightmodeScheduleEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeScheduleStarttime, other.DisplayNightmodeScheduleStarttime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayNightmodeScheduleEndtime, other.DisplayNightmodeScheduleEndtime)) return false;
    if (DisplayDiagnosticsEnabled != other.DisplayDiagnosticsEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlsLuxLatest, other.AlsLuxLatest)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlsLuxMedian, other.AlsLuxMedian)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayBacklightRaw, other.DisplayBacklightRaw)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayBrightnessAdaptivemin, other.DisplayBrightnessAdaptivemin)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayBrightnessAdaptivemax, other.DisplayBrightnessAdaptivemax)) return false;
    if (IsWifiPowersaveEnabled != other.IsWifiPowersaveEnabled) return false;
    if (IsFanControlAvailable != other.IsFanControlAvailable) return false;
    if (FanControlMode != other.FanControlMode) return false;
    if (IsDisplayBrightnessAvailable != other.IsDisplayBrightnessAvailable) return false;
    if (IsDisplayColormanagementAvailable != other.IsDisplayColormanagementAvailable) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayColorgamut, other.DisplayColorgamut)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasIdleBacklightDimBatterySeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleBacklightDimBatterySeconds);
    if (HasIdleBacklightDimAcSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleBacklightDimAcSeconds);
    if (HasIdleSuspendBatterySeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleSuspendBatterySeconds);
    if (HasIdleSuspendAcSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleSuspendAcSeconds);
    if (HasIdleSuspendSupressed) hash ^= IdleSuspendSupressed.GetHashCode();
    if (HasIsAdaptiveBrightnessAvailable) hash ^= IsAdaptiveBrightnessAvailable.GetHashCode();
    if (HasDisplayAdaptiveBrightnessEnabled) hash ^= DisplayAdaptiveBrightnessEnabled.GetHashCode();
    if (HasDisplayNightmodeEnabled) hash ^= DisplayNightmodeEnabled.GetHashCode();
    if (HasDisplayNightmodeTintstrength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeTintstrength);
    if (HasDisplayNightmodeMaxhue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeMaxhue);
    if (HasDisplayNightmodeMaxsat) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeMaxsat);
    if (HasDisplayNightmodeUiexp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeUiexp);
    if (HasDisplayNightmodeBlend) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeBlend);
    if (HasDisplayNightmodeReset) hash ^= DisplayNightmodeReset.GetHashCode();
    if (HasDisplayNightmodeScheduleEnabled) hash ^= DisplayNightmodeScheduleEnabled.GetHashCode();
    if (HasDisplayNightmodeScheduleStarttime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeScheduleStarttime);
    if (HasDisplayNightmodeScheduleEndtime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayNightmodeScheduleEndtime);
    if (HasDisplayDiagnosticsEnabled) hash ^= DisplayDiagnosticsEnabled.GetHashCode();
    if (HasAlsLuxLatest) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlsLuxLatest);
    if (HasAlsLuxMedian) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlsLuxMedian);
    if (HasDisplayBacklightRaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayBacklightRaw);
    if (HasDisplayBrightnessAdaptivemin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayBrightnessAdaptivemin);
    if (HasDisplayBrightnessAdaptivemax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayBrightnessAdaptivemax);
    if (HasIsWifiPowersaveEnabled) hash ^= IsWifiPowersaveEnabled.GetHashCode();
    if (HasIsFanControlAvailable) hash ^= IsFanControlAvailable.GetHashCode();
    if (HasFanControlMode) hash ^= FanControlMode.GetHashCode();
    if (HasIsDisplayBrightnessAvailable) hash ^= IsDisplayBrightnessAvailable.GetHashCode();
    if (HasIsDisplayColormanagementAvailable) hash ^= IsDisplayColormanagementAvailable.GetHashCode();
    if (HasDisplayColorgamut) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayColorgamut);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasIdleBacklightDimBatterySeconds) {
      output.WriteRawTag(13);
      output.WriteFloat(IdleBacklightDimBatterySeconds);
    }
    if (HasIdleBacklightDimAcSeconds) {
      output.WriteRawTag(21);
      output.WriteFloat(IdleBacklightDimAcSeconds);
    }
    if (HasIdleSuspendBatterySeconds) {
      output.WriteRawTag(29);
      output.WriteFloat(IdleSuspendBatterySeconds);
    }
    if (HasIdleSuspendAcSeconds) {
      output.WriteRawTag(37);
      output.WriteFloat(IdleSuspendAcSeconds);
    }
    if (HasIdleSuspendSupressed) {
      output.WriteRawTag(40);
      output.WriteBool(IdleSuspendSupressed);
    }
    if (HasIsAdaptiveBrightnessAvailable) {
      output.WriteRawTag(48);
      output.WriteBool(IsAdaptiveBrightnessAvailable);
    }
    if (HasDisplayAdaptiveBrightnessEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(DisplayAdaptiveBrightnessEnabled);
    }
    if (HasDisplayNightmodeEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(DisplayNightmodeEnabled);
    }
    if (HasDisplayNightmodeTintstrength) {
      output.WriteRawTag(93);
      output.WriteFloat(DisplayNightmodeTintstrength);
    }
    if (HasDisplayNightmodeMaxhue) {
      output.WriteRawTag(101);
      output.WriteFloat(DisplayNightmodeMaxhue);
    }
    if (HasDisplayNightmodeMaxsat) {
      output.WriteRawTag(109);
      output.WriteFloat(DisplayNightmodeMaxsat);
    }
    if (HasDisplayNightmodeUiexp) {
      output.WriteRawTag(117);
      output.WriteFloat(DisplayNightmodeUiexp);
    }
    if (HasDisplayNightmodeBlend) {
      output.WriteRawTag(125);
      output.WriteFloat(DisplayNightmodeBlend);
    }
    if (HasDisplayNightmodeReset) {
      output.WriteRawTag(128, 1);
      output.WriteBool(DisplayNightmodeReset);
    }
    if (HasDisplayNightmodeScheduleEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(DisplayNightmodeScheduleEnabled);
    }
    if (HasDisplayNightmodeScheduleStarttime) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(DisplayNightmodeScheduleStarttime);
    }
    if (HasDisplayNightmodeScheduleEndtime) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(DisplayNightmodeScheduleEndtime);
    }
    if (HasDisplayDiagnosticsEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(DisplayDiagnosticsEnabled);
    }
    if (HasAlsLuxLatest) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(AlsLuxLatest);
    }
    if (HasAlsLuxMedian) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(AlsLuxMedian);
    }
    if (HasDisplayBacklightRaw) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(DisplayBacklightRaw);
    }
    if (HasDisplayBrightnessAdaptivemin) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(DisplayBrightnessAdaptivemin);
    }
    if (HasDisplayBrightnessAdaptivemax) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(DisplayBrightnessAdaptivemax);
    }
    if (HasIsWifiPowersaveEnabled) {
      output.WriteRawTag(208, 1);
      output.WriteBool(IsWifiPowersaveEnabled);
    }
    if (HasIsFanControlAvailable) {
      output.WriteRawTag(216, 1);
      output.WriteBool(IsFanControlAvailable);
    }
    if (HasFanControlMode) {
      output.WriteRawTag(224, 1);
      output.WriteEnum((int) FanControlMode);
    }
    if (HasIsDisplayBrightnessAvailable) {
      output.WriteRawTag(232, 1);
      output.WriteBool(IsDisplayBrightnessAvailable);
    }
    if (HasIsDisplayColormanagementAvailable) {
      output.WriteRawTag(248, 1);
      output.WriteBool(IsDisplayColormanagementAvailable);
    }
    if (HasDisplayColorgamut) {
      output.WriteRawTag(133, 2);
      output.WriteFloat(DisplayColorgamut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasIdleBacklightDimBatterySeconds) {
      output.WriteRawTag(13);
      output.WriteFloat(IdleBacklightDimBatterySeconds);
    }
    if (HasIdleBacklightDimAcSeconds) {
      output.WriteRawTag(21);
      output.WriteFloat(IdleBacklightDimAcSeconds);
    }
    if (HasIdleSuspendBatterySeconds) {
      output.WriteRawTag(29);
      output.WriteFloat(IdleSuspendBatterySeconds);
    }
    if (HasIdleSuspendAcSeconds) {
      output.WriteRawTag(37);
      output.WriteFloat(IdleSuspendAcSeconds);
    }
    if (HasIdleSuspendSupressed) {
      output.WriteRawTag(40);
      output.WriteBool(IdleSuspendSupressed);
    }
    if (HasIsAdaptiveBrightnessAvailable) {
      output.WriteRawTag(48);
      output.WriteBool(IsAdaptiveBrightnessAvailable);
    }
    if (HasDisplayAdaptiveBrightnessEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(DisplayAdaptiveBrightnessEnabled);
    }
    if (HasDisplayNightmodeEnabled) {
      output.WriteRawTag(80);
      output.WriteBool(DisplayNightmodeEnabled);
    }
    if (HasDisplayNightmodeTintstrength) {
      output.WriteRawTag(93);
      output.WriteFloat(DisplayNightmodeTintstrength);
    }
    if (HasDisplayNightmodeMaxhue) {
      output.WriteRawTag(101);
      output.WriteFloat(DisplayNightmodeMaxhue);
    }
    if (HasDisplayNightmodeMaxsat) {
      output.WriteRawTag(109);
      output.WriteFloat(DisplayNightmodeMaxsat);
    }
    if (HasDisplayNightmodeUiexp) {
      output.WriteRawTag(117);
      output.WriteFloat(DisplayNightmodeUiexp);
    }
    if (HasDisplayNightmodeBlend) {
      output.WriteRawTag(125);
      output.WriteFloat(DisplayNightmodeBlend);
    }
    if (HasDisplayNightmodeReset) {
      output.WriteRawTag(128, 1);
      output.WriteBool(DisplayNightmodeReset);
    }
    if (HasDisplayNightmodeScheduleEnabled) {
      output.WriteRawTag(136, 1);
      output.WriteBool(DisplayNightmodeScheduleEnabled);
    }
    if (HasDisplayNightmodeScheduleStarttime) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(DisplayNightmodeScheduleStarttime);
    }
    if (HasDisplayNightmodeScheduleEndtime) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(DisplayNightmodeScheduleEndtime);
    }
    if (HasDisplayDiagnosticsEnabled) {
      output.WriteRawTag(160, 1);
      output.WriteBool(DisplayDiagnosticsEnabled);
    }
    if (HasAlsLuxLatest) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(AlsLuxLatest);
    }
    if (HasAlsLuxMedian) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(AlsLuxMedian);
    }
    if (HasDisplayBacklightRaw) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(DisplayBacklightRaw);
    }
    if (HasDisplayBrightnessAdaptivemin) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(DisplayBrightnessAdaptivemin);
    }
    if (HasDisplayBrightnessAdaptivemax) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(DisplayBrightnessAdaptivemax);
    }
    if (HasIsWifiPowersaveEnabled) {
      output.WriteRawTag(208, 1);
      output.WriteBool(IsWifiPowersaveEnabled);
    }
    if (HasIsFanControlAvailable) {
      output.WriteRawTag(216, 1);
      output.WriteBool(IsFanControlAvailable);
    }
    if (HasFanControlMode) {
      output.WriteRawTag(224, 1);
      output.WriteEnum((int) FanControlMode);
    }
    if (HasIsDisplayBrightnessAvailable) {
      output.WriteRawTag(232, 1);
      output.WriteBool(IsDisplayBrightnessAvailable);
    }
    if (HasIsDisplayColormanagementAvailable) {
      output.WriteRawTag(248, 1);
      output.WriteBool(IsDisplayColormanagementAvailable);
    }
    if (HasDisplayColorgamut) {
      output.WriteRawTag(133, 2);
      output.WriteFloat(DisplayColorgamut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasIdleBacklightDimBatterySeconds) {
      size += 1 + 4;
    }
    if (HasIdleBacklightDimAcSeconds) {
      size += 1 + 4;
    }
    if (HasIdleSuspendBatterySeconds) {
      size += 1 + 4;
    }
    if (HasIdleSuspendAcSeconds) {
      size += 1 + 4;
    }
    if (HasIdleSuspendSupressed) {
      size += 1 + 1;
    }
    if (HasIsAdaptiveBrightnessAvailable) {
      size += 1 + 1;
    }
    if (HasDisplayAdaptiveBrightnessEnabled) {
      size += 1 + 1;
    }
    if (HasDisplayNightmodeEnabled) {
      size += 1 + 1;
    }
    if (HasDisplayNightmodeTintstrength) {
      size += 1 + 4;
    }
    if (HasDisplayNightmodeMaxhue) {
      size += 1 + 4;
    }
    if (HasDisplayNightmodeMaxsat) {
      size += 1 + 4;
    }
    if (HasDisplayNightmodeUiexp) {
      size += 1 + 4;
    }
    if (HasDisplayNightmodeBlend) {
      size += 1 + 4;
    }
    if (HasDisplayNightmodeReset) {
      size += 2 + 1;
    }
    if (HasDisplayNightmodeScheduleEnabled) {
      size += 2 + 1;
    }
    if (HasDisplayNightmodeScheduleStarttime) {
      size += 2 + 4;
    }
    if (HasDisplayNightmodeScheduleEndtime) {
      size += 2 + 4;
    }
    if (HasDisplayDiagnosticsEnabled) {
      size += 2 + 1;
    }
    if (HasAlsLuxLatest) {
      size += 2 + 4;
    }
    if (HasAlsLuxMedian) {
      size += 2 + 4;
    }
    if (HasDisplayBacklightRaw) {
      size += 2 + 4;
    }
    if (HasDisplayBrightnessAdaptivemin) {
      size += 2 + 4;
    }
    if (HasDisplayBrightnessAdaptivemax) {
      size += 2 + 4;
    }
    if (HasIsWifiPowersaveEnabled) {
      size += 2 + 1;
    }
    if (HasIsFanControlAvailable) {
      size += 2 + 1;
    }
    if (HasFanControlMode) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FanControlMode);
    }
    if (HasIsDisplayBrightnessAvailable) {
      size += 2 + 1;
    }
    if (HasIsDisplayColormanagementAvailable) {
      size += 2 + 1;
    }
    if (HasDisplayColorgamut) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemManagerSettings other) {
    if (other == null) {
      return;
    }
    if (other.HasIdleBacklightDimBatterySeconds) {
      IdleBacklightDimBatterySeconds = other.IdleBacklightDimBatterySeconds;
    }
    if (other.HasIdleBacklightDimAcSeconds) {
      IdleBacklightDimAcSeconds = other.IdleBacklightDimAcSeconds;
    }
    if (other.HasIdleSuspendBatterySeconds) {
      IdleSuspendBatterySeconds = other.IdleSuspendBatterySeconds;
    }
    if (other.HasIdleSuspendAcSeconds) {
      IdleSuspendAcSeconds = other.IdleSuspendAcSeconds;
    }
    if (other.HasIdleSuspendSupressed) {
      IdleSuspendSupressed = other.IdleSuspendSupressed;
    }
    if (other.HasIsAdaptiveBrightnessAvailable) {
      IsAdaptiveBrightnessAvailable = other.IsAdaptiveBrightnessAvailable;
    }
    if (other.HasDisplayAdaptiveBrightnessEnabled) {
      DisplayAdaptiveBrightnessEnabled = other.DisplayAdaptiveBrightnessEnabled;
    }
    if (other.HasDisplayNightmodeEnabled) {
      DisplayNightmodeEnabled = other.DisplayNightmodeEnabled;
    }
    if (other.HasDisplayNightmodeTintstrength) {
      DisplayNightmodeTintstrength = other.DisplayNightmodeTintstrength;
    }
    if (other.HasDisplayNightmodeMaxhue) {
      DisplayNightmodeMaxhue = other.DisplayNightmodeMaxhue;
    }
    if (other.HasDisplayNightmodeMaxsat) {
      DisplayNightmodeMaxsat = other.DisplayNightmodeMaxsat;
    }
    if (other.HasDisplayNightmodeUiexp) {
      DisplayNightmodeUiexp = other.DisplayNightmodeUiexp;
    }
    if (other.HasDisplayNightmodeBlend) {
      DisplayNightmodeBlend = other.DisplayNightmodeBlend;
    }
    if (other.HasDisplayNightmodeReset) {
      DisplayNightmodeReset = other.DisplayNightmodeReset;
    }
    if (other.HasDisplayNightmodeScheduleEnabled) {
      DisplayNightmodeScheduleEnabled = other.DisplayNightmodeScheduleEnabled;
    }
    if (other.HasDisplayNightmodeScheduleStarttime) {
      DisplayNightmodeScheduleStarttime = other.DisplayNightmodeScheduleStarttime;
    }
    if (other.HasDisplayNightmodeScheduleEndtime) {
      DisplayNightmodeScheduleEndtime = other.DisplayNightmodeScheduleEndtime;
    }
    if (other.HasDisplayDiagnosticsEnabled) {
      DisplayDiagnosticsEnabled = other.DisplayDiagnosticsEnabled;
    }
    if (other.HasAlsLuxLatest) {
      AlsLuxLatest = other.AlsLuxLatest;
    }
    if (other.HasAlsLuxMedian) {
      AlsLuxMedian = other.AlsLuxMedian;
    }
    if (other.HasDisplayBacklightRaw) {
      DisplayBacklightRaw = other.DisplayBacklightRaw;
    }
    if (other.HasDisplayBrightnessAdaptivemin) {
      DisplayBrightnessAdaptivemin = other.DisplayBrightnessAdaptivemin;
    }
    if (other.HasDisplayBrightnessAdaptivemax) {
      DisplayBrightnessAdaptivemax = other.DisplayBrightnessAdaptivemax;
    }
    if (other.HasIsWifiPowersaveEnabled) {
      IsWifiPowersaveEnabled = other.IsWifiPowersaveEnabled;
    }
    if (other.HasIsFanControlAvailable) {
      IsFanControlAvailable = other.IsFanControlAvailable;
    }
    if (other.HasFanControlMode) {
      FanControlMode = other.FanControlMode;
    }
    if (other.HasIsDisplayBrightnessAvailable) {
      IsDisplayBrightnessAvailable = other.IsDisplayBrightnessAvailable;
    }
    if (other.HasIsDisplayColormanagementAvailable) {
      IsDisplayColormanagementAvailable = other.IsDisplayColormanagementAvailable;
    }
    if (other.HasDisplayColorgamut) {
      DisplayColorgamut = other.DisplayColorgamut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          IdleBacklightDimBatterySeconds = input.ReadFloat();
          break;
        }
        case 21: {
          IdleBacklightDimAcSeconds = input.ReadFloat();
          break;
        }
        case 29: {
          IdleSuspendBatterySeconds = input.ReadFloat();
          break;
        }
        case 37: {
          IdleSuspendAcSeconds = input.ReadFloat();
          break;
        }
        case 40: {
          IdleSuspendSupressed = input.ReadBool();
          break;
        }
        case 48: {
          IsAdaptiveBrightnessAvailable = input.ReadBool();
          break;
        }
        case 56: {
          DisplayAdaptiveBrightnessEnabled = input.ReadBool();
          break;
        }
        case 80: {
          DisplayNightmodeEnabled = input.ReadBool();
          break;
        }
        case 93: {
          DisplayNightmodeTintstrength = input.ReadFloat();
          break;
        }
        case 101: {
          DisplayNightmodeMaxhue = input.ReadFloat();
          break;
        }
        case 109: {
          DisplayNightmodeMaxsat = input.ReadFloat();
          break;
        }
        case 117: {
          DisplayNightmodeUiexp = input.ReadFloat();
          break;
        }
        case 125: {
          DisplayNightmodeBlend = input.ReadFloat();
          break;
        }
        case 128: {
          DisplayNightmodeReset = input.ReadBool();
          break;
        }
        case 136: {
          DisplayNightmodeScheduleEnabled = input.ReadBool();
          break;
        }
        case 149: {
          DisplayNightmodeScheduleStarttime = input.ReadFloat();
          break;
        }
        case 157: {
          DisplayNightmodeScheduleEndtime = input.ReadFloat();
          break;
        }
        case 160: {
          DisplayDiagnosticsEnabled = input.ReadBool();
          break;
        }
        case 173: {
          AlsLuxLatest = input.ReadFloat();
          break;
        }
        case 181: {
          AlsLuxMedian = input.ReadFloat();
          break;
        }
        case 189: {
          DisplayBacklightRaw = input.ReadFloat();
          break;
        }
        case 197: {
          DisplayBrightnessAdaptivemin = input.ReadFloat();
          break;
        }
        case 205: {
          DisplayBrightnessAdaptivemax = input.ReadFloat();
          break;
        }
        case 208: {
          IsWifiPowersaveEnabled = input.ReadBool();
          break;
        }
        case 216: {
          IsFanControlAvailable = input.ReadBool();
          break;
        }
        case 224: {
          FanControlMode = (global::ESystemFanControlMode) input.ReadEnum();
          break;
        }
        case 232: {
          IsDisplayBrightnessAvailable = input.ReadBool();
          break;
        }
        case 248: {
          IsDisplayColormanagementAvailable = input.ReadBool();
          break;
        }
        case 261: {
          DisplayColorgamut = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          IdleBacklightDimBatterySeconds = input.ReadFloat();
          break;
        }
        case 21: {
          IdleBacklightDimAcSeconds = input.ReadFloat();
          break;
        }
        case 29: {
          IdleSuspendBatterySeconds = input.ReadFloat();
          break;
        }
        case 37: {
          IdleSuspendAcSeconds = input.ReadFloat();
          break;
        }
        case 40: {
          IdleSuspendSupressed = input.ReadBool();
          break;
        }
        case 48: {
          IsAdaptiveBrightnessAvailable = input.ReadBool();
          break;
        }
        case 56: {
          DisplayAdaptiveBrightnessEnabled = input.ReadBool();
          break;
        }
        case 80: {
          DisplayNightmodeEnabled = input.ReadBool();
          break;
        }
        case 93: {
          DisplayNightmodeTintstrength = input.ReadFloat();
          break;
        }
        case 101: {
          DisplayNightmodeMaxhue = input.ReadFloat();
          break;
        }
        case 109: {
          DisplayNightmodeMaxsat = input.ReadFloat();
          break;
        }
        case 117: {
          DisplayNightmodeUiexp = input.ReadFloat();
          break;
        }
        case 125: {
          DisplayNightmodeBlend = input.ReadFloat();
          break;
        }
        case 128: {
          DisplayNightmodeReset = input.ReadBool();
          break;
        }
        case 136: {
          DisplayNightmodeScheduleEnabled = input.ReadBool();
          break;
        }
        case 149: {
          DisplayNightmodeScheduleStarttime = input.ReadFloat();
          break;
        }
        case 157: {
          DisplayNightmodeScheduleEndtime = input.ReadFloat();
          break;
        }
        case 160: {
          DisplayDiagnosticsEnabled = input.ReadBool();
          break;
        }
        case 173: {
          AlsLuxLatest = input.ReadFloat();
          break;
        }
        case 181: {
          AlsLuxMedian = input.ReadFloat();
          break;
        }
        case 189: {
          DisplayBacklightRaw = input.ReadFloat();
          break;
        }
        case 197: {
          DisplayBrightnessAdaptivemin = input.ReadFloat();
          break;
        }
        case 205: {
          DisplayBrightnessAdaptivemax = input.ReadFloat();
          break;
        }
        case 208: {
          IsWifiPowersaveEnabled = input.ReadBool();
          break;
        }
        case 216: {
          IsFanControlAvailable = input.ReadBool();
          break;
        }
        case 224: {
          FanControlMode = (global::ESystemFanControlMode) input.ReadEnum();
          break;
        }
        case 232: {
          IsDisplayBrightnessAvailable = input.ReadBool();
          break;
        }
        case 248: {
          IsDisplayColormanagementAvailable = input.ReadBool();
          break;
        }
        case 261: {
          DisplayColorgamut = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSelectOSBranchParams : pb::IMessage<CMsgSelectOSBranchParams>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSelectOSBranchParams> _parser = new pb::MessageParser<CMsgSelectOSBranchParams>(() => new CMsgSelectOSBranchParams());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSelectOSBranchParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSelectOSBranchParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSelectOSBranchParams(CMsgSelectOSBranchParams other) : this() {
    _hasBits0 = other._hasBits0;
    branch_ = other.branch_;
    customBranch_ = other.customBranch_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSelectOSBranchParams Clone() {
    return new CMsgSelectOSBranchParams(this);
  }

  /// <summary>Field number for the "branch" field.</summary>
  public const int BranchFieldNumber = 1;
  private readonly static global::EOSBranch BranchDefaultValue = global::EOSBranch.KEosbranchUnknown;

  private global::EOSBranch branch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EOSBranch Branch {
    get { if ((_hasBits0 & 1) != 0) { return branch_; } else { return BranchDefaultValue; } }
    set {
      _hasBits0 |= 1;
      branch_ = value;
    }
  }
  /// <summary>Gets whether the "branch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBranch {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "branch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBranch() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "custom_branch" field.</summary>
  public const int CustomBranchFieldNumber = 2;
  private readonly static string CustomBranchDefaultValue = "";

  private string customBranch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CustomBranch {
    get { return customBranch_ ?? CustomBranchDefaultValue; }
    set {
      customBranch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "custom_branch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCustomBranch {
    get { return customBranch_ != null; }
  }
  /// <summary>Clears the value of the "custom_branch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCustomBranch() {
    customBranch_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSelectOSBranchParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSelectOSBranchParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Branch != other.Branch) return false;
    if (CustomBranch != other.CustomBranch) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBranch) hash ^= Branch.GetHashCode();
    if (HasCustomBranch) hash ^= CustomBranch.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasBranch) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Branch);
    }
    if (HasCustomBranch) {
      output.WriteRawTag(18);
      output.WriteString(CustomBranch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasBranch) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Branch);
    }
    if (HasCustomBranch) {
      output.WriteRawTag(18);
      output.WriteString(CustomBranch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasBranch) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Branch);
    }
    if (HasCustomBranch) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomBranch);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSelectOSBranchParams other) {
    if (other == null) {
      return;
    }
    if (other.HasBranch) {
      Branch = other.Branch;
    }
    if (other.HasCustomBranch) {
      CustomBranch = other.CustomBranch;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Branch = (global::EOSBranch) input.ReadEnum();
          break;
        }
        case 18: {
          CustomBranch = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Branch = (global::EOSBranch) input.ReadEnum();
          break;
        }
        case 18: {
          CustomBranch = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemUpdateProgress : pb::IMessage<CMsgSystemUpdateProgress>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemUpdateProgress> _parser = new pb::MessageParser<CMsgSystemUpdateProgress>(() => new CMsgSystemUpdateProgress());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemUpdateProgress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateProgress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateProgress(CMsgSystemUpdateProgress other) : this() {
    _hasBits0 = other._hasBits0;
    stageProgress_ = other.stageProgress_;
    stageSizeBytes_ = other.stageSizeBytes_;
    rtimeEstimatedCompletion_ = other.rtimeEstimatedCompletion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateProgress Clone() {
    return new CMsgSystemUpdateProgress(this);
  }

  /// <summary>Field number for the "stage_progress" field.</summary>
  public const int StageProgressFieldNumber = 1;
  private readonly static float StageProgressDefaultValue = 0F;

  private float stageProgress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StageProgress {
    get { if ((_hasBits0 & 1) != 0) { return stageProgress_; } else { return StageProgressDefaultValue; } }
    set {
      _hasBits0 |= 1;
      stageProgress_ = value;
    }
  }
  /// <summary>Gets whether the "stage_progress" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStageProgress {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "stage_progress" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStageProgress() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "stage_size_bytes" field.</summary>
  public const int StageSizeBytesFieldNumber = 2;
  private readonly static long StageSizeBytesDefaultValue = 0L;

  private long stageSizeBytes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StageSizeBytes {
    get { if ((_hasBits0 & 2) != 0) { return stageSizeBytes_; } else { return StageSizeBytesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      stageSizeBytes_ = value;
    }
  }
  /// <summary>Gets whether the "stage_size_bytes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStageSizeBytes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "stage_size_bytes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStageSizeBytes() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rtime_estimated_completion" field.</summary>
  public const int RtimeEstimatedCompletionFieldNumber = 3;
  private readonly static uint RtimeEstimatedCompletionDefaultValue = 0;

  private uint rtimeEstimatedCompletion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeEstimatedCompletion {
    get { if ((_hasBits0 & 4) != 0) { return rtimeEstimatedCompletion_; } else { return RtimeEstimatedCompletionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rtimeEstimatedCompletion_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_estimated_completion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeEstimatedCompletion {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rtime_estimated_completion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeEstimatedCompletion() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemUpdateProgress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemUpdateProgress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StageProgress, other.StageProgress)) return false;
    if (StageSizeBytes != other.StageSizeBytes) return false;
    if (RtimeEstimatedCompletion != other.RtimeEstimatedCompletion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasStageProgress) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StageProgress);
    if (HasStageSizeBytes) hash ^= StageSizeBytes.GetHashCode();
    if (HasRtimeEstimatedCompletion) hash ^= RtimeEstimatedCompletion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasStageProgress) {
      output.WriteRawTag(13);
      output.WriteFloat(StageProgress);
    }
    if (HasStageSizeBytes) {
      output.WriteRawTag(16);
      output.WriteInt64(StageSizeBytes);
    }
    if (HasRtimeEstimatedCompletion) {
      output.WriteRawTag(29);
      output.WriteFixed32(RtimeEstimatedCompletion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasStageProgress) {
      output.WriteRawTag(13);
      output.WriteFloat(StageProgress);
    }
    if (HasStageSizeBytes) {
      output.WriteRawTag(16);
      output.WriteInt64(StageSizeBytes);
    }
    if (HasRtimeEstimatedCompletion) {
      output.WriteRawTag(29);
      output.WriteFixed32(RtimeEstimatedCompletion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasStageProgress) {
      size += 1 + 4;
    }
    if (HasStageSizeBytes) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StageSizeBytes);
    }
    if (HasRtimeEstimatedCompletion) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemUpdateProgress other) {
    if (other == null) {
      return;
    }
    if (other.HasStageProgress) {
      StageProgress = other.StageProgress;
    }
    if (other.HasStageSizeBytes) {
      StageSizeBytes = other.StageSizeBytes;
    }
    if (other.HasRtimeEstimatedCompletion) {
      RtimeEstimatedCompletion = other.RtimeEstimatedCompletion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          StageProgress = input.ReadFloat();
          break;
        }
        case 16: {
          StageSizeBytes = input.ReadInt64();
          break;
        }
        case 29: {
          RtimeEstimatedCompletion = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          StageProgress = input.ReadFloat();
          break;
        }
        case 16: {
          StageSizeBytes = input.ReadInt64();
          break;
        }
        case 29: {
          RtimeEstimatedCompletion = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemUpdateCheckResult : pb::IMessage<CMsgSystemUpdateCheckResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemUpdateCheckResult> _parser = new pb::MessageParser<CMsgSystemUpdateCheckResult>(() => new CMsgSystemUpdateCheckResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemUpdateCheckResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateCheckResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateCheckResult(CMsgSystemUpdateCheckResult other) : this() {
    _hasBits0 = other._hasBits0;
    type_ = other.type_;
    eresult_ = other.eresult_;
    rtimeChecked_ = other.rtimeChecked_;
    available_ = other.available_;
    version_ = other.version_;
    autoMessage_ = other.autoMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateCheckResult Clone() {
    return new CMsgSystemUpdateCheckResult(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private readonly static global::EUpdaterType TypeDefaultValue = global::EUpdaterType.KEupdaterTypeInvalid;

  private global::EUpdaterType type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EUpdaterType Type {
    get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 2;
  private readonly static uint EresultDefaultValue = 2;

  private uint eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Eresult {
    get { if ((_hasBits0 & 2) != 0) { return eresult_; } else { return EresultDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEresult {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEresult() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rtime_checked" field.</summary>
  public const int RtimeCheckedFieldNumber = 3;
  private readonly static uint RtimeCheckedDefaultValue = 0;

  private uint rtimeChecked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtimeChecked {
    get { if ((_hasBits0 & 4) != 0) { return rtimeChecked_; } else { return RtimeCheckedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rtimeChecked_ = value;
    }
  }
  /// <summary>Gets whether the "rtime_checked" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtimeChecked {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rtime_checked" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtimeChecked() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "available" field.</summary>
  public const int AvailableFieldNumber = 4;
  private readonly static bool AvailableDefaultValue = false;

  private bool available_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Available {
    get { if ((_hasBits0 & 8) != 0) { return available_; } else { return AvailableDefaultValue; } }
    set {
      _hasBits0 |= 8;
      available_ = value;
    }
  }
  /// <summary>Gets whether the "available" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAvailable {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "available" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAvailable() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 5;
  private readonly static string VersionDefaultValue = "";

  private string version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersion() {
    version_ = null;
  }

  /// <summary>Field number for the "auto_message" field.</summary>
  public const int AutoMessageFieldNumber = 6;
  private readonly static string AutoMessageDefaultValue = "";

  private string autoMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AutoMessage {
    get { return autoMessage_ ?? AutoMessageDefaultValue; }
    set {
      autoMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "auto_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutoMessage {
    get { return autoMessage_ != null; }
  }
  /// <summary>Clears the value of the "auto_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutoMessage() {
    autoMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemUpdateCheckResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemUpdateCheckResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Eresult != other.Eresult) return false;
    if (RtimeChecked != other.RtimeChecked) return false;
    if (Available != other.Available) return false;
    if (Version != other.Version) return false;
    if (AutoMessage != other.AutoMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasType) hash ^= Type.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasRtimeChecked) hash ^= RtimeChecked.GetHashCode();
    if (HasAvailable) hash ^= Available.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (HasAutoMessage) hash ^= AutoMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasRtimeChecked) {
      output.WriteRawTag(29);
      output.WriteFixed32(RtimeChecked);
    }
    if (HasAvailable) {
      output.WriteRawTag(32);
      output.WriteBool(Available);
    }
    if (HasVersion) {
      output.WriteRawTag(42);
      output.WriteString(Version);
    }
    if (HasAutoMessage) {
      output.WriteRawTag(50);
      output.WriteString(AutoMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasRtimeChecked) {
      output.WriteRawTag(29);
      output.WriteFixed32(RtimeChecked);
    }
    if (HasAvailable) {
      output.WriteRawTag(32);
      output.WriteBool(Available);
    }
    if (HasVersion) {
      output.WriteRawTag(42);
      output.WriteString(Version);
    }
    if (HasAutoMessage) {
      output.WriteRawTag(50);
      output.WriteString(AutoMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eresult);
    }
    if (HasRtimeChecked) {
      size += 1 + 4;
    }
    if (HasAvailable) {
      size += 1 + 1;
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (HasAutoMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AutoMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemUpdateCheckResult other) {
    if (other == null) {
      return;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasRtimeChecked) {
      RtimeChecked = other.RtimeChecked;
    }
    if (other.HasAvailable) {
      Available = other.Available;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    if (other.HasAutoMessage) {
      AutoMessage = other.AutoMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::EUpdaterType) input.ReadEnum();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 29: {
          RtimeChecked = input.ReadFixed32();
          break;
        }
        case 32: {
          Available = input.ReadBool();
          break;
        }
        case 42: {
          Version = input.ReadString();
          break;
        }
        case 50: {
          AutoMessage = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Type = (global::EUpdaterType) input.ReadEnum();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 29: {
          RtimeChecked = input.ReadFixed32();
          break;
        }
        case 32: {
          Available = input.ReadBool();
          break;
        }
        case 42: {
          Version = input.ReadString();
          break;
        }
        case 50: {
          AutoMessage = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemUpdateApplyParams : pb::IMessage<CMsgSystemUpdateApplyParams>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemUpdateApplyParams> _parser = new pb::MessageParser<CMsgSystemUpdateApplyParams>(() => new CMsgSystemUpdateApplyParams());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemUpdateApplyParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyParams(CMsgSystemUpdateApplyParams other) : this() {
    applyTypes_ = other.applyTypes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyParams Clone() {
    return new CMsgSystemUpdateApplyParams(this);
  }

  /// <summary>Field number for the "apply_types" field.</summary>
  public const int ApplyTypesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EUpdaterType> _repeated_applyTypes_codec
      = pb::FieldCodec.ForEnum(8, x => (int) x, x => (global::EUpdaterType) x);
  private readonly pbc::RepeatedField<global::EUpdaterType> applyTypes_ = new pbc::RepeatedField<global::EUpdaterType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::EUpdaterType> ApplyTypes {
    get { return applyTypes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemUpdateApplyParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemUpdateApplyParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!applyTypes_.Equals(other.applyTypes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= applyTypes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    applyTypes_.WriteTo(output, _repeated_applyTypes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    applyTypes_.WriteTo(ref output, _repeated_applyTypes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += applyTypes_.CalculateSize(_repeated_applyTypes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemUpdateApplyParams other) {
    if (other == null) {
      return;
    }
    applyTypes_.Add(other.applyTypes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          applyTypes_.AddEntriesFrom(input, _repeated_applyTypes_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10:
        case 8: {
          applyTypes_.AddEntriesFrom(ref input, _repeated_applyTypes_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemUpdateApplyResult : pb::IMessage<CMsgSystemUpdateApplyResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemUpdateApplyResult> _parser = new pb::MessageParser<CMsgSystemUpdateApplyResult>(() => new CMsgSystemUpdateApplyResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemUpdateApplyResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyResult(CMsgSystemUpdateApplyResult other) : this() {
    _hasBits0 = other._hasBits0;
    type_ = other.type_;
    eresult_ = other.eresult_;
    requiresClientRestart_ = other.requiresClientRestart_;
    requiresSystemRestart_ = other.requiresSystemRestart_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateApplyResult Clone() {
    return new CMsgSystemUpdateApplyResult(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private readonly static global::EUpdaterType TypeDefaultValue = global::EUpdaterType.KEupdaterTypeInvalid;

  private global::EUpdaterType type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EUpdaterType Type {
    get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "eresult" field.</summary>
  public const int EresultFieldNumber = 2;
  private readonly static uint EresultDefaultValue = 2;

  private uint eresult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Eresult {
    get { if ((_hasBits0 & 2) != 0) { return eresult_; } else { return EresultDefaultValue; } }
    set {
      _hasBits0 |= 2;
      eresult_ = value;
    }
  }
  /// <summary>Gets whether the "eresult" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEresult {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "eresult" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEresult() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "requires_client_restart" field.</summary>
  public const int RequiresClientRestartFieldNumber = 3;
  private readonly static bool RequiresClientRestartDefaultValue = false;

  private bool requiresClientRestart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RequiresClientRestart {
    get { if ((_hasBits0 & 4) != 0) { return requiresClientRestart_; } else { return RequiresClientRestartDefaultValue; } }
    set {
      _hasBits0 |= 4;
      requiresClientRestart_ = value;
    }
  }
  /// <summary>Gets whether the "requires_client_restart" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRequiresClientRestart {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "requires_client_restart" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRequiresClientRestart() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "requires_system_restart" field.</summary>
  public const int RequiresSystemRestartFieldNumber = 4;
  private readonly static bool RequiresSystemRestartDefaultValue = false;

  private bool requiresSystemRestart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RequiresSystemRestart {
    get { if ((_hasBits0 & 8) != 0) { return requiresSystemRestart_; } else { return RequiresSystemRestartDefaultValue; } }
    set {
      _hasBits0 |= 8;
      requiresSystemRestart_ = value;
    }
  }
  /// <summary>Gets whether the "requires_system_restart" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRequiresSystemRestart {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "requires_system_restart" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRequiresSystemRestart() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemUpdateApplyResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemUpdateApplyResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Eresult != other.Eresult) return false;
    if (RequiresClientRestart != other.RequiresClientRestart) return false;
    if (RequiresSystemRestart != other.RequiresSystemRestart) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasType) hash ^= Type.GetHashCode();
    if (HasEresult) hash ^= Eresult.GetHashCode();
    if (HasRequiresClientRestart) hash ^= RequiresClientRestart.GetHashCode();
    if (HasRequiresSystemRestart) hash ^= RequiresSystemRestart.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasRequiresClientRestart) {
      output.WriteRawTag(24);
      output.WriteBool(RequiresClientRestart);
    }
    if (HasRequiresSystemRestart) {
      output.WriteRawTag(32);
      output.WriteBool(RequiresSystemRestart);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (HasEresult) {
      output.WriteRawTag(16);
      output.WriteUInt32(Eresult);
    }
    if (HasRequiresClientRestart) {
      output.WriteRawTag(24);
      output.WriteBool(RequiresClientRestart);
    }
    if (HasRequiresSystemRestart) {
      output.WriteRawTag(32);
      output.WriteBool(RequiresSystemRestart);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasEresult) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eresult);
    }
    if (HasRequiresClientRestart) {
      size += 1 + 1;
    }
    if (HasRequiresSystemRestart) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemUpdateApplyResult other) {
    if (other == null) {
      return;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasEresult) {
      Eresult = other.Eresult;
    }
    if (other.HasRequiresClientRestart) {
      RequiresClientRestart = other.RequiresClientRestart;
    }
    if (other.HasRequiresSystemRestart) {
      RequiresSystemRestart = other.RequiresSystemRestart;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::EUpdaterType) input.ReadEnum();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 24: {
          RequiresClientRestart = input.ReadBool();
          break;
        }
        case 32: {
          RequiresSystemRestart = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Type = (global::EUpdaterType) input.ReadEnum();
          break;
        }
        case 16: {
          Eresult = input.ReadUInt32();
          break;
        }
        case 24: {
          RequiresClientRestart = input.ReadBool();
          break;
        }
        case 32: {
          RequiresSystemRestart = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSystemUpdateState : pb::IMessage<CMsgSystemUpdateState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSystemUpdateState> _parser = new pb::MessageParser<CMsgSystemUpdateState>(() => new CMsgSystemUpdateState());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSystemUpdateState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateState(CMsgSystemUpdateState other) : this() {
    _hasBits0 = other._hasBits0;
    state_ = other.state_;
    progress_ = other.progress_ != null ? other.progress_.Clone() : null;
    updateCheckResults_ = other.updateCheckResults_.Clone();
    updateApplyResults_ = other.updateApplyResults_.Clone();
    supportsOsUpdates_ = other.supportsOsUpdates_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSystemUpdateState Clone() {
    return new CMsgSystemUpdateState(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private readonly static global::EUpdaterState StateDefaultValue = global::EUpdaterState.KEupdaterStateInvalid;

  private global::EUpdaterState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EUpdaterState State {
    get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
    set {
      _hasBits0 |= 1;
      state_ = value;
    }
  }
  /// <summary>Gets whether the "state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasState {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearState() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 2;
  private global::CMsgSystemUpdateProgress progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSystemUpdateProgress Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "update_check_results" field.</summary>
  public const int UpdateCheckResultsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CMsgSystemUpdateCheckResult> _repeated_updateCheckResults_codec
      = pb::FieldCodec.ForMessage(26, global::CMsgSystemUpdateCheckResult.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemUpdateCheckResult> updateCheckResults_ = new pbc::RepeatedField<global::CMsgSystemUpdateCheckResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemUpdateCheckResult> UpdateCheckResults {
    get { return updateCheckResults_; }
  }

  /// <summary>Field number for the "update_apply_results" field.</summary>
  public const int UpdateApplyResultsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CMsgSystemUpdateApplyResult> _repeated_updateApplyResults_codec
      = pb::FieldCodec.ForMessage(34, global::CMsgSystemUpdateApplyResult.Parser);
  private readonly pbc::RepeatedField<global::CMsgSystemUpdateApplyResult> updateApplyResults_ = new pbc::RepeatedField<global::CMsgSystemUpdateApplyResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSystemUpdateApplyResult> UpdateApplyResults {
    get { return updateApplyResults_; }
  }

  /// <summary>Field number for the "supports_os_updates" field.</summary>
  public const int SupportsOsUpdatesFieldNumber = 5;
  private readonly static bool SupportsOsUpdatesDefaultValue = false;

  private bool supportsOsUpdates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SupportsOsUpdates {
    get { if ((_hasBits0 & 2) != 0) { return supportsOsUpdates_; } else { return SupportsOsUpdatesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      supportsOsUpdates_ = value;
    }
  }
  /// <summary>Gets whether the "supports_os_updates" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSupportsOsUpdates {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "supports_os_updates" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSupportsOsUpdates() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSystemUpdateState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSystemUpdateState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (!object.Equals(Progress, other.Progress)) return false;
    if(!updateCheckResults_.Equals(other.updateCheckResults_)) return false;
    if(!updateApplyResults_.Equals(other.updateApplyResults_)) return false;
    if (SupportsOsUpdates != other.SupportsOsUpdates) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasState) hash ^= State.GetHashCode();
    if (progress_ != null) hash ^= Progress.GetHashCode();
    hash ^= updateCheckResults_.GetHashCode();
    hash ^= updateApplyResults_.GetHashCode();
    if (HasSupportsOsUpdates) hash ^= SupportsOsUpdates.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasState) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (progress_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Progress);
    }
    updateCheckResults_.WriteTo(output, _repeated_updateCheckResults_codec);
    updateApplyResults_.WriteTo(output, _repeated_updateApplyResults_codec);
    if (HasSupportsOsUpdates) {
      output.WriteRawTag(40);
      output.WriteBool(SupportsOsUpdates);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasState) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (progress_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Progress);
    }
    updateCheckResults_.WriteTo(ref output, _repeated_updateCheckResults_codec);
    updateApplyResults_.WriteTo(ref output, _repeated_updateApplyResults_codec);
    if (HasSupportsOsUpdates) {
      output.WriteRawTag(40);
      output.WriteBool(SupportsOsUpdates);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (progress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Progress);
    }
    size += updateCheckResults_.CalculateSize(_repeated_updateCheckResults_codec);
    size += updateApplyResults_.CalculateSize(_repeated_updateApplyResults_codec);
    if (HasSupportsOsUpdates) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSystemUpdateState other) {
    if (other == null) {
      return;
    }
    if (other.HasState) {
      State = other.State;
    }
    if (other.progress_ != null) {
      if (progress_ == null) {
        Progress = new global::CMsgSystemUpdateProgress();
      }
      Progress.MergeFrom(other.Progress);
    }
    updateCheckResults_.Add(other.updateCheckResults_);
    updateApplyResults_.Add(other.updateApplyResults_);
    if (other.HasSupportsOsUpdates) {
      SupportsOsUpdates = other.SupportsOsUpdates;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          State = (global::EUpdaterState) input.ReadEnum();
          break;
        }
        case 18: {
          if (progress_ == null) {
            Progress = new global::CMsgSystemUpdateProgress();
          }
          input.ReadMessage(Progress);
          break;
        }
        case 26: {
          updateCheckResults_.AddEntriesFrom(input, _repeated_updateCheckResults_codec);
          break;
        }
        case 34: {
          updateApplyResults_.AddEntriesFrom(input, _repeated_updateApplyResults_codec);
          break;
        }
        case 40: {
          SupportsOsUpdates = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          State = (global::EUpdaterState) input.ReadEnum();
          break;
        }
        case 18: {
          if (progress_ == null) {
            Progress = new global::CMsgSystemUpdateProgress();
          }
          input.ReadMessage(Progress);
          break;
        }
        case 26: {
          updateCheckResults_.AddEntriesFrom(ref input, _repeated_updateCheckResults_codec);
          break;
        }
        case 34: {
          updateApplyResults_.AddEntriesFrom(ref input, _repeated_updateApplyResults_codec);
          break;
        }
        case 40: {
          SupportsOsUpdates = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgAchievementChange : pb::IMessage<CMsgAchievementChange>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgAchievementChange> _parser = new pb::MessageParser<CMsgAchievementChange>(() => new CMsgAchievementChange());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgAchievementChange> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgAchievementChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgAchievementChange(CMsgAchievementChange other) : this() {
    _hasBits0 = other._hasBits0;
    appid_ = other.appid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgAchievementChange Clone() {
    return new CMsgAchievementChange(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  private readonly static uint AppidDefaultValue = 0;

  private uint appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Appid {
    get { if ((_hasBits0 & 1) != 0) { return appid_; } else { return AppidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppid() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgAchievementChange);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgAchievementChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgAchievementChange other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgCellList : pb::IMessage<CMsgCellList>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgCellList> _parser = new pb::MessageParser<CMsgCellList>(() => new CMsgCellList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgCellList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCellList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCellList(CMsgCellList other) : this() {
    cells_ = other.cells_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgCellList Clone() {
    return new CMsgCellList(this);
  }

  /// <summary>Field number for the "cells" field.</summary>
  public const int CellsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgCellList.Types.Cell> _repeated_cells_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgCellList.Types.Cell.Parser);
  private readonly pbc::RepeatedField<global::CMsgCellList.Types.Cell> cells_ = new pbc::RepeatedField<global::CMsgCellList.Types.Cell>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgCellList.Types.Cell> Cells {
    get { return cells_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgCellList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgCellList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cells_.Equals(other.cells_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cells_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    cells_.WriteTo(output, _repeated_cells_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    cells_.WriteTo(ref output, _repeated_cells_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += cells_.CalculateSize(_repeated_cells_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgCellList other) {
    if (other == null) {
      return;
    }
    cells_.Add(other.cells_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          cells_.AddEntriesFrom(input, _repeated_cells_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          cells_.AddEntriesFrom(ref input, _repeated_cells_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgCellList message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Cell : pb::IMessage<Cell>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Cell> _parser = new pb::MessageParser<Cell>(() => new Cell());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Cell> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgCellList.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Cell() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Cell(Cell other) : this() {
        _hasBits0 = other._hasBits0;
        cellId_ = other.cellId_;
        locName_ = other.locName_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Cell Clone() {
        return new Cell(this);
      }

      /// <summary>Field number for the "cell_id" field.</summary>
      public const int CellIdFieldNumber = 1;
      private readonly static uint CellIdDefaultValue = 0;

      private uint cellId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint CellId {
        get { if ((_hasBits0 & 1) != 0) { return cellId_; } else { return CellIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          cellId_ = value;
        }
      }
      /// <summary>Gets whether the "cell_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasCellId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "cell_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearCellId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "loc_name" field.</summary>
      public const int LocNameFieldNumber = 2;
      private readonly static string LocNameDefaultValue = "";

      private string locName_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string LocName {
        get { return locName_ ?? LocNameDefaultValue; }
        set {
          locName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "loc_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLocName {
        get { return locName_ != null; }
      }
      /// <summary>Clears the value of the "loc_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLocName() {
        locName_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Cell);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Cell other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (CellId != other.CellId) return false;
        if (LocName != other.LocName) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasCellId) hash ^= CellId.GetHashCode();
        if (HasLocName) hash ^= LocName.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasCellId) {
          output.WriteRawTag(8);
          output.WriteUInt32(CellId);
        }
        if (HasLocName) {
          output.WriteRawTag(18);
          output.WriteString(LocName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasCellId) {
          output.WriteRawTag(8);
          output.WriteUInt32(CellId);
        }
        if (HasLocName) {
          output.WriteRawTag(18);
          output.WriteString(LocName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasCellId) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CellId);
        }
        if (HasLocName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(LocName);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Cell other) {
        if (other == null) {
          return;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasLocName) {
          LocName = other.LocName;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              CellId = input.ReadUInt32();
              break;
            }
            case 18: {
              LocName = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              CellId = input.ReadUInt32();
              break;
            }
            case 18: {
              LocName = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgShortcutInfo : pb::IMessage<CMsgShortcutInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgShortcutInfo> _parser = new pb::MessageParser<CMsgShortcutInfo>(() => new CMsgShortcutInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgShortcutInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutInfo(CMsgShortcutInfo other) : this() {
    _hasBits0 = other._hasBits0;
    appid_ = other.appid_;
    exe_ = other.exe_;
    startDir_ = other.startDir_;
    icon_ = other.icon_;
    path_ = other.path_;
    args_ = other.args_;
    appName_ = other.appName_;
    overrideAppid_ = other.overrideAppid_;
    flatpakAppid_ = other.flatpakAppid_;
    tags_ = other.tags_.Clone();
    isRemote_ = other.isRemote_;
    isHidden_ = other.isHidden_;
    isTemporary_ = other.isTemporary_;
    isOpenvr_ = other.isOpenvr_;
    allowDesktopConfig_ = other.allowDesktopConfig_;
    allowOverlay_ = other.allowOverlay_;
    rtLastPlayedTime_ = other.rtLastPlayedTime_;
    isDevkitShortcut_ = other.isDevkitShortcut_;
    devkitGameid_ = other.devkitGameid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutInfo Clone() {
    return new CMsgShortcutInfo(this);
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 1;
  private readonly static uint AppidDefaultValue = 0;

  private uint appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Appid {
    get { if ((_hasBits0 & 1) != 0) { return appid_; } else { return AppidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "exe" field.</summary>
  public const int ExeFieldNumber = 2;
  private readonly static string ExeDefaultValue = "";

  private string exe_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Exe {
    get { return exe_ ?? ExeDefaultValue; }
    set {
      exe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "exe" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExe {
    get { return exe_ != null; }
  }
  /// <summary>Clears the value of the "exe" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExe() {
    exe_ = null;
  }

  /// <summary>Field number for the "start_dir" field.</summary>
  public const int StartDirFieldNumber = 3;
  private readonly static string StartDirDefaultValue = "";

  private string startDir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string StartDir {
    get { return startDir_ ?? StartDirDefaultValue; }
    set {
      startDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "start_dir" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartDir {
    get { return startDir_ != null; }
  }
  /// <summary>Clears the value of the "start_dir" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartDir() {
    startDir_ = null;
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private readonly static string IconDefaultValue = "";

  private string icon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Icon {
    get { return icon_ ?? IconDefaultValue; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "icon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIcon {
    get { return icon_ != null; }
  }
  /// <summary>Clears the value of the "icon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIcon() {
    icon_ = null;
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 5;
  private readonly static string PathDefaultValue = "";

  private string path_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Path {
    get { return path_ ?? PathDefaultValue; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "path" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPath {
    get { return path_ != null; }
  }
  /// <summary>Clears the value of the "path" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPath() {
    path_ = null;
  }

  /// <summary>Field number for the "args" field.</summary>
  public const int ArgsFieldNumber = 6;
  private readonly static string ArgsDefaultValue = "";

  private string args_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Args {
    get { return args_ ?? ArgsDefaultValue; }
    set {
      args_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "args" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasArgs {
    get { return args_ != null; }
  }
  /// <summary>Clears the value of the "args" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearArgs() {
    args_ = null;
  }

  /// <summary>Field number for the "app_name" field.</summary>
  public const int AppNameFieldNumber = 7;
  private readonly static string AppNameDefaultValue = "";

  private string appName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AppName {
    get { return appName_ ?? AppNameDefaultValue; }
    set {
      appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "app_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppName {
    get { return appName_ != null; }
  }
  /// <summary>Clears the value of the "app_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppName() {
    appName_ = null;
  }

  /// <summary>Field number for the "override_appid" field.</summary>
  public const int OverrideAppidFieldNumber = 8;
  private readonly static uint OverrideAppidDefaultValue = 0;

  private uint overrideAppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint OverrideAppid {
    get { if ((_hasBits0 & 2) != 0) { return overrideAppid_; } else { return OverrideAppidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      overrideAppid_ = value;
    }
  }
  /// <summary>Gets whether the "override_appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverrideAppid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "override_appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverrideAppid() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "flatpak_appid" field.</summary>
  public const int FlatpakAppidFieldNumber = 9;
  private readonly static string FlatpakAppidDefaultValue = "";

  private string flatpakAppid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string FlatpakAppid {
    get { return flatpakAppid_ ?? FlatpakAppidDefaultValue; }
    set {
      flatpakAppid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "flatpak_appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlatpakAppid {
    get { return flatpakAppid_ != null; }
  }
  /// <summary>Clears the value of the "flatpak_appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlatpakAppid() {
    flatpakAppid_ = null;
  }

  /// <summary>Field number for the "tags" field.</summary>
  public const int TagsFieldNumber = 10;
  private static readonly pb::FieldCodec<string> _repeated_tags_codec
      = pb::FieldCodec.ForString(82);
  private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> Tags {
    get { return tags_; }
  }

  /// <summary>Field number for the "is_remote" field.</summary>
  public const int IsRemoteFieldNumber = 11;
  private readonly static bool IsRemoteDefaultValue = false;

  private bool isRemote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRemote {
    get { if ((_hasBits0 & 4) != 0) { return isRemote_; } else { return IsRemoteDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isRemote_ = value;
    }
  }
  /// <summary>Gets whether the "is_remote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsRemote {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "is_remote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsRemote() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_hidden" field.</summary>
  public const int IsHiddenFieldNumber = 12;
  private readonly static bool IsHiddenDefaultValue = false;

  private bool isHidden_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsHidden {
    get { if ((_hasBits0 & 8) != 0) { return isHidden_; } else { return IsHiddenDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isHidden_ = value;
    }
  }
  /// <summary>Gets whether the "is_hidden" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsHidden {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_hidden" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsHidden() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "is_temporary" field.</summary>
  public const int IsTemporaryFieldNumber = 13;
  private readonly static bool IsTemporaryDefaultValue = false;

  private bool isTemporary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTemporary {
    get { if ((_hasBits0 & 16) != 0) { return isTemporary_; } else { return IsTemporaryDefaultValue; } }
    set {
      _hasBits0 |= 16;
      isTemporary_ = value;
    }
  }
  /// <summary>Gets whether the "is_temporary" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsTemporary {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "is_temporary" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsTemporary() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "is_openvr" field.</summary>
  public const int IsOpenvrFieldNumber = 14;
  private readonly static bool IsOpenvrDefaultValue = false;

  private bool isOpenvr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpenvr {
    get { if ((_hasBits0 & 32) != 0) { return isOpenvr_; } else { return IsOpenvrDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isOpenvr_ = value;
    }
  }
  /// <summary>Gets whether the "is_openvr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsOpenvr {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "is_openvr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsOpenvr() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "allow_desktop_config" field.</summary>
  public const int AllowDesktopConfigFieldNumber = 15;
  private readonly static bool AllowDesktopConfigDefaultValue = false;

  private bool allowDesktopConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowDesktopConfig {
    get { if ((_hasBits0 & 64) != 0) { return allowDesktopConfig_; } else { return AllowDesktopConfigDefaultValue; } }
    set {
      _hasBits0 |= 64;
      allowDesktopConfig_ = value;
    }
  }
  /// <summary>Gets whether the "allow_desktop_config" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowDesktopConfig {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "allow_desktop_config" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowDesktopConfig() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "allow_overlay" field.</summary>
  public const int AllowOverlayFieldNumber = 16;
  private readonly static bool AllowOverlayDefaultValue = false;

  private bool allowOverlay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowOverlay {
    get { if ((_hasBits0 & 128) != 0) { return allowOverlay_; } else { return AllowOverlayDefaultValue; } }
    set {
      _hasBits0 |= 128;
      allowOverlay_ = value;
    }
  }
  /// <summary>Gets whether the "allow_overlay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowOverlay {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "allow_overlay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowOverlay() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "rt_last_played_time" field.</summary>
  public const int RtLastPlayedTimeFieldNumber = 17;
  private readonly static uint RtLastPlayedTimeDefaultValue = 0;

  private uint rtLastPlayedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RtLastPlayedTime {
    get { if ((_hasBits0 & 256) != 0) { return rtLastPlayedTime_; } else { return RtLastPlayedTimeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      rtLastPlayedTime_ = value;
    }
  }
  /// <summary>Gets whether the "rt_last_played_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtLastPlayedTime {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "rt_last_played_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtLastPlayedTime() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "is_devkit_shortcut" field.</summary>
  public const int IsDevkitShortcutFieldNumber = 18;
  private readonly static bool IsDevkitShortcutDefaultValue = false;

  private bool isDevkitShortcut_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDevkitShortcut {
    get { if ((_hasBits0 & 512) != 0) { return isDevkitShortcut_; } else { return IsDevkitShortcutDefaultValue; } }
    set {
      _hasBits0 |= 512;
      isDevkitShortcut_ = value;
    }
  }
  /// <summary>Gets whether the "is_devkit_shortcut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDevkitShortcut {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "is_devkit_shortcut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDevkitShortcut() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "devkit_gameid" field.</summary>
  public const int DevkitGameidFieldNumber = 19;
  private readonly static string DevkitGameidDefaultValue = "";

  private string devkitGameid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DevkitGameid {
    get { return devkitGameid_ ?? DevkitGameidDefaultValue; }
    set {
      devkitGameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "devkit_gameid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDevkitGameid {
    get { return devkitGameid_ != null; }
  }
  /// <summary>Clears the value of the "devkit_gameid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDevkitGameid() {
    devkitGameid_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgShortcutInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgShortcutInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Appid != other.Appid) return false;
    if (Exe != other.Exe) return false;
    if (StartDir != other.StartDir) return false;
    if (Icon != other.Icon) return false;
    if (Path != other.Path) return false;
    if (Args != other.Args) return false;
    if (AppName != other.AppName) return false;
    if (OverrideAppid != other.OverrideAppid) return false;
    if (FlatpakAppid != other.FlatpakAppid) return false;
    if(!tags_.Equals(other.tags_)) return false;
    if (IsRemote != other.IsRemote) return false;
    if (IsHidden != other.IsHidden) return false;
    if (IsTemporary != other.IsTemporary) return false;
    if (IsOpenvr != other.IsOpenvr) return false;
    if (AllowDesktopConfig != other.AllowDesktopConfig) return false;
    if (AllowOverlay != other.AllowOverlay) return false;
    if (RtLastPlayedTime != other.RtLastPlayedTime) return false;
    if (IsDevkitShortcut != other.IsDevkitShortcut) return false;
    if (DevkitGameid != other.DevkitGameid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasExe) hash ^= Exe.GetHashCode();
    if (HasStartDir) hash ^= StartDir.GetHashCode();
    if (HasIcon) hash ^= Icon.GetHashCode();
    if (HasPath) hash ^= Path.GetHashCode();
    if (HasArgs) hash ^= Args.GetHashCode();
    if (HasAppName) hash ^= AppName.GetHashCode();
    if (HasOverrideAppid) hash ^= OverrideAppid.GetHashCode();
    if (HasFlatpakAppid) hash ^= FlatpakAppid.GetHashCode();
    hash ^= tags_.GetHashCode();
    if (HasIsRemote) hash ^= IsRemote.GetHashCode();
    if (HasIsHidden) hash ^= IsHidden.GetHashCode();
    if (HasIsTemporary) hash ^= IsTemporary.GetHashCode();
    if (HasIsOpenvr) hash ^= IsOpenvr.GetHashCode();
    if (HasAllowDesktopConfig) hash ^= AllowDesktopConfig.GetHashCode();
    if (HasAllowOverlay) hash ^= AllowOverlay.GetHashCode();
    if (HasRtLastPlayedTime) hash ^= RtLastPlayedTime.GetHashCode();
    if (HasIsDevkitShortcut) hash ^= IsDevkitShortcut.GetHashCode();
    if (HasDevkitGameid) hash ^= DevkitGameid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasExe) {
      output.WriteRawTag(18);
      output.WriteString(Exe);
    }
    if (HasStartDir) {
      output.WriteRawTag(26);
      output.WriteString(StartDir);
    }
    if (HasIcon) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (HasPath) {
      output.WriteRawTag(42);
      output.WriteString(Path);
    }
    if (HasArgs) {
      output.WriteRawTag(50);
      output.WriteString(Args);
    }
    if (HasAppName) {
      output.WriteRawTag(58);
      output.WriteString(AppName);
    }
    if (HasOverrideAppid) {
      output.WriteRawTag(64);
      output.WriteUInt32(OverrideAppid);
    }
    if (HasFlatpakAppid) {
      output.WriteRawTag(74);
      output.WriteString(FlatpakAppid);
    }
    tags_.WriteTo(output, _repeated_tags_codec);
    if (HasIsRemote) {
      output.WriteRawTag(88);
      output.WriteBool(IsRemote);
    }
    if (HasIsHidden) {
      output.WriteRawTag(96);
      output.WriteBool(IsHidden);
    }
    if (HasIsTemporary) {
      output.WriteRawTag(104);
      output.WriteBool(IsTemporary);
    }
    if (HasIsOpenvr) {
      output.WriteRawTag(112);
      output.WriteBool(IsOpenvr);
    }
    if (HasAllowDesktopConfig) {
      output.WriteRawTag(120);
      output.WriteBool(AllowDesktopConfig);
    }
    if (HasAllowOverlay) {
      output.WriteRawTag(128, 1);
      output.WriteBool(AllowOverlay);
    }
    if (HasRtLastPlayedTime) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(RtLastPlayedTime);
    }
    if (HasIsDevkitShortcut) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsDevkitShortcut);
    }
    if (HasDevkitGameid) {
      output.WriteRawTag(154, 1);
      output.WriteString(DevkitGameid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAppid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Appid);
    }
    if (HasExe) {
      output.WriteRawTag(18);
      output.WriteString(Exe);
    }
    if (HasStartDir) {
      output.WriteRawTag(26);
      output.WriteString(StartDir);
    }
    if (HasIcon) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (HasPath) {
      output.WriteRawTag(42);
      output.WriteString(Path);
    }
    if (HasArgs) {
      output.WriteRawTag(50);
      output.WriteString(Args);
    }
    if (HasAppName) {
      output.WriteRawTag(58);
      output.WriteString(AppName);
    }
    if (HasOverrideAppid) {
      output.WriteRawTag(64);
      output.WriteUInt32(OverrideAppid);
    }
    if (HasFlatpakAppid) {
      output.WriteRawTag(74);
      output.WriteString(FlatpakAppid);
    }
    tags_.WriteTo(ref output, _repeated_tags_codec);
    if (HasIsRemote) {
      output.WriteRawTag(88);
      output.WriteBool(IsRemote);
    }
    if (HasIsHidden) {
      output.WriteRawTag(96);
      output.WriteBool(IsHidden);
    }
    if (HasIsTemporary) {
      output.WriteRawTag(104);
      output.WriteBool(IsTemporary);
    }
    if (HasIsOpenvr) {
      output.WriteRawTag(112);
      output.WriteBool(IsOpenvr);
    }
    if (HasAllowDesktopConfig) {
      output.WriteRawTag(120);
      output.WriteBool(AllowDesktopConfig);
    }
    if (HasAllowOverlay) {
      output.WriteRawTag(128, 1);
      output.WriteBool(AllowOverlay);
    }
    if (HasRtLastPlayedTime) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(RtLastPlayedTime);
    }
    if (HasIsDevkitShortcut) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsDevkitShortcut);
    }
    if (HasDevkitGameid) {
      output.WriteRawTag(154, 1);
      output.WriteString(DevkitGameid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasExe) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Exe);
    }
    if (HasStartDir) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDir);
    }
    if (HasIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (HasPath) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (HasArgs) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Args);
    }
    if (HasAppName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
    }
    if (HasOverrideAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverrideAppid);
    }
    if (HasFlatpakAppid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FlatpakAppid);
    }
    size += tags_.CalculateSize(_repeated_tags_codec);
    if (HasIsRemote) {
      size += 1 + 1;
    }
    if (HasIsHidden) {
      size += 1 + 1;
    }
    if (HasIsTemporary) {
      size += 1 + 1;
    }
    if (HasIsOpenvr) {
      size += 1 + 1;
    }
    if (HasAllowDesktopConfig) {
      size += 1 + 1;
    }
    if (HasAllowOverlay) {
      size += 2 + 1;
    }
    if (HasRtLastPlayedTime) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtLastPlayedTime);
    }
    if (HasIsDevkitShortcut) {
      size += 2 + 1;
    }
    if (HasDevkitGameid) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DevkitGameid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgShortcutInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasExe) {
      Exe = other.Exe;
    }
    if (other.HasStartDir) {
      StartDir = other.StartDir;
    }
    if (other.HasIcon) {
      Icon = other.Icon;
    }
    if (other.HasPath) {
      Path = other.Path;
    }
    if (other.HasArgs) {
      Args = other.Args;
    }
    if (other.HasAppName) {
      AppName = other.AppName;
    }
    if (other.HasOverrideAppid) {
      OverrideAppid = other.OverrideAppid;
    }
    if (other.HasFlatpakAppid) {
      FlatpakAppid = other.FlatpakAppid;
    }
    tags_.Add(other.tags_);
    if (other.HasIsRemote) {
      IsRemote = other.IsRemote;
    }
    if (other.HasIsHidden) {
      IsHidden = other.IsHidden;
    }
    if (other.HasIsTemporary) {
      IsTemporary = other.IsTemporary;
    }
    if (other.HasIsOpenvr) {
      IsOpenvr = other.IsOpenvr;
    }
    if (other.HasAllowDesktopConfig) {
      AllowDesktopConfig = other.AllowDesktopConfig;
    }
    if (other.HasAllowOverlay) {
      AllowOverlay = other.AllowOverlay;
    }
    if (other.HasRtLastPlayedTime) {
      RtLastPlayedTime = other.RtLastPlayedTime;
    }
    if (other.HasIsDevkitShortcut) {
      IsDevkitShortcut = other.IsDevkitShortcut;
    }
    if (other.HasDevkitGameid) {
      DevkitGameid = other.DevkitGameid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 18: {
          Exe = input.ReadString();
          break;
        }
        case 26: {
          StartDir = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 42: {
          Path = input.ReadString();
          break;
        }
        case 50: {
          Args = input.ReadString();
          break;
        }
        case 58: {
          AppName = input.ReadString();
          break;
        }
        case 64: {
          OverrideAppid = input.ReadUInt32();
          break;
        }
        case 74: {
          FlatpakAppid = input.ReadString();
          break;
        }
        case 82: {
          tags_.AddEntriesFrom(input, _repeated_tags_codec);
          break;
        }
        case 88: {
          IsRemote = input.ReadBool();
          break;
        }
        case 96: {
          IsHidden = input.ReadBool();
          break;
        }
        case 104: {
          IsTemporary = input.ReadBool();
          break;
        }
        case 112: {
          IsOpenvr = input.ReadBool();
          break;
        }
        case 120: {
          AllowDesktopConfig = input.ReadBool();
          break;
        }
        case 128: {
          AllowOverlay = input.ReadBool();
          break;
        }
        case 136: {
          RtLastPlayedTime = input.ReadUInt32();
          break;
        }
        case 144: {
          IsDevkitShortcut = input.ReadBool();
          break;
        }
        case 154: {
          DevkitGameid = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Appid = input.ReadUInt32();
          break;
        }
        case 18: {
          Exe = input.ReadString();
          break;
        }
        case 26: {
          StartDir = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 42: {
          Path = input.ReadString();
          break;
        }
        case 50: {
          Args = input.ReadString();
          break;
        }
        case 58: {
          AppName = input.ReadString();
          break;
        }
        case 64: {
          OverrideAppid = input.ReadUInt32();
          break;
        }
        case 74: {
          FlatpakAppid = input.ReadString();
          break;
        }
        case 82: {
          tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
          break;
        }
        case 88: {
          IsRemote = input.ReadBool();
          break;
        }
        case 96: {
          IsHidden = input.ReadBool();
          break;
        }
        case 104: {
          IsTemporary = input.ReadBool();
          break;
        }
        case 112: {
          IsOpenvr = input.ReadBool();
          break;
        }
        case 120: {
          AllowDesktopConfig = input.ReadBool();
          break;
        }
        case 128: {
          AllowOverlay = input.ReadBool();
          break;
        }
        case 136: {
          RtLastPlayedTime = input.ReadUInt32();
          break;
        }
        case 144: {
          IsDevkitShortcut = input.ReadBool();
          break;
        }
        case 154: {
          DevkitGameid = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgShortcutAppIds : pb::IMessage<CMsgShortcutAppIds>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgShortcutAppIds> _parser = new pb::MessageParser<CMsgShortcutAppIds>(() => new CMsgShortcutAppIds());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgShortcutAppIds> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutAppIds() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutAppIds(CMsgShortcutAppIds other) : this() {
    appids_ = other.appids_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgShortcutAppIds Clone() {
    return new CMsgShortcutAppIds(this);
  }

  /// <summary>Field number for the "appids" field.</summary>
  public const int AppidsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_appids_codec
      = pb::FieldCodec.ForUInt32(8);
  private readonly pbc::RepeatedField<uint> appids_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> Appids {
    get { return appids_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgShortcutAppIds);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgShortcutAppIds other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!appids_.Equals(other.appids_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= appids_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    appids_.WriteTo(output, _repeated_appids_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    appids_.WriteTo(ref output, _repeated_appids_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += appids_.CalculateSize(_repeated_appids_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgShortcutAppIds other) {
    if (other == null) {
      return;
    }
    appids_.Add(other.appids_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          appids_.AddEntriesFrom(input, _repeated_appids_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10:
        case 8: {
          appids_.AddEntriesFrom(ref input, _repeated_appids_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgMonitorInfo : pb::IMessage<CMsgMonitorInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgMonitorInfo> _parser = new pb::MessageParser<CMsgMonitorInfo>(() => new CMsgMonitorInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgMonitorInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgMonitorInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgMonitorInfo(CMsgMonitorInfo other) : this() {
    selectedDisplayName_ = other.selectedDisplayName_;
    monitors_ = other.monitors_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgMonitorInfo Clone() {
    return new CMsgMonitorInfo(this);
  }

  /// <summary>Field number for the "selected_display_name" field.</summary>
  public const int SelectedDisplayNameFieldNumber = 1;
  private readonly static string SelectedDisplayNameDefaultValue = "";

  private string selectedDisplayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SelectedDisplayName {
    get { return selectedDisplayName_ ?? SelectedDisplayNameDefaultValue; }
    set {
      selectedDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "selected_display_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSelectedDisplayName {
    get { return selectedDisplayName_ != null; }
  }
  /// <summary>Clears the value of the "selected_display_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSelectedDisplayName() {
    selectedDisplayName_ = null;
  }

  /// <summary>Field number for the "monitors" field.</summary>
  public const int MonitorsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgMonitorInfo.Types.MonitorInfo> _repeated_monitors_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgMonitorInfo.Types.MonitorInfo.Parser);
  private readonly pbc::RepeatedField<global::CMsgMonitorInfo.Types.MonitorInfo> monitors_ = new pbc::RepeatedField<global::CMsgMonitorInfo.Types.MonitorInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgMonitorInfo.Types.MonitorInfo> Monitors {
    get { return monitors_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgMonitorInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgMonitorInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SelectedDisplayName != other.SelectedDisplayName) return false;
    if(!monitors_.Equals(other.monitors_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSelectedDisplayName) hash ^= SelectedDisplayName.GetHashCode();
    hash ^= monitors_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSelectedDisplayName) {
      output.WriteRawTag(10);
      output.WriteString(SelectedDisplayName);
    }
    monitors_.WriteTo(output, _repeated_monitors_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSelectedDisplayName) {
      output.WriteRawTag(10);
      output.WriteString(SelectedDisplayName);
    }
    monitors_.WriteTo(ref output, _repeated_monitors_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSelectedDisplayName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedDisplayName);
    }
    size += monitors_.CalculateSize(_repeated_monitors_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgMonitorInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasSelectedDisplayName) {
      SelectedDisplayName = other.SelectedDisplayName;
    }
    monitors_.Add(other.monitors_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SelectedDisplayName = input.ReadString();
          break;
        }
        case 18: {
          monitors_.AddEntriesFrom(input, _repeated_monitors_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          SelectedDisplayName = input.ReadString();
          break;
        }
        case 18: {
          monitors_.AddEntriesFrom(ref input, _repeated_monitors_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgMonitorInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class MonitorInfo : pb::IMessage<MonitorInfo>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<MonitorInfo> _parser = new pb::MessageParser<MonitorInfo>(() => new MonitorInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<MonitorInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgMonitorInfo.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public MonitorInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public MonitorInfo(MonitorInfo other) : this() {
        monitorDeviceName_ = other.monitorDeviceName_;
        monitorDisplayName_ = other.monitorDisplayName_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public MonitorInfo Clone() {
        return new MonitorInfo(this);
      }

      /// <summary>Field number for the "monitor_device_name" field.</summary>
      public const int MonitorDeviceNameFieldNumber = 1;
      private readonly static string MonitorDeviceNameDefaultValue = "";

      private string monitorDeviceName_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string MonitorDeviceName {
        get { return monitorDeviceName_ ?? MonitorDeviceNameDefaultValue; }
        set {
          monitorDeviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "monitor_device_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMonitorDeviceName {
        get { return monitorDeviceName_ != null; }
      }
      /// <summary>Clears the value of the "monitor_device_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMonitorDeviceName() {
        monitorDeviceName_ = null;
      }

      /// <summary>Field number for the "monitor_display_name" field.</summary>
      public const int MonitorDisplayNameFieldNumber = 2;
      private readonly static string MonitorDisplayNameDefaultValue = "";

      private string monitorDisplayName_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string MonitorDisplayName {
        get { return monitorDisplayName_ ?? MonitorDisplayNameDefaultValue; }
        set {
          monitorDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "monitor_display_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMonitorDisplayName {
        get { return monitorDisplayName_ != null; }
      }
      /// <summary>Clears the value of the "monitor_display_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMonitorDisplayName() {
        monitorDisplayName_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as MonitorInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(MonitorInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (MonitorDeviceName != other.MonitorDeviceName) return false;
        if (MonitorDisplayName != other.MonitorDisplayName) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasMonitorDeviceName) hash ^= MonitorDeviceName.GetHashCode();
        if (HasMonitorDisplayName) hash ^= MonitorDisplayName.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasMonitorDeviceName) {
          output.WriteRawTag(10);
          output.WriteString(MonitorDeviceName);
        }
        if (HasMonitorDisplayName) {
          output.WriteRawTag(18);
          output.WriteString(MonitorDisplayName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasMonitorDeviceName) {
          output.WriteRawTag(10);
          output.WriteString(MonitorDeviceName);
        }
        if (HasMonitorDisplayName) {
          output.WriteRawTag(18);
          output.WriteString(MonitorDisplayName);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasMonitorDeviceName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(MonitorDeviceName);
        }
        if (HasMonitorDisplayName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(MonitorDisplayName);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(MonitorInfo other) {
        if (other == null) {
          return;
        }
        if (other.HasMonitorDeviceName) {
          MonitorDeviceName = other.MonitorDeviceName;
        }
        if (other.HasMonitorDisplayName) {
          MonitorDisplayName = other.MonitorDisplayName;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              MonitorDeviceName = input.ReadString();
              break;
            }
            case 18: {
              MonitorDisplayName = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              MonitorDeviceName = input.ReadString();
              break;
            }
            case 18: {
              MonitorDisplayName = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgGenerateSystemReportReply : pb::IMessage<CMsgGenerateSystemReportReply>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGenerateSystemReportReply> _parser = new pb::MessageParser<CMsgGenerateSystemReportReply>(() => new CMsgGenerateSystemReportReply());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGenerateSystemReportReply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGenerateSystemReportReply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGenerateSystemReportReply(CMsgGenerateSystemReportReply other) : this() {
    reportId_ = other.reportId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGenerateSystemReportReply Clone() {
    return new CMsgGenerateSystemReportReply(this);
  }

  /// <summary>Field number for the "report_id" field.</summary>
  public const int ReportIdFieldNumber = 1;
  private readonly static string ReportIdDefaultValue = "";

  private string reportId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ReportId {
    get { return reportId_ ?? ReportIdDefaultValue; }
    set {
      reportId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "report_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReportId {
    get { return reportId_ != null; }
  }
  /// <summary>Clears the value of the "report_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReportId() {
    reportId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGenerateSystemReportReply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGenerateSystemReportReply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReportId != other.ReportId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasReportId) hash ^= ReportId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasReportId) {
      output.WriteRawTag(10);
      output.WriteString(ReportId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasReportId) {
      output.WriteRawTag(10);
      output.WriteString(ReportId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasReportId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGenerateSystemReportReply other) {
    if (other == null) {
      return;
    }
    if (other.HasReportId) {
      ReportId = other.ReportId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ReportId = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ReportId = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgWebUITransportInfo : pb::IMessage<CMsgWebUITransportInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgWebUITransportInfo> _parser = new pb::MessageParser<CMsgWebUITransportInfo>(() => new CMsgWebUITransportInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgWebUITransportInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientObjectsReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgWebUITransportInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgWebUITransportInfo(CMsgWebUITransportInfo other) : this() {
    _hasBits0 = other._hasBits0;
    port_ = other.port_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgWebUITransportInfo Clone() {
    return new CMsgWebUITransportInfo(this);
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 1;
  private readonly static uint PortDefaultValue = 0;

  private uint port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Port {
    get { if ((_hasBits0 & 1) != 0) { return port_; } else { return PortDefaultValue; } }
    set {
      _hasBits0 |= 1;
      port_ = value;
    }
  }
  /// <summary>Gets whether the "port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPort {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPort() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "auth_key" field.</summary>
  public const int AuthKeyFieldNumber = 2;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "auth_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "auth_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgWebUITransportInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgWebUITransportInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Port != other.Port) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPort) hash ^= Port.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPort) {
      output.WriteRawTag(8);
      output.WriteUInt32(Port);
    }
    if (HasAuthKey) {
      output.WriteRawTag(18);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPort) {
      output.WriteRawTag(8);
      output.WriteUInt32(Port);
    }
    if (HasAuthKey) {
      output.WriteRawTag(18);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgWebUITransportInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasPort) {
      Port = other.Port;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Port = input.ReadUInt32();
          break;
        }
        case 18: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Port = input.ReadUInt32();
          break;
        }
        case 18: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
