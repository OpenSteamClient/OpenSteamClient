// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steamdatagram_messages_sdr.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steamdatagram_messages_sdr.proto</summary>
public static partial class SteamdatagramMessagesSdrReflection {

  #region Descriptor
  /// <summary>File descriptor for steamdatagram_messages_sdr.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteamdatagramMessagesSdrReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiBzdGVhbWRhdGFncmFtX21lc3NhZ2VzX3Nkci5wcm90bxorc3RlYW1uZXR3",
          "b3JraW5nc29ja2V0c19tZXNzYWdlc19jZXJ0cy5wcm90bxolc3RlYW1uZXR3",
          "b3JraW5nc29ja2V0c19tZXNzYWdlcy5wcm90byI2ChxDTXNnU3RlYW1OZXR3",
          "b3JraW5nSVBBZGRyZXNzEgoKAnY0GAEgASgHEgoKAnY2GAIgASgMIpYBCiVD",
          "TXNnU3RlYW1EYXRhZ3JhbVNpZ25lZE1lc3NhZ2VHZW5lcmljEjEKBGNlcnQY",
          "ASABKAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNlcnRpZmljYXRlU2lnbmVkEhMK",
          "C3NpZ25lZF9kYXRhGAIgASgMEhEKCXNpZ25hdHVyZRgDIAEoDBISCglkdW1t",
          "eV9wYWQY/wcgASgMIp0HCiBDTXNnU3RlYW1EYXRhZ3JhbVJvdXRlclBpbmdS",
          "ZXBseRIYChBjbGllbnRfdGltZXN0YW1wGAEgASgHEiIKFmxhdGVuY3lfZGF0",
          "YWNlbnRlcl9pZHMYAiADKAdCAhABEhsKD2xhdGVuY3lfcGluZ19tcxgDIAMo",
          "DUICEAESJgoabGF0ZW5jeV9kYXRhY2VudGVyX2lkc19wMnAYDiADKAdCAhAB",
          "Eh8KE2xhdGVuY3lfcGluZ19tc19wMnAYDyADKA1CAhABEhYKDnlvdXJfcHVi",
          "bGljX2lwGAQgASgHEhgKEHlvdXJfcHVibGljX3BvcnQYCyABKAcSEwoLc2Vy",
          "dmVyX3RpbWUYBSABKAcSEQoJY2hhbGxlbmdlGAYgASgGEh4KFnNlY29uZHNf",
          "dW50aWxfc2h1dGRvd24YByABKA0SFQoNY2xpZW50X2Nvb2tpZRgIIAEoBxIl",
          "Ch1zY29yaW5nX3BlbmFsdHlfcmVsYXlfY2x1c3RlchgJIAEoDRINCgVmbGFn",
          "cxgMIAEoDRJKChByb3V0ZV9leGNlcHRpb25zGAogAygLMjAuQ01zZ1N0ZWFt",
          "RGF0YWdyYW1Sb3V0ZXJQaW5nUmVwbHkuUm91dGVFeGNlcHRpb24SQwoNYWx0",
          "X2FkZHJlc3NlcxgNIAMoCzIsLkNNc2dTdGVhbURhdGFncmFtUm91dGVyUGlu",
          "Z1JlcGx5LkFsdEFkZHJlc3MSEQoJZHVtbXlfcGFkGGMgASgMGkgKDlJvdXRl",
          "RXhjZXB0aW9uEhYKDmRhdGFfY2VudGVyX2lkGAEgASgHEg0KBWZsYWdzGAIg",
          "ASgNEg8KB3BlbmFsdHkYAyABKA0a0QEKCkFsdEFkZHJlc3MSDAoEaXB2NBgB",
          "IAEoBxIMCgRwb3J0GAIgASgNEg8KB3BlbmFsdHkYAyABKA0SWAoIcHJvdG9j",
          "b2wYBCABKA4yNS5DTXNnU3RlYW1EYXRhZ3JhbVJvdXRlclBpbmdSZXBseS5B",
          "bHRBZGRyZXNzLlByb3RvY29sOg9EZWZhdWx0UHJvdG9jb2wSCgoCaWQYBSAB",
          "KAkiMAoIUHJvdG9jb2wSEwoPRGVmYXVsdFByb3RvY29sEAASDwoLTmV0d29y",
          "a05leHQQASJMCgVGbGFncxIgChxGTEFHX01BWUJFX01PUkVfREFUQV9DRU5U",
          "RVJTEAESIQodRkxBR19NQVlCRV9NT1JFX0FMVF9BRERSRVNTRVMQAiKAAgoq",
          "Q01zZ1N0ZWFtRGF0YWdyYW1HYW1lc2VydmVyUGluZ1JlcXVlc3RCb2R5EhMK",
          "C3JlbGF5X3BvcGlkGAEgASgHEjUKDnlvdXJfcHVibGljX2lwGAIgASgLMh0u",
          "Q01zZ1N0ZWFtTmV0d29ya2luZ0lQQWRkcmVzcxIYChB5b3VyX3B1YmxpY19w",
          "b3J0GAMgASgNEhcKD3JlbGF5X3VuaXhfdGltZRgEIAEoBBIWCg5yb3V0aW5n",
          "X3NlY3JldBgFIAEoBhItCgZteV9pcHMYBiADKAsyHS5DTXNnU3RlYW1OZXR3",
          "b3JraW5nSVBBZGRyZXNzEgwKBGVjaG8YCCABKAwiugIKLkNNc2dTdGVhbURh",
          "dGFncmFtR2FtZXNlcnZlclBpbmdSZXF1ZXN0RW52ZWxvcGUSMQoEY2VydBgG",
          "IAEoCzIjLkNNc2dTdGVhbURhdGFncmFtQ2VydGlmaWNhdGVTaWduZWQSEwoL",
          "c2lnbmVkX2RhdGEYByABKAwSEQoJc2lnbmF0dXJlGAggASgMEh0KFWxlZ2Fj",
          "eV95b3VyX3B1YmxpY19pcBgBIAEoBxIfChdsZWdhY3lfeW91cl9wdWJsaWNf",
          "cG9ydBgFIAEoBxIeChZsZWdhY3lfcmVsYXlfdW5peF90aW1lGAIgASgHEhgK",
          "EGxlZ2FjeV9jaGFsbGVuZ2UYAyABKAYSHwoXbGVnYWN5X3JvdXRlcl90aW1l",
          "c3RhbXAYBCABKAcSEgoJZHVtbXlfcGFkGP8HIAEoDCKXAgooQ01zZ1N0ZWFt",
          "RGF0YWdyYW1HYW1lc2VydmVyUGluZ1JlcGx5RGF0YRIcChRlY2hvX3JlbGF5",
          "X3VuaXhfdGltZRgCIAEoBxIMCgRlY2hvGAggASgMEhgKEGxlZ2FjeV9jaGFs",
          "bGVuZ2UYAyABKAYSHwoXbGVnYWN5X3JvdXRlcl90aW1lc3RhbXAYBCABKAcS",
          "FgoOZGF0YV9jZW50ZXJfaWQYBSABKAcSDQoFYXBwaWQYBiABKA0SGAoQcHJv",
          "dG9jb2xfdmVyc2lvbhgHIAEoDRINCgVidWlsZBgJIAEoCRIeChZuZXR3b3Jr",
          "X2NvbmZpZ192ZXJzaW9uGAogASgEEhQKDG15X3VuaXhfdGltZRgLIAEoByK6",
          "AQonQ01zZ1N0ZWFtRGF0YWdyYW1Ob1Nlc3Npb25SZWxheVRvQ2xpZW50EhUK",
          "DWNvbm5lY3Rpb25faWQYByABKAcSFgoOeW91cl9wdWJsaWNfaXAYAiABKAcS",
          "GAoQeW91cl9wdWJsaWNfcG9ydBgGIAEoBxITCgtzZXJ2ZXJfdGltZRgDIAEo",
          "BxIRCgljaGFsbGVuZ2UYBCABKAYSHgoWc2Vjb25kc191bnRpbF9zaHV0ZG93",
          "bhgFIAEoDSKXAQolQ01zZ1N0ZWFtRGF0YWdyYW1Ob1Nlc3Npb25SZWxheVRv",
          "UGVlchIfChdsZWdhY3lfcmVsYXlfc2Vzc2lvbl9pZBgBIAEoDRIdChVmcm9t",
          "X3JlbGF5X3Nlc3Npb25faWQYAiABKAcSGgoSZnJvbV9jb25uZWN0aW9uX2lk",
          "GAcgASgHEhIKCmtsdWRnZV9wYWQYYyABKAYiQQooQ01zZ1N0ZWFtRGF0YWdy",
          "YW1DbGllbnRQaW5nU2FtcGxlUmVxdWVzdBIVCg1jb25uZWN0aW9uX2lkGAEg",
          "ASgHIpIHCiZDTXNnU3RlYW1EYXRhZ3JhbUNsaWVudFBpbmdTYW1wbGVSZXBs",
          "eRIVCg1jb25uZWN0aW9uX2lkGAEgASgHEh0KFXJlbGF5X292ZXJyaWRlX2Fj",
          "dGl2ZRgFIAEoCBI5CgRwb3BzGAIgAygLMisuQ01zZ1N0ZWFtRGF0YWdyYW1D",
          "bGllbnRQaW5nU2FtcGxlUmVwbHkuUE9QElUKE2xlZ2FjeV9kYXRhX2NlbnRl",
          "cnMYAyADKAsyOC5DTXNnU3RlYW1EYXRhZ3JhbUNsaWVudFBpbmdTYW1wbGVS",
          "ZXBseS5MZWdhY3lEYXRhQ2VudGVyGrgECgNQT1ASDgoGcG9wX2lkGAEgASgH",
          "Eh0KFWRlZmF1bHRfZnJvbnRfcGluZ19tcxgCIAEoDRIXCg9jbHVzdGVyX3Bl",
          "bmFsdHkYBCABKA0STQoNYWx0X2FkZHJlc3NlcxgHIAMoCzI2LkNNc2dTdGVh",
          "bURhdGFncmFtQ2xpZW50UGluZ1NhbXBsZVJlcGx5LlBPUC5BbHRBZGRyZXNz",
          "EhsKE2RlZmF1bHRfZTJlX3BpbmdfbXMYAyABKA0SGQoRZGVmYXVsdF9lMmVf",
          "c2NvcmUYBSABKA0SIQoZcDJwX3ZpYV9wZWVyX3JlbGF5X3BvcF9pZBgGIAEo",
          "BxIXCg9iZXN0X2RjX3BpbmdfbXMYCSABKA0SFQoNYmVzdF9kY19zY29yZRgK",
          "IAEoDRIgChhiZXN0X2RjX3ZpYV9yZWxheV9wb3BfaWQYCyABKAcSGgoSZGVm",
          "YXVsdF9kY19waW5nX21zGAwgASgNEhgKEGRlZmF1bHRfZGNfc2NvcmUYDSAB",
          "KA0SIwobZGVmYXVsdF9kY192aWFfcmVsYXlfcG9wX2lkGA4gASgHEhcKD3Rl",
          "c3RfZGNfcGluZ19tcxgPIAEoDRIVCg10ZXN0X2RjX3Njb3JlGBAgASgNEiAK",
          "GHRlc3RfZGNfdmlhX3JlbGF5X3BvcF9pZBgRIAEoBxpACgpBbHRBZGRyZXNz",
          "EgoKAmlkGAEgASgJEhUKDWZyb250X3BpbmdfbXMYAiABKA0SDwoHcGVuYWx0",
          "eRgDIAEoDRplChBMZWdhY3lEYXRhQ2VudGVyEhYKDmRhdGFfY2VudGVyX2lk",
          "GAEgASgHEiAKGGJlc3RfZGNfdmlhX3JlbGF5X3BvcF9pZBgCIAEoBxIXCg9i",
          "ZXN0X2RjX3BpbmdfbXMYAyABKA0ijgUKJkNNc2dTdGVhbURhdGFncmFtQ2xp",
          "ZW50U3dpdGNoZWRQcmltYXJ5EhUKDWNvbm5lY3Rpb25faWQYASABKAcSDwoH",
          "ZnJvbV9pcBgCIAEoBxIRCglmcm9tX3BvcnQYAyABKA0SGwoTZnJvbV9yb3V0",
          "ZXJfY2x1c3RlchgEIAEoBxIYChBmcm9tX2FjdGl2ZV90aW1lGAUgASgNEiAK",
          "GGZyb21fYWN0aXZlX3BhY2tldHNfcmVjdhgGIAEoDRIbChNmcm9tX2Ryb3Bw",
          "ZWRfcmVhc29uGAcgASgJEg4KBmdhcF9tcxgIIAEoDRJPChBmcm9tX3F1YWxp",
          "dHlfbm93GAkgASgLMjUuQ01zZ1N0ZWFtRGF0YWdyYW1DbGllbnRTd2l0Y2hl",
          "ZFByaW1hcnkuUm91dGVyUXVhbGl0eRJNCg50b19xdWFsaXR5X25vdxgKIAEo",
          "CzI1LkNNc2dTdGVhbURhdGFncmFtQ2xpZW50U3dpdGNoZWRQcmltYXJ5LlJv",
          "dXRlclF1YWxpdHkSUAoRZnJvbV9xdWFsaXR5X3RoZW4YCyABKAsyNS5DTXNn",
          "U3RlYW1EYXRhZ3JhbUNsaWVudFN3aXRjaGVkUHJpbWFyeS5Sb3V0ZXJRdWFs",
          "aXR5Ek4KD3RvX3F1YWxpdHlfdGhlbhgMIAEoCzI1LkNNc2dTdGVhbURhdGFn",
          "cmFtQ2xpZW50U3dpdGNoZWRQcmltYXJ5LlJvdXRlclF1YWxpdHkaYQoNUm91",
          "dGVyUXVhbGl0eRINCgVzY29yZRgBIAEoDRISCgpmcm9udF9waW5nGAIgASgN",
          "EhEKCWJhY2tfcGluZxgDIAEoDRIaChJzZWNvbmRzX3VudGlsX2Rvd24YBCAB",
          "KA0iwgIKH0NNc2dTdGVhbURhdGFncmFtQ29ubmVjdFJlcXVlc3QSFQoNY29u",
          "bmVjdGlvbl9pZBgBIAEoBxIUCgxteV90aW1lc3RhbXAYBCABKAYSEwoLcGlu",
          "Z19lc3RfbXMYBSABKA0SFAoMdmlydHVhbF9wb3J0GAkgASgNEiMKG2dhbWVz",
          "ZXJ2ZXJfcmVsYXlfc2Vzc2lvbl9pZBgCIAEoDRI3CgVjcnlwdBgGIAEoCzIo",
          "LkNNc2dTdGVhbURhdGFncmFtU2Vzc2lvbkNyeXB0SW5mb1NpZ25lZBIxCgRj",
          "ZXJ0GAcgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1DZXJ0aWZpY2F0ZVNpZ25l",
          "ZBIWCg5yb3V0aW5nX3NlY3JldBgKIAEoBhIeChZsZWdhY3lfY2xpZW50X3N0",
          "ZWFtX2lkGAMgASgGIpoCChpDTXNnU3RlYW1EYXRhZ3JhbUNvbm5lY3RPSxIc",
          "ChRjbGllbnRfY29ubmVjdGlvbl9pZBgBIAEoBxIcChRzZXJ2ZXJfY29ubmVj",
          "dGlvbl9pZBgHIAEoBxIWCg55b3VyX3RpbWVzdGFtcBgDIAEoBhIXCg9kZWxh",
          "eV90aW1lX3VzZWMYBCABKA0SIwobZ2FtZXNlcnZlcl9yZWxheV9zZXNzaW9u",
          "X2lkGAIgASgNEjcKBWNyeXB0GAUgASgLMiguQ01zZ1N0ZWFtRGF0YWdyYW1T",
          "ZXNzaW9uQ3J5cHRJbmZvU2lnbmVkEjEKBGNlcnQYBiABKAsyIy5DTXNnU3Rl",
          "YW1EYXRhZ3JhbUNlcnRpZmljYXRlU2lnbmVkIq4DCidDTXNnU3RlYW1OZXR3",
          "b3JraW5nUDJQU0RSUm91dGluZ1N1bW1hcnkSFAoMaW5pdGlhbF9waW5nGAEg",
          "ASgNEiAKGGluaXRpYWxfcGluZ19mcm9udF9sb2NhbBgCIAEoDRIhChlpbml0",
          "aWFsX3BpbmdfZnJvbnRfcmVtb3RlGAMgASgNEhUKDWluaXRpYWxfc2NvcmUY",
          "BCABKA0SGQoRaW5pdGlhbF9wb3BfbG9jYWwYBSABKAcSGgoSaW5pdGlhbF9w",
          "b3BfcmVtb3RlGAYgASgHEhEKCWJlc3RfcGluZxgLIAEoDRIdChViZXN0X3Bp",
          "bmdfZnJvbnRfbG9jYWwYDCABKA0SHgoWYmVzdF9waW5nX2Zyb250X3JlbW90",
          "ZRgNIAEoDRISCgpiZXN0X3Njb3JlGA4gASgNEhYKDmJlc3RfcG9wX2xvY2Fs",
          "GA8gASgHEhcKD2Jlc3RfcG9wX3JlbW90ZRgQIAEoBxIRCgliZXN0X3RpbWUY",
          "ESABKA0SFgoObmVnb3RpYXRpb25fbXMYByABKA0SGAoQc2VsZWN0ZWRfc2Vj",
          "b25kcxgIIAEoDSKPAQoiQ01zZ1N0ZWFtRGF0YWdyYW1QMlBSb3V0aW5nU3Vt",
          "bWFyeRIyCgNpY2UYAiABKAsyJS5DTXNnU3RlYW1OZXR3b3JraW5nSUNFU2Vz",
          "c2lvblN1bW1hcnkSNQoDc2RyGAMgASgLMiguQ01zZ1N0ZWFtTmV0d29ya2lu",
          "Z1AyUFNEUlJvdXRpbmdTdW1tYXJ5IukGCiFDTXNnU3RlYW1EYXRhZ3JhbUNv",
          "bm5lY3Rpb25DbG9zZWQSGAoQdG9fY29ubmVjdGlvbl9pZBgHIAEoBxIaChJm",
          "cm9tX2Nvbm5lY3Rpb25faWQYCCABKAcSHAoUZnJvbV9pZGVudGl0eV9zdHJp",
          "bmcYDyABKAkSTQobbGVnYWN5X2Zyb21faWRlbnRpdHlfYmluYXJ5GA0gASgL",
          "MiguQ01zZ1N0ZWFtTmV0d29ya2luZ0lkZW50aXR5TGVnYWN5QmluYXJ5EhwK",
          "FGxlZ2FjeV9mcm9tX3N0ZWFtX2lkGAMgASgGEioKImxlZ2FjeV9nYW1lc2Vy",
          "dmVyX3JlbGF5X3Nlc3Npb25faWQYAiABKA0SGwoTdG9fcmVsYXlfc2Vzc2lv",
          "bl9pZBgJIAEoBxIdChVmcm9tX3JlbGF5X3Nlc3Npb25faWQYCiABKAcSKgoi",
          "Zm9yd2FyZF90YXJnZXRfcmVsYXlfcm91dGluZ190b2tlbhgLIAEoDBIfChdm",
          "b3J3YXJkX3RhcmdldF9yZXZpc2lvbhgMIAEoDRJHCgpyZWxheV9tb2RlGAQg",
          "ASgOMi0uQ01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0aW9uQ2xvc2VkLkVSZWxh",
          "eU1vZGU6BE5vbmUSDQoFZGVidWcYBSABKAkSEwoLcmVhc29uX2NvZGUYBiAB",
          "KA0SFgoOcm91dGluZ19zZWNyZXQYDiABKAYSGwoTbm90X3ByaW1hcnlfc2Vz",
          "c2lvbhgQIAEoCBIdChVub3RfcHJpbWFyeV90cmFuc3BvcnQYEyABKAgSHQoV",
          "cmVsYXlfb3ZlcnJpZGVfYWN0aXZlGBYgASgIEjoKDXF1YWxpdHlfcmVsYXkY",
          "ESABKAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNvbm5lY3Rpb25RdWFsaXR5EjgK",
          "C3F1YWxpdHlfZTJlGBIgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0",
          "aW9uUXVhbGl0eRJAChNwMnBfcm91dGluZ19zdW1tYXJ5GBUgASgLMiMuQ01z",
          "Z1N0ZWFtRGF0YWdyYW1QMlBSb3V0aW5nU3VtbWFyeSI2CgpFUmVsYXlNb2Rl",
          "EggKBE5vbmUQABIMCghFbmRUb0VuZBABEhAKDENsb3NlZEJ5UGVlchACIswE",
          "Ch1DTXNnU3RlYW1EYXRhZ3JhbU5vQ29ubmVjdGlvbhIYChB0b19jb25uZWN0",
          "aW9uX2lkGAUgASgHEhoKEmZyb21fY29ubmVjdGlvbl9pZBgGIAEoBxIqCiJs",
          "ZWdhY3lfZ2FtZXNlcnZlcl9yZWxheV9zZXNzaW9uX2lkGAIgASgNEhsKE3Rv",
          "X3JlbGF5X3Nlc3Npb25faWQYCSABKAcSHQoVZnJvbV9yZWxheV9zZXNzaW9u",
          "X2lkGAogASgHEhwKFGZyb21faWRlbnRpdHlfc3RyaW5nGAcgASgJEhwKFGxl",
          "Z2FjeV9mcm9tX3N0ZWFtX2lkGAMgASgGEhIKCmVuZF90b19lbmQYBCABKAgS",
          "GwoTbm90X3ByaW1hcnlfc2Vzc2lvbhgMIAEoCBIdChVub3RfcHJpbWFyeV90",
          "cmFuc3BvcnQYDyABKAgSHQoVcmVsYXlfb3ZlcnJpZGVfYWN0aXZlGBEgASgI",
          "EjoKDXF1YWxpdHlfcmVsYXkYDSABKAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNv",
          "bm5lY3Rpb25RdWFsaXR5EjgKC3F1YWxpdHlfZTJlGA4gASgLMiMuQ01zZ1N0",
          "ZWFtRGF0YWdyYW1Db25uZWN0aW9uUXVhbGl0eRJAChNwMnBfcm91dGluZ19z",
          "dW1tYXJ5GBAgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1QMlBSb3V0aW5nU3Vt",
          "bWFyeRIWCg5yb3V0aW5nX3NlY3JldBgLIAEoBhISCglkdW1teV9wYWQY/wcg",
          "ASgHItwCCilDTXNnU3RlYW1EYXRhZ3JhbUdhbWVzZXJ2ZXJTZXNzaW9uUmVx",
          "dWVzdBIOCgZ0aWNrZXQYASABKAwSFgoOY2hhbGxlbmdlX3RpbWUYAyABKAcS",
          "EQoJY2hhbGxlbmdlGAQgASgGEhwKFGNsaWVudF9jb25uZWN0aW9uX2lkGAUg",
          "ASgHEhwKFHNlcnZlcl9jb25uZWN0aW9uX2lkGAggASgHEh4KFm5ldHdvcmtf",
          "Y29uZmlnX3ZlcnNpb24YBiABKAQSGAoQcHJvdG9jb2xfdmVyc2lvbhgHIAEo",
          "DRIQCghwbGF0Zm9ybRgJIAEoCRINCgVidWlsZBgKIAEoCRIfChdkZXZfZ2Ft",
          "ZXNlcnZlcl9pZGVudGl0eRhkIAEoCRI8Cg9kZXZfY2xpZW50X2NlcnQYZSAB",
          "KAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNlcnRpZmljYXRlU2lnbmVkIugBCi1D",
          "TXNnU3RlYW1EYXRhZ3JhbUdhbWVzZXJ2ZXJTZXNzaW9uRXN0YWJsaXNoZWQS",
          "FQoNY29ubmVjdGlvbl9pZBgBIAEoBxIiChpnYW1lc2VydmVyX2lkZW50aXR5",
          "X3N0cmluZxgCIAEoCRIeChZzZWNvbmRzX3VudGlsX3NodXRkb3duGAQgASgN",
          "EhMKC3NlcV9udW1fcjJjGAYgASgNEiQKHGR1bW15X2xlZ2FjeV9pZGVudGl0",
          "eV9iaW5hcnkYByABKAwSIQoZbGVnYWN5X2dhbWVzZXJ2ZXJfc3RlYW1pZBgD",
          "IAEoBiKtAwouQ01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0aW9uU3RhdHNDbGll",
          "bnRUb1JvdXRlchI6Cg1xdWFsaXR5X3JlbGF5GAEgASgLMiMuQ01zZ1N0ZWFt",
          "RGF0YWdyYW1Db25uZWN0aW9uUXVhbGl0eRI4CgtxdWFsaXR5X2UyZRgCIAEo",
          "CzIjLkNNc2dTdGVhbURhdGFncmFtQ29ubmVjdGlvblF1YWxpdHkSEQoJYWNr",
          "X3JlbGF5GAQgAygHEhYKDmxlZ2FjeV9hY2tfZTJlGAUgAygHEg0KBWZsYWdz",
          "GAYgASgNEhwKFGNsaWVudF9jb25uZWN0aW9uX2lkGAggASgHEhMKC3NlcV9u",
          "dW1fYzJyGAkgASgNEhMKC3NlcV9udW1fZTJlGAogASgNIoIBCgVGbGFncxIV",
          "ChFBQ0tfUkVRVUVTVF9SRUxBWRABEhMKD0FDS19SRVFVRVNUX0UyRRACEhkK",
          "FUFDS19SRVFVRVNUX0lNTUVESUFURRAEEhcKE05PVF9QUklNQVJZX1NFU1NJ",
          "T04QCBIZChVDTElFTlRfUkVMQVlfT1ZFUlJJREUQICL5AwouQ01zZ1N0ZWFt",
          "RGF0YWdyYW1Db25uZWN0aW9uU3RhdHNSb3V0ZXJUb0NsaWVudBI6Cg1xdWFs",
          "aXR5X3JlbGF5GAEgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0aW9u",
          "UXVhbGl0eRI4CgtxdWFsaXR5X2UyZRgCIAEoCzIjLkNNc2dTdGVhbURhdGFn",
          "cmFtQ29ubmVjdGlvblF1YWxpdHkSHgoWc2Vjb25kc191bnRpbF9zaHV0ZG93",
          "bhgGIAEoDRIaChJtaWdyYXRlX3JlcXVlc3RfaXAYCiABKAcSHAoUbWlncmF0",
          "ZV9yZXF1ZXN0X3BvcnQYCyABKA0SJQodc2NvcmluZ19wZW5hbHR5X3JlbGF5",
          "X2NsdXN0ZXIYDCABKA0SEQoJYWNrX3JlbGF5GA0gAygHEhYKDmxlZ2FjeV9h",
          "Y2tfZTJlGA4gAygHEg0KBWZsYWdzGA8gASgNEhwKFGNsaWVudF9jb25uZWN0",
          "aW9uX2lkGAcgASgHEhMKC3NlcV9udW1fcjJjGAggASgNEhMKC3NlcV9udW1f",
          "ZTJlGAkgASgNIk4KBUZsYWdzEhUKEUFDS19SRVFVRVNUX1JFTEFZEAESEwoP",
          "QUNLX1JFUVVFU1RfRTJFEAISGQoVQUNLX1JFUVVFU1RfSU1NRURJQVRFEAQi",
          "iAQKLkNNc2dTdGVhbURhdGFncmFtQ29ubmVjdGlvblN0YXRzUm91dGVyVG9T",
          "ZXJ2ZXISOgoNcXVhbGl0eV9yZWxheRgBIAEoCzIjLkNNc2dTdGVhbURhdGFn",
          "cmFtQ29ubmVjdGlvblF1YWxpdHkSOAoLcXVhbGl0eV9lMmUYAiABKAsyIy5D",
          "TXNnU3RlYW1EYXRhZ3JhbUNvbm5lY3Rpb25RdWFsaXR5EhEKCWFja19yZWxh",
          "eRgKIAMoBxIWCg5sZWdhY3lfYWNrX2UyZRgLIAMoBxINCgVmbGFncxgMIAEo",
          "DRITCgtzZXFfbnVtX3IycxgFIAEoDRITCgtzZXFfbnVtX2UyZRgGIAEoDRIe",
          "ChZjbGllbnRfaWRlbnRpdHlfc3RyaW5nGA8gASgJEh4KFmxlZ2FjeV9jbGll",
          "bnRfc3RlYW1faWQYByABKAYSGAoQcmVsYXlfc2Vzc2lvbl9pZBgIIAEoDRIc",
          "ChRjbGllbnRfY29ubmVjdGlvbl9pZBgJIAEoBxIcChRzZXJ2ZXJfY29ubmVj",
          "dGlvbl9pZBgNIAEoBxIWCg5yb3V0aW5nX3NlY3JldBgOIAEoBiJOCgVGbGFn",
          "cxIVChFBQ0tfUkVRVUVTVF9SRUxBWRABEhMKD0FDS19SRVFVRVNUX0UyRRAC",
          "EhkKFUFDS19SRVFVRVNUX0lNTUVESUFURRAEIrADCi5DTXNnU3RlYW1EYXRh",
          "Z3JhbUNvbm5lY3Rpb25TdGF0c1NlcnZlclRvUm91dGVyEjoKDXF1YWxpdHlf",
          "cmVsYXkYASABKAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNvbm5lY3Rpb25RdWFs",
          "aXR5EjgKC3F1YWxpdHlfZTJlGAIgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1D",
          "b25uZWN0aW9uUXVhbGl0eRIRCglhY2tfcmVsYXkYCCADKAcSFgoObGVnYWN5",
          "X2Fja19lMmUYCSADKAcSDQoFZmxhZ3MYCiABKA0SEwoLc2VxX251bV9zMnIY",
          "AyABKA0SEwoLc2VxX251bV9lMmUYBCABKA0SGAoQcmVsYXlfc2Vzc2lvbl9p",
          "ZBgGIAEoDRIcChRjbGllbnRfY29ubmVjdGlvbl9pZBgHIAEoBxIcChRzZXJ2",
          "ZXJfY29ubmVjdGlvbl9pZBgLIAEoByJOCgVGbGFncxIVChFBQ0tfUkVRVUVT",
          "VF9SRUxBWRABEhMKD0FDS19SRVFVRVNUX0UyRRACEhkKFUFDS19SRVFVRVNU",
          "X0lNTUVESUFURRAEIsUDCiZDTXNnU3RlYW1EYXRhZ3JhbVAyUFNlc3Npb25S",
          "ZXF1ZXN0Qm9keRIWCg5jaGFsbGVuZ2VfdGltZRgBIAEoBxIRCgljaGFsbGVu",
          "Z2UYAiABKAYSHAoUY2xpZW50X2Nvbm5lY3Rpb25faWQYAyABKAcSHAoUbGVn",
          "YWN5X3BlZXJfc3RlYW1faWQYBCABKAYSHAoUcGVlcl9pZGVudGl0eV9zdHJp",
          "bmcYCyABKAkSGgoScGVlcl9jb25uZWN0aW9uX2lkGAUgASgHEhYKDmVuY3J5",
          "cHRlZF9kYXRhGA4gASgMEiwKJGVuY3J5cHRpb25feW91cl9wdWJsaWNfa2V5",
          "X2xlYWRfYnl0ZRgPIAEoDRIqCiJlbmNyeXB0aW9uX215X2VwaGVtZXJhbF9w",
          "dWJsaWNfa2V5GBAgASgMEhgKEHByb3RvY29sX3ZlcnNpb24YCCABKA0SHgoW",
          "bmV0d29ya19jb25maWdfdmVyc2lvbhgJIAEoBBIQCghwbGF0Zm9ybRgMIAEo",
          "CRINCgVidWlsZBgNIAEoCRotCg1FbmNyeXB0ZWREYXRhEhwKFHBlZXJfaWRl",
          "bnRpdHlfc3RyaW5nGAEgASgJIngKIkNNc2dTdGVhbURhdGFncmFtUDJQU2Vz",
          "c2lvblJlcXVlc3QSMQoEY2VydBgBIAEoCzIjLkNNc2dTdGVhbURhdGFncmFt",
          "Q2VydGlmaWNhdGVTaWduZWQSDAoEYm9keRgCIAEoDBIRCglzaWduYXR1cmUY",
          "AyABKAwikQEKJkNNc2dTdGVhbURhdGFncmFtUDJQU2Vzc2lvbkVzdGFibGlz",
          "aGVkEhUKDWNvbm5lY3Rpb25faWQYASABKAcSHgoWc2Vjb25kc191bnRpbF9z",
          "aHV0ZG93bhgDIAEoDRIbChNyZWxheV9yb3V0aW5nX3Rva2VuGAQgASgMEhMK",
          "C3NlcV9udW1fcjJjGAUgASgNIokFCjFDTXNnU3RlYW1EYXRhZ3JhbUNvbm5l",
          "Y3Rpb25TdGF0c1AyUENsaWVudFRvUm91dGVyEjoKDXF1YWxpdHlfcmVsYXkY",
          "ASABKAsyIy5DTXNnU3RlYW1EYXRhZ3JhbUNvbm5lY3Rpb25RdWFsaXR5EjgK",
          "C3F1YWxpdHlfZTJlGAIgASgLMiMuQ01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0",
          "aW9uUXVhbGl0eRJAChNwMnBfcm91dGluZ19zdW1tYXJ5GA4gASgLMiMuQ01z",
          "Z1N0ZWFtRGF0YWdyYW1QMlBSb3V0aW5nU3VtbWFyeRIRCglhY2tfcmVsYXkY",
          "AyADKAcSFgoObGVnYWN5X2Fja19lMmUYBCADKAcSDQoFZmxhZ3MYBSABKA0S",
          "KgoiZm9yd2FyZF90YXJnZXRfcmVsYXlfcm91dGluZ190b2tlbhgGIAEoDBIf",
          "Chdmb3J3YXJkX3RhcmdldF9yZXZpc2lvbhgHIAEoDRIOCgZyb3V0ZXMYCCAB",
          "KAwSIAoYYWNrX3BlZXJfcm91dGVzX3JldmlzaW9uGAkgASgNEhUKDWNvbm5l",
          "Y3Rpb25faWQYCiABKAcSEwoLc2VxX251bV9jMnIYCyABKA0SEwoLc2VxX251",
          "bV9lMmUYDCABKA0ioQEKBUZsYWdzEhUKEUFDS19SRVFVRVNUX1JFTEFZEAES",
          "EwoPQUNLX1JFUVVFU1RfRTJFEAISGQoVQUNLX1JFUVVFU1RfSU1NRURJQVRF",
          "EAQSFwoTTk9UX1BSSU1BUllfU0VTU0lPThAIEh0KGU5PVF9QUklNQVJZX1RS",
          "QU5TUE9SVF9FMkUQEBIZChVDTElFTlRfUkVMQVlfT1ZFUlJJREUQICLrBAox",
          "Q01zZ1N0ZWFtRGF0YWdyYW1Db25uZWN0aW9uU3RhdHNQMlBSb3V0ZXJUb0Ns",
          "aWVudBI6Cg1xdWFsaXR5X3JlbGF5GAEgASgLMiMuQ01zZ1N0ZWFtRGF0YWdy",
          "YW1Db25uZWN0aW9uUXVhbGl0eRI4CgtxdWFsaXR5X2UyZRgCIAEoCzIjLkNN",
          "c2dTdGVhbURhdGFncmFtQ29ubmVjdGlvblF1YWxpdHkSHgoWc2Vjb25kc191",
          "bnRpbF9zaHV0ZG93bhgDIAEoDRIaChJtaWdyYXRlX3JlcXVlc3RfaXAYBCAB",
          "KAcSHAoUbWlncmF0ZV9yZXF1ZXN0X3BvcnQYBSABKA0SJQodc2NvcmluZ19w",
          "ZW5hbHR5X3JlbGF5X2NsdXN0ZXIYBiABKA0SEQoJYWNrX3JlbGF5GAcgAygH",
          "EhYKDmxlZ2FjeV9hY2tfZTJlGAggAygHEg0KBWZsYWdzGAkgASgNEiMKG2Fj",
          "a19mb3J3YXJkX3RhcmdldF9yZXZpc2lvbhgKIAEoDRIOCgZyb3V0ZXMYCyAB",
          "KAwSIAoYYWNrX3BlZXJfcm91dGVzX3JldmlzaW9uGAwgASgNEhUKDWNvbm5l",
          "Y3Rpb25faWQYDSABKAcSEwoLc2VxX251bV9yMmMYDiABKA0SEwoLc2VxX251",
          "bV9lMmUYDyABKA0ibQoFRmxhZ3MSFQoRQUNLX1JFUVVFU1RfUkVMQVkQARIT",
          "Cg9BQ0tfUkVRVUVTVF9FMkUQAhIZChVBQ0tfUkVRVUVTVF9JTU1FRElBVEUQ",
          "BBIdChlOT1RfUFJJTUFSWV9UUkFOU1BPUlRfRTJFEBAioAEKKkNNc2dTdGVh",
          "bURhdGFncmFtUDJQQmFkUm91dGVSb3V0ZXJUb0NsaWVudBIVCg1jb25uZWN0",
          "aW9uX2lkGAEgASgHEiIKGmZhaWxlZF9yZWxheV9yb3V0aW5nX3Rva2VuGAIg",
          "ASgMEiMKG2Fja19mb3J3YXJkX3RhcmdldF9yZXZpc2lvbhgDIAEoDRISCgpr",
          "bHVkZ2VfcGFkGGMgASgGIu8CChpDTXNnU3RlYW1EYXRhZ3JhbVAyUFJvdXRl",
          "cxJACg5yZWxheV9jbHVzdGVycxgBIAMoCzIoLkNNc2dTdGVhbURhdGFncmFt",
          "UDJQUm91dGVzLlJlbGF5Q2x1c3RlchIxCgZyb3V0ZXMYAiADKAsyIS5DTXNn",
          "U3RlYW1EYXRhZ3JhbVAyUFJvdXRlcy5Sb3V0ZRIQCghyZXZpc2lvbhgDIAEo",
          "DRprCgxSZWxheUNsdXN0ZXISDgoGcG9wX2lkGAEgASgHEg8KB3BpbmdfbXMY",
          "AiABKA0SFQoNc2NvcmVfcGVuYWx0eRgDIAEoDRIjChtzZXNzaW9uX3JlbGF5",
          "X3JvdXRpbmdfdG9rZW4YBCABKAwaXQoFUm91dGUSEQoJbXlfcG9wX2lkGAEg",
          "ASgHEhMKC3lvdXJfcG9wX2lkGAIgASgHEhQKDGxlZ2FjeV9zY29yZRgDIAEo",
          "DRIWCg5pbnRlcmlvcl9zY29yZRgEIAEoDSLMAQorQ01zZ1N0ZWFtRGF0YWdy",
          "YW1TZXRTZWNvbmRhcnlBZGRyZXNzUmVxdWVzdBIWCg5jbGllbnRfbWFpbl9p",
          "cBgBIAEoBxIYChBjbGllbnRfbWFpbl9wb3J0GAIgASgHEhwKFGNsaWVudF9j",
          "b25uZWN0aW9uX2lkGAMgASgHEhcKD2NsaWVudF9pZGVudGl0eRgEIAEoCRIg",
          "ChhyZXF1ZXN0X3NlbmRfZHVwbGljYXRpb24YBSABKAgSEgoKa2x1ZGdlX3Bh",
          "ZBhjIAEoDCJOCipDTXNnU3RlYW1EYXRhZ3JhbVNldFNlY29uZGFyeUFkZHJl",
          "c3NSZXN1bHQSDwoHc3VjY2VzcxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJKuAL",
          "ChNFU3RlYW1EYXRhZ3JhbU1zZ0lEEh8KG2tfRVN0ZWFtRGF0YWdyYW1Nc2df",
          "SW52YWxpZBAAEikKJWtfRVN0ZWFtRGF0YWdyYW1Nc2dfUm91dGVyUGluZ1Jl",
          "cXVlc3QQARInCiNrX0VTdGVhbURhdGFncmFtTXNnX1JvdXRlclBpbmdSZXBs",
          "eRACEi0KKWtfRVN0ZWFtRGF0YWdyYW1Nc2dfR2FtZXNlcnZlclBpbmdSZXF1",
          "ZXN0EAMSMAosa19FU3RlYW1EYXRhZ3JhbU1zZ19HYW1lc2VydmVyU2Vzc2lv",
          "blJlcXVlc3QQBRI0CjBrX0VTdGVhbURhdGFncmFtTXNnX0dhbWVzZXJ2ZXJT",
          "ZXNzaW9uRXN0YWJsaXNoZWQQBhIhCh1rX0VTdGVhbURhdGFncmFtTXNnX05v",
          "U2Vzc2lvbhAHEiIKHmtfRVN0ZWFtRGF0YWdyYW1Nc2dfRGlhZ25vc3RpYxAI",
          "EioKJmtfRVN0ZWFtRGF0YWdyYW1Nc2dfRGF0YUNsaWVudFRvUm91dGVyEAkS",
          "Kgoma19FU3RlYW1EYXRhZ3JhbU1zZ19EYXRhUm91dGVyVG9TZXJ2ZXIQChIq",
          "CiZrX0VTdGVhbURhdGFncmFtTXNnX0RhdGFTZXJ2ZXJUb1JvdXRlchALEioK",
          "JmtfRVN0ZWFtRGF0YWdyYW1Nc2dfRGF0YVJvdXRlclRvQ2xpZW50EAwSHQoZ",
          "a19FU3RlYW1EYXRhZ3JhbU1zZ19TdGF0cxANEi8KK2tfRVN0ZWFtRGF0YWdy",
          "YW1Nc2dfQ2xpZW50UGluZ1NhbXBsZVJlcXVlc3QQDhItCilrX0VTdGVhbURh",
          "dGFncmFtTXNnX0NsaWVudFBpbmdTYW1wbGVSZXBseRAPEjUKMWtfRVN0ZWFt",
          "RGF0YWdyYW1Nc2dfQ2xpZW50VG9Sb3V0ZXJTd2l0Y2hlZFByaW1hcnkQEBIj",
          "Ch9rX0VTdGVhbURhdGFncmFtTXNnX1JlbGF5SGVhbHRoEBESJgoia19FU3Rl",
          "YW1EYXRhZ3JhbU1zZ19Db25uZWN0UmVxdWVzdBASEiEKHWtfRVN0ZWFtRGF0",
          "YWdyYW1Nc2dfQ29ubmVjdE9LEBMSKAoka19FU3RlYW1EYXRhZ3JhbU1zZ19D",
          "b25uZWN0aW9uQ2xvc2VkEBQSJAoga19FU3RlYW1EYXRhZ3JhbU1zZ19Ob0Nv",
          "bm5lY3Rpb24QFRIsCihrX0VTdGVhbURhdGFncmFtTXNnX1RpY2tldERlY3J5",
          "cHRSZXF1ZXN0EBYSKgoma19FU3RlYW1EYXRhZ3JhbU1zZ19UaWNrZXREZWNy",
          "eXB0UmVwbHkQFxIpCiVrX0VTdGVhbURhdGFncmFtTXNnX1AyUFNlc3Npb25S",
          "ZXF1ZXN0EBgSLQopa19FU3RlYW1EYXRhZ3JhbU1zZ19QMlBTZXNzaW9uRXN0",
          "YWJsaXNoZWQQGRImCiJrX0VTdGVhbURhdGFncmFtTXNnX1AyUFN0YXRzQ2xp",
          "ZW50EBoSJQoha19FU3RlYW1EYXRhZ3JhbU1zZ19QMlBTdGF0c1JlbGF5EBsS",
          "Iwofa19FU3RlYW1EYXRhZ3JhbU1zZ19QMlBCYWRSb3V0ZRAcEisKJ2tfRVN0",
          "ZWFtRGF0YWdyYW1Nc2dfR2FtZXNlcnZlclBpbmdSZXBseRAdEjQKMGtfRVN0",
          "ZWFtRGF0YWdyYW1Nc2dfTGVnYWN5R2FtZXNlcnZlclJlZ2lzdHJhdGlvbhAe",
          "EjIKLmtfRVN0ZWFtRGF0YWdyYW1Nc2dfU2V0U2Vjb25kYXJ5QWRkcmVzc1Jl",
          "cXVlc3QQHxIxCi1rX0VTdGVhbURhdGFncmFtTXNnX1NldFNlY29uZGFyeUFk",
          "ZHJlc3NSZXN1bHQQIBIvCitrX0VTdGVhbURhdGFncmFtTXNnX1JlbGF5VG9S",
          "ZWxheVBpbmdSZXF1ZXN0ECESLQopa19FU3RlYW1EYXRhZ3JhbU1zZ19SZWxh",
          "eVRvUmVsYXlQaW5nUmVwbHkQIkIFSAGAAQA="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SteamnetworkingsocketsMessagesCertsReflection.Descriptor, global::SteamnetworkingsocketsMessagesReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ESteamDatagramMsgID), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamNetworkingIPAddress), global::CMsgSteamNetworkingIPAddress.Parser, new[]{ "V4", "V6" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramSignedMessageGeneric), global::CMsgSteamDatagramSignedMessageGeneric.Parser, new[]{ "Cert", "SignedData", "Signature", "DummyPad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramRouterPingReply), global::CMsgSteamDatagramRouterPingReply.Parser, new[]{ "ClientTimestamp", "LatencyDatacenterIds", "LatencyPingMs", "LatencyDatacenterIdsP2P", "LatencyPingMsP2P", "YourPublicIp", "YourPublicPort", "ServerTime", "Challenge", "SecondsUntilShutdown", "ClientCookie", "ScoringPenaltyRelayCluster", "Flags", "RouteExceptions", "AltAddresses", "DummyPad" }, null, new[]{ typeof(global::CMsgSteamDatagramRouterPingReply.Types.Flags) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramRouterPingReply.Types.RouteException), global::CMsgSteamDatagramRouterPingReply.Types.RouteException.Parser, new[]{ "DataCenterId", "Flags", "Penalty" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramRouterPingReply.Types.AltAddress), global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Parser, new[]{ "Ipv4", "Port", "Penalty", "Protocol", "Id" }, null, new[]{ typeof(global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol) }, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramGameserverPingRequestBody), global::CMsgSteamDatagramGameserverPingRequestBody.Parser, new[]{ "RelayPopid", "YourPublicIp", "YourPublicPort", "RelayUnixTime", "RoutingSecret", "MyIps", "Echo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramGameserverPingRequestEnvelope), global::CMsgSteamDatagramGameserverPingRequestEnvelope.Parser, new[]{ "Cert", "SignedData", "Signature", "LegacyYourPublicIp", "LegacyYourPublicPort", "LegacyRelayUnixTime", "LegacyChallenge", "LegacyRouterTimestamp", "DummyPad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramGameserverPingReplyData), global::CMsgSteamDatagramGameserverPingReplyData.Parser, new[]{ "EchoRelayUnixTime", "Echo", "LegacyChallenge", "LegacyRouterTimestamp", "DataCenterId", "Appid", "ProtocolVersion", "Build", "NetworkConfigVersion", "MyUnixTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramNoSessionRelayToClient), global::CMsgSteamDatagramNoSessionRelayToClient.Parser, new[]{ "ConnectionId", "YourPublicIp", "YourPublicPort", "ServerTime", "Challenge", "SecondsUntilShutdown" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramNoSessionRelayToPeer), global::CMsgSteamDatagramNoSessionRelayToPeer.Parser, new[]{ "LegacyRelaySessionId", "FromRelaySessionId", "FromConnectionId", "KludgePad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientPingSampleRequest), global::CMsgSteamDatagramClientPingSampleRequest.Parser, new[]{ "ConnectionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientPingSampleReply), global::CMsgSteamDatagramClientPingSampleReply.Parser, new[]{ "ConnectionId", "RelayOverrideActive", "Pops", "LegacyDataCenters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientPingSampleReply.Types.POP), global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Parser, new[]{ "PopId", "DefaultFrontPingMs", "ClusterPenalty", "AltAddresses", "DefaultE2EPingMs", "DefaultE2EScore", "P2PViaPeerRelayPopId", "BestDcPingMs", "BestDcScore", "BestDcViaRelayPopId", "DefaultDcPingMs", "DefaultDcScore", "DefaultDcViaRelayPopId", "TestDcPingMs", "TestDcScore", "TestDcViaRelayPopId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress), global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress.Parser, new[]{ "Id", "FrontPingMs", "Penalty" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter), global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter.Parser, new[]{ "DataCenterId", "BestDcViaRelayPopId", "BestDcPingMs" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientSwitchedPrimary), global::CMsgSteamDatagramClientSwitchedPrimary.Parser, new[]{ "ConnectionId", "FromIp", "FromPort", "FromRouterCluster", "FromActiveTime", "FromActivePacketsRecv", "FromDroppedReason", "GapMs", "FromQualityNow", "ToQualityNow", "FromQualityThen", "ToQualityThen" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality), global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality.Parser, new[]{ "Score", "FrontPing", "BackPing", "SecondsUntilDown" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectRequest), global::CMsgSteamDatagramConnectRequest.Parser, new[]{ "ConnectionId", "MyTimestamp", "PingEstMs", "VirtualPort", "GameserverRelaySessionId", "Crypt", "Cert", "RoutingSecret", "LegacyClientSteamId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectOK), global::CMsgSteamDatagramConnectOK.Parser, new[]{ "ClientConnectionId", "ServerConnectionId", "YourTimestamp", "DelayTimeUsec", "GameserverRelaySessionId", "Crypt", "Cert" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamNetworkingP2PSDRRoutingSummary), global::CMsgSteamNetworkingP2PSDRRoutingSummary.Parser, new[]{ "InitialPing", "InitialPingFrontLocal", "InitialPingFrontRemote", "InitialScore", "InitialPopLocal", "InitialPopRemote", "BestPing", "BestPingFrontLocal", "BestPingFrontRemote", "BestScore", "BestPopLocal", "BestPopRemote", "BestTime", "NegotiationMs", "SelectedSeconds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PRoutingSummary), global::CMsgSteamDatagramP2PRoutingSummary.Parser, new[]{ "Ice", "Sdr" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionClosed), global::CMsgSteamDatagramConnectionClosed.Parser, new[]{ "ToConnectionId", "FromConnectionId", "FromIdentityString", "LegacyFromIdentityBinary", "LegacyFromSteamId", "LegacyGameserverRelaySessionId", "ToRelaySessionId", "FromRelaySessionId", "ForwardTargetRelayRoutingToken", "ForwardTargetRevision", "RelayMode", "Debug", "ReasonCode", "RoutingSecret", "NotPrimarySession", "NotPrimaryTransport", "RelayOverrideActive", "QualityRelay", "QualityE2E", "P2PRoutingSummary" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramNoConnection), global::CMsgSteamDatagramNoConnection.Parser, new[]{ "ToConnectionId", "FromConnectionId", "LegacyGameserverRelaySessionId", "ToRelaySessionId", "FromRelaySessionId", "FromIdentityString", "LegacyFromSteamId", "EndToEnd", "NotPrimarySession", "NotPrimaryTransport", "RelayOverrideActive", "QualityRelay", "QualityE2E", "P2PRoutingSummary", "RoutingSecret", "DummyPad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramGameserverSessionRequest), global::CMsgSteamDatagramGameserverSessionRequest.Parser, new[]{ "Ticket", "ChallengeTime", "Challenge", "ClientConnectionId", "ServerConnectionId", "NetworkConfigVersion", "ProtocolVersion", "Platform", "Build", "DevGameserverIdentity", "DevClientCert" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramGameserverSessionEstablished), global::CMsgSteamDatagramGameserverSessionEstablished.Parser, new[]{ "ConnectionId", "GameserverIdentityString", "SecondsUntilShutdown", "SeqNumR2C", "DummyLegacyIdentityBinary", "LegacyGameserverSteamid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsClientToRouter), global::CMsgSteamDatagramConnectionStatsClientToRouter.Parser, new[]{ "QualityRelay", "QualityE2E", "AckRelay", "LegacyAckE2E", "Flags", "ClientConnectionId", "SeqNumC2R", "SeqNumE2E" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsClientToRouter.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsRouterToClient), global::CMsgSteamDatagramConnectionStatsRouterToClient.Parser, new[]{ "QualityRelay", "QualityE2E", "SecondsUntilShutdown", "MigrateRequestIp", "MigrateRequestPort", "ScoringPenaltyRelayCluster", "AckRelay", "LegacyAckE2E", "Flags", "ClientConnectionId", "SeqNumR2C", "SeqNumE2E" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsRouterToClient.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsRouterToServer), global::CMsgSteamDatagramConnectionStatsRouterToServer.Parser, new[]{ "QualityRelay", "QualityE2E", "AckRelay", "LegacyAckE2E", "Flags", "SeqNumR2S", "SeqNumE2E", "ClientIdentityString", "LegacyClientSteamId", "RelaySessionId", "ClientConnectionId", "ServerConnectionId", "RoutingSecret" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsRouterToServer.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsServerToRouter), global::CMsgSteamDatagramConnectionStatsServerToRouter.Parser, new[]{ "QualityRelay", "QualityE2E", "AckRelay", "LegacyAckE2E", "Flags", "SeqNumS2R", "SeqNumE2E", "RelaySessionId", "ClientConnectionId", "ServerConnectionId" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsServerToRouter.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PSessionRequestBody), global::CMsgSteamDatagramP2PSessionRequestBody.Parser, new[]{ "ChallengeTime", "Challenge", "ClientConnectionId", "LegacyPeerSteamId", "PeerIdentityString", "PeerConnectionId", "EncryptedData", "EncryptionYourPublicKeyLeadByte", "EncryptionMyEphemeralPublicKey", "ProtocolVersion", "NetworkConfigVersion", "Platform", "Build" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PSessionRequestBody.Types.EncryptedData), global::CMsgSteamDatagramP2PSessionRequestBody.Types.EncryptedData.Parser, new[]{ "PeerIdentityString" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PSessionRequest), global::CMsgSteamDatagramP2PSessionRequest.Parser, new[]{ "Cert", "Body", "Signature" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PSessionEstablished), global::CMsgSteamDatagramP2PSessionEstablished.Parser, new[]{ "ConnectionId", "SecondsUntilShutdown", "RelayRoutingToken", "SeqNumR2C" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsP2PClientToRouter), global::CMsgSteamDatagramConnectionStatsP2PClientToRouter.Parser, new[]{ "QualityRelay", "QualityE2E", "P2PRoutingSummary", "AckRelay", "LegacyAckE2E", "Flags", "ForwardTargetRelayRoutingToken", "ForwardTargetRevision", "Routes", "AckPeerRoutesRevision", "ConnectionId", "SeqNumC2R", "SeqNumE2E" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsP2PClientToRouter.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramConnectionStatsP2PRouterToClient), global::CMsgSteamDatagramConnectionStatsP2PRouterToClient.Parser, new[]{ "QualityRelay", "QualityE2E", "SecondsUntilShutdown", "MigrateRequestIp", "MigrateRequestPort", "ScoringPenaltyRelayCluster", "AckRelay", "LegacyAckE2E", "Flags", "AckForwardTargetRevision", "Routes", "AckPeerRoutesRevision", "ConnectionId", "SeqNumR2C", "SeqNumE2E" }, null, new[]{ typeof(global::CMsgSteamDatagramConnectionStatsP2PRouterToClient.Types.Flags) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PBadRouteRouterToClient), global::CMsgSteamDatagramP2PBadRouteRouterToClient.Parser, new[]{ "ConnectionId", "FailedRelayRoutingToken", "AckForwardTargetRevision", "KludgePad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PRoutes), global::CMsgSteamDatagramP2PRoutes.Parser, new[]{ "RelayClusters", "Routes", "Revision" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster), global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster.Parser, new[]{ "PopId", "PingMs", "ScorePenalty", "SessionRelayRoutingToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramP2PRoutes.Types.Route), global::CMsgSteamDatagramP2PRoutes.Types.Route.Parser, new[]{ "MyPopId", "YourPopId", "LegacyScore", "InteriorScore" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramSetSecondaryAddressRequest), global::CMsgSteamDatagramSetSecondaryAddressRequest.Parser, new[]{ "ClientMainIp", "ClientMainPort", "ClientConnectionId", "ClientIdentity", "RequestSendDuplication", "KludgePad" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgSteamDatagramSetSecondaryAddressResult), global::CMsgSteamDatagramSetSecondaryAddressResult.Parser, new[]{ "Success", "Message" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ESteamDatagramMsgID {
  [pbr::OriginalName("k_ESteamDatagramMsg_Invalid")] KEsteamDatagramMsgInvalid = 0,
  [pbr::OriginalName("k_ESteamDatagramMsg_RouterPingRequest")] KEsteamDatagramMsgRouterPingRequest = 1,
  [pbr::OriginalName("k_ESteamDatagramMsg_RouterPingReply")] KEsteamDatagramMsgRouterPingReply = 2,
  [pbr::OriginalName("k_ESteamDatagramMsg_GameserverPingRequest")] KEsteamDatagramMsgGameserverPingRequest = 3,
  [pbr::OriginalName("k_ESteamDatagramMsg_GameserverSessionRequest")] KEsteamDatagramMsgGameserverSessionRequest = 5,
  [pbr::OriginalName("k_ESteamDatagramMsg_GameserverSessionEstablished")] KEsteamDatagramMsgGameserverSessionEstablished = 6,
  [pbr::OriginalName("k_ESteamDatagramMsg_NoSession")] KEsteamDatagramMsgNoSession = 7,
  [pbr::OriginalName("k_ESteamDatagramMsg_Diagnostic")] KEsteamDatagramMsgDiagnostic = 8,
  [pbr::OriginalName("k_ESteamDatagramMsg_DataClientToRouter")] KEsteamDatagramMsgDataClientToRouter = 9,
  [pbr::OriginalName("k_ESteamDatagramMsg_DataRouterToServer")] KEsteamDatagramMsgDataRouterToServer = 10,
  [pbr::OriginalName("k_ESteamDatagramMsg_DataServerToRouter")] KEsteamDatagramMsgDataServerToRouter = 11,
  [pbr::OriginalName("k_ESteamDatagramMsg_DataRouterToClient")] KEsteamDatagramMsgDataRouterToClient = 12,
  [pbr::OriginalName("k_ESteamDatagramMsg_Stats")] KEsteamDatagramMsgStats = 13,
  [pbr::OriginalName("k_ESteamDatagramMsg_ClientPingSampleRequest")] KEsteamDatagramMsgClientPingSampleRequest = 14,
  [pbr::OriginalName("k_ESteamDatagramMsg_ClientPingSampleReply")] KEsteamDatagramMsgClientPingSampleReply = 15,
  [pbr::OriginalName("k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary")] KEsteamDatagramMsgClientToRouterSwitchedPrimary = 16,
  [pbr::OriginalName("k_ESteamDatagramMsg_RelayHealth")] KEsteamDatagramMsgRelayHealth = 17,
  [pbr::OriginalName("k_ESteamDatagramMsg_ConnectRequest")] KEsteamDatagramMsgConnectRequest = 18,
  [pbr::OriginalName("k_ESteamDatagramMsg_ConnectOK")] KEsteamDatagramMsgConnectOk = 19,
  [pbr::OriginalName("k_ESteamDatagramMsg_ConnectionClosed")] KEsteamDatagramMsgConnectionClosed = 20,
  [pbr::OriginalName("k_ESteamDatagramMsg_NoConnection")] KEsteamDatagramMsgNoConnection = 21,
  [pbr::OriginalName("k_ESteamDatagramMsg_TicketDecryptRequest")] KEsteamDatagramMsgTicketDecryptRequest = 22,
  [pbr::OriginalName("k_ESteamDatagramMsg_TicketDecryptReply")] KEsteamDatagramMsgTicketDecryptReply = 23,
  [pbr::OriginalName("k_ESteamDatagramMsg_P2PSessionRequest")] KEsteamDatagramMsgP2PsessionRequest = 24,
  [pbr::OriginalName("k_ESteamDatagramMsg_P2PSessionEstablished")] KEsteamDatagramMsgP2PsessionEstablished = 25,
  [pbr::OriginalName("k_ESteamDatagramMsg_P2PStatsClient")] KEsteamDatagramMsgP2PstatsClient = 26,
  [pbr::OriginalName("k_ESteamDatagramMsg_P2PStatsRelay")] KEsteamDatagramMsgP2PstatsRelay = 27,
  [pbr::OriginalName("k_ESteamDatagramMsg_P2PBadRoute")] KEsteamDatagramMsgP2PbadRoute = 28,
  [pbr::OriginalName("k_ESteamDatagramMsg_GameserverPingReply")] KEsteamDatagramMsgGameserverPingReply = 29,
  [pbr::OriginalName("k_ESteamDatagramMsg_LegacyGameserverRegistration")] KEsteamDatagramMsgLegacyGameserverRegistration = 30,
  [pbr::OriginalName("k_ESteamDatagramMsg_SetSecondaryAddressRequest")] KEsteamDatagramMsgSetSecondaryAddressRequest = 31,
  [pbr::OriginalName("k_ESteamDatagramMsg_SetSecondaryAddressResult")] KEsteamDatagramMsgSetSecondaryAddressResult = 32,
  [pbr::OriginalName("k_ESteamDatagramMsg_RelayToRelayPingRequest")] KEsteamDatagramMsgRelayToRelayPingRequest = 33,
  [pbr::OriginalName("k_ESteamDatagramMsg_RelayToRelayPingReply")] KEsteamDatagramMsgRelayToRelayPingReply = 34,
}

#endregion

#region Messages
public sealed partial class CMsgSteamNetworkingIPAddress : pb::IMessage<CMsgSteamNetworkingIPAddress>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamNetworkingIPAddress> _parser = new pb::MessageParser<CMsgSteamNetworkingIPAddress>(() => new CMsgSteamNetworkingIPAddress());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamNetworkingIPAddress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingIPAddress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingIPAddress(CMsgSteamNetworkingIPAddress other) : this() {
    _hasBits0 = other._hasBits0;
    v4_ = other.v4_;
    v6_ = other.v6_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingIPAddress Clone() {
    return new CMsgSteamNetworkingIPAddress(this);
  }

  /// <summary>Field number for the "v4" field.</summary>
  public const int V4FieldNumber = 1;
  private readonly static uint V4DefaultValue = 0;

  private uint v4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint V4 {
    get { if ((_hasBits0 & 1) != 0) { return v4_; } else { return V4DefaultValue; } }
    set {
      _hasBits0 |= 1;
      v4_ = value;
    }
  }
  /// <summary>Gets whether the "v4" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasV4 {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "v4" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearV4() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "v6" field.</summary>
  public const int V6FieldNumber = 2;
  private readonly static pb::ByteString V6DefaultValue = pb::ByteString.Empty;

  private pb::ByteString v6_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString V6 {
    get { return v6_ ?? V6DefaultValue; }
    set {
      v6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "v6" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasV6 {
    get { return v6_ != null; }
  }
  /// <summary>Clears the value of the "v6" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearV6() {
    v6_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamNetworkingIPAddress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamNetworkingIPAddress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (V4 != other.V4) return false;
    if (V6 != other.V6) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasV4) hash ^= V4.GetHashCode();
    if (HasV6) hash ^= V6.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasV4) {
      output.WriteRawTag(13);
      output.WriteFixed32(V4);
    }
    if (HasV6) {
      output.WriteRawTag(18);
      output.WriteBytes(V6);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasV4) {
      output.WriteRawTag(13);
      output.WriteFixed32(V4);
    }
    if (HasV6) {
      output.WriteRawTag(18);
      output.WriteBytes(V6);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasV4) {
      size += 1 + 4;
    }
    if (HasV6) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(V6);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamNetworkingIPAddress other) {
    if (other == null) {
      return;
    }
    if (other.HasV4) {
      V4 = other.V4;
    }
    if (other.HasV6) {
      V6 = other.V6;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          V4 = input.ReadFixed32();
          break;
        }
        case 18: {
          V6 = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          V4 = input.ReadFixed32();
          break;
        }
        case 18: {
          V6 = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramSignedMessageGeneric : pb::IMessage<CMsgSteamDatagramSignedMessageGeneric>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramSignedMessageGeneric> _parser = new pb::MessageParser<CMsgSteamDatagramSignedMessageGeneric>(() => new CMsgSteamDatagramSignedMessageGeneric());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramSignedMessageGeneric> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSignedMessageGeneric() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSignedMessageGeneric(CMsgSteamDatagramSignedMessageGeneric other) : this() {
    cert_ = other.cert_ != null ? other.cert_.Clone() : null;
    signedData_ = other.signedData_;
    signature_ = other.signature_;
    dummyPad_ = other.dummyPad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSignedMessageGeneric Clone() {
    return new CMsgSteamDatagramSignedMessageGeneric(this);
  }

  /// <summary>Field number for the "cert" field.</summary>
  public const int CertFieldNumber = 1;
  private global::CMsgSteamDatagramCertificateSigned cert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned Cert {
    get { return cert_; }
    set {
      cert_ = value;
    }
  }

  /// <summary>Field number for the "signed_data" field.</summary>
  public const int SignedDataFieldNumber = 2;
  private readonly static pb::ByteString SignedDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString SignedData {
    get { return signedData_ ?? SignedDataDefaultValue; }
    set {
      signedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signed_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignedData {
    get { return signedData_ != null; }
  }
  /// <summary>Clears the value of the "signed_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignedData() {
    signedData_ = null;
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 3;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignature() {
    signature_ = null;
  }

  /// <summary>Field number for the "dummy_pad" field.</summary>
  public const int DummyPadFieldNumber = 1023;
  private readonly static pb::ByteString DummyPadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString dummyPad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString DummyPad {
    get { return dummyPad_ ?? DummyPadDefaultValue; }
    set {
      dummyPad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dummy_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDummyPad {
    get { return dummyPad_ != null; }
  }
  /// <summary>Clears the value of the "dummy_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDummyPad() {
    dummyPad_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramSignedMessageGeneric);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramSignedMessageGeneric other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Cert, other.Cert)) return false;
    if (SignedData != other.SignedData) return false;
    if (Signature != other.Signature) return false;
    if (DummyPad != other.DummyPad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (cert_ != null) hash ^= Cert.GetHashCode();
    if (HasSignedData) hash ^= SignedData.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (HasDummyPad) hash ^= DummyPad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (cert_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Cert);
    }
    if (HasSignedData) {
      output.WriteRawTag(18);
      output.WriteBytes(SignedData);
    }
    if (HasSignature) {
      output.WriteRawTag(26);
      output.WriteBytes(Signature);
    }
    if (HasDummyPad) {
      output.WriteRawTag(250, 63);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (cert_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Cert);
    }
    if (HasSignedData) {
      output.WriteRawTag(18);
      output.WriteBytes(SignedData);
    }
    if (HasSignature) {
      output.WriteRawTag(26);
      output.WriteBytes(Signature);
    }
    if (HasDummyPad) {
      output.WriteRawTag(250, 63);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (cert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cert);
    }
    if (HasSignedData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedData);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (HasDummyPad) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(DummyPad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramSignedMessageGeneric other) {
    if (other == null) {
      return;
    }
    if (other.cert_ != null) {
      if (cert_ == null) {
        Cert = new global::CMsgSteamDatagramCertificateSigned();
      }
      Cert.MergeFrom(other.Cert);
    }
    if (other.HasSignedData) {
      SignedData = other.SignedData;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    if (other.HasDummyPad) {
      DummyPad = other.DummyPad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 18: {
          SignedData = input.ReadBytes();
          break;
        }
        case 26: {
          Signature = input.ReadBytes();
          break;
        }
        case 8186: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 18: {
          SignedData = input.ReadBytes();
          break;
        }
        case 26: {
          Signature = input.ReadBytes();
          break;
        }
        case 8186: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramRouterPingReply : pb::IMessage<CMsgSteamDatagramRouterPingReply>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramRouterPingReply> _parser = new pb::MessageParser<CMsgSteamDatagramRouterPingReply>(() => new CMsgSteamDatagramRouterPingReply());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramRouterPingReply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramRouterPingReply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramRouterPingReply(CMsgSteamDatagramRouterPingReply other) : this() {
    _hasBits0 = other._hasBits0;
    clientTimestamp_ = other.clientTimestamp_;
    latencyDatacenterIds_ = other.latencyDatacenterIds_.Clone();
    latencyPingMs_ = other.latencyPingMs_.Clone();
    latencyDatacenterIdsP2P_ = other.latencyDatacenterIdsP2P_.Clone();
    latencyPingMsP2P_ = other.latencyPingMsP2P_.Clone();
    yourPublicIp_ = other.yourPublicIp_;
    yourPublicPort_ = other.yourPublicPort_;
    serverTime_ = other.serverTime_;
    challenge_ = other.challenge_;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    clientCookie_ = other.clientCookie_;
    scoringPenaltyRelayCluster_ = other.scoringPenaltyRelayCluster_;
    flags_ = other.flags_;
    routeExceptions_ = other.routeExceptions_.Clone();
    altAddresses_ = other.altAddresses_.Clone();
    dummyPad_ = other.dummyPad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramRouterPingReply Clone() {
    return new CMsgSteamDatagramRouterPingReply(this);
  }

  /// <summary>Field number for the "client_timestamp" field.</summary>
  public const int ClientTimestampFieldNumber = 1;
  private readonly static uint ClientTimestampDefaultValue = 0;

  private uint clientTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientTimestamp {
    get { if ((_hasBits0 & 1) != 0) { return clientTimestamp_; } else { return ClientTimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "client_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "client_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "latency_datacenter_ids" field.</summary>
  public const int LatencyDatacenterIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_latencyDatacenterIds_codec
      = pb::FieldCodec.ForFixed32(18);
  private readonly pbc::RepeatedField<uint> latencyDatacenterIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LatencyDatacenterIds {
    get { return latencyDatacenterIds_; }
  }

  /// <summary>Field number for the "latency_ping_ms" field.</summary>
  public const int LatencyPingMsFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_latencyPingMs_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> latencyPingMs_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LatencyPingMs {
    get { return latencyPingMs_; }
  }

  /// <summary>Field number for the "latency_datacenter_ids_p2p" field.</summary>
  public const int LatencyDatacenterIdsP2PFieldNumber = 14;
  private static readonly pb::FieldCodec<uint> _repeated_latencyDatacenterIdsP2P_codec
      = pb::FieldCodec.ForFixed32(114);
  private readonly pbc::RepeatedField<uint> latencyDatacenterIdsP2P_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LatencyDatacenterIdsP2P {
    get { return latencyDatacenterIdsP2P_; }
  }

  /// <summary>Field number for the "latency_ping_ms_p2p" field.</summary>
  public const int LatencyPingMsP2PFieldNumber = 15;
  private static readonly pb::FieldCodec<uint> _repeated_latencyPingMsP2P_codec
      = pb::FieldCodec.ForUInt32(122);
  private readonly pbc::RepeatedField<uint> latencyPingMsP2P_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LatencyPingMsP2P {
    get { return latencyPingMsP2P_; }
  }

  /// <summary>Field number for the "your_public_ip" field.</summary>
  public const int YourPublicIpFieldNumber = 4;
  private readonly static uint YourPublicIpDefaultValue = 0;

  private uint yourPublicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint YourPublicIp {
    get { if ((_hasBits0 & 2) != 0) { return yourPublicIp_; } else { return YourPublicIpDefaultValue; } }
    set {
      _hasBits0 |= 2;
      yourPublicIp_ = value;
    }
  }
  /// <summary>Gets whether the "your_public_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourPublicIp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "your_public_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourPublicIp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "your_public_port" field.</summary>
  public const int YourPublicPortFieldNumber = 11;
  private readonly static uint YourPublicPortDefaultValue = 0;

  private uint yourPublicPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint YourPublicPort {
    get { if ((_hasBits0 & 128) != 0) { return yourPublicPort_; } else { return YourPublicPortDefaultValue; } }
    set {
      _hasBits0 |= 128;
      yourPublicPort_ = value;
    }
  }
  /// <summary>Gets whether the "your_public_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourPublicPort {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "your_public_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourPublicPort() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "server_time" field.</summary>
  public const int ServerTimeFieldNumber = 5;
  private readonly static uint ServerTimeDefaultValue = 0;

  private uint serverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerTime {
    get { if ((_hasBits0 & 4) != 0) { return serverTime_; } else { return ServerTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      serverTime_ = value;
    }
  }
  /// <summary>Gets whether the "server_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "server_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "challenge" field.</summary>
  public const int ChallengeFieldNumber = 6;
  private readonly static ulong ChallengeDefaultValue = 0UL;

  private ulong challenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Challenge {
    get { if ((_hasBits0 & 8) != 0) { return challenge_; } else { return ChallengeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      challenge_ = value;
    }
  }
  /// <summary>Gets whether the "challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallenge {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallenge() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 7;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 16) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 16;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "client_cookie" field.</summary>
  public const int ClientCookieFieldNumber = 8;
  private readonly static uint ClientCookieDefaultValue = 0;

  private uint clientCookie_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientCookie {
    get { if ((_hasBits0 & 32) != 0) { return clientCookie_; } else { return ClientCookieDefaultValue; } }
    set {
      _hasBits0 |= 32;
      clientCookie_ = value;
    }
  }
  /// <summary>Gets whether the "client_cookie" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientCookie {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "client_cookie" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientCookie() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "scoring_penalty_relay_cluster" field.</summary>
  public const int ScoringPenaltyRelayClusterFieldNumber = 9;
  private readonly static uint ScoringPenaltyRelayClusterDefaultValue = 0;

  private uint scoringPenaltyRelayCluster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ScoringPenaltyRelayCluster {
    get { if ((_hasBits0 & 64) != 0) { return scoringPenaltyRelayCluster_; } else { return ScoringPenaltyRelayClusterDefaultValue; } }
    set {
      _hasBits0 |= 64;
      scoringPenaltyRelayCluster_ = value;
    }
  }
  /// <summary>Gets whether the "scoring_penalty_relay_cluster" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScoringPenaltyRelayCluster {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "scoring_penalty_relay_cluster" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScoringPenaltyRelayCluster() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 12;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 256) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 256;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "route_exceptions" field.</summary>
  public const int RouteExceptionsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramRouterPingReply.Types.RouteException> _repeated_routeExceptions_codec
      = pb::FieldCodec.ForMessage(82, global::CMsgSteamDatagramRouterPingReply.Types.RouteException.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.RouteException> routeExceptions_ = new pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.RouteException>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.RouteException> RouteExceptions {
    get { return routeExceptions_; }
  }

  /// <summary>Field number for the "alt_addresses" field.</summary>
  public const int AltAddressesFieldNumber = 13;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramRouterPingReply.Types.AltAddress> _repeated_altAddresses_codec
      = pb::FieldCodec.ForMessage(106, global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.AltAddress> altAddresses_ = new pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.AltAddress>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramRouterPingReply.Types.AltAddress> AltAddresses {
    get { return altAddresses_; }
  }

  /// <summary>Field number for the "dummy_pad" field.</summary>
  public const int DummyPadFieldNumber = 99;
  private readonly static pb::ByteString DummyPadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString dummyPad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString DummyPad {
    get { return dummyPad_ ?? DummyPadDefaultValue; }
    set {
      dummyPad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dummy_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDummyPad {
    get { return dummyPad_ != null; }
  }
  /// <summary>Clears the value of the "dummy_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDummyPad() {
    dummyPad_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramRouterPingReply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramRouterPingReply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientTimestamp != other.ClientTimestamp) return false;
    if(!latencyDatacenterIds_.Equals(other.latencyDatacenterIds_)) return false;
    if(!latencyPingMs_.Equals(other.latencyPingMs_)) return false;
    if(!latencyDatacenterIdsP2P_.Equals(other.latencyDatacenterIdsP2P_)) return false;
    if(!latencyPingMsP2P_.Equals(other.latencyPingMsP2P_)) return false;
    if (YourPublicIp != other.YourPublicIp) return false;
    if (YourPublicPort != other.YourPublicPort) return false;
    if (ServerTime != other.ServerTime) return false;
    if (Challenge != other.Challenge) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    if (ClientCookie != other.ClientCookie) return false;
    if (ScoringPenaltyRelayCluster != other.ScoringPenaltyRelayCluster) return false;
    if (Flags != other.Flags) return false;
    if(!routeExceptions_.Equals(other.routeExceptions_)) return false;
    if(!altAddresses_.Equals(other.altAddresses_)) return false;
    if (DummyPad != other.DummyPad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientTimestamp) hash ^= ClientTimestamp.GetHashCode();
    hash ^= latencyDatacenterIds_.GetHashCode();
    hash ^= latencyPingMs_.GetHashCode();
    hash ^= latencyDatacenterIdsP2P_.GetHashCode();
    hash ^= latencyPingMsP2P_.GetHashCode();
    if (HasYourPublicIp) hash ^= YourPublicIp.GetHashCode();
    if (HasYourPublicPort) hash ^= YourPublicPort.GetHashCode();
    if (HasServerTime) hash ^= ServerTime.GetHashCode();
    if (HasChallenge) hash ^= Challenge.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (HasClientCookie) hash ^= ClientCookie.GetHashCode();
    if (HasScoringPenaltyRelayCluster) hash ^= ScoringPenaltyRelayCluster.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    hash ^= routeExceptions_.GetHashCode();
    hash ^= altAddresses_.GetHashCode();
    if (HasDummyPad) hash ^= DummyPad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClientTimestamp) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientTimestamp);
    }
    latencyDatacenterIds_.WriteTo(output, _repeated_latencyDatacenterIds_codec);
    latencyPingMs_.WriteTo(output, _repeated_latencyPingMs_codec);
    if (HasYourPublicIp) {
      output.WriteRawTag(37);
      output.WriteFixed32(YourPublicIp);
    }
    if (HasServerTime) {
      output.WriteRawTag(45);
      output.WriteFixed32(ServerTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(49);
      output.WriteFixed64(Challenge);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(56);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasClientCookie) {
      output.WriteRawTag(69);
      output.WriteFixed32(ClientCookie);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(72);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    routeExceptions_.WriteTo(output, _repeated_routeExceptions_codec);
    if (HasYourPublicPort) {
      output.WriteRawTag(93);
      output.WriteFixed32(YourPublicPort);
    }
    if (HasFlags) {
      output.WriteRawTag(96);
      output.WriteUInt32(Flags);
    }
    altAddresses_.WriteTo(output, _repeated_altAddresses_codec);
    latencyDatacenterIdsP2P_.WriteTo(output, _repeated_latencyDatacenterIdsP2P_codec);
    latencyPingMsP2P_.WriteTo(output, _repeated_latencyPingMsP2P_codec);
    if (HasDummyPad) {
      output.WriteRawTag(154, 6);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClientTimestamp) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientTimestamp);
    }
    latencyDatacenterIds_.WriteTo(ref output, _repeated_latencyDatacenterIds_codec);
    latencyPingMs_.WriteTo(ref output, _repeated_latencyPingMs_codec);
    if (HasYourPublicIp) {
      output.WriteRawTag(37);
      output.WriteFixed32(YourPublicIp);
    }
    if (HasServerTime) {
      output.WriteRawTag(45);
      output.WriteFixed32(ServerTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(49);
      output.WriteFixed64(Challenge);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(56);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasClientCookie) {
      output.WriteRawTag(69);
      output.WriteFixed32(ClientCookie);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(72);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    routeExceptions_.WriteTo(ref output, _repeated_routeExceptions_codec);
    if (HasYourPublicPort) {
      output.WriteRawTag(93);
      output.WriteFixed32(YourPublicPort);
    }
    if (HasFlags) {
      output.WriteRawTag(96);
      output.WriteUInt32(Flags);
    }
    altAddresses_.WriteTo(ref output, _repeated_altAddresses_codec);
    latencyDatacenterIdsP2P_.WriteTo(ref output, _repeated_latencyDatacenterIdsP2P_codec);
    latencyPingMsP2P_.WriteTo(ref output, _repeated_latencyPingMsP2P_codec);
    if (HasDummyPad) {
      output.WriteRawTag(154, 6);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClientTimestamp) {
      size += 1 + 4;
    }
    size += latencyDatacenterIds_.CalculateSize(_repeated_latencyDatacenterIds_codec);
    size += latencyPingMs_.CalculateSize(_repeated_latencyPingMs_codec);
    size += latencyDatacenterIdsP2P_.CalculateSize(_repeated_latencyDatacenterIdsP2P_codec);
    size += latencyPingMsP2P_.CalculateSize(_repeated_latencyPingMsP2P_codec);
    if (HasYourPublicIp) {
      size += 1 + 4;
    }
    if (HasYourPublicPort) {
      size += 1 + 4;
    }
    if (HasServerTime) {
      size += 1 + 4;
    }
    if (HasChallenge) {
      size += 1 + 8;
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (HasClientCookie) {
      size += 1 + 4;
    }
    if (HasScoringPenaltyRelayCluster) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoringPenaltyRelayCluster);
    }
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    size += routeExceptions_.CalculateSize(_repeated_routeExceptions_codec);
    size += altAddresses_.CalculateSize(_repeated_altAddresses_codec);
    if (HasDummyPad) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(DummyPad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramRouterPingReply other) {
    if (other == null) {
      return;
    }
    if (other.HasClientTimestamp) {
      ClientTimestamp = other.ClientTimestamp;
    }
    latencyDatacenterIds_.Add(other.latencyDatacenterIds_);
    latencyPingMs_.Add(other.latencyPingMs_);
    latencyDatacenterIdsP2P_.Add(other.latencyDatacenterIdsP2P_);
    latencyPingMsP2P_.Add(other.latencyPingMsP2P_);
    if (other.HasYourPublicIp) {
      YourPublicIp = other.YourPublicIp;
    }
    if (other.HasYourPublicPort) {
      YourPublicPort = other.YourPublicPort;
    }
    if (other.HasServerTime) {
      ServerTime = other.ServerTime;
    }
    if (other.HasChallenge) {
      Challenge = other.Challenge;
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    if (other.HasClientCookie) {
      ClientCookie = other.ClientCookie;
    }
    if (other.HasScoringPenaltyRelayCluster) {
      ScoringPenaltyRelayCluster = other.ScoringPenaltyRelayCluster;
    }
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    routeExceptions_.Add(other.routeExceptions_);
    altAddresses_.Add(other.altAddresses_);
    if (other.HasDummyPad) {
      DummyPad = other.DummyPad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ClientTimestamp = input.ReadFixed32();
          break;
        }
        case 18:
        case 21: {
          latencyDatacenterIds_.AddEntriesFrom(input, _repeated_latencyDatacenterIds_codec);
          break;
        }
        case 26:
        case 24: {
          latencyPingMs_.AddEntriesFrom(input, _repeated_latencyPingMs_codec);
          break;
        }
        case 37: {
          YourPublicIp = input.ReadFixed32();
          break;
        }
        case 45: {
          ServerTime = input.ReadFixed32();
          break;
        }
        case 49: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 56: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 69: {
          ClientCookie = input.ReadFixed32();
          break;
        }
        case 72: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 82: {
          routeExceptions_.AddEntriesFrom(input, _repeated_routeExceptions_codec);
          break;
        }
        case 93: {
          YourPublicPort = input.ReadFixed32();
          break;
        }
        case 96: {
          Flags = input.ReadUInt32();
          break;
        }
        case 106: {
          altAddresses_.AddEntriesFrom(input, _repeated_altAddresses_codec);
          break;
        }
        case 114:
        case 117: {
          latencyDatacenterIdsP2P_.AddEntriesFrom(input, _repeated_latencyDatacenterIdsP2P_codec);
          break;
        }
        case 122:
        case 120: {
          latencyPingMsP2P_.AddEntriesFrom(input, _repeated_latencyPingMsP2P_codec);
          break;
        }
        case 794: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ClientTimestamp = input.ReadFixed32();
          break;
        }
        case 18:
        case 21: {
          latencyDatacenterIds_.AddEntriesFrom(ref input, _repeated_latencyDatacenterIds_codec);
          break;
        }
        case 26:
        case 24: {
          latencyPingMs_.AddEntriesFrom(ref input, _repeated_latencyPingMs_codec);
          break;
        }
        case 37: {
          YourPublicIp = input.ReadFixed32();
          break;
        }
        case 45: {
          ServerTime = input.ReadFixed32();
          break;
        }
        case 49: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 56: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 69: {
          ClientCookie = input.ReadFixed32();
          break;
        }
        case 72: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 82: {
          routeExceptions_.AddEntriesFrom(ref input, _repeated_routeExceptions_codec);
          break;
        }
        case 93: {
          YourPublicPort = input.ReadFixed32();
          break;
        }
        case 96: {
          Flags = input.ReadUInt32();
          break;
        }
        case 106: {
          altAddresses_.AddEntriesFrom(ref input, _repeated_altAddresses_codec);
          break;
        }
        case 114:
        case 117: {
          latencyDatacenterIdsP2P_.AddEntriesFrom(ref input, _repeated_latencyDatacenterIdsP2P_codec);
          break;
        }
        case 122:
        case 120: {
          latencyPingMsP2P_.AddEntriesFrom(ref input, _repeated_latencyPingMsP2P_codec);
          break;
        }
        case 794: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramRouterPingReply message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("FLAG_MAYBE_MORE_DATA_CENTERS")] FlagMaybeMoreDataCenters = 1,
      [pbr::OriginalName("FLAG_MAYBE_MORE_ALT_ADDRESSES")] FlagMaybeMoreAltAddresses = 2,
    }

    public sealed partial class RouteException : pb::IMessage<RouteException>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<RouteException> _parser = new pb::MessageParser<RouteException>(() => new RouteException());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<RouteException> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramRouterPingReply.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouteException() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouteException(RouteException other) : this() {
        _hasBits0 = other._hasBits0;
        dataCenterId_ = other.dataCenterId_;
        flags_ = other.flags_;
        penalty_ = other.penalty_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouteException Clone() {
        return new RouteException(this);
      }

      /// <summary>Field number for the "data_center_id" field.</summary>
      public const int DataCenterIdFieldNumber = 1;
      private readonly static uint DataCenterIdDefaultValue = 0;

      private uint dataCenterId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DataCenterId {
        get { if ((_hasBits0 & 1) != 0) { return dataCenterId_; } else { return DataCenterIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          dataCenterId_ = value;
        }
      }
      /// <summary>Gets whether the "data_center_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDataCenterId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "data_center_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDataCenterId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "flags" field.</summary>
      public const int FlagsFieldNumber = 2;
      private readonly static uint FlagsDefaultValue = 0;

      private uint flags_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Flags {
        get { if ((_hasBits0 & 2) != 0) { return flags_; } else { return FlagsDefaultValue; } }
        set {
          _hasBits0 |= 2;
          flags_ = value;
        }
      }
      /// <summary>Gets whether the "flags" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFlags {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "flags" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFlags() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "penalty" field.</summary>
      public const int PenaltyFieldNumber = 3;
      private readonly static uint PenaltyDefaultValue = 0;

      private uint penalty_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Penalty {
        get { if ((_hasBits0 & 4) != 0) { return penalty_; } else { return PenaltyDefaultValue; } }
        set {
          _hasBits0 |= 4;
          penalty_ = value;
        }
      }
      /// <summary>Gets whether the "penalty" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPenalty {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "penalty" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPenalty() {
        _hasBits0 &= ~4;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as RouteException);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(RouteException other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (DataCenterId != other.DataCenterId) return false;
        if (Flags != other.Flags) return false;
        if (Penalty != other.Penalty) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDataCenterId) hash ^= DataCenterId.GetHashCode();
        if (HasFlags) hash ^= Flags.GetHashCode();
        if (HasPenalty) hash ^= Penalty.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDataCenterId) {
          output.WriteRawTag(13);
          output.WriteFixed32(DataCenterId);
        }
        if (HasFlags) {
          output.WriteRawTag(16);
          output.WriteUInt32(Flags);
        }
        if (HasPenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(Penalty);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDataCenterId) {
          output.WriteRawTag(13);
          output.WriteFixed32(DataCenterId);
        }
        if (HasFlags) {
          output.WriteRawTag(16);
          output.WriteUInt32(Flags);
        }
        if (HasPenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(Penalty);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDataCenterId) {
          size += 1 + 4;
        }
        if (HasFlags) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
        }
        if (HasPenalty) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Penalty);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(RouteException other) {
        if (other == null) {
          return;
        }
        if (other.HasDataCenterId) {
          DataCenterId = other.DataCenterId;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasPenalty) {
          Penalty = other.Penalty;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              DataCenterId = input.ReadFixed32();
              break;
            }
            case 16: {
              Flags = input.ReadUInt32();
              break;
            }
            case 24: {
              Penalty = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              DataCenterId = input.ReadFixed32();
              break;
            }
            case 16: {
              Flags = input.ReadUInt32();
              break;
            }
            case 24: {
              Penalty = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class AltAddress : pb::IMessage<AltAddress>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<AltAddress> _parser = new pb::MessageParser<AltAddress>(() => new AltAddress());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<AltAddress> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramRouterPingReply.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public AltAddress() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public AltAddress(AltAddress other) : this() {
        _hasBits0 = other._hasBits0;
        ipv4_ = other.ipv4_;
        port_ = other.port_;
        penalty_ = other.penalty_;
        protocol_ = other.protocol_;
        id_ = other.id_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public AltAddress Clone() {
        return new AltAddress(this);
      }

      /// <summary>Field number for the "ipv4" field.</summary>
      public const int Ipv4FieldNumber = 1;
      private readonly static uint Ipv4DefaultValue = 0;

      private uint ipv4_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Ipv4 {
        get { if ((_hasBits0 & 1) != 0) { return ipv4_; } else { return Ipv4DefaultValue; } }
        set {
          _hasBits0 |= 1;
          ipv4_ = value;
        }
      }
      /// <summary>Gets whether the "ipv4" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasIpv4 {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "ipv4" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearIpv4() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "port" field.</summary>
      public const int PortFieldNumber = 2;
      private readonly static uint PortDefaultValue = 0;

      private uint port_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Port {
        get { if ((_hasBits0 & 2) != 0) { return port_; } else { return PortDefaultValue; } }
        set {
          _hasBits0 |= 2;
          port_ = value;
        }
      }
      /// <summary>Gets whether the "port" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPort {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "port" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPort() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "penalty" field.</summary>
      public const int PenaltyFieldNumber = 3;
      private readonly static uint PenaltyDefaultValue = 0;

      private uint penalty_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Penalty {
        get { if ((_hasBits0 & 4) != 0) { return penalty_; } else { return PenaltyDefaultValue; } }
        set {
          _hasBits0 |= 4;
          penalty_ = value;
        }
      }
      /// <summary>Gets whether the "penalty" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPenalty {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "penalty" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPenalty() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "protocol" field.</summary>
      public const int ProtocolFieldNumber = 4;
      private readonly static global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol ProtocolDefaultValue = global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol.DefaultProtocol;

      private global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol protocol_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol Protocol {
        get { if ((_hasBits0 & 8) != 0) { return protocol_; } else { return ProtocolDefaultValue; } }
        set {
          _hasBits0 |= 8;
          protocol_ = value;
        }
      }
      /// <summary>Gets whether the "protocol" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasProtocol {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "protocol" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearProtocol() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 5;
      private readonly static string IdDefaultValue = "";

      private string id_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Id {
        get { return id_ ?? IdDefaultValue; }
        set {
          id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasId {
        get { return id_ != null; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearId() {
        id_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as AltAddress);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(AltAddress other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Ipv4 != other.Ipv4) return false;
        if (Port != other.Port) return false;
        if (Penalty != other.Penalty) return false;
        if (Protocol != other.Protocol) return false;
        if (Id != other.Id) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasIpv4) hash ^= Ipv4.GetHashCode();
        if (HasPort) hash ^= Port.GetHashCode();
        if (HasPenalty) hash ^= Penalty.GetHashCode();
        if (HasProtocol) hash ^= Protocol.GetHashCode();
        if (HasId) hash ^= Id.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasIpv4) {
          output.WriteRawTag(13);
          output.WriteFixed32(Ipv4);
        }
        if (HasPort) {
          output.WriteRawTag(16);
          output.WriteUInt32(Port);
        }
        if (HasPenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(Penalty);
        }
        if (HasProtocol) {
          output.WriteRawTag(32);
          output.WriteEnum((int) Protocol);
        }
        if (HasId) {
          output.WriteRawTag(42);
          output.WriteString(Id);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasIpv4) {
          output.WriteRawTag(13);
          output.WriteFixed32(Ipv4);
        }
        if (HasPort) {
          output.WriteRawTag(16);
          output.WriteUInt32(Port);
        }
        if (HasPenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(Penalty);
        }
        if (HasProtocol) {
          output.WriteRawTag(32);
          output.WriteEnum((int) Protocol);
        }
        if (HasId) {
          output.WriteRawTag(42);
          output.WriteString(Id);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasIpv4) {
          size += 1 + 4;
        }
        if (HasPort) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
        }
        if (HasPenalty) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Penalty);
        }
        if (HasProtocol) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
        }
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(AltAddress other) {
        if (other == null) {
          return;
        }
        if (other.HasIpv4) {
          Ipv4 = other.Ipv4;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasPenalty) {
          Penalty = other.Penalty;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Ipv4 = input.ReadFixed32();
              break;
            }
            case 16: {
              Port = input.ReadUInt32();
              break;
            }
            case 24: {
              Penalty = input.ReadUInt32();
              break;
            }
            case 32: {
              Protocol = (global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol) input.ReadEnum();
              break;
            }
            case 42: {
              Id = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              Ipv4 = input.ReadFixed32();
              break;
            }
            case 16: {
              Port = input.ReadUInt32();
              break;
            }
            case 24: {
              Penalty = input.ReadUInt32();
              break;
            }
            case 32: {
              Protocol = (global::CMsgSteamDatagramRouterPingReply.Types.AltAddress.Types.Protocol) input.ReadEnum();
              break;
            }
            case 42: {
              Id = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

      #region Nested types
      /// <summary>Container for nested types declared in the AltAddress message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static partial class Types {
        public enum Protocol {
          [pbr::OriginalName("DefaultProtocol")] DefaultProtocol = 0,
          [pbr::OriginalName("NetworkNext")] NetworkNext = 1,
        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramGameserverPingRequestBody : pb::IMessage<CMsgSteamDatagramGameserverPingRequestBody>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramGameserverPingRequestBody> _parser = new pb::MessageParser<CMsgSteamDatagramGameserverPingRequestBody>(() => new CMsgSteamDatagramGameserverPingRequestBody());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramGameserverPingRequestBody> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestBody() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestBody(CMsgSteamDatagramGameserverPingRequestBody other) : this() {
    _hasBits0 = other._hasBits0;
    relayPopid_ = other.relayPopid_;
    yourPublicIp_ = other.yourPublicIp_ != null ? other.yourPublicIp_.Clone() : null;
    yourPublicPort_ = other.yourPublicPort_;
    relayUnixTime_ = other.relayUnixTime_;
    routingSecret_ = other.routingSecret_;
    myIps_ = other.myIps_.Clone();
    echo_ = other.echo_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestBody Clone() {
    return new CMsgSteamDatagramGameserverPingRequestBody(this);
  }

  /// <summary>Field number for the "relay_popid" field.</summary>
  public const int RelayPopidFieldNumber = 1;
  private readonly static uint RelayPopidDefaultValue = 0;

  private uint relayPopid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RelayPopid {
    get { if ((_hasBits0 & 1) != 0) { return relayPopid_; } else { return RelayPopidDefaultValue; } }
    set {
      _hasBits0 |= 1;
      relayPopid_ = value;
    }
  }
  /// <summary>Gets whether the "relay_popid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayPopid {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "relay_popid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayPopid() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "your_public_ip" field.</summary>
  public const int YourPublicIpFieldNumber = 2;
  private global::CMsgSteamNetworkingIPAddress yourPublicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamNetworkingIPAddress YourPublicIp {
    get { return yourPublicIp_; }
    set {
      yourPublicIp_ = value;
    }
  }

  /// <summary>Field number for the "your_public_port" field.</summary>
  public const int YourPublicPortFieldNumber = 3;
  private readonly static uint YourPublicPortDefaultValue = 0;

  private uint yourPublicPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint YourPublicPort {
    get { if ((_hasBits0 & 2) != 0) { return yourPublicPort_; } else { return YourPublicPortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      yourPublicPort_ = value;
    }
  }
  /// <summary>Gets whether the "your_public_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourPublicPort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "your_public_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourPublicPort() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "relay_unix_time" field.</summary>
  public const int RelayUnixTimeFieldNumber = 4;
  private readonly static ulong RelayUnixTimeDefaultValue = 0UL;

  private ulong relayUnixTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RelayUnixTime {
    get { if ((_hasBits0 & 4) != 0) { return relayUnixTime_; } else { return RelayUnixTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      relayUnixTime_ = value;
    }
  }
  /// <summary>Gets whether the "relay_unix_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayUnixTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "relay_unix_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayUnixTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "routing_secret" field.</summary>
  public const int RoutingSecretFieldNumber = 5;
  private readonly static ulong RoutingSecretDefaultValue = 0UL;

  private ulong routingSecret_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RoutingSecret {
    get { if ((_hasBits0 & 8) != 0) { return routingSecret_; } else { return RoutingSecretDefaultValue; } }
    set {
      _hasBits0 |= 8;
      routingSecret_ = value;
    }
  }
  /// <summary>Gets whether the "routing_secret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutingSecret {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "routing_secret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutingSecret() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "my_ips" field.</summary>
  public const int MyIpsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::CMsgSteamNetworkingIPAddress> _repeated_myIps_codec
      = pb::FieldCodec.ForMessage(50, global::CMsgSteamNetworkingIPAddress.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamNetworkingIPAddress> myIps_ = new pbc::RepeatedField<global::CMsgSteamNetworkingIPAddress>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamNetworkingIPAddress> MyIps {
    get { return myIps_; }
  }

  /// <summary>Field number for the "echo" field.</summary>
  public const int EchoFieldNumber = 8;
  private readonly static pb::ByteString EchoDefaultValue = pb::ByteString.Empty;

  private pb::ByteString echo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Echo {
    get { return echo_ ?? EchoDefaultValue; }
    set {
      echo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "echo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEcho {
    get { return echo_ != null; }
  }
  /// <summary>Clears the value of the "echo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEcho() {
    echo_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramGameserverPingRequestBody);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramGameserverPingRequestBody other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RelayPopid != other.RelayPopid) return false;
    if (!object.Equals(YourPublicIp, other.YourPublicIp)) return false;
    if (YourPublicPort != other.YourPublicPort) return false;
    if (RelayUnixTime != other.RelayUnixTime) return false;
    if (RoutingSecret != other.RoutingSecret) return false;
    if(!myIps_.Equals(other.myIps_)) return false;
    if (Echo != other.Echo) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRelayPopid) hash ^= RelayPopid.GetHashCode();
    if (yourPublicIp_ != null) hash ^= YourPublicIp.GetHashCode();
    if (HasYourPublicPort) hash ^= YourPublicPort.GetHashCode();
    if (HasRelayUnixTime) hash ^= RelayUnixTime.GetHashCode();
    if (HasRoutingSecret) hash ^= RoutingSecret.GetHashCode();
    hash ^= myIps_.GetHashCode();
    if (HasEcho) hash ^= Echo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRelayPopid) {
      output.WriteRawTag(13);
      output.WriteFixed32(RelayPopid);
    }
    if (yourPublicIp_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(YourPublicIp);
    }
    if (HasYourPublicPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(YourPublicPort);
    }
    if (HasRelayUnixTime) {
      output.WriteRawTag(32);
      output.WriteUInt64(RelayUnixTime);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(41);
      output.WriteFixed64(RoutingSecret);
    }
    myIps_.WriteTo(output, _repeated_myIps_codec);
    if (HasEcho) {
      output.WriteRawTag(66);
      output.WriteBytes(Echo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRelayPopid) {
      output.WriteRawTag(13);
      output.WriteFixed32(RelayPopid);
    }
    if (yourPublicIp_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(YourPublicIp);
    }
    if (HasYourPublicPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(YourPublicPort);
    }
    if (HasRelayUnixTime) {
      output.WriteRawTag(32);
      output.WriteUInt64(RelayUnixTime);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(41);
      output.WriteFixed64(RoutingSecret);
    }
    myIps_.WriteTo(ref output, _repeated_myIps_codec);
    if (HasEcho) {
      output.WriteRawTag(66);
      output.WriteBytes(Echo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRelayPopid) {
      size += 1 + 4;
    }
    if (yourPublicIp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(YourPublicIp);
    }
    if (HasYourPublicPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(YourPublicPort);
    }
    if (HasRelayUnixTime) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RelayUnixTime);
    }
    if (HasRoutingSecret) {
      size += 1 + 8;
    }
    size += myIps_.CalculateSize(_repeated_myIps_codec);
    if (HasEcho) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Echo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramGameserverPingRequestBody other) {
    if (other == null) {
      return;
    }
    if (other.HasRelayPopid) {
      RelayPopid = other.RelayPopid;
    }
    if (other.yourPublicIp_ != null) {
      if (yourPublicIp_ == null) {
        YourPublicIp = new global::CMsgSteamNetworkingIPAddress();
      }
      YourPublicIp.MergeFrom(other.YourPublicIp);
    }
    if (other.HasYourPublicPort) {
      YourPublicPort = other.YourPublicPort;
    }
    if (other.HasRelayUnixTime) {
      RelayUnixTime = other.RelayUnixTime;
    }
    if (other.HasRoutingSecret) {
      RoutingSecret = other.RoutingSecret;
    }
    myIps_.Add(other.myIps_);
    if (other.HasEcho) {
      Echo = other.Echo;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          RelayPopid = input.ReadFixed32();
          break;
        }
        case 18: {
          if (yourPublicIp_ == null) {
            YourPublicIp = new global::CMsgSteamNetworkingIPAddress();
          }
          input.ReadMessage(YourPublicIp);
          break;
        }
        case 24: {
          YourPublicPort = input.ReadUInt32();
          break;
        }
        case 32: {
          RelayUnixTime = input.ReadUInt64();
          break;
        }
        case 41: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 50: {
          myIps_.AddEntriesFrom(input, _repeated_myIps_codec);
          break;
        }
        case 66: {
          Echo = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          RelayPopid = input.ReadFixed32();
          break;
        }
        case 18: {
          if (yourPublicIp_ == null) {
            YourPublicIp = new global::CMsgSteamNetworkingIPAddress();
          }
          input.ReadMessage(YourPublicIp);
          break;
        }
        case 24: {
          YourPublicPort = input.ReadUInt32();
          break;
        }
        case 32: {
          RelayUnixTime = input.ReadUInt64();
          break;
        }
        case 41: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 50: {
          myIps_.AddEntriesFrom(ref input, _repeated_myIps_codec);
          break;
        }
        case 66: {
          Echo = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramGameserverPingRequestEnvelope : pb::IMessage<CMsgSteamDatagramGameserverPingRequestEnvelope>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramGameserverPingRequestEnvelope> _parser = new pb::MessageParser<CMsgSteamDatagramGameserverPingRequestEnvelope>(() => new CMsgSteamDatagramGameserverPingRequestEnvelope());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramGameserverPingRequestEnvelope> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestEnvelope() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestEnvelope(CMsgSteamDatagramGameserverPingRequestEnvelope other) : this() {
    _hasBits0 = other._hasBits0;
    cert_ = other.cert_ != null ? other.cert_.Clone() : null;
    signedData_ = other.signedData_;
    signature_ = other.signature_;
    legacyYourPublicIp_ = other.legacyYourPublicIp_;
    legacyYourPublicPort_ = other.legacyYourPublicPort_;
    legacyRelayUnixTime_ = other.legacyRelayUnixTime_;
    legacyChallenge_ = other.legacyChallenge_;
    legacyRouterTimestamp_ = other.legacyRouterTimestamp_;
    dummyPad_ = other.dummyPad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingRequestEnvelope Clone() {
    return new CMsgSteamDatagramGameserverPingRequestEnvelope(this);
  }

  /// <summary>Field number for the "cert" field.</summary>
  public const int CertFieldNumber = 6;
  private global::CMsgSteamDatagramCertificateSigned cert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned Cert {
    get { return cert_; }
    set {
      cert_ = value;
    }
  }

  /// <summary>Field number for the "signed_data" field.</summary>
  public const int SignedDataFieldNumber = 7;
  private readonly static pb::ByteString SignedDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString SignedData {
    get { return signedData_ ?? SignedDataDefaultValue; }
    set {
      signedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signed_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignedData {
    get { return signedData_ != null; }
  }
  /// <summary>Clears the value of the "signed_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignedData() {
    signedData_ = null;
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 8;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignature() {
    signature_ = null;
  }

  /// <summary>Field number for the "legacy_your_public_ip" field.</summary>
  public const int LegacyYourPublicIpFieldNumber = 1;
  private readonly static uint LegacyYourPublicIpDefaultValue = 0;

  private uint legacyYourPublicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyYourPublicIp {
    get { if ((_hasBits0 & 1) != 0) { return legacyYourPublicIp_; } else { return LegacyYourPublicIpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacyYourPublicIp_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_your_public_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyYourPublicIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_your_public_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyYourPublicIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "legacy_your_public_port" field.</summary>
  public const int LegacyYourPublicPortFieldNumber = 5;
  private readonly static uint LegacyYourPublicPortDefaultValue = 0;

  private uint legacyYourPublicPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyYourPublicPort {
    get { if ((_hasBits0 & 16) != 0) { return legacyYourPublicPort_; } else { return LegacyYourPublicPortDefaultValue; } }
    set {
      _hasBits0 |= 16;
      legacyYourPublicPort_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_your_public_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyYourPublicPort {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "legacy_your_public_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyYourPublicPort() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "legacy_relay_unix_time" field.</summary>
  public const int LegacyRelayUnixTimeFieldNumber = 2;
  private readonly static uint LegacyRelayUnixTimeDefaultValue = 0;

  private uint legacyRelayUnixTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyRelayUnixTime {
    get { if ((_hasBits0 & 2) != 0) { return legacyRelayUnixTime_; } else { return LegacyRelayUnixTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyRelayUnixTime_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_relay_unix_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyRelayUnixTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_relay_unix_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyRelayUnixTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "legacy_challenge" field.</summary>
  public const int LegacyChallengeFieldNumber = 3;
  private readonly static ulong LegacyChallengeDefaultValue = 0UL;

  private ulong legacyChallenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyChallenge {
    get { if ((_hasBits0 & 4) != 0) { return legacyChallenge_; } else { return LegacyChallengeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      legacyChallenge_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyChallenge {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "legacy_challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyChallenge() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "legacy_router_timestamp" field.</summary>
  public const int LegacyRouterTimestampFieldNumber = 4;
  private readonly static uint LegacyRouterTimestampDefaultValue = 0;

  private uint legacyRouterTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyRouterTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return legacyRouterTimestamp_; } else { return LegacyRouterTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      legacyRouterTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_router_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyRouterTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "legacy_router_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyRouterTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "dummy_pad" field.</summary>
  public const int DummyPadFieldNumber = 1023;
  private readonly static pb::ByteString DummyPadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString dummyPad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString DummyPad {
    get { return dummyPad_ ?? DummyPadDefaultValue; }
    set {
      dummyPad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dummy_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDummyPad {
    get { return dummyPad_ != null; }
  }
  /// <summary>Clears the value of the "dummy_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDummyPad() {
    dummyPad_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramGameserverPingRequestEnvelope);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramGameserverPingRequestEnvelope other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Cert, other.Cert)) return false;
    if (SignedData != other.SignedData) return false;
    if (Signature != other.Signature) return false;
    if (LegacyYourPublicIp != other.LegacyYourPublicIp) return false;
    if (LegacyYourPublicPort != other.LegacyYourPublicPort) return false;
    if (LegacyRelayUnixTime != other.LegacyRelayUnixTime) return false;
    if (LegacyChallenge != other.LegacyChallenge) return false;
    if (LegacyRouterTimestamp != other.LegacyRouterTimestamp) return false;
    if (DummyPad != other.DummyPad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (cert_ != null) hash ^= Cert.GetHashCode();
    if (HasSignedData) hash ^= SignedData.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (HasLegacyYourPublicIp) hash ^= LegacyYourPublicIp.GetHashCode();
    if (HasLegacyYourPublicPort) hash ^= LegacyYourPublicPort.GetHashCode();
    if (HasLegacyRelayUnixTime) hash ^= LegacyRelayUnixTime.GetHashCode();
    if (HasLegacyChallenge) hash ^= LegacyChallenge.GetHashCode();
    if (HasLegacyRouterTimestamp) hash ^= LegacyRouterTimestamp.GetHashCode();
    if (HasDummyPad) hash ^= DummyPad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacyYourPublicIp) {
      output.WriteRawTag(13);
      output.WriteFixed32(LegacyYourPublicIp);
    }
    if (HasLegacyRelayUnixTime) {
      output.WriteRawTag(21);
      output.WriteFixed32(LegacyRelayUnixTime);
    }
    if (HasLegacyChallenge) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyChallenge);
    }
    if (HasLegacyRouterTimestamp) {
      output.WriteRawTag(37);
      output.WriteFixed32(LegacyRouterTimestamp);
    }
    if (HasLegacyYourPublicPort) {
      output.WriteRawTag(45);
      output.WriteFixed32(LegacyYourPublicPort);
    }
    if (cert_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Cert);
    }
    if (HasSignedData) {
      output.WriteRawTag(58);
      output.WriteBytes(SignedData);
    }
    if (HasSignature) {
      output.WriteRawTag(66);
      output.WriteBytes(Signature);
    }
    if (HasDummyPad) {
      output.WriteRawTag(250, 63);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacyYourPublicIp) {
      output.WriteRawTag(13);
      output.WriteFixed32(LegacyYourPublicIp);
    }
    if (HasLegacyRelayUnixTime) {
      output.WriteRawTag(21);
      output.WriteFixed32(LegacyRelayUnixTime);
    }
    if (HasLegacyChallenge) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyChallenge);
    }
    if (HasLegacyRouterTimestamp) {
      output.WriteRawTag(37);
      output.WriteFixed32(LegacyRouterTimestamp);
    }
    if (HasLegacyYourPublicPort) {
      output.WriteRawTag(45);
      output.WriteFixed32(LegacyYourPublicPort);
    }
    if (cert_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Cert);
    }
    if (HasSignedData) {
      output.WriteRawTag(58);
      output.WriteBytes(SignedData);
    }
    if (HasSignature) {
      output.WriteRawTag(66);
      output.WriteBytes(Signature);
    }
    if (HasDummyPad) {
      output.WriteRawTag(250, 63);
      output.WriteBytes(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (cert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cert);
    }
    if (HasSignedData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedData);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (HasLegacyYourPublicIp) {
      size += 1 + 4;
    }
    if (HasLegacyYourPublicPort) {
      size += 1 + 4;
    }
    if (HasLegacyRelayUnixTime) {
      size += 1 + 4;
    }
    if (HasLegacyChallenge) {
      size += 1 + 8;
    }
    if (HasLegacyRouterTimestamp) {
      size += 1 + 4;
    }
    if (HasDummyPad) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(DummyPad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramGameserverPingRequestEnvelope other) {
    if (other == null) {
      return;
    }
    if (other.cert_ != null) {
      if (cert_ == null) {
        Cert = new global::CMsgSteamDatagramCertificateSigned();
      }
      Cert.MergeFrom(other.Cert);
    }
    if (other.HasSignedData) {
      SignedData = other.SignedData;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    if (other.HasLegacyYourPublicIp) {
      LegacyYourPublicIp = other.LegacyYourPublicIp;
    }
    if (other.HasLegacyYourPublicPort) {
      LegacyYourPublicPort = other.LegacyYourPublicPort;
    }
    if (other.HasLegacyRelayUnixTime) {
      LegacyRelayUnixTime = other.LegacyRelayUnixTime;
    }
    if (other.HasLegacyChallenge) {
      LegacyChallenge = other.LegacyChallenge;
    }
    if (other.HasLegacyRouterTimestamp) {
      LegacyRouterTimestamp = other.LegacyRouterTimestamp;
    }
    if (other.HasDummyPad) {
      DummyPad = other.DummyPad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          LegacyYourPublicIp = input.ReadFixed32();
          break;
        }
        case 21: {
          LegacyRelayUnixTime = input.ReadFixed32();
          break;
        }
        case 25: {
          LegacyChallenge = input.ReadFixed64();
          break;
        }
        case 37: {
          LegacyRouterTimestamp = input.ReadFixed32();
          break;
        }
        case 45: {
          LegacyYourPublicPort = input.ReadFixed32();
          break;
        }
        case 50: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 58: {
          SignedData = input.ReadBytes();
          break;
        }
        case 66: {
          Signature = input.ReadBytes();
          break;
        }
        case 8186: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          LegacyYourPublicIp = input.ReadFixed32();
          break;
        }
        case 21: {
          LegacyRelayUnixTime = input.ReadFixed32();
          break;
        }
        case 25: {
          LegacyChallenge = input.ReadFixed64();
          break;
        }
        case 37: {
          LegacyRouterTimestamp = input.ReadFixed32();
          break;
        }
        case 45: {
          LegacyYourPublicPort = input.ReadFixed32();
          break;
        }
        case 50: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 58: {
          SignedData = input.ReadBytes();
          break;
        }
        case 66: {
          Signature = input.ReadBytes();
          break;
        }
        case 8186: {
          DummyPad = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramGameserverPingReplyData : pb::IMessage<CMsgSteamDatagramGameserverPingReplyData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramGameserverPingReplyData> _parser = new pb::MessageParser<CMsgSteamDatagramGameserverPingReplyData>(() => new CMsgSteamDatagramGameserverPingReplyData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramGameserverPingReplyData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingReplyData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingReplyData(CMsgSteamDatagramGameserverPingReplyData other) : this() {
    _hasBits0 = other._hasBits0;
    echoRelayUnixTime_ = other.echoRelayUnixTime_;
    echo_ = other.echo_;
    legacyChallenge_ = other.legacyChallenge_;
    legacyRouterTimestamp_ = other.legacyRouterTimestamp_;
    dataCenterId_ = other.dataCenterId_;
    appid_ = other.appid_;
    protocolVersion_ = other.protocolVersion_;
    build_ = other.build_;
    networkConfigVersion_ = other.networkConfigVersion_;
    myUnixTime_ = other.myUnixTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverPingReplyData Clone() {
    return new CMsgSteamDatagramGameserverPingReplyData(this);
  }

  /// <summary>Field number for the "echo_relay_unix_time" field.</summary>
  public const int EchoRelayUnixTimeFieldNumber = 2;
  private readonly static uint EchoRelayUnixTimeDefaultValue = 0;

  private uint echoRelayUnixTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EchoRelayUnixTime {
    get { if ((_hasBits0 & 1) != 0) { return echoRelayUnixTime_; } else { return EchoRelayUnixTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      echoRelayUnixTime_ = value;
    }
  }
  /// <summary>Gets whether the "echo_relay_unix_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEchoRelayUnixTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "echo_relay_unix_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEchoRelayUnixTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "echo" field.</summary>
  public const int EchoFieldNumber = 8;
  private readonly static pb::ByteString EchoDefaultValue = pb::ByteString.Empty;

  private pb::ByteString echo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Echo {
    get { return echo_ ?? EchoDefaultValue; }
    set {
      echo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "echo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEcho {
    get { return echo_ != null; }
  }
  /// <summary>Clears the value of the "echo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEcho() {
    echo_ = null;
  }

  /// <summary>Field number for the "legacy_challenge" field.</summary>
  public const int LegacyChallengeFieldNumber = 3;
  private readonly static ulong LegacyChallengeDefaultValue = 0UL;

  private ulong legacyChallenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyChallenge {
    get { if ((_hasBits0 & 2) != 0) { return legacyChallenge_; } else { return LegacyChallengeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyChallenge_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyChallenge {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyChallenge() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "legacy_router_timestamp" field.</summary>
  public const int LegacyRouterTimestampFieldNumber = 4;
  private readonly static uint LegacyRouterTimestampDefaultValue = 0;

  private uint legacyRouterTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyRouterTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return legacyRouterTimestamp_; } else { return LegacyRouterTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      legacyRouterTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_router_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyRouterTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "legacy_router_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyRouterTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "data_center_id" field.</summary>
  public const int DataCenterIdFieldNumber = 5;
  private readonly static uint DataCenterIdDefaultValue = 0;

  private uint dataCenterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DataCenterId {
    get { if ((_hasBits0 & 8) != 0) { return dataCenterId_; } else { return DataCenterIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      dataCenterId_ = value;
    }
  }
  /// <summary>Gets whether the "data_center_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDataCenterId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "data_center_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDataCenterId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "appid" field.</summary>
  public const int AppidFieldNumber = 6;
  private readonly static uint AppidDefaultValue = 0;

  private uint appid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Appid {
    get { if ((_hasBits0 & 16) != 0) { return appid_; } else { return AppidDefaultValue; } }
    set {
      _hasBits0 |= 16;
      appid_ = value;
    }
  }
  /// <summary>Gets whether the "appid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppid {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "appid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppid() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "protocol_version" field.</summary>
  public const int ProtocolVersionFieldNumber = 7;
  private readonly static uint ProtocolVersionDefaultValue = 0;

  private uint protocolVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ProtocolVersion {
    get { if ((_hasBits0 & 32) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
    set {
      _hasBits0 |= 32;
      protocolVersion_ = value;
    }
  }
  /// <summary>Gets whether the "protocol_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProtocolVersion {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "protocol_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProtocolVersion() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "build" field.</summary>
  public const int BuildFieldNumber = 9;
  private readonly static string BuildDefaultValue = "";

  private string build_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Build {
    get { return build_ ?? BuildDefaultValue; }
    set {
      build_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "build" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuild {
    get { return build_ != null; }
  }
  /// <summary>Clears the value of the "build" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuild() {
    build_ = null;
  }

  /// <summary>Field number for the "network_config_version" field.</summary>
  public const int NetworkConfigVersionFieldNumber = 10;
  private readonly static ulong NetworkConfigVersionDefaultValue = 0UL;

  private ulong networkConfigVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong NetworkConfigVersion {
    get { if ((_hasBits0 & 64) != 0) { return networkConfigVersion_; } else { return NetworkConfigVersionDefaultValue; } }
    set {
      _hasBits0 |= 64;
      networkConfigVersion_ = value;
    }
  }
  /// <summary>Gets whether the "network_config_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNetworkConfigVersion {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "network_config_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNetworkConfigVersion() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "my_unix_time" field.</summary>
  public const int MyUnixTimeFieldNumber = 11;
  private readonly static uint MyUnixTimeDefaultValue = 0;

  private uint myUnixTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MyUnixTime {
    get { if ((_hasBits0 & 128) != 0) { return myUnixTime_; } else { return MyUnixTimeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      myUnixTime_ = value;
    }
  }
  /// <summary>Gets whether the "my_unix_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMyUnixTime {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "my_unix_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMyUnixTime() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramGameserverPingReplyData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramGameserverPingReplyData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EchoRelayUnixTime != other.EchoRelayUnixTime) return false;
    if (Echo != other.Echo) return false;
    if (LegacyChallenge != other.LegacyChallenge) return false;
    if (LegacyRouterTimestamp != other.LegacyRouterTimestamp) return false;
    if (DataCenterId != other.DataCenterId) return false;
    if (Appid != other.Appid) return false;
    if (ProtocolVersion != other.ProtocolVersion) return false;
    if (Build != other.Build) return false;
    if (NetworkConfigVersion != other.NetworkConfigVersion) return false;
    if (MyUnixTime != other.MyUnixTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEchoRelayUnixTime) hash ^= EchoRelayUnixTime.GetHashCode();
    if (HasEcho) hash ^= Echo.GetHashCode();
    if (HasLegacyChallenge) hash ^= LegacyChallenge.GetHashCode();
    if (HasLegacyRouterTimestamp) hash ^= LegacyRouterTimestamp.GetHashCode();
    if (HasDataCenterId) hash ^= DataCenterId.GetHashCode();
    if (HasAppid) hash ^= Appid.GetHashCode();
    if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
    if (HasBuild) hash ^= Build.GetHashCode();
    if (HasNetworkConfigVersion) hash ^= NetworkConfigVersion.GetHashCode();
    if (HasMyUnixTime) hash ^= MyUnixTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasEchoRelayUnixTime) {
      output.WriteRawTag(21);
      output.WriteFixed32(EchoRelayUnixTime);
    }
    if (HasLegacyChallenge) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyChallenge);
    }
    if (HasLegacyRouterTimestamp) {
      output.WriteRawTag(37);
      output.WriteFixed32(LegacyRouterTimestamp);
    }
    if (HasDataCenterId) {
      output.WriteRawTag(45);
      output.WriteFixed32(DataCenterId);
    }
    if (HasAppid) {
      output.WriteRawTag(48);
      output.WriteUInt32(Appid);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(56);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasEcho) {
      output.WriteRawTag(66);
      output.WriteBytes(Echo);
    }
    if (HasBuild) {
      output.WriteRawTag(74);
      output.WriteString(Build);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(80);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasMyUnixTime) {
      output.WriteRawTag(93);
      output.WriteFixed32(MyUnixTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasEchoRelayUnixTime) {
      output.WriteRawTag(21);
      output.WriteFixed32(EchoRelayUnixTime);
    }
    if (HasLegacyChallenge) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyChallenge);
    }
    if (HasLegacyRouterTimestamp) {
      output.WriteRawTag(37);
      output.WriteFixed32(LegacyRouterTimestamp);
    }
    if (HasDataCenterId) {
      output.WriteRawTag(45);
      output.WriteFixed32(DataCenterId);
    }
    if (HasAppid) {
      output.WriteRawTag(48);
      output.WriteUInt32(Appid);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(56);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasEcho) {
      output.WriteRawTag(66);
      output.WriteBytes(Echo);
    }
    if (HasBuild) {
      output.WriteRawTag(74);
      output.WriteString(Build);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(80);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasMyUnixTime) {
      output.WriteRawTag(93);
      output.WriteFixed32(MyUnixTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasEchoRelayUnixTime) {
      size += 1 + 4;
    }
    if (HasEcho) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Echo);
    }
    if (HasLegacyChallenge) {
      size += 1 + 8;
    }
    if (HasLegacyRouterTimestamp) {
      size += 1 + 4;
    }
    if (HasDataCenterId) {
      size += 1 + 4;
    }
    if (HasAppid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
    }
    if (HasProtocolVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtocolVersion);
    }
    if (HasBuild) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Build);
    }
    if (HasNetworkConfigVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NetworkConfigVersion);
    }
    if (HasMyUnixTime) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramGameserverPingReplyData other) {
    if (other == null) {
      return;
    }
    if (other.HasEchoRelayUnixTime) {
      EchoRelayUnixTime = other.EchoRelayUnixTime;
    }
    if (other.HasEcho) {
      Echo = other.Echo;
    }
    if (other.HasLegacyChallenge) {
      LegacyChallenge = other.LegacyChallenge;
    }
    if (other.HasLegacyRouterTimestamp) {
      LegacyRouterTimestamp = other.LegacyRouterTimestamp;
    }
    if (other.HasDataCenterId) {
      DataCenterId = other.DataCenterId;
    }
    if (other.HasAppid) {
      Appid = other.Appid;
    }
    if (other.HasProtocolVersion) {
      ProtocolVersion = other.ProtocolVersion;
    }
    if (other.HasBuild) {
      Build = other.Build;
    }
    if (other.HasNetworkConfigVersion) {
      NetworkConfigVersion = other.NetworkConfigVersion;
    }
    if (other.HasMyUnixTime) {
      MyUnixTime = other.MyUnixTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 21: {
          EchoRelayUnixTime = input.ReadFixed32();
          break;
        }
        case 25: {
          LegacyChallenge = input.ReadFixed64();
          break;
        }
        case 37: {
          LegacyRouterTimestamp = input.ReadFixed32();
          break;
        }
        case 45: {
          DataCenterId = input.ReadFixed32();
          break;
        }
        case 48: {
          Appid = input.ReadUInt32();
          break;
        }
        case 56: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 66: {
          Echo = input.ReadBytes();
          break;
        }
        case 74: {
          Build = input.ReadString();
          break;
        }
        case 80: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 93: {
          MyUnixTime = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 21: {
          EchoRelayUnixTime = input.ReadFixed32();
          break;
        }
        case 25: {
          LegacyChallenge = input.ReadFixed64();
          break;
        }
        case 37: {
          LegacyRouterTimestamp = input.ReadFixed32();
          break;
        }
        case 45: {
          DataCenterId = input.ReadFixed32();
          break;
        }
        case 48: {
          Appid = input.ReadUInt32();
          break;
        }
        case 56: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 66: {
          Echo = input.ReadBytes();
          break;
        }
        case 74: {
          Build = input.ReadString();
          break;
        }
        case 80: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 93: {
          MyUnixTime = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramNoSessionRelayToClient : pb::IMessage<CMsgSteamDatagramNoSessionRelayToClient>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramNoSessionRelayToClient> _parser = new pb::MessageParser<CMsgSteamDatagramNoSessionRelayToClient>(() => new CMsgSteamDatagramNoSessionRelayToClient());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramNoSessionRelayToClient> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToClient() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToClient(CMsgSteamDatagramNoSessionRelayToClient other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    yourPublicIp_ = other.yourPublicIp_;
    yourPublicPort_ = other.yourPublicPort_;
    serverTime_ = other.serverTime_;
    challenge_ = other.challenge_;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToClient Clone() {
    return new CMsgSteamDatagramNoSessionRelayToClient(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 7;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 32) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "your_public_ip" field.</summary>
  public const int YourPublicIpFieldNumber = 2;
  private readonly static uint YourPublicIpDefaultValue = 0;

  private uint yourPublicIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint YourPublicIp {
    get { if ((_hasBits0 & 1) != 0) { return yourPublicIp_; } else { return YourPublicIpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      yourPublicIp_ = value;
    }
  }
  /// <summary>Gets whether the "your_public_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourPublicIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "your_public_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourPublicIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "your_public_port" field.</summary>
  public const int YourPublicPortFieldNumber = 6;
  private readonly static uint YourPublicPortDefaultValue = 0;

  private uint yourPublicPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint YourPublicPort {
    get { if ((_hasBits0 & 16) != 0) { return yourPublicPort_; } else { return YourPublicPortDefaultValue; } }
    set {
      _hasBits0 |= 16;
      yourPublicPort_ = value;
    }
  }
  /// <summary>Gets whether the "your_public_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourPublicPort {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "your_public_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourPublicPort() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "server_time" field.</summary>
  public const int ServerTimeFieldNumber = 3;
  private readonly static uint ServerTimeDefaultValue = 0;

  private uint serverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerTime {
    get { if ((_hasBits0 & 2) != 0) { return serverTime_; } else { return ServerTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverTime_ = value;
    }
  }
  /// <summary>Gets whether the "server_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "server_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "challenge" field.</summary>
  public const int ChallengeFieldNumber = 4;
  private readonly static ulong ChallengeDefaultValue = 0UL;

  private ulong challenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Challenge {
    get { if ((_hasBits0 & 4) != 0) { return challenge_; } else { return ChallengeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      challenge_ = value;
    }
  }
  /// <summary>Gets whether the "challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallenge {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallenge() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 5;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 8) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 8;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramNoSessionRelayToClient);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramNoSessionRelayToClient other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (YourPublicIp != other.YourPublicIp) return false;
    if (YourPublicPort != other.YourPublicPort) return false;
    if (ServerTime != other.ServerTime) return false;
    if (Challenge != other.Challenge) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasYourPublicIp) hash ^= YourPublicIp.GetHashCode();
    if (HasYourPublicPort) hash ^= YourPublicPort.GetHashCode();
    if (HasServerTime) hash ^= ServerTime.GetHashCode();
    if (HasChallenge) hash ^= Challenge.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasYourPublicIp) {
      output.WriteRawTag(21);
      output.WriteFixed32(YourPublicIp);
    }
    if (HasServerTime) {
      output.WriteRawTag(29);
      output.WriteFixed32(ServerTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(33);
      output.WriteFixed64(Challenge);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(40);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasYourPublicPort) {
      output.WriteRawTag(53);
      output.WriteFixed32(YourPublicPort);
    }
    if (HasConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasYourPublicIp) {
      output.WriteRawTag(21);
      output.WriteFixed32(YourPublicIp);
    }
    if (HasServerTime) {
      output.WriteRawTag(29);
      output.WriteFixed32(ServerTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(33);
      output.WriteFixed64(Challenge);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(40);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasYourPublicPort) {
      output.WriteRawTag(53);
      output.WriteFixed32(YourPublicPort);
    }
    if (HasConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasYourPublicIp) {
      size += 1 + 4;
    }
    if (HasYourPublicPort) {
      size += 1 + 4;
    }
    if (HasServerTime) {
      size += 1 + 4;
    }
    if (HasChallenge) {
      size += 1 + 8;
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramNoSessionRelayToClient other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasYourPublicIp) {
      YourPublicIp = other.YourPublicIp;
    }
    if (other.HasYourPublicPort) {
      YourPublicPort = other.YourPublicPort;
    }
    if (other.HasServerTime) {
      ServerTime = other.ServerTime;
    }
    if (other.HasChallenge) {
      Challenge = other.Challenge;
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 21: {
          YourPublicIp = input.ReadFixed32();
          break;
        }
        case 29: {
          ServerTime = input.ReadFixed32();
          break;
        }
        case 33: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 40: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 53: {
          YourPublicPort = input.ReadFixed32();
          break;
        }
        case 61: {
          ConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 21: {
          YourPublicIp = input.ReadFixed32();
          break;
        }
        case 29: {
          ServerTime = input.ReadFixed32();
          break;
        }
        case 33: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 40: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 53: {
          YourPublicPort = input.ReadFixed32();
          break;
        }
        case 61: {
          ConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramNoSessionRelayToPeer : pb::IMessage<CMsgSteamDatagramNoSessionRelayToPeer>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramNoSessionRelayToPeer> _parser = new pb::MessageParser<CMsgSteamDatagramNoSessionRelayToPeer>(() => new CMsgSteamDatagramNoSessionRelayToPeer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramNoSessionRelayToPeer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToPeer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToPeer(CMsgSteamDatagramNoSessionRelayToPeer other) : this() {
    _hasBits0 = other._hasBits0;
    legacyRelaySessionId_ = other.legacyRelaySessionId_;
    fromRelaySessionId_ = other.fromRelaySessionId_;
    fromConnectionId_ = other.fromConnectionId_;
    kludgePad_ = other.kludgePad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoSessionRelayToPeer Clone() {
    return new CMsgSteamDatagramNoSessionRelayToPeer(this);
  }

  /// <summary>Field number for the "legacy_relay_session_id" field.</summary>
  public const int LegacyRelaySessionIdFieldNumber = 1;
  private readonly static uint LegacyRelaySessionIdDefaultValue = 0;

  private uint legacyRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyRelaySessionId {
    get { if ((_hasBits0 & 1) != 0) { return legacyRelaySessionId_; } else { return LegacyRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacyRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyRelaySessionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyRelaySessionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "from_relay_session_id" field.</summary>
  public const int FromRelaySessionIdFieldNumber = 2;
  private readonly static uint FromRelaySessionIdDefaultValue = 0;

  private uint fromRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromRelaySessionId {
    get { if ((_hasBits0 & 2) != 0) { return fromRelaySessionId_; } else { return FromRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fromRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromRelaySessionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "from_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromRelaySessionId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "from_connection_id" field.</summary>
  public const int FromConnectionIdFieldNumber = 7;
  private readonly static uint FromConnectionIdDefaultValue = 0;

  private uint fromConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromConnectionId {
    get { if ((_hasBits0 & 4) != 0) { return fromConnectionId_; } else { return FromConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fromConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromConnectionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "from_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromConnectionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "kludge_pad" field.</summary>
  public const int KludgePadFieldNumber = 99;
  private readonly static ulong KludgePadDefaultValue = 0UL;

  private ulong kludgePad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong KludgePad {
    get { if ((_hasBits0 & 8) != 0) { return kludgePad_; } else { return KludgePadDefaultValue; } }
    set {
      _hasBits0 |= 8;
      kludgePad_ = value;
    }
  }
  /// <summary>Gets whether the "kludge_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKludgePad {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "kludge_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKludgePad() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramNoSessionRelayToPeer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramNoSessionRelayToPeer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LegacyRelaySessionId != other.LegacyRelaySessionId) return false;
    if (FromRelaySessionId != other.FromRelaySessionId) return false;
    if (FromConnectionId != other.FromConnectionId) return false;
    if (KludgePad != other.KludgePad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLegacyRelaySessionId) hash ^= LegacyRelaySessionId.GetHashCode();
    if (HasFromRelaySessionId) hash ^= FromRelaySessionId.GetHashCode();
    if (HasFromConnectionId) hash ^= FromConnectionId.GetHashCode();
    if (HasKludgePad) hash ^= KludgePad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacyRelaySessionId) {
      output.WriteRawTag(8);
      output.WriteUInt32(LegacyRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(21);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasKludgePad) {
      output.WriteRawTag(153, 6);
      output.WriteFixed64(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacyRelaySessionId) {
      output.WriteRawTag(8);
      output.WriteUInt32(LegacyRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(21);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasKludgePad) {
      output.WriteRawTag(153, 6);
      output.WriteFixed64(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLegacyRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      size += 1 + 4;
    }
    if (HasFromConnectionId) {
      size += 1 + 4;
    }
    if (HasKludgePad) {
      size += 2 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramNoSessionRelayToPeer other) {
    if (other == null) {
      return;
    }
    if (other.HasLegacyRelaySessionId) {
      LegacyRelaySessionId = other.LegacyRelaySessionId;
    }
    if (other.HasFromRelaySessionId) {
      FromRelaySessionId = other.FromRelaySessionId;
    }
    if (other.HasFromConnectionId) {
      FromConnectionId = other.FromConnectionId;
    }
    if (other.HasKludgePad) {
      KludgePad = other.KludgePad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LegacyRelaySessionId = input.ReadUInt32();
          break;
        }
        case 21: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 61: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 793: {
          KludgePad = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LegacyRelaySessionId = input.ReadUInt32();
          break;
        }
        case 21: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 61: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 793: {
          KludgePad = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramClientPingSampleRequest : pb::IMessage<CMsgSteamDatagramClientPingSampleRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramClientPingSampleRequest> _parser = new pb::MessageParser<CMsgSteamDatagramClientPingSampleRequest>(() => new CMsgSteamDatagramClientPingSampleRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramClientPingSampleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleRequest(CMsgSteamDatagramClientPingSampleRequest other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleRequest Clone() {
    return new CMsgSteamDatagramClientPingSampleRequest(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramClientPingSampleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramClientPingSampleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramClientPingSampleRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramClientPingSampleReply : pb::IMessage<CMsgSteamDatagramClientPingSampleReply>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramClientPingSampleReply> _parser = new pb::MessageParser<CMsgSteamDatagramClientPingSampleReply>(() => new CMsgSteamDatagramClientPingSampleReply());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramClientPingSampleReply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleReply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleReply(CMsgSteamDatagramClientPingSampleReply other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    relayOverrideActive_ = other.relayOverrideActive_;
    pops_ = other.pops_.Clone();
    legacyDataCenters_ = other.legacyDataCenters_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientPingSampleReply Clone() {
    return new CMsgSteamDatagramClientPingSampleReply(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "relay_override_active" field.</summary>
  public const int RelayOverrideActiveFieldNumber = 5;
  private readonly static bool RelayOverrideActiveDefaultValue = false;

  private bool relayOverrideActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RelayOverrideActive {
    get { if ((_hasBits0 & 2) != 0) { return relayOverrideActive_; } else { return RelayOverrideActiveDefaultValue; } }
    set {
      _hasBits0 |= 2;
      relayOverrideActive_ = value;
    }
  }
  /// <summary>Gets whether the "relay_override_active" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayOverrideActive {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "relay_override_active" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayOverrideActive() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "pops" field.</summary>
  public const int PopsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramClientPingSampleReply.Types.POP> _repeated_pops_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP> pops_ = new pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP> Pops {
    get { return pops_; }
  }

  /// <summary>Field number for the "legacy_data_centers" field.</summary>
  public const int LegacyDataCentersFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter> _repeated_legacyDataCenters_codec
      = pb::FieldCodec.ForMessage(26, global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter> legacyDataCenters_ = new pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.LegacyDataCenter> LegacyDataCenters {
    get { return legacyDataCenters_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramClientPingSampleReply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramClientPingSampleReply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (RelayOverrideActive != other.RelayOverrideActive) return false;
    if(!pops_.Equals(other.pops_)) return false;
    if(!legacyDataCenters_.Equals(other.legacyDataCenters_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasRelayOverrideActive) hash ^= RelayOverrideActive.GetHashCode();
    hash ^= pops_.GetHashCode();
    hash ^= legacyDataCenters_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    pops_.WriteTo(output, _repeated_pops_codec);
    legacyDataCenters_.WriteTo(output, _repeated_legacyDataCenters_codec);
    if (HasRelayOverrideActive) {
      output.WriteRawTag(40);
      output.WriteBool(RelayOverrideActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    pops_.WriteTo(ref output, _repeated_pops_codec);
    legacyDataCenters_.WriteTo(ref output, _repeated_legacyDataCenters_codec);
    if (HasRelayOverrideActive) {
      output.WriteRawTag(40);
      output.WriteBool(RelayOverrideActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasRelayOverrideActive) {
      size += 1 + 1;
    }
    size += pops_.CalculateSize(_repeated_pops_codec);
    size += legacyDataCenters_.CalculateSize(_repeated_legacyDataCenters_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramClientPingSampleReply other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasRelayOverrideActive) {
      RelayOverrideActive = other.RelayOverrideActive;
    }
    pops_.Add(other.pops_);
    legacyDataCenters_.Add(other.legacyDataCenters_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          pops_.AddEntriesFrom(input, _repeated_pops_codec);
          break;
        }
        case 26: {
          legacyDataCenters_.AddEntriesFrom(input, _repeated_legacyDataCenters_codec);
          break;
        }
        case 40: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          pops_.AddEntriesFrom(ref input, _repeated_pops_codec);
          break;
        }
        case 26: {
          legacyDataCenters_.AddEntriesFrom(ref input, _repeated_legacyDataCenters_codec);
          break;
        }
        case 40: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramClientPingSampleReply message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class POP : pb::IMessage<POP>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<POP> _parser = new pb::MessageParser<POP>(() => new POP());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<POP> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramClientPingSampleReply.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public POP() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public POP(POP other) : this() {
        _hasBits0 = other._hasBits0;
        popId_ = other.popId_;
        defaultFrontPingMs_ = other.defaultFrontPingMs_;
        clusterPenalty_ = other.clusterPenalty_;
        altAddresses_ = other.altAddresses_.Clone();
        defaultE2EPingMs_ = other.defaultE2EPingMs_;
        defaultE2EScore_ = other.defaultE2EScore_;
        p2PViaPeerRelayPopId_ = other.p2PViaPeerRelayPopId_;
        bestDcPingMs_ = other.bestDcPingMs_;
        bestDcScore_ = other.bestDcScore_;
        bestDcViaRelayPopId_ = other.bestDcViaRelayPopId_;
        defaultDcPingMs_ = other.defaultDcPingMs_;
        defaultDcScore_ = other.defaultDcScore_;
        defaultDcViaRelayPopId_ = other.defaultDcViaRelayPopId_;
        testDcPingMs_ = other.testDcPingMs_;
        testDcScore_ = other.testDcScore_;
        testDcViaRelayPopId_ = other.testDcViaRelayPopId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public POP Clone() {
        return new POP(this);
      }

      /// <summary>Field number for the "pop_id" field.</summary>
      public const int PopIdFieldNumber = 1;
      private readonly static uint PopIdDefaultValue = 0;

      private uint popId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint PopId {
        get { if ((_hasBits0 & 1) != 0) { return popId_; } else { return PopIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          popId_ = value;
        }
      }
      /// <summary>Gets whether the "pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPopId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPopId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "default_front_ping_ms" field.</summary>
      public const int DefaultFrontPingMsFieldNumber = 2;
      private readonly static uint DefaultFrontPingMsDefaultValue = 0;

      private uint defaultFrontPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultFrontPingMs {
        get { if ((_hasBits0 & 2) != 0) { return defaultFrontPingMs_; } else { return DefaultFrontPingMsDefaultValue; } }
        set {
          _hasBits0 |= 2;
          defaultFrontPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "default_front_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultFrontPingMs {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "default_front_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultFrontPingMs() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "cluster_penalty" field.</summary>
      public const int ClusterPenaltyFieldNumber = 4;
      private readonly static uint ClusterPenaltyDefaultValue = 0;

      private uint clusterPenalty_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint ClusterPenalty {
        get { if ((_hasBits0 & 8) != 0) { return clusterPenalty_; } else { return ClusterPenaltyDefaultValue; } }
        set {
          _hasBits0 |= 8;
          clusterPenalty_ = value;
        }
      }
      /// <summary>Gets whether the "cluster_penalty" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasClusterPenalty {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "cluster_penalty" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearClusterPenalty() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "alt_addresses" field.</summary>
      public const int AltAddressesFieldNumber = 7;
      private static readonly pb::FieldCodec<global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress> _repeated_altAddresses_codec
          = pb::FieldCodec.ForMessage(58, global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress.Parser);
      private readonly pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress> altAddresses_ = new pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pbc::RepeatedField<global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Types.AltAddress> AltAddresses {
        get { return altAddresses_; }
      }

      /// <summary>Field number for the "default_e2e_ping_ms" field.</summary>
      public const int DefaultE2EPingMsFieldNumber = 3;
      private readonly static uint DefaultE2EPingMsDefaultValue = 0;

      private uint defaultE2EPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultE2EPingMs {
        get { if ((_hasBits0 & 4) != 0) { return defaultE2EPingMs_; } else { return DefaultE2EPingMsDefaultValue; } }
        set {
          _hasBits0 |= 4;
          defaultE2EPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "default_e2e_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultE2EPingMs {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "default_e2e_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultE2EPingMs() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "default_e2e_score" field.</summary>
      public const int DefaultE2EScoreFieldNumber = 5;
      private readonly static uint DefaultE2EScoreDefaultValue = 0;

      private uint defaultE2EScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultE2EScore {
        get { if ((_hasBits0 & 16) != 0) { return defaultE2EScore_; } else { return DefaultE2EScoreDefaultValue; } }
        set {
          _hasBits0 |= 16;
          defaultE2EScore_ = value;
        }
      }
      /// <summary>Gets whether the "default_e2e_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultE2EScore {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "default_e2e_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultE2EScore() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "p2p_via_peer_relay_pop_id" field.</summary>
      public const int P2PViaPeerRelayPopIdFieldNumber = 6;
      private readonly static uint P2PViaPeerRelayPopIdDefaultValue = 0;

      private uint p2PViaPeerRelayPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint P2PViaPeerRelayPopId {
        get { if ((_hasBits0 & 32) != 0) { return p2PViaPeerRelayPopId_; } else { return P2PViaPeerRelayPopIdDefaultValue; } }
        set {
          _hasBits0 |= 32;
          p2PViaPeerRelayPopId_ = value;
        }
      }
      /// <summary>Gets whether the "p2p_via_peer_relay_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasP2PViaPeerRelayPopId {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "p2p_via_peer_relay_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearP2PViaPeerRelayPopId() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "best_dc_ping_ms" field.</summary>
      public const int BestDcPingMsFieldNumber = 9;
      private readonly static uint BestDcPingMsDefaultValue = 0;

      private uint bestDcPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BestDcPingMs {
        get { if ((_hasBits0 & 64) != 0) { return bestDcPingMs_; } else { return BestDcPingMsDefaultValue; } }
        set {
          _hasBits0 |= 64;
          bestDcPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "best_dc_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBestDcPingMs {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "best_dc_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBestDcPingMs() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "best_dc_score" field.</summary>
      public const int BestDcScoreFieldNumber = 10;
      private readonly static uint BestDcScoreDefaultValue = 0;

      private uint bestDcScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BestDcScore {
        get { if ((_hasBits0 & 128) != 0) { return bestDcScore_; } else { return BestDcScoreDefaultValue; } }
        set {
          _hasBits0 |= 128;
          bestDcScore_ = value;
        }
      }
      /// <summary>Gets whether the "best_dc_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBestDcScore {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "best_dc_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBestDcScore() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "best_dc_via_relay_pop_id" field.</summary>
      public const int BestDcViaRelayPopIdFieldNumber = 11;
      private readonly static uint BestDcViaRelayPopIdDefaultValue = 0;

      private uint bestDcViaRelayPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BestDcViaRelayPopId {
        get { if ((_hasBits0 & 256) != 0) { return bestDcViaRelayPopId_; } else { return BestDcViaRelayPopIdDefaultValue; } }
        set {
          _hasBits0 |= 256;
          bestDcViaRelayPopId_ = value;
        }
      }
      /// <summary>Gets whether the "best_dc_via_relay_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBestDcViaRelayPopId {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "best_dc_via_relay_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBestDcViaRelayPopId() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "default_dc_ping_ms" field.</summary>
      public const int DefaultDcPingMsFieldNumber = 12;
      private readonly static uint DefaultDcPingMsDefaultValue = 0;

      private uint defaultDcPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultDcPingMs {
        get { if ((_hasBits0 & 512) != 0) { return defaultDcPingMs_; } else { return DefaultDcPingMsDefaultValue; } }
        set {
          _hasBits0 |= 512;
          defaultDcPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "default_dc_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultDcPingMs {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "default_dc_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultDcPingMs() {
        _hasBits0 &= ~512;
      }

      /// <summary>Field number for the "default_dc_score" field.</summary>
      public const int DefaultDcScoreFieldNumber = 13;
      private readonly static uint DefaultDcScoreDefaultValue = 0;

      private uint defaultDcScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultDcScore {
        get { if ((_hasBits0 & 1024) != 0) { return defaultDcScore_; } else { return DefaultDcScoreDefaultValue; } }
        set {
          _hasBits0 |= 1024;
          defaultDcScore_ = value;
        }
      }
      /// <summary>Gets whether the "default_dc_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultDcScore {
        get { return (_hasBits0 & 1024) != 0; }
      }
      /// <summary>Clears the value of the "default_dc_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultDcScore() {
        _hasBits0 &= ~1024;
      }

      /// <summary>Field number for the "default_dc_via_relay_pop_id" field.</summary>
      public const int DefaultDcViaRelayPopIdFieldNumber = 14;
      private readonly static uint DefaultDcViaRelayPopIdDefaultValue = 0;

      private uint defaultDcViaRelayPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DefaultDcViaRelayPopId {
        get { if ((_hasBits0 & 2048) != 0) { return defaultDcViaRelayPopId_; } else { return DefaultDcViaRelayPopIdDefaultValue; } }
        set {
          _hasBits0 |= 2048;
          defaultDcViaRelayPopId_ = value;
        }
      }
      /// <summary>Gets whether the "default_dc_via_relay_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDefaultDcViaRelayPopId {
        get { return (_hasBits0 & 2048) != 0; }
      }
      /// <summary>Clears the value of the "default_dc_via_relay_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDefaultDcViaRelayPopId() {
        _hasBits0 &= ~2048;
      }

      /// <summary>Field number for the "test_dc_ping_ms" field.</summary>
      public const int TestDcPingMsFieldNumber = 15;
      private readonly static uint TestDcPingMsDefaultValue = 0;

      private uint testDcPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint TestDcPingMs {
        get { if ((_hasBits0 & 4096) != 0) { return testDcPingMs_; } else { return TestDcPingMsDefaultValue; } }
        set {
          _hasBits0 |= 4096;
          testDcPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "test_dc_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTestDcPingMs {
        get { return (_hasBits0 & 4096) != 0; }
      }
      /// <summary>Clears the value of the "test_dc_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTestDcPingMs() {
        _hasBits0 &= ~4096;
      }

      /// <summary>Field number for the "test_dc_score" field.</summary>
      public const int TestDcScoreFieldNumber = 16;
      private readonly static uint TestDcScoreDefaultValue = 0;

      private uint testDcScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint TestDcScore {
        get { if ((_hasBits0 & 8192) != 0) { return testDcScore_; } else { return TestDcScoreDefaultValue; } }
        set {
          _hasBits0 |= 8192;
          testDcScore_ = value;
        }
      }
      /// <summary>Gets whether the "test_dc_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTestDcScore {
        get { return (_hasBits0 & 8192) != 0; }
      }
      /// <summary>Clears the value of the "test_dc_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTestDcScore() {
        _hasBits0 &= ~8192;
      }

      /// <summary>Field number for the "test_dc_via_relay_pop_id" field.</summary>
      public const int TestDcViaRelayPopIdFieldNumber = 17;
      private readonly static uint TestDcViaRelayPopIdDefaultValue = 0;

      private uint testDcViaRelayPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint TestDcViaRelayPopId {
        get { if ((_hasBits0 & 16384) != 0) { return testDcViaRelayPopId_; } else { return TestDcViaRelayPopIdDefaultValue; } }
        set {
          _hasBits0 |= 16384;
          testDcViaRelayPopId_ = value;
        }
      }
      /// <summary>Gets whether the "test_dc_via_relay_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTestDcViaRelayPopId {
        get { return (_hasBits0 & 16384) != 0; }
      }
      /// <summary>Clears the value of the "test_dc_via_relay_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTestDcViaRelayPopId() {
        _hasBits0 &= ~16384;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as POP);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(POP other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (PopId != other.PopId) return false;
        if (DefaultFrontPingMs != other.DefaultFrontPingMs) return false;
        if (ClusterPenalty != other.ClusterPenalty) return false;
        if(!altAddresses_.Equals(other.altAddresses_)) return false;
        if (DefaultE2EPingMs != other.DefaultE2EPingMs) return false;
        if (DefaultE2EScore != other.DefaultE2EScore) return false;
        if (P2PViaPeerRelayPopId != other.P2PViaPeerRelayPopId) return false;
        if (BestDcPingMs != other.BestDcPingMs) return false;
        if (BestDcScore != other.BestDcScore) return false;
        if (BestDcViaRelayPopId != other.BestDcViaRelayPopId) return false;
        if (DefaultDcPingMs != other.DefaultDcPingMs) return false;
        if (DefaultDcScore != other.DefaultDcScore) return false;
        if (DefaultDcViaRelayPopId != other.DefaultDcViaRelayPopId) return false;
        if (TestDcPingMs != other.TestDcPingMs) return false;
        if (TestDcScore != other.TestDcScore) return false;
        if (TestDcViaRelayPopId != other.TestDcViaRelayPopId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasPopId) hash ^= PopId.GetHashCode();
        if (HasDefaultFrontPingMs) hash ^= DefaultFrontPingMs.GetHashCode();
        if (HasClusterPenalty) hash ^= ClusterPenalty.GetHashCode();
        hash ^= altAddresses_.GetHashCode();
        if (HasDefaultE2EPingMs) hash ^= DefaultE2EPingMs.GetHashCode();
        if (HasDefaultE2EScore) hash ^= DefaultE2EScore.GetHashCode();
        if (HasP2PViaPeerRelayPopId) hash ^= P2PViaPeerRelayPopId.GetHashCode();
        if (HasBestDcPingMs) hash ^= BestDcPingMs.GetHashCode();
        if (HasBestDcScore) hash ^= BestDcScore.GetHashCode();
        if (HasBestDcViaRelayPopId) hash ^= BestDcViaRelayPopId.GetHashCode();
        if (HasDefaultDcPingMs) hash ^= DefaultDcPingMs.GetHashCode();
        if (HasDefaultDcScore) hash ^= DefaultDcScore.GetHashCode();
        if (HasDefaultDcViaRelayPopId) hash ^= DefaultDcViaRelayPopId.GetHashCode();
        if (HasTestDcPingMs) hash ^= TestDcPingMs.GetHashCode();
        if (HasTestDcScore) hash ^= TestDcScore.GetHashCode();
        if (HasTestDcViaRelayPopId) hash ^= TestDcViaRelayPopId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(PopId);
        }
        if (HasDefaultFrontPingMs) {
          output.WriteRawTag(16);
          output.WriteUInt32(DefaultFrontPingMs);
        }
        if (HasDefaultE2EPingMs) {
          output.WriteRawTag(24);
          output.WriteUInt32(DefaultE2EPingMs);
        }
        if (HasClusterPenalty) {
          output.WriteRawTag(32);
          output.WriteUInt32(ClusterPenalty);
        }
        if (HasDefaultE2EScore) {
          output.WriteRawTag(40);
          output.WriteUInt32(DefaultE2EScore);
        }
        if (HasP2PViaPeerRelayPopId) {
          output.WriteRawTag(53);
          output.WriteFixed32(P2PViaPeerRelayPopId);
        }
        altAddresses_.WriteTo(output, _repeated_altAddresses_codec);
        if (HasBestDcPingMs) {
          output.WriteRawTag(72);
          output.WriteUInt32(BestDcPingMs);
        }
        if (HasBestDcScore) {
          output.WriteRawTag(80);
          output.WriteUInt32(BestDcScore);
        }
        if (HasBestDcViaRelayPopId) {
          output.WriteRawTag(93);
          output.WriteFixed32(BestDcViaRelayPopId);
        }
        if (HasDefaultDcPingMs) {
          output.WriteRawTag(96);
          output.WriteUInt32(DefaultDcPingMs);
        }
        if (HasDefaultDcScore) {
          output.WriteRawTag(104);
          output.WriteUInt32(DefaultDcScore);
        }
        if (HasDefaultDcViaRelayPopId) {
          output.WriteRawTag(117);
          output.WriteFixed32(DefaultDcViaRelayPopId);
        }
        if (HasTestDcPingMs) {
          output.WriteRawTag(120);
          output.WriteUInt32(TestDcPingMs);
        }
        if (HasTestDcScore) {
          output.WriteRawTag(128, 1);
          output.WriteUInt32(TestDcScore);
        }
        if (HasTestDcViaRelayPopId) {
          output.WriteRawTag(141, 1);
          output.WriteFixed32(TestDcViaRelayPopId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(PopId);
        }
        if (HasDefaultFrontPingMs) {
          output.WriteRawTag(16);
          output.WriteUInt32(DefaultFrontPingMs);
        }
        if (HasDefaultE2EPingMs) {
          output.WriteRawTag(24);
          output.WriteUInt32(DefaultE2EPingMs);
        }
        if (HasClusterPenalty) {
          output.WriteRawTag(32);
          output.WriteUInt32(ClusterPenalty);
        }
        if (HasDefaultE2EScore) {
          output.WriteRawTag(40);
          output.WriteUInt32(DefaultE2EScore);
        }
        if (HasP2PViaPeerRelayPopId) {
          output.WriteRawTag(53);
          output.WriteFixed32(P2PViaPeerRelayPopId);
        }
        altAddresses_.WriteTo(ref output, _repeated_altAddresses_codec);
        if (HasBestDcPingMs) {
          output.WriteRawTag(72);
          output.WriteUInt32(BestDcPingMs);
        }
        if (HasBestDcScore) {
          output.WriteRawTag(80);
          output.WriteUInt32(BestDcScore);
        }
        if (HasBestDcViaRelayPopId) {
          output.WriteRawTag(93);
          output.WriteFixed32(BestDcViaRelayPopId);
        }
        if (HasDefaultDcPingMs) {
          output.WriteRawTag(96);
          output.WriteUInt32(DefaultDcPingMs);
        }
        if (HasDefaultDcScore) {
          output.WriteRawTag(104);
          output.WriteUInt32(DefaultDcScore);
        }
        if (HasDefaultDcViaRelayPopId) {
          output.WriteRawTag(117);
          output.WriteFixed32(DefaultDcViaRelayPopId);
        }
        if (HasTestDcPingMs) {
          output.WriteRawTag(120);
          output.WriteUInt32(TestDcPingMs);
        }
        if (HasTestDcScore) {
          output.WriteRawTag(128, 1);
          output.WriteUInt32(TestDcScore);
        }
        if (HasTestDcViaRelayPopId) {
          output.WriteRawTag(141, 1);
          output.WriteFixed32(TestDcViaRelayPopId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasPopId) {
          size += 1 + 4;
        }
        if (HasDefaultFrontPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultFrontPingMs);
        }
        if (HasClusterPenalty) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClusterPenalty);
        }
        size += altAddresses_.CalculateSize(_repeated_altAddresses_codec);
        if (HasDefaultE2EPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultE2EPingMs);
        }
        if (HasDefaultE2EScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultE2EScore);
        }
        if (HasP2PViaPeerRelayPopId) {
          size += 1 + 4;
        }
        if (HasBestDcPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestDcPingMs);
        }
        if (HasBestDcScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestDcScore);
        }
        if (HasBestDcViaRelayPopId) {
          size += 1 + 4;
        }
        if (HasDefaultDcPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultDcPingMs);
        }
        if (HasDefaultDcScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultDcScore);
        }
        if (HasDefaultDcViaRelayPopId) {
          size += 1 + 4;
        }
        if (HasTestDcPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TestDcPingMs);
        }
        if (HasTestDcScore) {
          size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TestDcScore);
        }
        if (HasTestDcViaRelayPopId) {
          size += 2 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(POP other) {
        if (other == null) {
          return;
        }
        if (other.HasPopId) {
          PopId = other.PopId;
        }
        if (other.HasDefaultFrontPingMs) {
          DefaultFrontPingMs = other.DefaultFrontPingMs;
        }
        if (other.HasClusterPenalty) {
          ClusterPenalty = other.ClusterPenalty;
        }
        altAddresses_.Add(other.altAddresses_);
        if (other.HasDefaultE2EPingMs) {
          DefaultE2EPingMs = other.DefaultE2EPingMs;
        }
        if (other.HasDefaultE2EScore) {
          DefaultE2EScore = other.DefaultE2EScore;
        }
        if (other.HasP2PViaPeerRelayPopId) {
          P2PViaPeerRelayPopId = other.P2PViaPeerRelayPopId;
        }
        if (other.HasBestDcPingMs) {
          BestDcPingMs = other.BestDcPingMs;
        }
        if (other.HasBestDcScore) {
          BestDcScore = other.BestDcScore;
        }
        if (other.HasBestDcViaRelayPopId) {
          BestDcViaRelayPopId = other.BestDcViaRelayPopId;
        }
        if (other.HasDefaultDcPingMs) {
          DefaultDcPingMs = other.DefaultDcPingMs;
        }
        if (other.HasDefaultDcScore) {
          DefaultDcScore = other.DefaultDcScore;
        }
        if (other.HasDefaultDcViaRelayPopId) {
          DefaultDcViaRelayPopId = other.DefaultDcViaRelayPopId;
        }
        if (other.HasTestDcPingMs) {
          TestDcPingMs = other.TestDcPingMs;
        }
        if (other.HasTestDcScore) {
          TestDcScore = other.TestDcScore;
        }
        if (other.HasTestDcViaRelayPopId) {
          TestDcViaRelayPopId = other.TestDcViaRelayPopId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              PopId = input.ReadFixed32();
              break;
            }
            case 16: {
              DefaultFrontPingMs = input.ReadUInt32();
              break;
            }
            case 24: {
              DefaultE2EPingMs = input.ReadUInt32();
              break;
            }
            case 32: {
              ClusterPenalty = input.ReadUInt32();
              break;
            }
            case 40: {
              DefaultE2EScore = input.ReadUInt32();
              break;
            }
            case 53: {
              P2PViaPeerRelayPopId = input.ReadFixed32();
              break;
            }
            case 58: {
              altAddresses_.AddEntriesFrom(input, _repeated_altAddresses_codec);
              break;
            }
            case 72: {
              BestDcPingMs = input.ReadUInt32();
              break;
            }
            case 80: {
              BestDcScore = input.ReadUInt32();
              break;
            }
            case 93: {
              BestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 96: {
              DefaultDcPingMs = input.ReadUInt32();
              break;
            }
            case 104: {
              DefaultDcScore = input.ReadUInt32();
              break;
            }
            case 117: {
              DefaultDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 120: {
              TestDcPingMs = input.ReadUInt32();
              break;
            }
            case 128: {
              TestDcScore = input.ReadUInt32();
              break;
            }
            case 141: {
              TestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              PopId = input.ReadFixed32();
              break;
            }
            case 16: {
              DefaultFrontPingMs = input.ReadUInt32();
              break;
            }
            case 24: {
              DefaultE2EPingMs = input.ReadUInt32();
              break;
            }
            case 32: {
              ClusterPenalty = input.ReadUInt32();
              break;
            }
            case 40: {
              DefaultE2EScore = input.ReadUInt32();
              break;
            }
            case 53: {
              P2PViaPeerRelayPopId = input.ReadFixed32();
              break;
            }
            case 58: {
              altAddresses_.AddEntriesFrom(ref input, _repeated_altAddresses_codec);
              break;
            }
            case 72: {
              BestDcPingMs = input.ReadUInt32();
              break;
            }
            case 80: {
              BestDcScore = input.ReadUInt32();
              break;
            }
            case 93: {
              BestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 96: {
              DefaultDcPingMs = input.ReadUInt32();
              break;
            }
            case 104: {
              DefaultDcScore = input.ReadUInt32();
              break;
            }
            case 117: {
              DefaultDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 120: {
              TestDcPingMs = input.ReadUInt32();
              break;
            }
            case 128: {
              TestDcScore = input.ReadUInt32();
              break;
            }
            case 141: {
              TestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
          }
        }
      }
      #endif

      #region Nested types
      /// <summary>Container for nested types declared in the POP message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static partial class Types {
        public sealed partial class AltAddress : pb::IMessage<AltAddress>
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            , pb::IBufferMessage
        #endif
        {
          private static readonly pb::MessageParser<AltAddress> _parser = new pb::MessageParser<AltAddress>(() => new AltAddress());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pb::MessageParser<AltAddress> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::CMsgSteamDatagramClientPingSampleReply.Types.POP.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public AltAddress() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public AltAddress(AltAddress other) : this() {
            _hasBits0 = other._hasBits0;
            id_ = other.id_;
            frontPingMs_ = other.frontPingMs_;
            penalty_ = other.penalty_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public AltAddress Clone() {
            return new AltAddress(this);
          }

          /// <summary>Field number for the "id" field.</summary>
          public const int IdFieldNumber = 1;
          private readonly static string IdDefaultValue = "";

          private string id_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public string Id {
            get { return id_ ?? IdDefaultValue; }
            set {
              id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasId {
            get { return id_ != null; }
          }
          /// <summary>Clears the value of the "id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearId() {
            id_ = null;
          }

          /// <summary>Field number for the "front_ping_ms" field.</summary>
          public const int FrontPingMsFieldNumber = 2;
          private readonly static uint FrontPingMsDefaultValue = 0;

          private uint frontPingMs_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public uint FrontPingMs {
            get { if ((_hasBits0 & 1) != 0) { return frontPingMs_; } else { return FrontPingMsDefaultValue; } }
            set {
              _hasBits0 |= 1;
              frontPingMs_ = value;
            }
          }
          /// <summary>Gets whether the "front_ping_ms" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasFrontPingMs {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "front_ping_ms" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearFrontPingMs() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "penalty" field.</summary>
          public const int PenaltyFieldNumber = 3;
          private readonly static uint PenaltyDefaultValue = 0;

          private uint penalty_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public uint Penalty {
            get { if ((_hasBits0 & 2) != 0) { return penalty_; } else { return PenaltyDefaultValue; } }
            set {
              _hasBits0 |= 2;
              penalty_ = value;
            }
          }
          /// <summary>Gets whether the "penalty" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool HasPenalty {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "penalty" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void ClearPenalty() {
            _hasBits0 &= ~2;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override bool Equals(object other) {
            return Equals(other as AltAddress);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public bool Equals(AltAddress other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Id != other.Id) return false;
            if (FrontPingMs != other.FrontPingMs) return false;
            if (Penalty != other.Penalty) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override int GetHashCode() {
            int hash = 1;
            if (HasId) hash ^= Id.GetHashCode();
            if (HasFrontPingMs) hash ^= FrontPingMs.GetHashCode();
            if (HasPenalty) hash ^= Penalty.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void WriteTo(pb::CodedOutputStream output) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
          #else
            if (HasId) {
              output.WriteRawTag(10);
              output.WriteString(Id);
            }
            if (HasFrontPingMs) {
              output.WriteRawTag(16);
              output.WriteUInt32(FrontPingMs);
            }
            if (HasPenalty) {
              output.WriteRawTag(24);
              output.WriteUInt32(Penalty);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
            if (HasId) {
              output.WriteRawTag(10);
              output.WriteString(Id);
            }
            if (HasFrontPingMs) {
              output.WriteRawTag(16);
              output.WriteUInt32(FrontPingMs);
            }
            if (HasPenalty) {
              output.WriteRawTag(24);
              output.WriteUInt32(Penalty);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(ref output);
            }
          }
          #endif

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public int CalculateSize() {
            int size = 0;
            if (HasId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (HasFrontPingMs) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrontPingMs);
            }
            if (HasPenalty) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Penalty);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(AltAddress other) {
            if (other == null) {
              return;
            }
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasFrontPingMs) {
              FrontPingMs = other.FrontPingMs;
            }
            if (other.HasPenalty) {
              Penalty = other.Penalty;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          public void MergeFrom(pb::CodedInputStream input) {
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
          #else
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Id = input.ReadString();
                  break;
                }
                case 16: {
                  FrontPingMs = input.ReadUInt32();
                  break;
                }
                case 24: {
                  Penalty = input.ReadUInt32();
                  break;
                }
              }
            }
          #endif
          }

          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
          void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                  break;
                case 10: {
                  Id = input.ReadString();
                  break;
                }
                case 16: {
                  FrontPingMs = input.ReadUInt32();
                  break;
                }
                case 24: {
                  Penalty = input.ReadUInt32();
                  break;
                }
              }
            }
          }
          #endif

        }

      }
      #endregion

    }

    public sealed partial class LegacyDataCenter : pb::IMessage<LegacyDataCenter>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<LegacyDataCenter> _parser = new pb::MessageParser<LegacyDataCenter>(() => new LegacyDataCenter());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<LegacyDataCenter> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramClientPingSampleReply.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public LegacyDataCenter() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public LegacyDataCenter(LegacyDataCenter other) : this() {
        _hasBits0 = other._hasBits0;
        dataCenterId_ = other.dataCenterId_;
        bestDcViaRelayPopId_ = other.bestDcViaRelayPopId_;
        bestDcPingMs_ = other.bestDcPingMs_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public LegacyDataCenter Clone() {
        return new LegacyDataCenter(this);
      }

      /// <summary>Field number for the "data_center_id" field.</summary>
      public const int DataCenterIdFieldNumber = 1;
      private readonly static uint DataCenterIdDefaultValue = 0;

      private uint dataCenterId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint DataCenterId {
        get { if ((_hasBits0 & 1) != 0) { return dataCenterId_; } else { return DataCenterIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          dataCenterId_ = value;
        }
      }
      /// <summary>Gets whether the "data_center_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDataCenterId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "data_center_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDataCenterId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "best_dc_via_relay_pop_id" field.</summary>
      public const int BestDcViaRelayPopIdFieldNumber = 2;
      private readonly static uint BestDcViaRelayPopIdDefaultValue = 0;

      private uint bestDcViaRelayPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BestDcViaRelayPopId {
        get { if ((_hasBits0 & 2) != 0) { return bestDcViaRelayPopId_; } else { return BestDcViaRelayPopIdDefaultValue; } }
        set {
          _hasBits0 |= 2;
          bestDcViaRelayPopId_ = value;
        }
      }
      /// <summary>Gets whether the "best_dc_via_relay_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBestDcViaRelayPopId {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "best_dc_via_relay_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBestDcViaRelayPopId() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "best_dc_ping_ms" field.</summary>
      public const int BestDcPingMsFieldNumber = 3;
      private readonly static uint BestDcPingMsDefaultValue = 0;

      private uint bestDcPingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BestDcPingMs {
        get { if ((_hasBits0 & 4) != 0) { return bestDcPingMs_; } else { return BestDcPingMsDefaultValue; } }
        set {
          _hasBits0 |= 4;
          bestDcPingMs_ = value;
        }
      }
      /// <summary>Gets whether the "best_dc_ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBestDcPingMs {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "best_dc_ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBestDcPingMs() {
        _hasBits0 &= ~4;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as LegacyDataCenter);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(LegacyDataCenter other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (DataCenterId != other.DataCenterId) return false;
        if (BestDcViaRelayPopId != other.BestDcViaRelayPopId) return false;
        if (BestDcPingMs != other.BestDcPingMs) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDataCenterId) hash ^= DataCenterId.GetHashCode();
        if (HasBestDcViaRelayPopId) hash ^= BestDcViaRelayPopId.GetHashCode();
        if (HasBestDcPingMs) hash ^= BestDcPingMs.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasDataCenterId) {
          output.WriteRawTag(13);
          output.WriteFixed32(DataCenterId);
        }
        if (HasBestDcViaRelayPopId) {
          output.WriteRawTag(21);
          output.WriteFixed32(BestDcViaRelayPopId);
        }
        if (HasBestDcPingMs) {
          output.WriteRawTag(24);
          output.WriteUInt32(BestDcPingMs);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasDataCenterId) {
          output.WriteRawTag(13);
          output.WriteFixed32(DataCenterId);
        }
        if (HasBestDcViaRelayPopId) {
          output.WriteRawTag(21);
          output.WriteFixed32(BestDcViaRelayPopId);
        }
        if (HasBestDcPingMs) {
          output.WriteRawTag(24);
          output.WriteUInt32(BestDcPingMs);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasDataCenterId) {
          size += 1 + 4;
        }
        if (HasBestDcViaRelayPopId) {
          size += 1 + 4;
        }
        if (HasBestDcPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestDcPingMs);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(LegacyDataCenter other) {
        if (other == null) {
          return;
        }
        if (other.HasDataCenterId) {
          DataCenterId = other.DataCenterId;
        }
        if (other.HasBestDcViaRelayPopId) {
          BestDcViaRelayPopId = other.BestDcViaRelayPopId;
        }
        if (other.HasBestDcPingMs) {
          BestDcPingMs = other.BestDcPingMs;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              DataCenterId = input.ReadFixed32();
              break;
            }
            case 21: {
              BestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 24: {
              BestDcPingMs = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              DataCenterId = input.ReadFixed32();
              break;
            }
            case 21: {
              BestDcViaRelayPopId = input.ReadFixed32();
              break;
            }
            case 24: {
              BestDcPingMs = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramClientSwitchedPrimary : pb::IMessage<CMsgSteamDatagramClientSwitchedPrimary>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramClientSwitchedPrimary> _parser = new pb::MessageParser<CMsgSteamDatagramClientSwitchedPrimary>(() => new CMsgSteamDatagramClientSwitchedPrimary());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramClientSwitchedPrimary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientSwitchedPrimary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientSwitchedPrimary(CMsgSteamDatagramClientSwitchedPrimary other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    fromIp_ = other.fromIp_;
    fromPort_ = other.fromPort_;
    fromRouterCluster_ = other.fromRouterCluster_;
    fromActiveTime_ = other.fromActiveTime_;
    fromActivePacketsRecv_ = other.fromActivePacketsRecv_;
    fromDroppedReason_ = other.fromDroppedReason_;
    gapMs_ = other.gapMs_;
    fromQualityNow_ = other.fromQualityNow_ != null ? other.fromQualityNow_.Clone() : null;
    toQualityNow_ = other.toQualityNow_ != null ? other.toQualityNow_.Clone() : null;
    fromQualityThen_ = other.fromQualityThen_ != null ? other.fromQualityThen_.Clone() : null;
    toQualityThen_ = other.toQualityThen_ != null ? other.toQualityThen_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramClientSwitchedPrimary Clone() {
    return new CMsgSteamDatagramClientSwitchedPrimary(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "from_ip" field.</summary>
  public const int FromIpFieldNumber = 2;
  private readonly static uint FromIpDefaultValue = 0;

  private uint fromIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromIp {
    get { if ((_hasBits0 & 2) != 0) { return fromIp_; } else { return FromIpDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fromIp_ = value;
    }
  }
  /// <summary>Gets whether the "from_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromIp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "from_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromIp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "from_port" field.</summary>
  public const int FromPortFieldNumber = 3;
  private readonly static uint FromPortDefaultValue = 0;

  private uint fromPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromPort {
    get { if ((_hasBits0 & 4) != 0) { return fromPort_; } else { return FromPortDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fromPort_ = value;
    }
  }
  /// <summary>Gets whether the "from_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromPort {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "from_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromPort() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "from_router_cluster" field.</summary>
  public const int FromRouterClusterFieldNumber = 4;
  private readonly static uint FromRouterClusterDefaultValue = 0;

  private uint fromRouterCluster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromRouterCluster {
    get { if ((_hasBits0 & 8) != 0) { return fromRouterCluster_; } else { return FromRouterClusterDefaultValue; } }
    set {
      _hasBits0 |= 8;
      fromRouterCluster_ = value;
    }
  }
  /// <summary>Gets whether the "from_router_cluster" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromRouterCluster {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "from_router_cluster" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromRouterCluster() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "from_active_time" field.</summary>
  public const int FromActiveTimeFieldNumber = 5;
  private readonly static uint FromActiveTimeDefaultValue = 0;

  private uint fromActiveTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromActiveTime {
    get { if ((_hasBits0 & 16) != 0) { return fromActiveTime_; } else { return FromActiveTimeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      fromActiveTime_ = value;
    }
  }
  /// <summary>Gets whether the "from_active_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromActiveTime {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "from_active_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromActiveTime() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "from_active_packets_recv" field.</summary>
  public const int FromActivePacketsRecvFieldNumber = 6;
  private readonly static uint FromActivePacketsRecvDefaultValue = 0;

  private uint fromActivePacketsRecv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromActivePacketsRecv {
    get { if ((_hasBits0 & 32) != 0) { return fromActivePacketsRecv_; } else { return FromActivePacketsRecvDefaultValue; } }
    set {
      _hasBits0 |= 32;
      fromActivePacketsRecv_ = value;
    }
  }
  /// <summary>Gets whether the "from_active_packets_recv" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromActivePacketsRecv {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "from_active_packets_recv" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromActivePacketsRecv() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "from_dropped_reason" field.</summary>
  public const int FromDroppedReasonFieldNumber = 7;
  private readonly static string FromDroppedReasonDefaultValue = "";

  private string fromDroppedReason_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string FromDroppedReason {
    get { return fromDroppedReason_ ?? FromDroppedReasonDefaultValue; }
    set {
      fromDroppedReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "from_dropped_reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromDroppedReason {
    get { return fromDroppedReason_ != null; }
  }
  /// <summary>Clears the value of the "from_dropped_reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromDroppedReason() {
    fromDroppedReason_ = null;
  }

  /// <summary>Field number for the "gap_ms" field.</summary>
  public const int GapMsFieldNumber = 8;
  private readonly static uint GapMsDefaultValue = 0;

  private uint gapMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GapMs {
    get { if ((_hasBits0 & 64) != 0) { return gapMs_; } else { return GapMsDefaultValue; } }
    set {
      _hasBits0 |= 64;
      gapMs_ = value;
    }
  }
  /// <summary>Gets whether the "gap_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGapMs {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "gap_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGapMs() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "from_quality_now" field.</summary>
  public const int FromQualityNowFieldNumber = 9;
  private global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality fromQualityNow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality FromQualityNow {
    get { return fromQualityNow_; }
    set {
      fromQualityNow_ = value;
    }
  }

  /// <summary>Field number for the "to_quality_now" field.</summary>
  public const int ToQualityNowFieldNumber = 10;
  private global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality toQualityNow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality ToQualityNow {
    get { return toQualityNow_; }
    set {
      toQualityNow_ = value;
    }
  }

  /// <summary>Field number for the "from_quality_then" field.</summary>
  public const int FromQualityThenFieldNumber = 11;
  private global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality fromQualityThen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality FromQualityThen {
    get { return fromQualityThen_; }
    set {
      fromQualityThen_ = value;
    }
  }

  /// <summary>Field number for the "to_quality_then" field.</summary>
  public const int ToQualityThenFieldNumber = 12;
  private global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality toQualityThen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality ToQualityThen {
    get { return toQualityThen_; }
    set {
      toQualityThen_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramClientSwitchedPrimary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramClientSwitchedPrimary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (FromIp != other.FromIp) return false;
    if (FromPort != other.FromPort) return false;
    if (FromRouterCluster != other.FromRouterCluster) return false;
    if (FromActiveTime != other.FromActiveTime) return false;
    if (FromActivePacketsRecv != other.FromActivePacketsRecv) return false;
    if (FromDroppedReason != other.FromDroppedReason) return false;
    if (GapMs != other.GapMs) return false;
    if (!object.Equals(FromQualityNow, other.FromQualityNow)) return false;
    if (!object.Equals(ToQualityNow, other.ToQualityNow)) return false;
    if (!object.Equals(FromQualityThen, other.FromQualityThen)) return false;
    if (!object.Equals(ToQualityThen, other.ToQualityThen)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasFromIp) hash ^= FromIp.GetHashCode();
    if (HasFromPort) hash ^= FromPort.GetHashCode();
    if (HasFromRouterCluster) hash ^= FromRouterCluster.GetHashCode();
    if (HasFromActiveTime) hash ^= FromActiveTime.GetHashCode();
    if (HasFromActivePacketsRecv) hash ^= FromActivePacketsRecv.GetHashCode();
    if (HasFromDroppedReason) hash ^= FromDroppedReason.GetHashCode();
    if (HasGapMs) hash ^= GapMs.GetHashCode();
    if (fromQualityNow_ != null) hash ^= FromQualityNow.GetHashCode();
    if (toQualityNow_ != null) hash ^= ToQualityNow.GetHashCode();
    if (fromQualityThen_ != null) hash ^= FromQualityThen.GetHashCode();
    if (toQualityThen_ != null) hash ^= ToQualityThen.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasFromIp) {
      output.WriteRawTag(21);
      output.WriteFixed32(FromIp);
    }
    if (HasFromPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(FromPort);
    }
    if (HasFromRouterCluster) {
      output.WriteRawTag(37);
      output.WriteFixed32(FromRouterCluster);
    }
    if (HasFromActiveTime) {
      output.WriteRawTag(40);
      output.WriteUInt32(FromActiveTime);
    }
    if (HasFromActivePacketsRecv) {
      output.WriteRawTag(48);
      output.WriteUInt32(FromActivePacketsRecv);
    }
    if (HasFromDroppedReason) {
      output.WriteRawTag(58);
      output.WriteString(FromDroppedReason);
    }
    if (HasGapMs) {
      output.WriteRawTag(64);
      output.WriteUInt32(GapMs);
    }
    if (fromQualityNow_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(FromQualityNow);
    }
    if (toQualityNow_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(ToQualityNow);
    }
    if (fromQualityThen_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(FromQualityThen);
    }
    if (toQualityThen_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(ToQualityThen);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasFromIp) {
      output.WriteRawTag(21);
      output.WriteFixed32(FromIp);
    }
    if (HasFromPort) {
      output.WriteRawTag(24);
      output.WriteUInt32(FromPort);
    }
    if (HasFromRouterCluster) {
      output.WriteRawTag(37);
      output.WriteFixed32(FromRouterCluster);
    }
    if (HasFromActiveTime) {
      output.WriteRawTag(40);
      output.WriteUInt32(FromActiveTime);
    }
    if (HasFromActivePacketsRecv) {
      output.WriteRawTag(48);
      output.WriteUInt32(FromActivePacketsRecv);
    }
    if (HasFromDroppedReason) {
      output.WriteRawTag(58);
      output.WriteString(FromDroppedReason);
    }
    if (HasGapMs) {
      output.WriteRawTag(64);
      output.WriteUInt32(GapMs);
    }
    if (fromQualityNow_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(FromQualityNow);
    }
    if (toQualityNow_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(ToQualityNow);
    }
    if (fromQualityThen_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(FromQualityThen);
    }
    if (toQualityThen_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(ToQualityThen);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasFromIp) {
      size += 1 + 4;
    }
    if (HasFromPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPort);
    }
    if (HasFromRouterCluster) {
      size += 1 + 4;
    }
    if (HasFromActiveTime) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromActiveTime);
    }
    if (HasFromActivePacketsRecv) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromActivePacketsRecv);
    }
    if (HasFromDroppedReason) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FromDroppedReason);
    }
    if (HasGapMs) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GapMs);
    }
    if (fromQualityNow_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromQualityNow);
    }
    if (toQualityNow_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToQualityNow);
    }
    if (fromQualityThen_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromQualityThen);
    }
    if (toQualityThen_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToQualityThen);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramClientSwitchedPrimary other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasFromIp) {
      FromIp = other.FromIp;
    }
    if (other.HasFromPort) {
      FromPort = other.FromPort;
    }
    if (other.HasFromRouterCluster) {
      FromRouterCluster = other.FromRouterCluster;
    }
    if (other.HasFromActiveTime) {
      FromActiveTime = other.FromActiveTime;
    }
    if (other.HasFromActivePacketsRecv) {
      FromActivePacketsRecv = other.FromActivePacketsRecv;
    }
    if (other.HasFromDroppedReason) {
      FromDroppedReason = other.FromDroppedReason;
    }
    if (other.HasGapMs) {
      GapMs = other.GapMs;
    }
    if (other.fromQualityNow_ != null) {
      if (fromQualityNow_ == null) {
        FromQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
      }
      FromQualityNow.MergeFrom(other.FromQualityNow);
    }
    if (other.toQualityNow_ != null) {
      if (toQualityNow_ == null) {
        ToQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
      }
      ToQualityNow.MergeFrom(other.ToQualityNow);
    }
    if (other.fromQualityThen_ != null) {
      if (fromQualityThen_ == null) {
        FromQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
      }
      FromQualityThen.MergeFrom(other.FromQualityThen);
    }
    if (other.toQualityThen_ != null) {
      if (toQualityThen_ == null) {
        ToQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
      }
      ToQualityThen.MergeFrom(other.ToQualityThen);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 21: {
          FromIp = input.ReadFixed32();
          break;
        }
        case 24: {
          FromPort = input.ReadUInt32();
          break;
        }
        case 37: {
          FromRouterCluster = input.ReadFixed32();
          break;
        }
        case 40: {
          FromActiveTime = input.ReadUInt32();
          break;
        }
        case 48: {
          FromActivePacketsRecv = input.ReadUInt32();
          break;
        }
        case 58: {
          FromDroppedReason = input.ReadString();
          break;
        }
        case 64: {
          GapMs = input.ReadUInt32();
          break;
        }
        case 74: {
          if (fromQualityNow_ == null) {
            FromQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(FromQualityNow);
          break;
        }
        case 82: {
          if (toQualityNow_ == null) {
            ToQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(ToQualityNow);
          break;
        }
        case 90: {
          if (fromQualityThen_ == null) {
            FromQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(FromQualityThen);
          break;
        }
        case 98: {
          if (toQualityThen_ == null) {
            ToQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(ToQualityThen);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 21: {
          FromIp = input.ReadFixed32();
          break;
        }
        case 24: {
          FromPort = input.ReadUInt32();
          break;
        }
        case 37: {
          FromRouterCluster = input.ReadFixed32();
          break;
        }
        case 40: {
          FromActiveTime = input.ReadUInt32();
          break;
        }
        case 48: {
          FromActivePacketsRecv = input.ReadUInt32();
          break;
        }
        case 58: {
          FromDroppedReason = input.ReadString();
          break;
        }
        case 64: {
          GapMs = input.ReadUInt32();
          break;
        }
        case 74: {
          if (fromQualityNow_ == null) {
            FromQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(FromQualityNow);
          break;
        }
        case 82: {
          if (toQualityNow_ == null) {
            ToQualityNow = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(ToQualityNow);
          break;
        }
        case 90: {
          if (fromQualityThen_ == null) {
            FromQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(FromQualityThen);
          break;
        }
        case 98: {
          if (toQualityThen_ == null) {
            ToQualityThen = new global::CMsgSteamDatagramClientSwitchedPrimary.Types.RouterQuality();
          }
          input.ReadMessage(ToQualityThen);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramClientSwitchedPrimary message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class RouterQuality : pb::IMessage<RouterQuality>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<RouterQuality> _parser = new pb::MessageParser<RouterQuality>(() => new RouterQuality());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<RouterQuality> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramClientSwitchedPrimary.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouterQuality() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouterQuality(RouterQuality other) : this() {
        _hasBits0 = other._hasBits0;
        score_ = other.score_;
        frontPing_ = other.frontPing_;
        backPing_ = other.backPing_;
        secondsUntilDown_ = other.secondsUntilDown_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RouterQuality Clone() {
        return new RouterQuality(this);
      }

      /// <summary>Field number for the "score" field.</summary>
      public const int ScoreFieldNumber = 1;
      private readonly static uint ScoreDefaultValue = 0;

      private uint score_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Score {
        get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
        set {
          _hasBits0 |= 1;
          score_ = value;
        }
      }
      /// <summary>Gets whether the "score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasScore {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearScore() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "front_ping" field.</summary>
      public const int FrontPingFieldNumber = 2;
      private readonly static uint FrontPingDefaultValue = 0;

      private uint frontPing_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint FrontPing {
        get { if ((_hasBits0 & 2) != 0) { return frontPing_; } else { return FrontPingDefaultValue; } }
        set {
          _hasBits0 |= 2;
          frontPing_ = value;
        }
      }
      /// <summary>Gets whether the "front_ping" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFrontPing {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "front_ping" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFrontPing() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "back_ping" field.</summary>
      public const int BackPingFieldNumber = 3;
      private readonly static uint BackPingDefaultValue = 0;

      private uint backPing_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BackPing {
        get { if ((_hasBits0 & 4) != 0) { return backPing_; } else { return BackPingDefaultValue; } }
        set {
          _hasBits0 |= 4;
          backPing_ = value;
        }
      }
      /// <summary>Gets whether the "back_ping" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBackPing {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "back_ping" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBackPing() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "seconds_until_down" field.</summary>
      public const int SecondsUntilDownFieldNumber = 4;
      private readonly static uint SecondsUntilDownDefaultValue = 0;

      private uint secondsUntilDown_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint SecondsUntilDown {
        get { if ((_hasBits0 & 8) != 0) { return secondsUntilDown_; } else { return SecondsUntilDownDefaultValue; } }
        set {
          _hasBits0 |= 8;
          secondsUntilDown_ = value;
        }
      }
      /// <summary>Gets whether the "seconds_until_down" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSecondsUntilDown {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "seconds_until_down" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSecondsUntilDown() {
        _hasBits0 &= ~8;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as RouterQuality);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(RouterQuality other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Score != other.Score) return false;
        if (FrontPing != other.FrontPing) return false;
        if (BackPing != other.BackPing) return false;
        if (SecondsUntilDown != other.SecondsUntilDown) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasScore) hash ^= Score.GetHashCode();
        if (HasFrontPing) hash ^= FrontPing.GetHashCode();
        if (HasBackPing) hash ^= BackPing.GetHashCode();
        if (HasSecondsUntilDown) hash ^= SecondsUntilDown.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasScore) {
          output.WriteRawTag(8);
          output.WriteUInt32(Score);
        }
        if (HasFrontPing) {
          output.WriteRawTag(16);
          output.WriteUInt32(FrontPing);
        }
        if (HasBackPing) {
          output.WriteRawTag(24);
          output.WriteUInt32(BackPing);
        }
        if (HasSecondsUntilDown) {
          output.WriteRawTag(32);
          output.WriteUInt32(SecondsUntilDown);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasScore) {
          output.WriteRawTag(8);
          output.WriteUInt32(Score);
        }
        if (HasFrontPing) {
          output.WriteRawTag(16);
          output.WriteUInt32(FrontPing);
        }
        if (HasBackPing) {
          output.WriteRawTag(24);
          output.WriteUInt32(BackPing);
        }
        if (HasSecondsUntilDown) {
          output.WriteRawTag(32);
          output.WriteUInt32(SecondsUntilDown);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
        }
        if (HasFrontPing) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrontPing);
        }
        if (HasBackPing) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BackPing);
        }
        if (HasSecondsUntilDown) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilDown);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(RouterQuality other) {
        if (other == null) {
          return;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasFrontPing) {
          FrontPing = other.FrontPing;
        }
        if (other.HasBackPing) {
          BackPing = other.BackPing;
        }
        if (other.HasSecondsUntilDown) {
          SecondsUntilDown = other.SecondsUntilDown;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Score = input.ReadUInt32();
              break;
            }
            case 16: {
              FrontPing = input.ReadUInt32();
              break;
            }
            case 24: {
              BackPing = input.ReadUInt32();
              break;
            }
            case 32: {
              SecondsUntilDown = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 8: {
              Score = input.ReadUInt32();
              break;
            }
            case 16: {
              FrontPing = input.ReadUInt32();
              break;
            }
            case 24: {
              BackPing = input.ReadUInt32();
              break;
            }
            case 32: {
              SecondsUntilDown = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramConnectRequest : pb::IMessage<CMsgSteamDatagramConnectRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectRequest> _parser = new pb::MessageParser<CMsgSteamDatagramConnectRequest>(() => new CMsgSteamDatagramConnectRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectRequest(CMsgSteamDatagramConnectRequest other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    myTimestamp_ = other.myTimestamp_;
    pingEstMs_ = other.pingEstMs_;
    virtualPort_ = other.virtualPort_;
    gameserverRelaySessionId_ = other.gameserverRelaySessionId_;
    crypt_ = other.crypt_ != null ? other.crypt_.Clone() : null;
    cert_ = other.cert_ != null ? other.cert_.Clone() : null;
    routingSecret_ = other.routingSecret_;
    legacyClientSteamId_ = other.legacyClientSteamId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectRequest Clone() {
    return new CMsgSteamDatagramConnectRequest(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "my_timestamp" field.</summary>
  public const int MyTimestampFieldNumber = 4;
  private readonly static ulong MyTimestampDefaultValue = 0UL;

  private ulong myTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong MyTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return myTimestamp_; } else { return MyTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      myTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "my_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMyTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "my_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMyTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ping_est_ms" field.</summary>
  public const int PingEstMsFieldNumber = 5;
  private readonly static uint PingEstMsDefaultValue = 0;

  private uint pingEstMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PingEstMs {
    get { if ((_hasBits0 & 16) != 0) { return pingEstMs_; } else { return PingEstMsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      pingEstMs_ = value;
    }
  }
  /// <summary>Gets whether the "ping_est_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPingEstMs {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ping_est_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPingEstMs() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "virtual_port" field.</summary>
  public const int VirtualPortFieldNumber = 9;
  private readonly static uint VirtualPortDefaultValue = 0;

  private uint virtualPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint VirtualPort {
    get { if ((_hasBits0 & 32) != 0) { return virtualPort_; } else { return VirtualPortDefaultValue; } }
    set {
      _hasBits0 |= 32;
      virtualPort_ = value;
    }
  }
  /// <summary>Gets whether the "virtual_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVirtualPort {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "virtual_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVirtualPort() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "gameserver_relay_session_id" field.</summary>
  public const int GameserverRelaySessionIdFieldNumber = 2;
  private readonly static uint GameserverRelaySessionIdDefaultValue = 0;

  private uint gameserverRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GameserverRelaySessionId {
    get { if ((_hasBits0 & 2) != 0) { return gameserverRelaySessionId_; } else { return GameserverRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gameserverRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "gameserver_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameserverRelaySessionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "gameserver_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameserverRelaySessionId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "crypt" field.</summary>
  public const int CryptFieldNumber = 6;
  private global::CMsgSteamDatagramSessionCryptInfoSigned crypt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramSessionCryptInfoSigned Crypt {
    get { return crypt_; }
    set {
      crypt_ = value;
    }
  }

  /// <summary>Field number for the "cert" field.</summary>
  public const int CertFieldNumber = 7;
  private global::CMsgSteamDatagramCertificateSigned cert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned Cert {
    get { return cert_; }
    set {
      cert_ = value;
    }
  }

  /// <summary>Field number for the "routing_secret" field.</summary>
  public const int RoutingSecretFieldNumber = 10;
  private readonly static ulong RoutingSecretDefaultValue = 0UL;

  private ulong routingSecret_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RoutingSecret {
    get { if ((_hasBits0 & 64) != 0) { return routingSecret_; } else { return RoutingSecretDefaultValue; } }
    set {
      _hasBits0 |= 64;
      routingSecret_ = value;
    }
  }
  /// <summary>Gets whether the "routing_secret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutingSecret {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "routing_secret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutingSecret() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "legacy_client_steam_id" field.</summary>
  public const int LegacyClientSteamIdFieldNumber = 3;
  private readonly static ulong LegacyClientSteamIdDefaultValue = 0UL;

  private ulong legacyClientSteamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyClientSteamId {
    get { if ((_hasBits0 & 4) != 0) { return legacyClientSteamId_; } else { return LegacyClientSteamIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      legacyClientSteamId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_client_steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyClientSteamId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "legacy_client_steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyClientSteamId() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (MyTimestamp != other.MyTimestamp) return false;
    if (PingEstMs != other.PingEstMs) return false;
    if (VirtualPort != other.VirtualPort) return false;
    if (GameserverRelaySessionId != other.GameserverRelaySessionId) return false;
    if (!object.Equals(Crypt, other.Crypt)) return false;
    if (!object.Equals(Cert, other.Cert)) return false;
    if (RoutingSecret != other.RoutingSecret) return false;
    if (LegacyClientSteamId != other.LegacyClientSteamId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasMyTimestamp) hash ^= MyTimestamp.GetHashCode();
    if (HasPingEstMs) hash ^= PingEstMs.GetHashCode();
    if (HasVirtualPort) hash ^= VirtualPort.GetHashCode();
    if (HasGameserverRelaySessionId) hash ^= GameserverRelaySessionId.GetHashCode();
    if (crypt_ != null) hash ^= Crypt.GetHashCode();
    if (cert_ != null) hash ^= Cert.GetHashCode();
    if (HasRoutingSecret) hash ^= RoutingSecret.GetHashCode();
    if (HasLegacyClientSteamId) hash ^= LegacyClientSteamId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameserverRelaySessionId);
    }
    if (HasLegacyClientSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyClientSteamId);
    }
    if (HasMyTimestamp) {
      output.WriteRawTag(33);
      output.WriteFixed64(MyTimestamp);
    }
    if (HasPingEstMs) {
      output.WriteRawTag(40);
      output.WriteUInt32(PingEstMs);
    }
    if (crypt_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Crypt);
    }
    if (cert_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Cert);
    }
    if (HasVirtualPort) {
      output.WriteRawTag(72);
      output.WriteUInt32(VirtualPort);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(81);
      output.WriteFixed64(RoutingSecret);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameserverRelaySessionId);
    }
    if (HasLegacyClientSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyClientSteamId);
    }
    if (HasMyTimestamp) {
      output.WriteRawTag(33);
      output.WriteFixed64(MyTimestamp);
    }
    if (HasPingEstMs) {
      output.WriteRawTag(40);
      output.WriteUInt32(PingEstMs);
    }
    if (crypt_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Crypt);
    }
    if (cert_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Cert);
    }
    if (HasVirtualPort) {
      output.WriteRawTag(72);
      output.WriteUInt32(VirtualPort);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(81);
      output.WriteFixed64(RoutingSecret);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasMyTimestamp) {
      size += 1 + 8;
    }
    if (HasPingEstMs) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingEstMs);
    }
    if (HasVirtualPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VirtualPort);
    }
    if (HasGameserverRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameserverRelaySessionId);
    }
    if (crypt_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crypt);
    }
    if (cert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cert);
    }
    if (HasRoutingSecret) {
      size += 1 + 8;
    }
    if (HasLegacyClientSteamId) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasMyTimestamp) {
      MyTimestamp = other.MyTimestamp;
    }
    if (other.HasPingEstMs) {
      PingEstMs = other.PingEstMs;
    }
    if (other.HasVirtualPort) {
      VirtualPort = other.VirtualPort;
    }
    if (other.HasGameserverRelaySessionId) {
      GameserverRelaySessionId = other.GameserverRelaySessionId;
    }
    if (other.crypt_ != null) {
      if (crypt_ == null) {
        Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
      }
      Crypt.MergeFrom(other.Crypt);
    }
    if (other.cert_ != null) {
      if (cert_ == null) {
        Cert = new global::CMsgSteamDatagramCertificateSigned();
      }
      Cert.MergeFrom(other.Cert);
    }
    if (other.HasRoutingSecret) {
      RoutingSecret = other.RoutingSecret;
    }
    if (other.HasLegacyClientSteamId) {
      LegacyClientSteamId = other.LegacyClientSteamId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 16: {
          GameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyClientSteamId = input.ReadFixed64();
          break;
        }
        case 33: {
          MyTimestamp = input.ReadFixed64();
          break;
        }
        case 40: {
          PingEstMs = input.ReadUInt32();
          break;
        }
        case 50: {
          if (crypt_ == null) {
            Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
          }
          input.ReadMessage(Crypt);
          break;
        }
        case 58: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 72: {
          VirtualPort = input.ReadUInt32();
          break;
        }
        case 81: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 16: {
          GameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyClientSteamId = input.ReadFixed64();
          break;
        }
        case 33: {
          MyTimestamp = input.ReadFixed64();
          break;
        }
        case 40: {
          PingEstMs = input.ReadUInt32();
          break;
        }
        case 50: {
          if (crypt_ == null) {
            Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
          }
          input.ReadMessage(Crypt);
          break;
        }
        case 58: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 72: {
          VirtualPort = input.ReadUInt32();
          break;
        }
        case 81: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramConnectOK : pb::IMessage<CMsgSteamDatagramConnectOK>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectOK> _parser = new pb::MessageParser<CMsgSteamDatagramConnectOK>(() => new CMsgSteamDatagramConnectOK());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectOK> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectOK() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectOK(CMsgSteamDatagramConnectOK other) : this() {
    _hasBits0 = other._hasBits0;
    clientConnectionId_ = other.clientConnectionId_;
    serverConnectionId_ = other.serverConnectionId_;
    yourTimestamp_ = other.yourTimestamp_;
    delayTimeUsec_ = other.delayTimeUsec_;
    gameserverRelaySessionId_ = other.gameserverRelaySessionId_;
    crypt_ = other.crypt_ != null ? other.crypt_.Clone() : null;
    cert_ = other.cert_ != null ? other.cert_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectOK Clone() {
    return new CMsgSteamDatagramConnectOK(this);
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 1;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "server_connection_id" field.</summary>
  public const int ServerConnectionIdFieldNumber = 7;
  private readonly static uint ServerConnectionIdDefaultValue = 0;

  private uint serverConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerConnectionId {
    get { if ((_hasBits0 & 16) != 0) { return serverConnectionId_; } else { return ServerConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      serverConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "server_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerConnectionId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "server_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerConnectionId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "your_timestamp" field.</summary>
  public const int YourTimestampFieldNumber = 3;
  private readonly static ulong YourTimestampDefaultValue = 0UL;

  private ulong yourTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong YourTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return yourTimestamp_; } else { return YourTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      yourTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "your_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYourTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "your_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYourTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "delay_time_usec" field.</summary>
  public const int DelayTimeUsecFieldNumber = 4;
  private readonly static uint DelayTimeUsecDefaultValue = 0;

  private uint delayTimeUsec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DelayTimeUsec {
    get { if ((_hasBits0 & 8) != 0) { return delayTimeUsec_; } else { return DelayTimeUsecDefaultValue; } }
    set {
      _hasBits0 |= 8;
      delayTimeUsec_ = value;
    }
  }
  /// <summary>Gets whether the "delay_time_usec" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDelayTimeUsec {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "delay_time_usec" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDelayTimeUsec() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "gameserver_relay_session_id" field.</summary>
  public const int GameserverRelaySessionIdFieldNumber = 2;
  private readonly static uint GameserverRelaySessionIdDefaultValue = 0;

  private uint gameserverRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GameserverRelaySessionId {
    get { if ((_hasBits0 & 2) != 0) { return gameserverRelaySessionId_; } else { return GameserverRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gameserverRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "gameserver_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameserverRelaySessionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "gameserver_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameserverRelaySessionId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "crypt" field.</summary>
  public const int CryptFieldNumber = 5;
  private global::CMsgSteamDatagramSessionCryptInfoSigned crypt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramSessionCryptInfoSigned Crypt {
    get { return crypt_; }
    set {
      crypt_ = value;
    }
  }

  /// <summary>Field number for the "cert" field.</summary>
  public const int CertFieldNumber = 6;
  private global::CMsgSteamDatagramCertificateSigned cert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned Cert {
    get { return cert_; }
    set {
      cert_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectOK);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectOK other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (ServerConnectionId != other.ServerConnectionId) return false;
    if (YourTimestamp != other.YourTimestamp) return false;
    if (DelayTimeUsec != other.DelayTimeUsec) return false;
    if (GameserverRelaySessionId != other.GameserverRelaySessionId) return false;
    if (!object.Equals(Crypt, other.Crypt)) return false;
    if (!object.Equals(Cert, other.Cert)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasServerConnectionId) hash ^= ServerConnectionId.GetHashCode();
    if (HasYourTimestamp) hash ^= YourTimestamp.GetHashCode();
    if (HasDelayTimeUsec) hash ^= DelayTimeUsec.GetHashCode();
    if (HasGameserverRelaySessionId) hash ^= GameserverRelaySessionId.GetHashCode();
    if (crypt_ != null) hash ^= Crypt.GetHashCode();
    if (cert_ != null) hash ^= Cert.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClientConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameserverRelaySessionId);
    }
    if (HasYourTimestamp) {
      output.WriteRawTag(25);
      output.WriteFixed64(YourTimestamp);
    }
    if (HasDelayTimeUsec) {
      output.WriteRawTag(32);
      output.WriteUInt32(DelayTimeUsec);
    }
    if (crypt_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Crypt);
    }
    if (cert_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Cert);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ServerConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClientConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameserverRelaySessionId);
    }
    if (HasYourTimestamp) {
      output.WriteRawTag(25);
      output.WriteFixed64(YourTimestamp);
    }
    if (HasDelayTimeUsec) {
      output.WriteRawTag(32);
      output.WriteUInt32(DelayTimeUsec);
    }
    if (crypt_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Crypt);
    }
    if (cert_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Cert);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ServerConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasServerConnectionId) {
      size += 1 + 4;
    }
    if (HasYourTimestamp) {
      size += 1 + 8;
    }
    if (HasDelayTimeUsec) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DelayTimeUsec);
    }
    if (HasGameserverRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameserverRelaySessionId);
    }
    if (crypt_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crypt);
    }
    if (cert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cert);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectOK other) {
    if (other == null) {
      return;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasServerConnectionId) {
      ServerConnectionId = other.ServerConnectionId;
    }
    if (other.HasYourTimestamp) {
      YourTimestamp = other.YourTimestamp;
    }
    if (other.HasDelayTimeUsec) {
      DelayTimeUsec = other.DelayTimeUsec;
    }
    if (other.HasGameserverRelaySessionId) {
      GameserverRelaySessionId = other.GameserverRelaySessionId;
    }
    if (other.crypt_ != null) {
      if (crypt_ == null) {
        Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
      }
      Crypt.MergeFrom(other.Crypt);
    }
    if (other.cert_ != null) {
      if (cert_ == null) {
        Cert = new global::CMsgSteamDatagramCertificateSigned();
      }
      Cert.MergeFrom(other.Cert);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 16: {
          GameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          YourTimestamp = input.ReadFixed64();
          break;
        }
        case 32: {
          DelayTimeUsec = input.ReadUInt32();
          break;
        }
        case 42: {
          if (crypt_ == null) {
            Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
          }
          input.ReadMessage(Crypt);
          break;
        }
        case 50: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 61: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 16: {
          GameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          YourTimestamp = input.ReadFixed64();
          break;
        }
        case 32: {
          DelayTimeUsec = input.ReadUInt32();
          break;
        }
        case 42: {
          if (crypt_ == null) {
            Crypt = new global::CMsgSteamDatagramSessionCryptInfoSigned();
          }
          input.ReadMessage(Crypt);
          break;
        }
        case 50: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 61: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamNetworkingP2PSDRRoutingSummary : pb::IMessage<CMsgSteamNetworkingP2PSDRRoutingSummary>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamNetworkingP2PSDRRoutingSummary> _parser = new pb::MessageParser<CMsgSteamNetworkingP2PSDRRoutingSummary>(() => new CMsgSteamNetworkingP2PSDRRoutingSummary());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamNetworkingP2PSDRRoutingSummary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingP2PSDRRoutingSummary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingP2PSDRRoutingSummary(CMsgSteamNetworkingP2PSDRRoutingSummary other) : this() {
    _hasBits0 = other._hasBits0;
    initialPing_ = other.initialPing_;
    initialPingFrontLocal_ = other.initialPingFrontLocal_;
    initialPingFrontRemote_ = other.initialPingFrontRemote_;
    initialScore_ = other.initialScore_;
    initialPopLocal_ = other.initialPopLocal_;
    initialPopRemote_ = other.initialPopRemote_;
    bestPing_ = other.bestPing_;
    bestPingFrontLocal_ = other.bestPingFrontLocal_;
    bestPingFrontRemote_ = other.bestPingFrontRemote_;
    bestScore_ = other.bestScore_;
    bestPopLocal_ = other.bestPopLocal_;
    bestPopRemote_ = other.bestPopRemote_;
    bestTime_ = other.bestTime_;
    negotiationMs_ = other.negotiationMs_;
    selectedSeconds_ = other.selectedSeconds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamNetworkingP2PSDRRoutingSummary Clone() {
    return new CMsgSteamNetworkingP2PSDRRoutingSummary(this);
  }

  /// <summary>Field number for the "initial_ping" field.</summary>
  public const int InitialPingFieldNumber = 1;
  private readonly static uint InitialPingDefaultValue = 0;

  private uint initialPing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialPing {
    get { if ((_hasBits0 & 1) != 0) { return initialPing_; } else { return InitialPingDefaultValue; } }
    set {
      _hasBits0 |= 1;
      initialPing_ = value;
    }
  }
  /// <summary>Gets whether the "initial_ping" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialPing {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "initial_ping" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialPing() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "initial_ping_front_local" field.</summary>
  public const int InitialPingFrontLocalFieldNumber = 2;
  private readonly static uint InitialPingFrontLocalDefaultValue = 0;

  private uint initialPingFrontLocal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialPingFrontLocal {
    get { if ((_hasBits0 & 2) != 0) { return initialPingFrontLocal_; } else { return InitialPingFrontLocalDefaultValue; } }
    set {
      _hasBits0 |= 2;
      initialPingFrontLocal_ = value;
    }
  }
  /// <summary>Gets whether the "initial_ping_front_local" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialPingFrontLocal {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "initial_ping_front_local" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialPingFrontLocal() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "initial_ping_front_remote" field.</summary>
  public const int InitialPingFrontRemoteFieldNumber = 3;
  private readonly static uint InitialPingFrontRemoteDefaultValue = 0;

  private uint initialPingFrontRemote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialPingFrontRemote {
    get { if ((_hasBits0 & 4) != 0) { return initialPingFrontRemote_; } else { return InitialPingFrontRemoteDefaultValue; } }
    set {
      _hasBits0 |= 4;
      initialPingFrontRemote_ = value;
    }
  }
  /// <summary>Gets whether the "initial_ping_front_remote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialPingFrontRemote {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "initial_ping_front_remote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialPingFrontRemote() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "initial_score" field.</summary>
  public const int InitialScoreFieldNumber = 4;
  private readonly static uint InitialScoreDefaultValue = 0;

  private uint initialScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialScore {
    get { if ((_hasBits0 & 8) != 0) { return initialScore_; } else { return InitialScoreDefaultValue; } }
    set {
      _hasBits0 |= 8;
      initialScore_ = value;
    }
  }
  /// <summary>Gets whether the "initial_score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialScore {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "initial_score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialScore() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "initial_pop_local" field.</summary>
  public const int InitialPopLocalFieldNumber = 5;
  private readonly static uint InitialPopLocalDefaultValue = 0;

  private uint initialPopLocal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialPopLocal {
    get { if ((_hasBits0 & 16) != 0) { return initialPopLocal_; } else { return InitialPopLocalDefaultValue; } }
    set {
      _hasBits0 |= 16;
      initialPopLocal_ = value;
    }
  }
  /// <summary>Gets whether the "initial_pop_local" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialPopLocal {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "initial_pop_local" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialPopLocal() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "initial_pop_remote" field.</summary>
  public const int InitialPopRemoteFieldNumber = 6;
  private readonly static uint InitialPopRemoteDefaultValue = 0;

  private uint initialPopRemote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InitialPopRemote {
    get { if ((_hasBits0 & 32) != 0) { return initialPopRemote_; } else { return InitialPopRemoteDefaultValue; } }
    set {
      _hasBits0 |= 32;
      initialPopRemote_ = value;
    }
  }
  /// <summary>Gets whether the "initial_pop_remote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInitialPopRemote {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "initial_pop_remote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInitialPopRemote() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "best_ping" field.</summary>
  public const int BestPingFieldNumber = 11;
  private readonly static uint BestPingDefaultValue = 0;

  private uint bestPing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestPing {
    get { if ((_hasBits0 & 256) != 0) { return bestPing_; } else { return BestPingDefaultValue; } }
    set {
      _hasBits0 |= 256;
      bestPing_ = value;
    }
  }
  /// <summary>Gets whether the "best_ping" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestPing {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "best_ping" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestPing() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "best_ping_front_local" field.</summary>
  public const int BestPingFrontLocalFieldNumber = 12;
  private readonly static uint BestPingFrontLocalDefaultValue = 0;

  private uint bestPingFrontLocal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestPingFrontLocal {
    get { if ((_hasBits0 & 512) != 0) { return bestPingFrontLocal_; } else { return BestPingFrontLocalDefaultValue; } }
    set {
      _hasBits0 |= 512;
      bestPingFrontLocal_ = value;
    }
  }
  /// <summary>Gets whether the "best_ping_front_local" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestPingFrontLocal {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "best_ping_front_local" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestPingFrontLocal() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "best_ping_front_remote" field.</summary>
  public const int BestPingFrontRemoteFieldNumber = 13;
  private readonly static uint BestPingFrontRemoteDefaultValue = 0;

  private uint bestPingFrontRemote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestPingFrontRemote {
    get { if ((_hasBits0 & 1024) != 0) { return bestPingFrontRemote_; } else { return BestPingFrontRemoteDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      bestPingFrontRemote_ = value;
    }
  }
  /// <summary>Gets whether the "best_ping_front_remote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestPingFrontRemote {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "best_ping_front_remote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestPingFrontRemote() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "best_score" field.</summary>
  public const int BestScoreFieldNumber = 14;
  private readonly static uint BestScoreDefaultValue = 0;

  private uint bestScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestScore {
    get { if ((_hasBits0 & 2048) != 0) { return bestScore_; } else { return BestScoreDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      bestScore_ = value;
    }
  }
  /// <summary>Gets whether the "best_score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestScore {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "best_score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestScore() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "best_pop_local" field.</summary>
  public const int BestPopLocalFieldNumber = 15;
  private readonly static uint BestPopLocalDefaultValue = 0;

  private uint bestPopLocal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestPopLocal {
    get { if ((_hasBits0 & 4096) != 0) { return bestPopLocal_; } else { return BestPopLocalDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      bestPopLocal_ = value;
    }
  }
  /// <summary>Gets whether the "best_pop_local" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestPopLocal {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "best_pop_local" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestPopLocal() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "best_pop_remote" field.</summary>
  public const int BestPopRemoteFieldNumber = 16;
  private readonly static uint BestPopRemoteDefaultValue = 0;

  private uint bestPopRemote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestPopRemote {
    get { if ((_hasBits0 & 8192) != 0) { return bestPopRemote_; } else { return BestPopRemoteDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      bestPopRemote_ = value;
    }
  }
  /// <summary>Gets whether the "best_pop_remote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestPopRemote {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "best_pop_remote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestPopRemote() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "best_time" field.</summary>
  public const int BestTimeFieldNumber = 17;
  private readonly static uint BestTimeDefaultValue = 0;

  private uint bestTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BestTime {
    get { if ((_hasBits0 & 16384) != 0) { return bestTime_; } else { return BestTimeDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      bestTime_ = value;
    }
  }
  /// <summary>Gets whether the "best_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBestTime {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "best_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBestTime() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "negotiation_ms" field.</summary>
  public const int NegotiationMsFieldNumber = 7;
  private readonly static uint NegotiationMsDefaultValue = 0;

  private uint negotiationMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NegotiationMs {
    get { if ((_hasBits0 & 64) != 0) { return negotiationMs_; } else { return NegotiationMsDefaultValue; } }
    set {
      _hasBits0 |= 64;
      negotiationMs_ = value;
    }
  }
  /// <summary>Gets whether the "negotiation_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNegotiationMs {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "negotiation_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNegotiationMs() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "selected_seconds" field.</summary>
  public const int SelectedSecondsFieldNumber = 8;
  private readonly static uint SelectedSecondsDefaultValue = 0;

  private uint selectedSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SelectedSeconds {
    get { if ((_hasBits0 & 128) != 0) { return selectedSeconds_; } else { return SelectedSecondsDefaultValue; } }
    set {
      _hasBits0 |= 128;
      selectedSeconds_ = value;
    }
  }
  /// <summary>Gets whether the "selected_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSelectedSeconds {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "selected_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSelectedSeconds() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamNetworkingP2PSDRRoutingSummary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamNetworkingP2PSDRRoutingSummary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (InitialPing != other.InitialPing) return false;
    if (InitialPingFrontLocal != other.InitialPingFrontLocal) return false;
    if (InitialPingFrontRemote != other.InitialPingFrontRemote) return false;
    if (InitialScore != other.InitialScore) return false;
    if (InitialPopLocal != other.InitialPopLocal) return false;
    if (InitialPopRemote != other.InitialPopRemote) return false;
    if (BestPing != other.BestPing) return false;
    if (BestPingFrontLocal != other.BestPingFrontLocal) return false;
    if (BestPingFrontRemote != other.BestPingFrontRemote) return false;
    if (BestScore != other.BestScore) return false;
    if (BestPopLocal != other.BestPopLocal) return false;
    if (BestPopRemote != other.BestPopRemote) return false;
    if (BestTime != other.BestTime) return false;
    if (NegotiationMs != other.NegotiationMs) return false;
    if (SelectedSeconds != other.SelectedSeconds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasInitialPing) hash ^= InitialPing.GetHashCode();
    if (HasInitialPingFrontLocal) hash ^= InitialPingFrontLocal.GetHashCode();
    if (HasInitialPingFrontRemote) hash ^= InitialPingFrontRemote.GetHashCode();
    if (HasInitialScore) hash ^= InitialScore.GetHashCode();
    if (HasInitialPopLocal) hash ^= InitialPopLocal.GetHashCode();
    if (HasInitialPopRemote) hash ^= InitialPopRemote.GetHashCode();
    if (HasBestPing) hash ^= BestPing.GetHashCode();
    if (HasBestPingFrontLocal) hash ^= BestPingFrontLocal.GetHashCode();
    if (HasBestPingFrontRemote) hash ^= BestPingFrontRemote.GetHashCode();
    if (HasBestScore) hash ^= BestScore.GetHashCode();
    if (HasBestPopLocal) hash ^= BestPopLocal.GetHashCode();
    if (HasBestPopRemote) hash ^= BestPopRemote.GetHashCode();
    if (HasBestTime) hash ^= BestTime.GetHashCode();
    if (HasNegotiationMs) hash ^= NegotiationMs.GetHashCode();
    if (HasSelectedSeconds) hash ^= SelectedSeconds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasInitialPing) {
      output.WriteRawTag(8);
      output.WriteUInt32(InitialPing);
    }
    if (HasInitialPingFrontLocal) {
      output.WriteRawTag(16);
      output.WriteUInt32(InitialPingFrontLocal);
    }
    if (HasInitialPingFrontRemote) {
      output.WriteRawTag(24);
      output.WriteUInt32(InitialPingFrontRemote);
    }
    if (HasInitialScore) {
      output.WriteRawTag(32);
      output.WriteUInt32(InitialScore);
    }
    if (HasInitialPopLocal) {
      output.WriteRawTag(45);
      output.WriteFixed32(InitialPopLocal);
    }
    if (HasInitialPopRemote) {
      output.WriteRawTag(53);
      output.WriteFixed32(InitialPopRemote);
    }
    if (HasNegotiationMs) {
      output.WriteRawTag(56);
      output.WriteUInt32(NegotiationMs);
    }
    if (HasSelectedSeconds) {
      output.WriteRawTag(64);
      output.WriteUInt32(SelectedSeconds);
    }
    if (HasBestPing) {
      output.WriteRawTag(88);
      output.WriteUInt32(BestPing);
    }
    if (HasBestPingFrontLocal) {
      output.WriteRawTag(96);
      output.WriteUInt32(BestPingFrontLocal);
    }
    if (HasBestPingFrontRemote) {
      output.WriteRawTag(104);
      output.WriteUInt32(BestPingFrontRemote);
    }
    if (HasBestScore) {
      output.WriteRawTag(112);
      output.WriteUInt32(BestScore);
    }
    if (HasBestPopLocal) {
      output.WriteRawTag(125);
      output.WriteFixed32(BestPopLocal);
    }
    if (HasBestPopRemote) {
      output.WriteRawTag(133, 1);
      output.WriteFixed32(BestPopRemote);
    }
    if (HasBestTime) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(BestTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasInitialPing) {
      output.WriteRawTag(8);
      output.WriteUInt32(InitialPing);
    }
    if (HasInitialPingFrontLocal) {
      output.WriteRawTag(16);
      output.WriteUInt32(InitialPingFrontLocal);
    }
    if (HasInitialPingFrontRemote) {
      output.WriteRawTag(24);
      output.WriteUInt32(InitialPingFrontRemote);
    }
    if (HasInitialScore) {
      output.WriteRawTag(32);
      output.WriteUInt32(InitialScore);
    }
    if (HasInitialPopLocal) {
      output.WriteRawTag(45);
      output.WriteFixed32(InitialPopLocal);
    }
    if (HasInitialPopRemote) {
      output.WriteRawTag(53);
      output.WriteFixed32(InitialPopRemote);
    }
    if (HasNegotiationMs) {
      output.WriteRawTag(56);
      output.WriteUInt32(NegotiationMs);
    }
    if (HasSelectedSeconds) {
      output.WriteRawTag(64);
      output.WriteUInt32(SelectedSeconds);
    }
    if (HasBestPing) {
      output.WriteRawTag(88);
      output.WriteUInt32(BestPing);
    }
    if (HasBestPingFrontLocal) {
      output.WriteRawTag(96);
      output.WriteUInt32(BestPingFrontLocal);
    }
    if (HasBestPingFrontRemote) {
      output.WriteRawTag(104);
      output.WriteUInt32(BestPingFrontRemote);
    }
    if (HasBestScore) {
      output.WriteRawTag(112);
      output.WriteUInt32(BestScore);
    }
    if (HasBestPopLocal) {
      output.WriteRawTag(125);
      output.WriteFixed32(BestPopLocal);
    }
    if (HasBestPopRemote) {
      output.WriteRawTag(133, 1);
      output.WriteFixed32(BestPopRemote);
    }
    if (HasBestTime) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(BestTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasInitialPing) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialPing);
    }
    if (HasInitialPingFrontLocal) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialPingFrontLocal);
    }
    if (HasInitialPingFrontRemote) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialPingFrontRemote);
    }
    if (HasInitialScore) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialScore);
    }
    if (HasInitialPopLocal) {
      size += 1 + 4;
    }
    if (HasInitialPopRemote) {
      size += 1 + 4;
    }
    if (HasBestPing) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestPing);
    }
    if (HasBestPingFrontLocal) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestPingFrontLocal);
    }
    if (HasBestPingFrontRemote) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestPingFrontRemote);
    }
    if (HasBestScore) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestScore);
    }
    if (HasBestPopLocal) {
      size += 1 + 4;
    }
    if (HasBestPopRemote) {
      size += 2 + 4;
    }
    if (HasBestTime) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BestTime);
    }
    if (HasNegotiationMs) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NegotiationMs);
    }
    if (HasSelectedSeconds) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectedSeconds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamNetworkingP2PSDRRoutingSummary other) {
    if (other == null) {
      return;
    }
    if (other.HasInitialPing) {
      InitialPing = other.InitialPing;
    }
    if (other.HasInitialPingFrontLocal) {
      InitialPingFrontLocal = other.InitialPingFrontLocal;
    }
    if (other.HasInitialPingFrontRemote) {
      InitialPingFrontRemote = other.InitialPingFrontRemote;
    }
    if (other.HasInitialScore) {
      InitialScore = other.InitialScore;
    }
    if (other.HasInitialPopLocal) {
      InitialPopLocal = other.InitialPopLocal;
    }
    if (other.HasInitialPopRemote) {
      InitialPopRemote = other.InitialPopRemote;
    }
    if (other.HasBestPing) {
      BestPing = other.BestPing;
    }
    if (other.HasBestPingFrontLocal) {
      BestPingFrontLocal = other.BestPingFrontLocal;
    }
    if (other.HasBestPingFrontRemote) {
      BestPingFrontRemote = other.BestPingFrontRemote;
    }
    if (other.HasBestScore) {
      BestScore = other.BestScore;
    }
    if (other.HasBestPopLocal) {
      BestPopLocal = other.BestPopLocal;
    }
    if (other.HasBestPopRemote) {
      BestPopRemote = other.BestPopRemote;
    }
    if (other.HasBestTime) {
      BestTime = other.BestTime;
    }
    if (other.HasNegotiationMs) {
      NegotiationMs = other.NegotiationMs;
    }
    if (other.HasSelectedSeconds) {
      SelectedSeconds = other.SelectedSeconds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          InitialPing = input.ReadUInt32();
          break;
        }
        case 16: {
          InitialPingFrontLocal = input.ReadUInt32();
          break;
        }
        case 24: {
          InitialPingFrontRemote = input.ReadUInt32();
          break;
        }
        case 32: {
          InitialScore = input.ReadUInt32();
          break;
        }
        case 45: {
          InitialPopLocal = input.ReadFixed32();
          break;
        }
        case 53: {
          InitialPopRemote = input.ReadFixed32();
          break;
        }
        case 56: {
          NegotiationMs = input.ReadUInt32();
          break;
        }
        case 64: {
          SelectedSeconds = input.ReadUInt32();
          break;
        }
        case 88: {
          BestPing = input.ReadUInt32();
          break;
        }
        case 96: {
          BestPingFrontLocal = input.ReadUInt32();
          break;
        }
        case 104: {
          BestPingFrontRemote = input.ReadUInt32();
          break;
        }
        case 112: {
          BestScore = input.ReadUInt32();
          break;
        }
        case 125: {
          BestPopLocal = input.ReadFixed32();
          break;
        }
        case 133: {
          BestPopRemote = input.ReadFixed32();
          break;
        }
        case 136: {
          BestTime = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          InitialPing = input.ReadUInt32();
          break;
        }
        case 16: {
          InitialPingFrontLocal = input.ReadUInt32();
          break;
        }
        case 24: {
          InitialPingFrontRemote = input.ReadUInt32();
          break;
        }
        case 32: {
          InitialScore = input.ReadUInt32();
          break;
        }
        case 45: {
          InitialPopLocal = input.ReadFixed32();
          break;
        }
        case 53: {
          InitialPopRemote = input.ReadFixed32();
          break;
        }
        case 56: {
          NegotiationMs = input.ReadUInt32();
          break;
        }
        case 64: {
          SelectedSeconds = input.ReadUInt32();
          break;
        }
        case 88: {
          BestPing = input.ReadUInt32();
          break;
        }
        case 96: {
          BestPingFrontLocal = input.ReadUInt32();
          break;
        }
        case 104: {
          BestPingFrontRemote = input.ReadUInt32();
          break;
        }
        case 112: {
          BestScore = input.ReadUInt32();
          break;
        }
        case 125: {
          BestPopLocal = input.ReadFixed32();
          break;
        }
        case 133: {
          BestPopRemote = input.ReadFixed32();
          break;
        }
        case 136: {
          BestTime = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramP2PRoutingSummary : pb::IMessage<CMsgSteamDatagramP2PRoutingSummary>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PRoutingSummary> _parser = new pb::MessageParser<CMsgSteamDatagramP2PRoutingSummary>(() => new CMsgSteamDatagramP2PRoutingSummary());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PRoutingSummary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutingSummary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutingSummary(CMsgSteamDatagramP2PRoutingSummary other) : this() {
    ice_ = other.ice_ != null ? other.ice_.Clone() : null;
    sdr_ = other.sdr_ != null ? other.sdr_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutingSummary Clone() {
    return new CMsgSteamDatagramP2PRoutingSummary(this);
  }

  /// <summary>Field number for the "ice" field.</summary>
  public const int IceFieldNumber = 2;
  private global::CMsgSteamNetworkingICESessionSummary ice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamNetworkingICESessionSummary Ice {
    get { return ice_; }
    set {
      ice_ = value;
    }
  }

  /// <summary>Field number for the "sdr" field.</summary>
  public const int SdrFieldNumber = 3;
  private global::CMsgSteamNetworkingP2PSDRRoutingSummary sdr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamNetworkingP2PSDRRoutingSummary Sdr {
    get { return sdr_; }
    set {
      sdr_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PRoutingSummary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PRoutingSummary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Ice, other.Ice)) return false;
    if (!object.Equals(Sdr, other.Sdr)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (ice_ != null) hash ^= Ice.GetHashCode();
    if (sdr_ != null) hash ^= Sdr.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ice_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Ice);
    }
    if (sdr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Sdr);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ice_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Ice);
    }
    if (sdr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Sdr);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (ice_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ice);
    }
    if (sdr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sdr);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PRoutingSummary other) {
    if (other == null) {
      return;
    }
    if (other.ice_ != null) {
      if (ice_ == null) {
        Ice = new global::CMsgSteamNetworkingICESessionSummary();
      }
      Ice.MergeFrom(other.Ice);
    }
    if (other.sdr_ != null) {
      if (sdr_ == null) {
        Sdr = new global::CMsgSteamNetworkingP2PSDRRoutingSummary();
      }
      Sdr.MergeFrom(other.Sdr);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          if (ice_ == null) {
            Ice = new global::CMsgSteamNetworkingICESessionSummary();
          }
          input.ReadMessage(Ice);
          break;
        }
        case 26: {
          if (sdr_ == null) {
            Sdr = new global::CMsgSteamNetworkingP2PSDRRoutingSummary();
          }
          input.ReadMessage(Sdr);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 18: {
          if (ice_ == null) {
            Ice = new global::CMsgSteamNetworkingICESessionSummary();
          }
          input.ReadMessage(Ice);
          break;
        }
        case 26: {
          if (sdr_ == null) {
            Sdr = new global::CMsgSteamNetworkingP2PSDRRoutingSummary();
          }
          input.ReadMessage(Sdr);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramConnectionClosed : pb::IMessage<CMsgSteamDatagramConnectionClosed>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionClosed> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionClosed>(() => new CMsgSteamDatagramConnectionClosed());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionClosed> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionClosed() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionClosed(CMsgSteamDatagramConnectionClosed other) : this() {
    _hasBits0 = other._hasBits0;
    toConnectionId_ = other.toConnectionId_;
    fromConnectionId_ = other.fromConnectionId_;
    fromIdentityString_ = other.fromIdentityString_;
    legacyFromIdentityBinary_ = other.legacyFromIdentityBinary_ != null ? other.legacyFromIdentityBinary_.Clone() : null;
    legacyFromSteamId_ = other.legacyFromSteamId_;
    legacyGameserverRelaySessionId_ = other.legacyGameserverRelaySessionId_;
    toRelaySessionId_ = other.toRelaySessionId_;
    fromRelaySessionId_ = other.fromRelaySessionId_;
    forwardTargetRelayRoutingToken_ = other.forwardTargetRelayRoutingToken_;
    forwardTargetRevision_ = other.forwardTargetRevision_;
    relayMode_ = other.relayMode_;
    debug_ = other.debug_;
    reasonCode_ = other.reasonCode_;
    routingSecret_ = other.routingSecret_;
    notPrimarySession_ = other.notPrimarySession_;
    notPrimaryTransport_ = other.notPrimaryTransport_;
    relayOverrideActive_ = other.relayOverrideActive_;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    p2PRoutingSummary_ = other.p2PRoutingSummary_ != null ? other.p2PRoutingSummary_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionClosed Clone() {
    return new CMsgSteamDatagramConnectionClosed(this);
  }

  /// <summary>Field number for the "to_connection_id" field.</summary>
  public const int ToConnectionIdFieldNumber = 7;
  private readonly static uint ToConnectionIdDefaultValue = 0;

  private uint toConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ToConnectionId {
    get { if ((_hasBits0 & 16) != 0) { return toConnectionId_; } else { return ToConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      toConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "to_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToConnectionId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "to_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToConnectionId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "from_connection_id" field.</summary>
  public const int FromConnectionIdFieldNumber = 8;
  private readonly static uint FromConnectionIdDefaultValue = 0;

  private uint fromConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromConnectionId {
    get { if ((_hasBits0 & 32) != 0) { return fromConnectionId_; } else { return FromConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      fromConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromConnectionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "from_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromConnectionId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "from_identity_string" field.</summary>
  public const int FromIdentityStringFieldNumber = 15;
  private readonly static string FromIdentityStringDefaultValue = "";

  private string fromIdentityString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string FromIdentityString {
    get { return fromIdentityString_ ?? FromIdentityStringDefaultValue; }
    set {
      fromIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "from_identity_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromIdentityString {
    get { return fromIdentityString_ != null; }
  }
  /// <summary>Clears the value of the "from_identity_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromIdentityString() {
    fromIdentityString_ = null;
  }

  /// <summary>Field number for the "legacy_from_identity_binary" field.</summary>
  public const int LegacyFromIdentityBinaryFieldNumber = 13;
  private global::CMsgSteamNetworkingIdentityLegacyBinary legacyFromIdentityBinary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamNetworkingIdentityLegacyBinary LegacyFromIdentityBinary {
    get { return legacyFromIdentityBinary_; }
    set {
      legacyFromIdentityBinary_ = value;
    }
  }

  /// <summary>Field number for the "legacy_from_steam_id" field.</summary>
  public const int LegacyFromSteamIdFieldNumber = 3;
  private readonly static ulong LegacyFromSteamIdDefaultValue = 0UL;

  private ulong legacyFromSteamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyFromSteamId {
    get { if ((_hasBits0 & 2) != 0) { return legacyFromSteamId_; } else { return LegacyFromSteamIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyFromSteamId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_from_steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyFromSteamId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_from_steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyFromSteamId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "legacy_gameserver_relay_session_id" field.</summary>
  public const int LegacyGameserverRelaySessionIdFieldNumber = 2;
  private readonly static uint LegacyGameserverRelaySessionIdDefaultValue = 0;

  private uint legacyGameserverRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyGameserverRelaySessionId {
    get { if ((_hasBits0 & 1) != 0) { return legacyGameserverRelaySessionId_; } else { return LegacyGameserverRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacyGameserverRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_gameserver_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyGameserverRelaySessionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_gameserver_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyGameserverRelaySessionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "to_relay_session_id" field.</summary>
  public const int ToRelaySessionIdFieldNumber = 9;
  private readonly static uint ToRelaySessionIdDefaultValue = 0;

  private uint toRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ToRelaySessionId {
    get { if ((_hasBits0 & 64) != 0) { return toRelaySessionId_; } else { return ToRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      toRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "to_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToRelaySessionId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "to_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToRelaySessionId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "from_relay_session_id" field.</summary>
  public const int FromRelaySessionIdFieldNumber = 10;
  private readonly static uint FromRelaySessionIdDefaultValue = 0;

  private uint fromRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromRelaySessionId {
    get { if ((_hasBits0 & 128) != 0) { return fromRelaySessionId_; } else { return FromRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      fromRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromRelaySessionId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "from_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromRelaySessionId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "forward_target_relay_routing_token" field.</summary>
  public const int ForwardTargetRelayRoutingTokenFieldNumber = 11;
  private readonly static pb::ByteString ForwardTargetRelayRoutingTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString forwardTargetRelayRoutingToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString ForwardTargetRelayRoutingToken {
    get { return forwardTargetRelayRoutingToken_ ?? ForwardTargetRelayRoutingTokenDefaultValue; }
    set {
      forwardTargetRelayRoutingToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "forward_target_relay_routing_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForwardTargetRelayRoutingToken {
    get { return forwardTargetRelayRoutingToken_ != null; }
  }
  /// <summary>Clears the value of the "forward_target_relay_routing_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForwardTargetRelayRoutingToken() {
    forwardTargetRelayRoutingToken_ = null;
  }

  /// <summary>Field number for the "forward_target_revision" field.</summary>
  public const int ForwardTargetRevisionFieldNumber = 12;
  private readonly static uint ForwardTargetRevisionDefaultValue = 0;

  private uint forwardTargetRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ForwardTargetRevision {
    get { if ((_hasBits0 & 256) != 0) { return forwardTargetRevision_; } else { return ForwardTargetRevisionDefaultValue; } }
    set {
      _hasBits0 |= 256;
      forwardTargetRevision_ = value;
    }
  }
  /// <summary>Gets whether the "forward_target_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForwardTargetRevision {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "forward_target_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForwardTargetRevision() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "relay_mode" field.</summary>
  public const int RelayModeFieldNumber = 4;
  private readonly static global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode RelayModeDefaultValue = global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode.None;

  private global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode relayMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode RelayMode {
    get { if ((_hasBits0 & 4) != 0) { return relayMode_; } else { return RelayModeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      relayMode_ = value;
    }
  }
  /// <summary>Gets whether the "relay_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayMode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "relay_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayMode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "debug" field.</summary>
  public const int DebugFieldNumber = 5;
  private readonly static string DebugDefaultValue = "";

  private string debug_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Debug {
    get { return debug_ ?? DebugDefaultValue; }
    set {
      debug_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "debug" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDebug {
    get { return debug_ != null; }
  }
  /// <summary>Clears the value of the "debug" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDebug() {
    debug_ = null;
  }

  /// <summary>Field number for the "reason_code" field.</summary>
  public const int ReasonCodeFieldNumber = 6;
  private readonly static uint ReasonCodeDefaultValue = 0;

  private uint reasonCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ReasonCode {
    get { if ((_hasBits0 & 8) != 0) { return reasonCode_; } else { return ReasonCodeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      reasonCode_ = value;
    }
  }
  /// <summary>Gets whether the "reason_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReasonCode {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "reason_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReasonCode() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "routing_secret" field.</summary>
  public const int RoutingSecretFieldNumber = 14;
  private readonly static ulong RoutingSecretDefaultValue = 0UL;

  private ulong routingSecret_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RoutingSecret {
    get { if ((_hasBits0 & 512) != 0) { return routingSecret_; } else { return RoutingSecretDefaultValue; } }
    set {
      _hasBits0 |= 512;
      routingSecret_ = value;
    }
  }
  /// <summary>Gets whether the "routing_secret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutingSecret {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "routing_secret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutingSecret() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "not_primary_session" field.</summary>
  public const int NotPrimarySessionFieldNumber = 16;
  private readonly static bool NotPrimarySessionDefaultValue = false;

  private bool notPrimarySession_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotPrimarySession {
    get { if ((_hasBits0 & 1024) != 0) { return notPrimarySession_; } else { return NotPrimarySessionDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      notPrimarySession_ = value;
    }
  }
  /// <summary>Gets whether the "not_primary_session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotPrimarySession {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "not_primary_session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotPrimarySession() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "not_primary_transport" field.</summary>
  public const int NotPrimaryTransportFieldNumber = 19;
  private readonly static bool NotPrimaryTransportDefaultValue = false;

  private bool notPrimaryTransport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotPrimaryTransport {
    get { if ((_hasBits0 & 2048) != 0) { return notPrimaryTransport_; } else { return NotPrimaryTransportDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      notPrimaryTransport_ = value;
    }
  }
  /// <summary>Gets whether the "not_primary_transport" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotPrimaryTransport {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "not_primary_transport" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotPrimaryTransport() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "relay_override_active" field.</summary>
  public const int RelayOverrideActiveFieldNumber = 22;
  private readonly static bool RelayOverrideActiveDefaultValue = false;

  private bool relayOverrideActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RelayOverrideActive {
    get { if ((_hasBits0 & 4096) != 0) { return relayOverrideActive_; } else { return RelayOverrideActiveDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      relayOverrideActive_ = value;
    }
  }
  /// <summary>Gets whether the "relay_override_active" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayOverrideActive {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "relay_override_active" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayOverrideActive() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 17;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 18;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "p2p_routing_summary" field.</summary>
  public const int P2PRoutingSummaryFieldNumber = 21;
  private global::CMsgSteamDatagramP2PRoutingSummary p2PRoutingSummary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramP2PRoutingSummary P2PRoutingSummary {
    get { return p2PRoutingSummary_; }
    set {
      p2PRoutingSummary_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionClosed);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionClosed other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToConnectionId != other.ToConnectionId) return false;
    if (FromConnectionId != other.FromConnectionId) return false;
    if (FromIdentityString != other.FromIdentityString) return false;
    if (!object.Equals(LegacyFromIdentityBinary, other.LegacyFromIdentityBinary)) return false;
    if (LegacyFromSteamId != other.LegacyFromSteamId) return false;
    if (LegacyGameserverRelaySessionId != other.LegacyGameserverRelaySessionId) return false;
    if (ToRelaySessionId != other.ToRelaySessionId) return false;
    if (FromRelaySessionId != other.FromRelaySessionId) return false;
    if (ForwardTargetRelayRoutingToken != other.ForwardTargetRelayRoutingToken) return false;
    if (ForwardTargetRevision != other.ForwardTargetRevision) return false;
    if (RelayMode != other.RelayMode) return false;
    if (Debug != other.Debug) return false;
    if (ReasonCode != other.ReasonCode) return false;
    if (RoutingSecret != other.RoutingSecret) return false;
    if (NotPrimarySession != other.NotPrimarySession) return false;
    if (NotPrimaryTransport != other.NotPrimaryTransport) return false;
    if (RelayOverrideActive != other.RelayOverrideActive) return false;
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if (!object.Equals(P2PRoutingSummary, other.P2PRoutingSummary)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasToConnectionId) hash ^= ToConnectionId.GetHashCode();
    if (HasFromConnectionId) hash ^= FromConnectionId.GetHashCode();
    if (HasFromIdentityString) hash ^= FromIdentityString.GetHashCode();
    if (legacyFromIdentityBinary_ != null) hash ^= LegacyFromIdentityBinary.GetHashCode();
    if (HasLegacyFromSteamId) hash ^= LegacyFromSteamId.GetHashCode();
    if (HasLegacyGameserverRelaySessionId) hash ^= LegacyGameserverRelaySessionId.GetHashCode();
    if (HasToRelaySessionId) hash ^= ToRelaySessionId.GetHashCode();
    if (HasFromRelaySessionId) hash ^= FromRelaySessionId.GetHashCode();
    if (HasForwardTargetRelayRoutingToken) hash ^= ForwardTargetRelayRoutingToken.GetHashCode();
    if (HasForwardTargetRevision) hash ^= ForwardTargetRevision.GetHashCode();
    if (HasRelayMode) hash ^= RelayMode.GetHashCode();
    if (HasDebug) hash ^= Debug.GetHashCode();
    if (HasReasonCode) hash ^= ReasonCode.GetHashCode();
    if (HasRoutingSecret) hash ^= RoutingSecret.GetHashCode();
    if (HasNotPrimarySession) hash ^= NotPrimarySession.GetHashCode();
    if (HasNotPrimaryTransport) hash ^= NotPrimaryTransport.GetHashCode();
    if (HasRelayOverrideActive) hash ^= RelayOverrideActive.GetHashCode();
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    if (p2PRoutingSummary_ != null) hash ^= P2PRoutingSummary.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacyGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(LegacyGameserverRelaySessionId);
    }
    if (HasLegacyFromSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyFromSteamId);
    }
    if (HasRelayMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) RelayMode);
    }
    if (HasDebug) {
      output.WriteRawTag(42);
      output.WriteString(Debug);
    }
    if (HasReasonCode) {
      output.WriteRawTag(48);
      output.WriteUInt32(ReasonCode);
    }
    if (HasToConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ToConnectionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasToRelaySessionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ToRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasForwardTargetRelayRoutingToken) {
      output.WriteRawTag(90);
      output.WriteBytes(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      output.WriteRawTag(96);
      output.WriteUInt32(ForwardTargetRevision);
    }
    if (legacyFromIdentityBinary_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(LegacyFromIdentityBinary);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(113);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasFromIdentityString) {
      output.WriteRawTag(122);
      output.WriteString(FromIdentityString);
    }
    if (HasNotPrimarySession) {
      output.WriteRawTag(128, 1);
      output.WriteBool(NotPrimarySession);
    }
    if (qualityRelay_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(QualityE2E);
    }
    if (HasNotPrimaryTransport) {
      output.WriteRawTag(152, 1);
      output.WriteBool(NotPrimaryTransport);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (HasRelayOverrideActive) {
      output.WriteRawTag(176, 1);
      output.WriteBool(RelayOverrideActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacyGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(LegacyGameserverRelaySessionId);
    }
    if (HasLegacyFromSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyFromSteamId);
    }
    if (HasRelayMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) RelayMode);
    }
    if (HasDebug) {
      output.WriteRawTag(42);
      output.WriteString(Debug);
    }
    if (HasReasonCode) {
      output.WriteRawTag(48);
      output.WriteUInt32(ReasonCode);
    }
    if (HasToConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ToConnectionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasToRelaySessionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ToRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasForwardTargetRelayRoutingToken) {
      output.WriteRawTag(90);
      output.WriteBytes(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      output.WriteRawTag(96);
      output.WriteUInt32(ForwardTargetRevision);
    }
    if (legacyFromIdentityBinary_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(LegacyFromIdentityBinary);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(113);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasFromIdentityString) {
      output.WriteRawTag(122);
      output.WriteString(FromIdentityString);
    }
    if (HasNotPrimarySession) {
      output.WriteRawTag(128, 1);
      output.WriteBool(NotPrimarySession);
    }
    if (qualityRelay_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(QualityE2E);
    }
    if (HasNotPrimaryTransport) {
      output.WriteRawTag(152, 1);
      output.WriteBool(NotPrimaryTransport);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (HasRelayOverrideActive) {
      output.WriteRawTag(176, 1);
      output.WriteBool(RelayOverrideActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasToConnectionId) {
      size += 1 + 4;
    }
    if (HasFromConnectionId) {
      size += 1 + 4;
    }
    if (HasFromIdentityString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FromIdentityString);
    }
    if (legacyFromIdentityBinary_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LegacyFromIdentityBinary);
    }
    if (HasLegacyFromSteamId) {
      size += 1 + 8;
    }
    if (HasLegacyGameserverRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyGameserverRelaySessionId);
    }
    if (HasToRelaySessionId) {
      size += 1 + 4;
    }
    if (HasFromRelaySessionId) {
      size += 1 + 4;
    }
    if (HasForwardTargetRelayRoutingToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForwardTargetRevision);
    }
    if (HasRelayMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelayMode);
    }
    if (HasDebug) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Debug);
    }
    if (HasReasonCode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReasonCode);
    }
    if (HasRoutingSecret) {
      size += 1 + 8;
    }
    if (HasNotPrimarySession) {
      size += 2 + 1;
    }
    if (HasNotPrimaryTransport) {
      size += 2 + 1;
    }
    if (HasRelayOverrideActive) {
      size += 2 + 1;
    }
    if (qualityRelay_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    if (p2PRoutingSummary_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(P2PRoutingSummary);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionClosed other) {
    if (other == null) {
      return;
    }
    if (other.HasToConnectionId) {
      ToConnectionId = other.ToConnectionId;
    }
    if (other.HasFromConnectionId) {
      FromConnectionId = other.FromConnectionId;
    }
    if (other.HasFromIdentityString) {
      FromIdentityString = other.FromIdentityString;
    }
    if (other.legacyFromIdentityBinary_ != null) {
      if (legacyFromIdentityBinary_ == null) {
        LegacyFromIdentityBinary = new global::CMsgSteamNetworkingIdentityLegacyBinary();
      }
      LegacyFromIdentityBinary.MergeFrom(other.LegacyFromIdentityBinary);
    }
    if (other.HasLegacyFromSteamId) {
      LegacyFromSteamId = other.LegacyFromSteamId;
    }
    if (other.HasLegacyGameserverRelaySessionId) {
      LegacyGameserverRelaySessionId = other.LegacyGameserverRelaySessionId;
    }
    if (other.HasToRelaySessionId) {
      ToRelaySessionId = other.ToRelaySessionId;
    }
    if (other.HasFromRelaySessionId) {
      FromRelaySessionId = other.FromRelaySessionId;
    }
    if (other.HasForwardTargetRelayRoutingToken) {
      ForwardTargetRelayRoutingToken = other.ForwardTargetRelayRoutingToken;
    }
    if (other.HasForwardTargetRevision) {
      ForwardTargetRevision = other.ForwardTargetRevision;
    }
    if (other.HasRelayMode) {
      RelayMode = other.RelayMode;
    }
    if (other.HasDebug) {
      Debug = other.Debug;
    }
    if (other.HasReasonCode) {
      ReasonCode = other.ReasonCode;
    }
    if (other.HasRoutingSecret) {
      RoutingSecret = other.RoutingSecret;
    }
    if (other.HasNotPrimarySession) {
      NotPrimarySession = other.NotPrimarySession;
    }
    if (other.HasNotPrimaryTransport) {
      NotPrimaryTransport = other.NotPrimaryTransport;
    }
    if (other.HasRelayOverrideActive) {
      RelayOverrideActive = other.RelayOverrideActive;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    if (other.p2PRoutingSummary_ != null) {
      if (p2PRoutingSummary_ == null) {
        P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
      }
      P2PRoutingSummary.MergeFrom(other.P2PRoutingSummary);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          LegacyGameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyFromSteamId = input.ReadFixed64();
          break;
        }
        case 32: {
          RelayMode = (global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode) input.ReadEnum();
          break;
        }
        case 42: {
          Debug = input.ReadString();
          break;
        }
        case 48: {
          ReasonCode = input.ReadUInt32();
          break;
        }
        case 61: {
          ToConnectionId = input.ReadFixed32();
          break;
        }
        case 69: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 77: {
          ToRelaySessionId = input.ReadFixed32();
          break;
        }
        case 85: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 90: {
          ForwardTargetRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 96: {
          ForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 106: {
          if (legacyFromIdentityBinary_ == null) {
            LegacyFromIdentityBinary = new global::CMsgSteamNetworkingIdentityLegacyBinary();
          }
          input.ReadMessage(LegacyFromIdentityBinary);
          break;
        }
        case 113: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 122: {
          FromIdentityString = input.ReadString();
          break;
        }
        case 128: {
          NotPrimarySession = input.ReadBool();
          break;
        }
        case 138: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 146: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 152: {
          NotPrimaryTransport = input.ReadBool();
          break;
        }
        case 170: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
        case 176: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 16: {
          LegacyGameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyFromSteamId = input.ReadFixed64();
          break;
        }
        case 32: {
          RelayMode = (global::CMsgSteamDatagramConnectionClosed.Types.ERelayMode) input.ReadEnum();
          break;
        }
        case 42: {
          Debug = input.ReadString();
          break;
        }
        case 48: {
          ReasonCode = input.ReadUInt32();
          break;
        }
        case 61: {
          ToConnectionId = input.ReadFixed32();
          break;
        }
        case 69: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 77: {
          ToRelaySessionId = input.ReadFixed32();
          break;
        }
        case 85: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 90: {
          ForwardTargetRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 96: {
          ForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 106: {
          if (legacyFromIdentityBinary_ == null) {
            LegacyFromIdentityBinary = new global::CMsgSteamNetworkingIdentityLegacyBinary();
          }
          input.ReadMessage(LegacyFromIdentityBinary);
          break;
        }
        case 113: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 122: {
          FromIdentityString = input.ReadString();
          break;
        }
        case 128: {
          NotPrimarySession = input.ReadBool();
          break;
        }
        case 138: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 146: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 152: {
          NotPrimaryTransport = input.ReadBool();
          break;
        }
        case 170: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
        case 176: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionClosed message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum ERelayMode {
      [pbr::OriginalName("None")] None = 0,
      [pbr::OriginalName("EndToEnd")] EndToEnd = 1,
      [pbr::OriginalName("ClosedByPeer")] ClosedByPeer = 2,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramNoConnection : pb::IMessage<CMsgSteamDatagramNoConnection>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramNoConnection> _parser = new pb::MessageParser<CMsgSteamDatagramNoConnection>(() => new CMsgSteamDatagramNoConnection());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramNoConnection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoConnection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoConnection(CMsgSteamDatagramNoConnection other) : this() {
    _hasBits0 = other._hasBits0;
    toConnectionId_ = other.toConnectionId_;
    fromConnectionId_ = other.fromConnectionId_;
    legacyGameserverRelaySessionId_ = other.legacyGameserverRelaySessionId_;
    toRelaySessionId_ = other.toRelaySessionId_;
    fromRelaySessionId_ = other.fromRelaySessionId_;
    fromIdentityString_ = other.fromIdentityString_;
    legacyFromSteamId_ = other.legacyFromSteamId_;
    endToEnd_ = other.endToEnd_;
    notPrimarySession_ = other.notPrimarySession_;
    notPrimaryTransport_ = other.notPrimaryTransport_;
    relayOverrideActive_ = other.relayOverrideActive_;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    p2PRoutingSummary_ = other.p2PRoutingSummary_ != null ? other.p2PRoutingSummary_.Clone() : null;
    routingSecret_ = other.routingSecret_;
    dummyPad_ = other.dummyPad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramNoConnection Clone() {
    return new CMsgSteamDatagramNoConnection(this);
  }

  /// <summary>Field number for the "to_connection_id" field.</summary>
  public const int ToConnectionIdFieldNumber = 5;
  private readonly static uint ToConnectionIdDefaultValue = 0;

  private uint toConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ToConnectionId {
    get { if ((_hasBits0 & 8) != 0) { return toConnectionId_; } else { return ToConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      toConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "to_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToConnectionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "to_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToConnectionId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "from_connection_id" field.</summary>
  public const int FromConnectionIdFieldNumber = 6;
  private readonly static uint FromConnectionIdDefaultValue = 0;

  private uint fromConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromConnectionId {
    get { if ((_hasBits0 & 16) != 0) { return fromConnectionId_; } else { return FromConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      fromConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromConnectionId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "from_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromConnectionId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "legacy_gameserver_relay_session_id" field.</summary>
  public const int LegacyGameserverRelaySessionIdFieldNumber = 2;
  private readonly static uint LegacyGameserverRelaySessionIdDefaultValue = 0;

  private uint legacyGameserverRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LegacyGameserverRelaySessionId {
    get { if ((_hasBits0 & 1) != 0) { return legacyGameserverRelaySessionId_; } else { return LegacyGameserverRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacyGameserverRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_gameserver_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyGameserverRelaySessionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_gameserver_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyGameserverRelaySessionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "to_relay_session_id" field.</summary>
  public const int ToRelaySessionIdFieldNumber = 9;
  private readonly static uint ToRelaySessionIdDefaultValue = 0;

  private uint toRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ToRelaySessionId {
    get { if ((_hasBits0 & 32) != 0) { return toRelaySessionId_; } else { return ToRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      toRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "to_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToRelaySessionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "to_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToRelaySessionId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "from_relay_session_id" field.</summary>
  public const int FromRelaySessionIdFieldNumber = 10;
  private readonly static uint FromRelaySessionIdDefaultValue = 0;

  private uint fromRelaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FromRelaySessionId {
    get { if ((_hasBits0 & 64) != 0) { return fromRelaySessionId_; } else { return FromRelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      fromRelaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "from_relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromRelaySessionId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "from_relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromRelaySessionId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "from_identity_string" field.</summary>
  public const int FromIdentityStringFieldNumber = 7;
  private readonly static string FromIdentityStringDefaultValue = "";

  private string fromIdentityString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string FromIdentityString {
    get { return fromIdentityString_ ?? FromIdentityStringDefaultValue; }
    set {
      fromIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "from_identity_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFromIdentityString {
    get { return fromIdentityString_ != null; }
  }
  /// <summary>Clears the value of the "from_identity_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFromIdentityString() {
    fromIdentityString_ = null;
  }

  /// <summary>Field number for the "legacy_from_steam_id" field.</summary>
  public const int LegacyFromSteamIdFieldNumber = 3;
  private readonly static ulong LegacyFromSteamIdDefaultValue = 0UL;

  private ulong legacyFromSteamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyFromSteamId {
    get { if ((_hasBits0 & 2) != 0) { return legacyFromSteamId_; } else { return LegacyFromSteamIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyFromSteamId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_from_steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyFromSteamId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_from_steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyFromSteamId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "end_to_end" field.</summary>
  public const int EndToEndFieldNumber = 4;
  private readonly static bool EndToEndDefaultValue = false;

  private bool endToEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EndToEnd {
    get { if ((_hasBits0 & 4) != 0) { return endToEnd_; } else { return EndToEndDefaultValue; } }
    set {
      _hasBits0 |= 4;
      endToEnd_ = value;
    }
  }
  /// <summary>Gets whether the "end_to_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEndToEnd {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "end_to_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEndToEnd() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "not_primary_session" field.</summary>
  public const int NotPrimarySessionFieldNumber = 12;
  private readonly static bool NotPrimarySessionDefaultValue = false;

  private bool notPrimarySession_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotPrimarySession {
    get { if ((_hasBits0 & 256) != 0) { return notPrimarySession_; } else { return NotPrimarySessionDefaultValue; } }
    set {
      _hasBits0 |= 256;
      notPrimarySession_ = value;
    }
  }
  /// <summary>Gets whether the "not_primary_session" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotPrimarySession {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "not_primary_session" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotPrimarySession() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "not_primary_transport" field.</summary>
  public const int NotPrimaryTransportFieldNumber = 15;
  private readonly static bool NotPrimaryTransportDefaultValue = false;

  private bool notPrimaryTransport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotPrimaryTransport {
    get { if ((_hasBits0 & 512) != 0) { return notPrimaryTransport_; } else { return NotPrimaryTransportDefaultValue; } }
    set {
      _hasBits0 |= 512;
      notPrimaryTransport_ = value;
    }
  }
  /// <summary>Gets whether the "not_primary_transport" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotPrimaryTransport {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "not_primary_transport" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotPrimaryTransport() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "relay_override_active" field.</summary>
  public const int RelayOverrideActiveFieldNumber = 17;
  private readonly static bool RelayOverrideActiveDefaultValue = false;

  private bool relayOverrideActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RelayOverrideActive {
    get { if ((_hasBits0 & 1024) != 0) { return relayOverrideActive_; } else { return RelayOverrideActiveDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      relayOverrideActive_ = value;
    }
  }
  /// <summary>Gets whether the "relay_override_active" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayOverrideActive {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "relay_override_active" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayOverrideActive() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 13;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 14;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "p2p_routing_summary" field.</summary>
  public const int P2PRoutingSummaryFieldNumber = 16;
  private global::CMsgSteamDatagramP2PRoutingSummary p2PRoutingSummary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramP2PRoutingSummary P2PRoutingSummary {
    get { return p2PRoutingSummary_; }
    set {
      p2PRoutingSummary_ = value;
    }
  }

  /// <summary>Field number for the "routing_secret" field.</summary>
  public const int RoutingSecretFieldNumber = 11;
  private readonly static ulong RoutingSecretDefaultValue = 0UL;

  private ulong routingSecret_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RoutingSecret {
    get { if ((_hasBits0 & 128) != 0) { return routingSecret_; } else { return RoutingSecretDefaultValue; } }
    set {
      _hasBits0 |= 128;
      routingSecret_ = value;
    }
  }
  /// <summary>Gets whether the "routing_secret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutingSecret {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "routing_secret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutingSecret() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "dummy_pad" field.</summary>
  public const int DummyPadFieldNumber = 1023;
  private readonly static uint DummyPadDefaultValue = 0;

  private uint dummyPad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DummyPad {
    get { if ((_hasBits0 & 2048) != 0) { return dummyPad_; } else { return DummyPadDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      dummyPad_ = value;
    }
  }
  /// <summary>Gets whether the "dummy_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDummyPad {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "dummy_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDummyPad() {
    _hasBits0 &= ~2048;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramNoConnection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramNoConnection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToConnectionId != other.ToConnectionId) return false;
    if (FromConnectionId != other.FromConnectionId) return false;
    if (LegacyGameserverRelaySessionId != other.LegacyGameserverRelaySessionId) return false;
    if (ToRelaySessionId != other.ToRelaySessionId) return false;
    if (FromRelaySessionId != other.FromRelaySessionId) return false;
    if (FromIdentityString != other.FromIdentityString) return false;
    if (LegacyFromSteamId != other.LegacyFromSteamId) return false;
    if (EndToEnd != other.EndToEnd) return false;
    if (NotPrimarySession != other.NotPrimarySession) return false;
    if (NotPrimaryTransport != other.NotPrimaryTransport) return false;
    if (RelayOverrideActive != other.RelayOverrideActive) return false;
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if (!object.Equals(P2PRoutingSummary, other.P2PRoutingSummary)) return false;
    if (RoutingSecret != other.RoutingSecret) return false;
    if (DummyPad != other.DummyPad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasToConnectionId) hash ^= ToConnectionId.GetHashCode();
    if (HasFromConnectionId) hash ^= FromConnectionId.GetHashCode();
    if (HasLegacyGameserverRelaySessionId) hash ^= LegacyGameserverRelaySessionId.GetHashCode();
    if (HasToRelaySessionId) hash ^= ToRelaySessionId.GetHashCode();
    if (HasFromRelaySessionId) hash ^= FromRelaySessionId.GetHashCode();
    if (HasFromIdentityString) hash ^= FromIdentityString.GetHashCode();
    if (HasLegacyFromSteamId) hash ^= LegacyFromSteamId.GetHashCode();
    if (HasEndToEnd) hash ^= EndToEnd.GetHashCode();
    if (HasNotPrimarySession) hash ^= NotPrimarySession.GetHashCode();
    if (HasNotPrimaryTransport) hash ^= NotPrimaryTransport.GetHashCode();
    if (HasRelayOverrideActive) hash ^= RelayOverrideActive.GetHashCode();
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    if (p2PRoutingSummary_ != null) hash ^= P2PRoutingSummary.GetHashCode();
    if (HasRoutingSecret) hash ^= RoutingSecret.GetHashCode();
    if (HasDummyPad) hash ^= DummyPad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacyGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(LegacyGameserverRelaySessionId);
    }
    if (HasLegacyFromSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyFromSteamId);
    }
    if (HasEndToEnd) {
      output.WriteRawTag(32);
      output.WriteBool(EndToEnd);
    }
    if (HasToConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(ToConnectionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(53);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasFromIdentityString) {
      output.WriteRawTag(58);
      output.WriteString(FromIdentityString);
    }
    if (HasToRelaySessionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ToRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(89);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasNotPrimarySession) {
      output.WriteRawTag(96);
      output.WriteBool(NotPrimarySession);
    }
    if (qualityRelay_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(QualityE2E);
    }
    if (HasNotPrimaryTransport) {
      output.WriteRawTag(120);
      output.WriteBool(NotPrimaryTransport);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (HasRelayOverrideActive) {
      output.WriteRawTag(136, 1);
      output.WriteBool(RelayOverrideActive);
    }
    if (HasDummyPad) {
      output.WriteRawTag(253, 63);
      output.WriteFixed32(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacyGameserverRelaySessionId) {
      output.WriteRawTag(16);
      output.WriteUInt32(LegacyGameserverRelaySessionId);
    }
    if (HasLegacyFromSteamId) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyFromSteamId);
    }
    if (HasEndToEnd) {
      output.WriteRawTag(32);
      output.WriteBool(EndToEnd);
    }
    if (HasToConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(ToConnectionId);
    }
    if (HasFromConnectionId) {
      output.WriteRawTag(53);
      output.WriteFixed32(FromConnectionId);
    }
    if (HasFromIdentityString) {
      output.WriteRawTag(58);
      output.WriteString(FromIdentityString);
    }
    if (HasToRelaySessionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ToRelaySessionId);
    }
    if (HasFromRelaySessionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(FromRelaySessionId);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(89);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasNotPrimarySession) {
      output.WriteRawTag(96);
      output.WriteBool(NotPrimarySession);
    }
    if (qualityRelay_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(QualityE2E);
    }
    if (HasNotPrimaryTransport) {
      output.WriteRawTag(120);
      output.WriteBool(NotPrimaryTransport);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (HasRelayOverrideActive) {
      output.WriteRawTag(136, 1);
      output.WriteBool(RelayOverrideActive);
    }
    if (HasDummyPad) {
      output.WriteRawTag(253, 63);
      output.WriteFixed32(DummyPad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasToConnectionId) {
      size += 1 + 4;
    }
    if (HasFromConnectionId) {
      size += 1 + 4;
    }
    if (HasLegacyGameserverRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyGameserverRelaySessionId);
    }
    if (HasToRelaySessionId) {
      size += 1 + 4;
    }
    if (HasFromRelaySessionId) {
      size += 1 + 4;
    }
    if (HasFromIdentityString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FromIdentityString);
    }
    if (HasLegacyFromSteamId) {
      size += 1 + 8;
    }
    if (HasEndToEnd) {
      size += 1 + 1;
    }
    if (HasNotPrimarySession) {
      size += 1 + 1;
    }
    if (HasNotPrimaryTransport) {
      size += 1 + 1;
    }
    if (HasRelayOverrideActive) {
      size += 2 + 1;
    }
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    if (p2PRoutingSummary_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(P2PRoutingSummary);
    }
    if (HasRoutingSecret) {
      size += 1 + 8;
    }
    if (HasDummyPad) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramNoConnection other) {
    if (other == null) {
      return;
    }
    if (other.HasToConnectionId) {
      ToConnectionId = other.ToConnectionId;
    }
    if (other.HasFromConnectionId) {
      FromConnectionId = other.FromConnectionId;
    }
    if (other.HasLegacyGameserverRelaySessionId) {
      LegacyGameserverRelaySessionId = other.LegacyGameserverRelaySessionId;
    }
    if (other.HasToRelaySessionId) {
      ToRelaySessionId = other.ToRelaySessionId;
    }
    if (other.HasFromRelaySessionId) {
      FromRelaySessionId = other.FromRelaySessionId;
    }
    if (other.HasFromIdentityString) {
      FromIdentityString = other.FromIdentityString;
    }
    if (other.HasLegacyFromSteamId) {
      LegacyFromSteamId = other.LegacyFromSteamId;
    }
    if (other.HasEndToEnd) {
      EndToEnd = other.EndToEnd;
    }
    if (other.HasNotPrimarySession) {
      NotPrimarySession = other.NotPrimarySession;
    }
    if (other.HasNotPrimaryTransport) {
      NotPrimaryTransport = other.NotPrimaryTransport;
    }
    if (other.HasRelayOverrideActive) {
      RelayOverrideActive = other.RelayOverrideActive;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    if (other.p2PRoutingSummary_ != null) {
      if (p2PRoutingSummary_ == null) {
        P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
      }
      P2PRoutingSummary.MergeFrom(other.P2PRoutingSummary);
    }
    if (other.HasRoutingSecret) {
      RoutingSecret = other.RoutingSecret;
    }
    if (other.HasDummyPad) {
      DummyPad = other.DummyPad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          LegacyGameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyFromSteamId = input.ReadFixed64();
          break;
        }
        case 32: {
          EndToEnd = input.ReadBool();
          break;
        }
        case 45: {
          ToConnectionId = input.ReadFixed32();
          break;
        }
        case 53: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 58: {
          FromIdentityString = input.ReadString();
          break;
        }
        case 77: {
          ToRelaySessionId = input.ReadFixed32();
          break;
        }
        case 85: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 89: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 96: {
          NotPrimarySession = input.ReadBool();
          break;
        }
        case 106: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 114: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 120: {
          NotPrimaryTransport = input.ReadBool();
          break;
        }
        case 130: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
        case 136: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
        case 8189: {
          DummyPad = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 16: {
          LegacyGameserverRelaySessionId = input.ReadUInt32();
          break;
        }
        case 25: {
          LegacyFromSteamId = input.ReadFixed64();
          break;
        }
        case 32: {
          EndToEnd = input.ReadBool();
          break;
        }
        case 45: {
          ToConnectionId = input.ReadFixed32();
          break;
        }
        case 53: {
          FromConnectionId = input.ReadFixed32();
          break;
        }
        case 58: {
          FromIdentityString = input.ReadString();
          break;
        }
        case 77: {
          ToRelaySessionId = input.ReadFixed32();
          break;
        }
        case 85: {
          FromRelaySessionId = input.ReadFixed32();
          break;
        }
        case 89: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 96: {
          NotPrimarySession = input.ReadBool();
          break;
        }
        case 106: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 114: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 120: {
          NotPrimaryTransport = input.ReadBool();
          break;
        }
        case 130: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
        case 136: {
          RelayOverrideActive = input.ReadBool();
          break;
        }
        case 8189: {
          DummyPad = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramGameserverSessionRequest : pb::IMessage<CMsgSteamDatagramGameserverSessionRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramGameserverSessionRequest> _parser = new pb::MessageParser<CMsgSteamDatagramGameserverSessionRequest>(() => new CMsgSteamDatagramGameserverSessionRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramGameserverSessionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionRequest(CMsgSteamDatagramGameserverSessionRequest other) : this() {
    _hasBits0 = other._hasBits0;
    ticket_ = other.ticket_;
    challengeTime_ = other.challengeTime_;
    challenge_ = other.challenge_;
    clientConnectionId_ = other.clientConnectionId_;
    serverConnectionId_ = other.serverConnectionId_;
    networkConfigVersion_ = other.networkConfigVersion_;
    protocolVersion_ = other.protocolVersion_;
    platform_ = other.platform_;
    build_ = other.build_;
    devGameserverIdentity_ = other.devGameserverIdentity_;
    devClientCert_ = other.devClientCert_ != null ? other.devClientCert_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionRequest Clone() {
    return new CMsgSteamDatagramGameserverSessionRequest(this);
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 1;
  private readonly static pb::ByteString TicketDefaultValue = pb::ByteString.Empty;

  private pb::ByteString ticket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Ticket {
    get { return ticket_ ?? TicketDefaultValue; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ticket" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTicket {
    get { return ticket_ != null; }
  }
  /// <summary>Clears the value of the "ticket" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTicket() {
    ticket_ = null;
  }

  /// <summary>Field number for the "challenge_time" field.</summary>
  public const int ChallengeTimeFieldNumber = 3;
  private readonly static uint ChallengeTimeDefaultValue = 0;

  private uint challengeTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChallengeTime {
    get { if ((_hasBits0 & 1) != 0) { return challengeTime_; } else { return ChallengeTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      challengeTime_ = value;
    }
  }
  /// <summary>Gets whether the "challenge_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallengeTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "challenge_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallengeTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "challenge" field.</summary>
  public const int ChallengeFieldNumber = 4;
  private readonly static ulong ChallengeDefaultValue = 0UL;

  private ulong challenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Challenge {
    get { if ((_hasBits0 & 2) != 0) { return challenge_; } else { return ChallengeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      challenge_ = value;
    }
  }
  /// <summary>Gets whether the "challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallenge {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallenge() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 5;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 4) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "server_connection_id" field.</summary>
  public const int ServerConnectionIdFieldNumber = 8;
  private readonly static uint ServerConnectionIdDefaultValue = 0;

  private uint serverConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerConnectionId {
    get { if ((_hasBits0 & 32) != 0) { return serverConnectionId_; } else { return ServerConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      serverConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "server_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerConnectionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "server_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerConnectionId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "network_config_version" field.</summary>
  public const int NetworkConfigVersionFieldNumber = 6;
  private readonly static ulong NetworkConfigVersionDefaultValue = 0UL;

  private ulong networkConfigVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong NetworkConfigVersion {
    get { if ((_hasBits0 & 8) != 0) { return networkConfigVersion_; } else { return NetworkConfigVersionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      networkConfigVersion_ = value;
    }
  }
  /// <summary>Gets whether the "network_config_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNetworkConfigVersion {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "network_config_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNetworkConfigVersion() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "protocol_version" field.</summary>
  public const int ProtocolVersionFieldNumber = 7;
  private readonly static uint ProtocolVersionDefaultValue = 0;

  private uint protocolVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ProtocolVersion {
    get { if ((_hasBits0 & 16) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
    set {
      _hasBits0 |= 16;
      protocolVersion_ = value;
    }
  }
  /// <summary>Gets whether the "protocol_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProtocolVersion {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "protocol_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProtocolVersion() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 9;
  private readonly static string PlatformDefaultValue = "";

  private string platform_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Platform {
    get { return platform_ ?? PlatformDefaultValue; }
    set {
      platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPlatform {
    get { return platform_ != null; }
  }
  /// <summary>Clears the value of the "platform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPlatform() {
    platform_ = null;
  }

  /// <summary>Field number for the "build" field.</summary>
  public const int BuildFieldNumber = 10;
  private readonly static string BuildDefaultValue = "";

  private string build_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Build {
    get { return build_ ?? BuildDefaultValue; }
    set {
      build_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "build" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuild {
    get { return build_ != null; }
  }
  /// <summary>Clears the value of the "build" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuild() {
    build_ = null;
  }

  /// <summary>Field number for the "dev_gameserver_identity" field.</summary>
  public const int DevGameserverIdentityFieldNumber = 100;
  private readonly static string DevGameserverIdentityDefaultValue = "";

  private string devGameserverIdentity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DevGameserverIdentity {
    get { return devGameserverIdentity_ ?? DevGameserverIdentityDefaultValue; }
    set {
      devGameserverIdentity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dev_gameserver_identity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDevGameserverIdentity {
    get { return devGameserverIdentity_ != null; }
  }
  /// <summary>Clears the value of the "dev_gameserver_identity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDevGameserverIdentity() {
    devGameserverIdentity_ = null;
  }

  /// <summary>Field number for the "dev_client_cert" field.</summary>
  public const int DevClientCertFieldNumber = 101;
  private global::CMsgSteamDatagramCertificateSigned devClientCert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned DevClientCert {
    get { return devClientCert_; }
    set {
      devClientCert_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramGameserverSessionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramGameserverSessionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ticket != other.Ticket) return false;
    if (ChallengeTime != other.ChallengeTime) return false;
    if (Challenge != other.Challenge) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (ServerConnectionId != other.ServerConnectionId) return false;
    if (NetworkConfigVersion != other.NetworkConfigVersion) return false;
    if (ProtocolVersion != other.ProtocolVersion) return false;
    if (Platform != other.Platform) return false;
    if (Build != other.Build) return false;
    if (DevGameserverIdentity != other.DevGameserverIdentity) return false;
    if (!object.Equals(DevClientCert, other.DevClientCert)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTicket) hash ^= Ticket.GetHashCode();
    if (HasChallengeTime) hash ^= ChallengeTime.GetHashCode();
    if (HasChallenge) hash ^= Challenge.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasServerConnectionId) hash ^= ServerConnectionId.GetHashCode();
    if (HasNetworkConfigVersion) hash ^= NetworkConfigVersion.GetHashCode();
    if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
    if (HasPlatform) hash ^= Platform.GetHashCode();
    if (HasBuild) hash ^= Build.GetHashCode();
    if (HasDevGameserverIdentity) hash ^= DevGameserverIdentity.GetHashCode();
    if (devClientCert_ != null) hash ^= DevClientCert.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTicket) {
      output.WriteRawTag(10);
      output.WriteBytes(Ticket);
    }
    if (HasChallengeTime) {
      output.WriteRawTag(29);
      output.WriteFixed32(ChallengeTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(33);
      output.WriteFixed64(Challenge);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(48);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(56);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(ServerConnectionId);
    }
    if (HasPlatform) {
      output.WriteRawTag(74);
      output.WriteString(Platform);
    }
    if (HasBuild) {
      output.WriteRawTag(82);
      output.WriteString(Build);
    }
    if (HasDevGameserverIdentity) {
      output.WriteRawTag(162, 6);
      output.WriteString(DevGameserverIdentity);
    }
    if (devClientCert_ != null) {
      output.WriteRawTag(170, 6);
      output.WriteMessage(DevClientCert);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTicket) {
      output.WriteRawTag(10);
      output.WriteBytes(Ticket);
    }
    if (HasChallengeTime) {
      output.WriteRawTag(29);
      output.WriteFixed32(ChallengeTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(33);
      output.WriteFixed64(Challenge);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(48);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(56);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(ServerConnectionId);
    }
    if (HasPlatform) {
      output.WriteRawTag(74);
      output.WriteString(Platform);
    }
    if (HasBuild) {
      output.WriteRawTag(82);
      output.WriteString(Build);
    }
    if (HasDevGameserverIdentity) {
      output.WriteRawTag(162, 6);
      output.WriteString(DevGameserverIdentity);
    }
    if (devClientCert_ != null) {
      output.WriteRawTag(170, 6);
      output.WriteMessage(DevClientCert);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTicket) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ticket);
    }
    if (HasChallengeTime) {
      size += 1 + 4;
    }
    if (HasChallenge) {
      size += 1 + 8;
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasServerConnectionId) {
      size += 1 + 4;
    }
    if (HasNetworkConfigVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NetworkConfigVersion);
    }
    if (HasProtocolVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtocolVersion);
    }
    if (HasPlatform) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
    }
    if (HasBuild) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Build);
    }
    if (HasDevGameserverIdentity) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DevGameserverIdentity);
    }
    if (devClientCert_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DevClientCert);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramGameserverSessionRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasTicket) {
      Ticket = other.Ticket;
    }
    if (other.HasChallengeTime) {
      ChallengeTime = other.ChallengeTime;
    }
    if (other.HasChallenge) {
      Challenge = other.Challenge;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasServerConnectionId) {
      ServerConnectionId = other.ServerConnectionId;
    }
    if (other.HasNetworkConfigVersion) {
      NetworkConfigVersion = other.NetworkConfigVersion;
    }
    if (other.HasProtocolVersion) {
      ProtocolVersion = other.ProtocolVersion;
    }
    if (other.HasPlatform) {
      Platform = other.Platform;
    }
    if (other.HasBuild) {
      Build = other.Build;
    }
    if (other.HasDevGameserverIdentity) {
      DevGameserverIdentity = other.DevGameserverIdentity;
    }
    if (other.devClientCert_ != null) {
      if (devClientCert_ == null) {
        DevClientCert = new global::CMsgSteamDatagramCertificateSigned();
      }
      DevClientCert.MergeFrom(other.DevClientCert);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ticket = input.ReadBytes();
          break;
        }
        case 29: {
          ChallengeTime = input.ReadFixed32();
          break;
        }
        case 33: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 45: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 48: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 56: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 69: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
        case 74: {
          Platform = input.ReadString();
          break;
        }
        case 82: {
          Build = input.ReadString();
          break;
        }
        case 802: {
          DevGameserverIdentity = input.ReadString();
          break;
        }
        case 810: {
          if (devClientCert_ == null) {
            DevClientCert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(DevClientCert);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Ticket = input.ReadBytes();
          break;
        }
        case 29: {
          ChallengeTime = input.ReadFixed32();
          break;
        }
        case 33: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 45: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 48: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 56: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 69: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
        case 74: {
          Platform = input.ReadString();
          break;
        }
        case 82: {
          Build = input.ReadString();
          break;
        }
        case 802: {
          DevGameserverIdentity = input.ReadString();
          break;
        }
        case 810: {
          if (devClientCert_ == null) {
            DevClientCert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(DevClientCert);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramGameserverSessionEstablished : pb::IMessage<CMsgSteamDatagramGameserverSessionEstablished>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramGameserverSessionEstablished> _parser = new pb::MessageParser<CMsgSteamDatagramGameserverSessionEstablished>(() => new CMsgSteamDatagramGameserverSessionEstablished());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramGameserverSessionEstablished> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionEstablished() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionEstablished(CMsgSteamDatagramGameserverSessionEstablished other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    gameserverIdentityString_ = other.gameserverIdentityString_;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    seqNumR2C_ = other.seqNumR2C_;
    dummyLegacyIdentityBinary_ = other.dummyLegacyIdentityBinary_;
    legacyGameserverSteamid_ = other.legacyGameserverSteamid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramGameserverSessionEstablished Clone() {
    return new CMsgSteamDatagramGameserverSessionEstablished(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "gameserver_identity_string" field.</summary>
  public const int GameserverIdentityStringFieldNumber = 2;
  private readonly static string GameserverIdentityStringDefaultValue = "";

  private string gameserverIdentityString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameserverIdentityString {
    get { return gameserverIdentityString_ ?? GameserverIdentityStringDefaultValue; }
    set {
      gameserverIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gameserver_identity_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameserverIdentityString {
    get { return gameserverIdentityString_ != null; }
  }
  /// <summary>Clears the value of the "gameserver_identity_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameserverIdentityString() {
    gameserverIdentityString_ = null;
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 4;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 4) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 4;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "seq_num_r2c" field.</summary>
  public const int SeqNumR2CFieldNumber = 6;
  private readonly static uint SeqNumR2CDefaultValue = 0;

  private uint seqNumR2C_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumR2C {
    get { if ((_hasBits0 & 8) != 0) { return seqNumR2C_; } else { return SeqNumR2CDefaultValue; } }
    set {
      _hasBits0 |= 8;
      seqNumR2C_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_r2c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumR2C {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_r2c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumR2C() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "dummy_legacy_identity_binary" field.</summary>
  public const int DummyLegacyIdentityBinaryFieldNumber = 7;
  private readonly static pb::ByteString DummyLegacyIdentityBinaryDefaultValue = pb::ByteString.Empty;

  private pb::ByteString dummyLegacyIdentityBinary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString DummyLegacyIdentityBinary {
    get { return dummyLegacyIdentityBinary_ ?? DummyLegacyIdentityBinaryDefaultValue; }
    set {
      dummyLegacyIdentityBinary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dummy_legacy_identity_binary" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDummyLegacyIdentityBinary {
    get { return dummyLegacyIdentityBinary_ != null; }
  }
  /// <summary>Clears the value of the "dummy_legacy_identity_binary" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDummyLegacyIdentityBinary() {
    dummyLegacyIdentityBinary_ = null;
  }

  /// <summary>Field number for the "legacy_gameserver_steamid" field.</summary>
  public const int LegacyGameserverSteamidFieldNumber = 3;
  private readonly static ulong LegacyGameserverSteamidDefaultValue = 0UL;

  private ulong legacyGameserverSteamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyGameserverSteamid {
    get { if ((_hasBits0 & 2) != 0) { return legacyGameserverSteamid_; } else { return LegacyGameserverSteamidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      legacyGameserverSteamid_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_gameserver_steamid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyGameserverSteamid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "legacy_gameserver_steamid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyGameserverSteamid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramGameserverSessionEstablished);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramGameserverSessionEstablished other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (GameserverIdentityString != other.GameserverIdentityString) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    if (SeqNumR2C != other.SeqNumR2C) return false;
    if (DummyLegacyIdentityBinary != other.DummyLegacyIdentityBinary) return false;
    if (LegacyGameserverSteamid != other.LegacyGameserverSteamid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasGameserverIdentityString) hash ^= GameserverIdentityString.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (HasSeqNumR2C) hash ^= SeqNumR2C.GetHashCode();
    if (HasDummyLegacyIdentityBinary) hash ^= DummyLegacyIdentityBinary.GetHashCode();
    if (HasLegacyGameserverSteamid) hash ^= LegacyGameserverSteamid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasGameserverIdentityString) {
      output.WriteRawTag(18);
      output.WriteString(GameserverIdentityString);
    }
    if (HasLegacyGameserverSteamid) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyGameserverSteamid);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(32);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(48);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasDummyLegacyIdentityBinary) {
      output.WriteRawTag(58);
      output.WriteBytes(DummyLegacyIdentityBinary);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasGameserverIdentityString) {
      output.WriteRawTag(18);
      output.WriteString(GameserverIdentityString);
    }
    if (HasLegacyGameserverSteamid) {
      output.WriteRawTag(25);
      output.WriteFixed64(LegacyGameserverSteamid);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(32);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(48);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasDummyLegacyIdentityBinary) {
      output.WriteRawTag(58);
      output.WriteBytes(DummyLegacyIdentityBinary);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasGameserverIdentityString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameserverIdentityString);
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (HasSeqNumR2C) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumR2C);
    }
    if (HasDummyLegacyIdentityBinary) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(DummyLegacyIdentityBinary);
    }
    if (HasLegacyGameserverSteamid) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramGameserverSessionEstablished other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasGameserverIdentityString) {
      GameserverIdentityString = other.GameserverIdentityString;
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    if (other.HasSeqNumR2C) {
      SeqNumR2C = other.SeqNumR2C;
    }
    if (other.HasDummyLegacyIdentityBinary) {
      DummyLegacyIdentityBinary = other.DummyLegacyIdentityBinary;
    }
    if (other.HasLegacyGameserverSteamid) {
      LegacyGameserverSteamid = other.LegacyGameserverSteamid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          GameserverIdentityString = input.ReadString();
          break;
        }
        case 25: {
          LegacyGameserverSteamid = input.ReadFixed64();
          break;
        }
        case 32: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 48: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 58: {
          DummyLegacyIdentityBinary = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          GameserverIdentityString = input.ReadString();
          break;
        }
        case 25: {
          LegacyGameserverSteamid = input.ReadFixed64();
          break;
        }
        case 32: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 48: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 58: {
          DummyLegacyIdentityBinary = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramConnectionStatsClientToRouter : pb::IMessage<CMsgSteamDatagramConnectionStatsClientToRouter>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsClientToRouter> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsClientToRouter>(() => new CMsgSteamDatagramConnectionStatsClientToRouter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsClientToRouter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsClientToRouter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsClientToRouter(CMsgSteamDatagramConnectionStatsClientToRouter other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    clientConnectionId_ = other.clientConnectionId_;
    seqNumC2R_ = other.seqNumC2R_;
    seqNumE2E_ = other.seqNumE2E_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsClientToRouter Clone() {
    return new CMsgSteamDatagramConnectionStatsClientToRouter(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(37);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 5;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(45);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 6;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 1) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 8;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 2) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "seq_num_c2r" field.</summary>
  public const int SeqNumC2RFieldNumber = 9;
  private readonly static uint SeqNumC2RDefaultValue = 0;

  private uint seqNumC2R_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumC2R {
    get { if ((_hasBits0 & 4) != 0) { return seqNumC2R_; } else { return SeqNumC2RDefaultValue; } }
    set {
      _hasBits0 |= 4;
      seqNumC2R_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_c2r" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumC2R {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_c2r" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumC2R() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 10;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 8) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 8;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsClientToRouter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsClientToRouter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (SeqNumC2R != other.SeqNumC2R) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasSeqNumC2R) hash ^= SeqNumC2R.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(48);
      output.WriteUInt32(Flags);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasSeqNumC2R) {
      output.WriteRawTag(72);
      output.WriteUInt32(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(80);
      output.WriteUInt32(SeqNumE2E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(48);
      output.WriteUInt32(Flags);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(69);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasSeqNumC2R) {
      output.WriteRawTag(72);
      output.WriteUInt32(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(80);
      output.WriteUInt32(SeqNumE2E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasSeqNumC2R) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsClientToRouter other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasSeqNumC2R) {
      SeqNumC2R = other.SeqNumC2R;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 34:
        case 37: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 42:
        case 45: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 48: {
          Flags = input.ReadUInt32();
          break;
        }
        case 69: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 72: {
          SeqNumC2R = input.ReadUInt32();
          break;
        }
        case 80: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 34:
        case 37: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 42:
        case 45: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 48: {
          Flags = input.ReadUInt32();
          break;
        }
        case 69: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 72: {
          SeqNumC2R = input.ReadUInt32();
          break;
        }
        case 80: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsClientToRouter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
      [pbr::OriginalName("NOT_PRIMARY_SESSION")] NotPrimarySession = 8,
      [pbr::OriginalName("CLIENT_RELAY_OVERRIDE")] ClientRelayOverride = 32,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramConnectionStatsRouterToClient : pb::IMessage<CMsgSteamDatagramConnectionStatsRouterToClient>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToClient> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToClient>(() => new CMsgSteamDatagramConnectionStatsRouterToClient());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToClient> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToClient() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToClient(CMsgSteamDatagramConnectionStatsRouterToClient other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    migrateRequestIp_ = other.migrateRequestIp_;
    migrateRequestPort_ = other.migrateRequestPort_;
    scoringPenaltyRelayCluster_ = other.scoringPenaltyRelayCluster_;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    clientConnectionId_ = other.clientConnectionId_;
    seqNumR2C_ = other.seqNumR2C_;
    seqNumE2E_ = other.seqNumE2E_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToClient Clone() {
    return new CMsgSteamDatagramConnectionStatsRouterToClient(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 6;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 1) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 1;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "migrate_request_ip" field.</summary>
  public const int MigrateRequestIpFieldNumber = 10;
  private readonly static uint MigrateRequestIpDefaultValue = 0;

  private uint migrateRequestIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MigrateRequestIp {
    get { if ((_hasBits0 & 16) != 0) { return migrateRequestIp_; } else { return MigrateRequestIpDefaultValue; } }
    set {
      _hasBits0 |= 16;
      migrateRequestIp_ = value;
    }
  }
  /// <summary>Gets whether the "migrate_request_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMigrateRequestIp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "migrate_request_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMigrateRequestIp() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "migrate_request_port" field.</summary>
  public const int MigrateRequestPortFieldNumber = 11;
  private readonly static uint MigrateRequestPortDefaultValue = 0;

  private uint migrateRequestPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MigrateRequestPort {
    get { if ((_hasBits0 & 32) != 0) { return migrateRequestPort_; } else { return MigrateRequestPortDefaultValue; } }
    set {
      _hasBits0 |= 32;
      migrateRequestPort_ = value;
    }
  }
  /// <summary>Gets whether the "migrate_request_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMigrateRequestPort {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "migrate_request_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMigrateRequestPort() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "scoring_penalty_relay_cluster" field.</summary>
  public const int ScoringPenaltyRelayClusterFieldNumber = 12;
  private readonly static uint ScoringPenaltyRelayClusterDefaultValue = 0;

  private uint scoringPenaltyRelayCluster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ScoringPenaltyRelayCluster {
    get { if ((_hasBits0 & 64) != 0) { return scoringPenaltyRelayCluster_; } else { return ScoringPenaltyRelayClusterDefaultValue; } }
    set {
      _hasBits0 |= 64;
      scoringPenaltyRelayCluster_ = value;
    }
  }
  /// <summary>Gets whether the "scoring_penalty_relay_cluster" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScoringPenaltyRelayCluster {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "scoring_penalty_relay_cluster" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScoringPenaltyRelayCluster() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 13;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(109);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 14;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(117);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 15;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 128) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 128;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 7;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 2) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "seq_num_r2c" field.</summary>
  public const int SeqNumR2CFieldNumber = 8;
  private readonly static uint SeqNumR2CDefaultValue = 0;

  private uint seqNumR2C_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumR2C {
    get { if ((_hasBits0 & 4) != 0) { return seqNumR2C_; } else { return SeqNumR2CDefaultValue; } }
    set {
      _hasBits0 |= 4;
      seqNumR2C_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_r2c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumR2C {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_r2c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumR2C() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 9;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 8) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 8;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsRouterToClient);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsRouterToClient other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    if (MigrateRequestIp != other.MigrateRequestIp) return false;
    if (MigrateRequestPort != other.MigrateRequestPort) return false;
    if (ScoringPenaltyRelayCluster != other.ScoringPenaltyRelayCluster) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (SeqNumR2C != other.SeqNumR2C) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (HasMigrateRequestIp) hash ^= MigrateRequestIp.GetHashCode();
    if (HasMigrateRequestPort) hash ^= MigrateRequestPort.GetHashCode();
    if (HasScoringPenaltyRelayCluster) hash ^= ScoringPenaltyRelayCluster.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasSeqNumR2C) hash ^= SeqNumR2C.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(48);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(64);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(72);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasMigrateRequestIp) {
      output.WriteRawTag(85);
      output.WriteFixed32(MigrateRequestIp);
    }
    if (HasMigrateRequestPort) {
      output.WriteRawTag(88);
      output.WriteUInt32(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(96);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(120);
      output.WriteUInt32(Flags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(48);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(64);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(72);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasMigrateRequestIp) {
      output.WriteRawTag(85);
      output.WriteFixed32(MigrateRequestIp);
    }
    if (HasMigrateRequestPort) {
      output.WriteRawTag(88);
      output.WriteUInt32(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(96);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(120);
      output.WriteUInt32(Flags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (HasMigrateRequestIp) {
      size += 1 + 4;
    }
    if (HasMigrateRequestPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoringPenaltyRelayCluster);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasSeqNumR2C) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsRouterToClient other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    if (other.HasMigrateRequestIp) {
      MigrateRequestIp = other.MigrateRequestIp;
    }
    if (other.HasMigrateRequestPort) {
      MigrateRequestPort = other.MigrateRequestPort;
    }
    if (other.HasScoringPenaltyRelayCluster) {
      ScoringPenaltyRelayCluster = other.ScoringPenaltyRelayCluster;
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasSeqNumR2C) {
      SeqNumR2C = other.SeqNumR2C;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 48: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 61: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 64: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 72: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 85: {
          MigrateRequestIp = input.ReadFixed32();
          break;
        }
        case 88: {
          MigrateRequestPort = input.ReadUInt32();
          break;
        }
        case 96: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 106:
        case 109: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 114:
        case 117: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 120: {
          Flags = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 48: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 61: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 64: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 72: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 85: {
          MigrateRequestIp = input.ReadFixed32();
          break;
        }
        case 88: {
          MigrateRequestPort = input.ReadUInt32();
          break;
        }
        case 96: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 106:
        case 109: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 114:
        case 117: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 120: {
          Flags = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsRouterToClient message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramConnectionStatsRouterToServer : pb::IMessage<CMsgSteamDatagramConnectionStatsRouterToServer>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToServer> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToServer>(() => new CMsgSteamDatagramConnectionStatsRouterToServer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsRouterToServer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToServer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToServer(CMsgSteamDatagramConnectionStatsRouterToServer other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    seqNumR2S_ = other.seqNumR2S_;
    seqNumE2E_ = other.seqNumE2E_;
    clientIdentityString_ = other.clientIdentityString_;
    legacyClientSteamId_ = other.legacyClientSteamId_;
    relaySessionId_ = other.relaySessionId_;
    clientConnectionId_ = other.clientConnectionId_;
    serverConnectionId_ = other.serverConnectionId_;
    routingSecret_ = other.routingSecret_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsRouterToServer Clone() {
    return new CMsgSteamDatagramConnectionStatsRouterToServer(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 10;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(85);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 11;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(93);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 12;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 32) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 32;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "seq_num_r2s" field.</summary>
  public const int SeqNumR2SFieldNumber = 5;
  private readonly static uint SeqNumR2SDefaultValue = 0;

  private uint seqNumR2S_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumR2S {
    get { if ((_hasBits0 & 1) != 0) { return seqNumR2S_; } else { return SeqNumR2SDefaultValue; } }
    set {
      _hasBits0 |= 1;
      seqNumR2S_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_r2s" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumR2S {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_r2s" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumR2S() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 6;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 2) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 2;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "client_identity_string" field.</summary>
  public const int ClientIdentityStringFieldNumber = 15;
  private readonly static string ClientIdentityStringDefaultValue = "";

  private string clientIdentityString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientIdentityString {
    get { return clientIdentityString_ ?? ClientIdentityStringDefaultValue; }
    set {
      clientIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "client_identity_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientIdentityString {
    get { return clientIdentityString_ != null; }
  }
  /// <summary>Clears the value of the "client_identity_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientIdentityString() {
    clientIdentityString_ = null;
  }

  /// <summary>Field number for the "legacy_client_steam_id" field.</summary>
  public const int LegacyClientSteamIdFieldNumber = 7;
  private readonly static ulong LegacyClientSteamIdDefaultValue = 0UL;

  private ulong legacyClientSteamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyClientSteamId {
    get { if ((_hasBits0 & 4) != 0) { return legacyClientSteamId_; } else { return LegacyClientSteamIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      legacyClientSteamId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_client_steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyClientSteamId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "legacy_client_steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyClientSteamId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "relay_session_id" field.</summary>
  public const int RelaySessionIdFieldNumber = 8;
  private readonly static uint RelaySessionIdDefaultValue = 0;

  private uint relaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RelaySessionId {
    get { if ((_hasBits0 & 8) != 0) { return relaySessionId_; } else { return RelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      relaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelaySessionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelaySessionId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 9;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 16) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "server_connection_id" field.</summary>
  public const int ServerConnectionIdFieldNumber = 13;
  private readonly static uint ServerConnectionIdDefaultValue = 0;

  private uint serverConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerConnectionId {
    get { if ((_hasBits0 & 64) != 0) { return serverConnectionId_; } else { return ServerConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      serverConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "server_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerConnectionId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "server_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerConnectionId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "routing_secret" field.</summary>
  public const int RoutingSecretFieldNumber = 14;
  private readonly static ulong RoutingSecretDefaultValue = 0UL;

  private ulong routingSecret_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong RoutingSecret {
    get { if ((_hasBits0 & 128) != 0) { return routingSecret_; } else { return RoutingSecretDefaultValue; } }
    set {
      _hasBits0 |= 128;
      routingSecret_ = value;
    }
  }
  /// <summary>Gets whether the "routing_secret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutingSecret {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "routing_secret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutingSecret() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsRouterToServer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsRouterToServer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (SeqNumR2S != other.SeqNumR2S) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    if (ClientIdentityString != other.ClientIdentityString) return false;
    if (LegacyClientSteamId != other.LegacyClientSteamId) return false;
    if (RelaySessionId != other.RelaySessionId) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (ServerConnectionId != other.ServerConnectionId) return false;
    if (RoutingSecret != other.RoutingSecret) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasSeqNumR2S) hash ^= SeqNumR2S.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (HasClientIdentityString) hash ^= ClientIdentityString.GetHashCode();
    if (HasLegacyClientSteamId) hash ^= LegacyClientSteamId.GetHashCode();
    if (HasRelaySessionId) hash ^= RelaySessionId.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasServerConnectionId) hash ^= ServerConnectionId.GetHashCode();
    if (HasRoutingSecret) hash ^= RoutingSecret.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSeqNumR2S) {
      output.WriteRawTag(40);
      output.WriteUInt32(SeqNumR2S);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(48);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasLegacyClientSteamId) {
      output.WriteRawTag(57);
      output.WriteFixed64(LegacyClientSteamId);
    }
    if (HasRelaySessionId) {
      output.WriteRawTag(64);
      output.WriteUInt32(RelaySessionId);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ClientConnectionId);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(96);
      output.WriteUInt32(Flags);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(109);
      output.WriteFixed32(ServerConnectionId);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(113);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasClientIdentityString) {
      output.WriteRawTag(122);
      output.WriteString(ClientIdentityString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSeqNumR2S) {
      output.WriteRawTag(40);
      output.WriteUInt32(SeqNumR2S);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(48);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasLegacyClientSteamId) {
      output.WriteRawTag(57);
      output.WriteFixed64(LegacyClientSteamId);
    }
    if (HasRelaySessionId) {
      output.WriteRawTag(64);
      output.WriteUInt32(RelaySessionId);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(77);
      output.WriteFixed32(ClientConnectionId);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(96);
      output.WriteUInt32(Flags);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(109);
      output.WriteFixed32(ServerConnectionId);
    }
    if (HasRoutingSecret) {
      output.WriteRawTag(113);
      output.WriteFixed64(RoutingSecret);
    }
    if (HasClientIdentityString) {
      output.WriteRawTag(122);
      output.WriteString(ClientIdentityString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasSeqNumR2S) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumR2S);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (HasClientIdentityString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIdentityString);
    }
    if (HasLegacyClientSteamId) {
      size += 1 + 8;
    }
    if (HasRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelaySessionId);
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasServerConnectionId) {
      size += 1 + 4;
    }
    if (HasRoutingSecret) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsRouterToServer other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasSeqNumR2S) {
      SeqNumR2S = other.SeqNumR2S;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    if (other.HasClientIdentityString) {
      ClientIdentityString = other.ClientIdentityString;
    }
    if (other.HasLegacyClientSteamId) {
      LegacyClientSteamId = other.LegacyClientSteamId;
    }
    if (other.HasRelaySessionId) {
      RelaySessionId = other.RelaySessionId;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasServerConnectionId) {
      ServerConnectionId = other.ServerConnectionId;
    }
    if (other.HasRoutingSecret) {
      RoutingSecret = other.RoutingSecret;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 40: {
          SeqNumR2S = input.ReadUInt32();
          break;
        }
        case 48: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 57: {
          LegacyClientSteamId = input.ReadFixed64();
          break;
        }
        case 64: {
          RelaySessionId = input.ReadUInt32();
          break;
        }
        case 77: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 82:
        case 85: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 90:
        case 93: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 96: {
          Flags = input.ReadUInt32();
          break;
        }
        case 109: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
        case 113: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 122: {
          ClientIdentityString = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 40: {
          SeqNumR2S = input.ReadUInt32();
          break;
        }
        case 48: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 57: {
          LegacyClientSteamId = input.ReadFixed64();
          break;
        }
        case 64: {
          RelaySessionId = input.ReadUInt32();
          break;
        }
        case 77: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 82:
        case 85: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 90:
        case 93: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 96: {
          Flags = input.ReadUInt32();
          break;
        }
        case 109: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
        case 113: {
          RoutingSecret = input.ReadFixed64();
          break;
        }
        case 122: {
          ClientIdentityString = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsRouterToServer message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramConnectionStatsServerToRouter : pb::IMessage<CMsgSteamDatagramConnectionStatsServerToRouter>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsServerToRouter> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsServerToRouter>(() => new CMsgSteamDatagramConnectionStatsServerToRouter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsServerToRouter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsServerToRouter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsServerToRouter(CMsgSteamDatagramConnectionStatsServerToRouter other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    seqNumS2R_ = other.seqNumS2R_;
    seqNumE2E_ = other.seqNumE2E_;
    relaySessionId_ = other.relaySessionId_;
    clientConnectionId_ = other.clientConnectionId_;
    serverConnectionId_ = other.serverConnectionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsServerToRouter Clone() {
    return new CMsgSteamDatagramConnectionStatsServerToRouter(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 8;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(69);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 9;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(77);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 10;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 16) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "seq_num_s2r" field.</summary>
  public const int SeqNumS2RFieldNumber = 3;
  private readonly static uint SeqNumS2RDefaultValue = 0;

  private uint seqNumS2R_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumS2R {
    get { if ((_hasBits0 & 1) != 0) { return seqNumS2R_; } else { return SeqNumS2RDefaultValue; } }
    set {
      _hasBits0 |= 1;
      seqNumS2R_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_s2r" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumS2R {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_s2r" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumS2R() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 4;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 2) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 2;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "relay_session_id" field.</summary>
  public const int RelaySessionIdFieldNumber = 6;
  private readonly static uint RelaySessionIdDefaultValue = 0;

  private uint relaySessionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RelaySessionId {
    get { if ((_hasBits0 & 4) != 0) { return relaySessionId_; } else { return RelaySessionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      relaySessionId_ = value;
    }
  }
  /// <summary>Gets whether the "relay_session_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelaySessionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "relay_session_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelaySessionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 7;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 8) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "server_connection_id" field.</summary>
  public const int ServerConnectionIdFieldNumber = 11;
  private readonly static uint ServerConnectionIdDefaultValue = 0;

  private uint serverConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ServerConnectionId {
    get { if ((_hasBits0 & 32) != 0) { return serverConnectionId_; } else { return ServerConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      serverConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "server_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerConnectionId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "server_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerConnectionId() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsServerToRouter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsServerToRouter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (SeqNumS2R != other.SeqNumS2R) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    if (RelaySessionId != other.RelaySessionId) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (ServerConnectionId != other.ServerConnectionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasSeqNumS2R) hash ^= SeqNumS2R.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (HasRelaySessionId) hash ^= RelaySessionId.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasServerConnectionId) hash ^= ServerConnectionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSeqNumS2R) {
      output.WriteRawTag(24);
      output.WriteUInt32(SeqNumS2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(32);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasRelaySessionId) {
      output.WriteRawTag(48);
      output.WriteUInt32(RelaySessionId);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ClientConnectionId);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(80);
      output.WriteUInt32(Flags);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(93);
      output.WriteFixed32(ServerConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSeqNumS2R) {
      output.WriteRawTag(24);
      output.WriteUInt32(SeqNumS2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(32);
      output.WriteUInt32(SeqNumE2E);
    }
    if (HasRelaySessionId) {
      output.WriteRawTag(48);
      output.WriteUInt32(RelaySessionId);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(61);
      output.WriteFixed32(ClientConnectionId);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(80);
      output.WriteUInt32(Flags);
    }
    if (HasServerConnectionId) {
      output.WriteRawTag(93);
      output.WriteFixed32(ServerConnectionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasSeqNumS2R) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumS2R);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (HasRelaySessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RelaySessionId);
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasServerConnectionId) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsServerToRouter other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasSeqNumS2R) {
      SeqNumS2R = other.SeqNumS2R;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    if (other.HasRelaySessionId) {
      RelaySessionId = other.RelaySessionId;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasServerConnectionId) {
      ServerConnectionId = other.ServerConnectionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 24: {
          SeqNumS2R = input.ReadUInt32();
          break;
        }
        case 32: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 48: {
          RelaySessionId = input.ReadUInt32();
          break;
        }
        case 61: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 66:
        case 69: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 74:
        case 77: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 80: {
          Flags = input.ReadUInt32();
          break;
        }
        case 93: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 24: {
          SeqNumS2R = input.ReadUInt32();
          break;
        }
        case 32: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 48: {
          RelaySessionId = input.ReadUInt32();
          break;
        }
        case 61: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 66:
        case 69: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 74:
        case 77: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 80: {
          Flags = input.ReadUInt32();
          break;
        }
        case 93: {
          ServerConnectionId = input.ReadFixed32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsServerToRouter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramP2PSessionRequestBody : pb::IMessage<CMsgSteamDatagramP2PSessionRequestBody>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PSessionRequestBody> _parser = new pb::MessageParser<CMsgSteamDatagramP2PSessionRequestBody>(() => new CMsgSteamDatagramP2PSessionRequestBody());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PSessionRequestBody> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequestBody() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequestBody(CMsgSteamDatagramP2PSessionRequestBody other) : this() {
    _hasBits0 = other._hasBits0;
    challengeTime_ = other.challengeTime_;
    challenge_ = other.challenge_;
    clientConnectionId_ = other.clientConnectionId_;
    legacyPeerSteamId_ = other.legacyPeerSteamId_;
    peerIdentityString_ = other.peerIdentityString_;
    peerConnectionId_ = other.peerConnectionId_;
    encryptedData_ = other.encryptedData_;
    encryptionYourPublicKeyLeadByte_ = other.encryptionYourPublicKeyLeadByte_;
    encryptionMyEphemeralPublicKey_ = other.encryptionMyEphemeralPublicKey_;
    protocolVersion_ = other.protocolVersion_;
    networkConfigVersion_ = other.networkConfigVersion_;
    platform_ = other.platform_;
    build_ = other.build_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequestBody Clone() {
    return new CMsgSteamDatagramP2PSessionRequestBody(this);
  }

  /// <summary>Field number for the "challenge_time" field.</summary>
  public const int ChallengeTimeFieldNumber = 1;
  private readonly static uint ChallengeTimeDefaultValue = 0;

  private uint challengeTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChallengeTime {
    get { if ((_hasBits0 & 1) != 0) { return challengeTime_; } else { return ChallengeTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      challengeTime_ = value;
    }
  }
  /// <summary>Gets whether the "challenge_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallengeTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "challenge_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallengeTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "challenge" field.</summary>
  public const int ChallengeFieldNumber = 2;
  private readonly static ulong ChallengeDefaultValue = 0UL;

  private ulong challenge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Challenge {
    get { if ((_hasBits0 & 2) != 0) { return challenge_; } else { return ChallengeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      challenge_ = value;
    }
  }
  /// <summary>Gets whether the "challenge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChallenge {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "challenge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChallenge() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 3;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 4) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "legacy_peer_steam_id" field.</summary>
  public const int LegacyPeerSteamIdFieldNumber = 4;
  private readonly static ulong LegacyPeerSteamIdDefaultValue = 0UL;

  private ulong legacyPeerSteamId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LegacyPeerSteamId {
    get { if ((_hasBits0 & 8) != 0) { return legacyPeerSteamId_; } else { return LegacyPeerSteamIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      legacyPeerSteamId_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_peer_steam_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyPeerSteamId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "legacy_peer_steam_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyPeerSteamId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "peer_identity_string" field.</summary>
  public const int PeerIdentityStringFieldNumber = 11;
  private readonly static string PeerIdentityStringDefaultValue = "";

  private string peerIdentityString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PeerIdentityString {
    get { return peerIdentityString_ ?? PeerIdentityStringDefaultValue; }
    set {
      peerIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "peer_identity_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPeerIdentityString {
    get { return peerIdentityString_ != null; }
  }
  /// <summary>Clears the value of the "peer_identity_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPeerIdentityString() {
    peerIdentityString_ = null;
  }

  /// <summary>Field number for the "peer_connection_id" field.</summary>
  public const int PeerConnectionIdFieldNumber = 5;
  private readonly static uint PeerConnectionIdDefaultValue = 0;

  private uint peerConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PeerConnectionId {
    get { if ((_hasBits0 & 16) != 0) { return peerConnectionId_; } else { return PeerConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      peerConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "peer_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPeerConnectionId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "peer_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPeerConnectionId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "encrypted_data" field.</summary>
  public const int EncryptedDataFieldNumber = 14;
  private readonly static pb::ByteString EncryptedDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString encryptedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString EncryptedData {
    get { return encryptedData_ ?? EncryptedDataDefaultValue; }
    set {
      encryptedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "encrypted_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEncryptedData {
    get { return encryptedData_ != null; }
  }
  /// <summary>Clears the value of the "encrypted_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEncryptedData() {
    encryptedData_ = null;
  }

  /// <summary>Field number for the "encryption_your_public_key_lead_byte" field.</summary>
  public const int EncryptionYourPublicKeyLeadByteFieldNumber = 15;
  private readonly static uint EncryptionYourPublicKeyLeadByteDefaultValue = 0;

  private uint encryptionYourPublicKeyLeadByte_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EncryptionYourPublicKeyLeadByte {
    get { if ((_hasBits0 & 128) != 0) { return encryptionYourPublicKeyLeadByte_; } else { return EncryptionYourPublicKeyLeadByteDefaultValue; } }
    set {
      _hasBits0 |= 128;
      encryptionYourPublicKeyLeadByte_ = value;
    }
  }
  /// <summary>Gets whether the "encryption_your_public_key_lead_byte" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEncryptionYourPublicKeyLeadByte {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "encryption_your_public_key_lead_byte" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEncryptionYourPublicKeyLeadByte() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "encryption_my_ephemeral_public_key" field.</summary>
  public const int EncryptionMyEphemeralPublicKeyFieldNumber = 16;
  private readonly static pb::ByteString EncryptionMyEphemeralPublicKeyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString encryptionMyEphemeralPublicKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString EncryptionMyEphemeralPublicKey {
    get { return encryptionMyEphemeralPublicKey_ ?? EncryptionMyEphemeralPublicKeyDefaultValue; }
    set {
      encryptionMyEphemeralPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "encryption_my_ephemeral_public_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEncryptionMyEphemeralPublicKey {
    get { return encryptionMyEphemeralPublicKey_ != null; }
  }
  /// <summary>Clears the value of the "encryption_my_ephemeral_public_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEncryptionMyEphemeralPublicKey() {
    encryptionMyEphemeralPublicKey_ = null;
  }

  /// <summary>Field number for the "protocol_version" field.</summary>
  public const int ProtocolVersionFieldNumber = 8;
  private readonly static uint ProtocolVersionDefaultValue = 0;

  private uint protocolVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ProtocolVersion {
    get { if ((_hasBits0 & 32) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
    set {
      _hasBits0 |= 32;
      protocolVersion_ = value;
    }
  }
  /// <summary>Gets whether the "protocol_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProtocolVersion {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "protocol_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProtocolVersion() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "network_config_version" field.</summary>
  public const int NetworkConfigVersionFieldNumber = 9;
  private readonly static ulong NetworkConfigVersionDefaultValue = 0UL;

  private ulong networkConfigVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong NetworkConfigVersion {
    get { if ((_hasBits0 & 64) != 0) { return networkConfigVersion_; } else { return NetworkConfigVersionDefaultValue; } }
    set {
      _hasBits0 |= 64;
      networkConfigVersion_ = value;
    }
  }
  /// <summary>Gets whether the "network_config_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNetworkConfigVersion {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "network_config_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNetworkConfigVersion() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 12;
  private readonly static string PlatformDefaultValue = "";

  private string platform_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Platform {
    get { return platform_ ?? PlatformDefaultValue; }
    set {
      platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPlatform {
    get { return platform_ != null; }
  }
  /// <summary>Clears the value of the "platform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPlatform() {
    platform_ = null;
  }

  /// <summary>Field number for the "build" field.</summary>
  public const int BuildFieldNumber = 13;
  private readonly static string BuildDefaultValue = "";

  private string build_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Build {
    get { return build_ ?? BuildDefaultValue; }
    set {
      build_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "build" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuild {
    get { return build_ != null; }
  }
  /// <summary>Clears the value of the "build" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuild() {
    build_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PSessionRequestBody);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PSessionRequestBody other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChallengeTime != other.ChallengeTime) return false;
    if (Challenge != other.Challenge) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (LegacyPeerSteamId != other.LegacyPeerSteamId) return false;
    if (PeerIdentityString != other.PeerIdentityString) return false;
    if (PeerConnectionId != other.PeerConnectionId) return false;
    if (EncryptedData != other.EncryptedData) return false;
    if (EncryptionYourPublicKeyLeadByte != other.EncryptionYourPublicKeyLeadByte) return false;
    if (EncryptionMyEphemeralPublicKey != other.EncryptionMyEphemeralPublicKey) return false;
    if (ProtocolVersion != other.ProtocolVersion) return false;
    if (NetworkConfigVersion != other.NetworkConfigVersion) return false;
    if (Platform != other.Platform) return false;
    if (Build != other.Build) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChallengeTime) hash ^= ChallengeTime.GetHashCode();
    if (HasChallenge) hash ^= Challenge.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasLegacyPeerSteamId) hash ^= LegacyPeerSteamId.GetHashCode();
    if (HasPeerIdentityString) hash ^= PeerIdentityString.GetHashCode();
    if (HasPeerConnectionId) hash ^= PeerConnectionId.GetHashCode();
    if (HasEncryptedData) hash ^= EncryptedData.GetHashCode();
    if (HasEncryptionYourPublicKeyLeadByte) hash ^= EncryptionYourPublicKeyLeadByte.GetHashCode();
    if (HasEncryptionMyEphemeralPublicKey) hash ^= EncryptionMyEphemeralPublicKey.GetHashCode();
    if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
    if (HasNetworkConfigVersion) hash ^= NetworkConfigVersion.GetHashCode();
    if (HasPlatform) hash ^= Platform.GetHashCode();
    if (HasBuild) hash ^= Build.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasChallengeTime) {
      output.WriteRawTag(13);
      output.WriteFixed32(ChallengeTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(17);
      output.WriteFixed64(Challenge);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(29);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasLegacyPeerSteamId) {
      output.WriteRawTag(33);
      output.WriteFixed64(LegacyPeerSteamId);
    }
    if (HasPeerConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(PeerConnectionId);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(64);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(72);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasPeerIdentityString) {
      output.WriteRawTag(90);
      output.WriteString(PeerIdentityString);
    }
    if (HasPlatform) {
      output.WriteRawTag(98);
      output.WriteString(Platform);
    }
    if (HasBuild) {
      output.WriteRawTag(106);
      output.WriteString(Build);
    }
    if (HasEncryptedData) {
      output.WriteRawTag(114);
      output.WriteBytes(EncryptedData);
    }
    if (HasEncryptionYourPublicKeyLeadByte) {
      output.WriteRawTag(120);
      output.WriteUInt32(EncryptionYourPublicKeyLeadByte);
    }
    if (HasEncryptionMyEphemeralPublicKey) {
      output.WriteRawTag(130, 1);
      output.WriteBytes(EncryptionMyEphemeralPublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasChallengeTime) {
      output.WriteRawTag(13);
      output.WriteFixed32(ChallengeTime);
    }
    if (HasChallenge) {
      output.WriteRawTag(17);
      output.WriteFixed64(Challenge);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(29);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasLegacyPeerSteamId) {
      output.WriteRawTag(33);
      output.WriteFixed64(LegacyPeerSteamId);
    }
    if (HasPeerConnectionId) {
      output.WriteRawTag(45);
      output.WriteFixed32(PeerConnectionId);
    }
    if (HasProtocolVersion) {
      output.WriteRawTag(64);
      output.WriteUInt32(ProtocolVersion);
    }
    if (HasNetworkConfigVersion) {
      output.WriteRawTag(72);
      output.WriteUInt64(NetworkConfigVersion);
    }
    if (HasPeerIdentityString) {
      output.WriteRawTag(90);
      output.WriteString(PeerIdentityString);
    }
    if (HasPlatform) {
      output.WriteRawTag(98);
      output.WriteString(Platform);
    }
    if (HasBuild) {
      output.WriteRawTag(106);
      output.WriteString(Build);
    }
    if (HasEncryptedData) {
      output.WriteRawTag(114);
      output.WriteBytes(EncryptedData);
    }
    if (HasEncryptionYourPublicKeyLeadByte) {
      output.WriteRawTag(120);
      output.WriteUInt32(EncryptionYourPublicKeyLeadByte);
    }
    if (HasEncryptionMyEphemeralPublicKey) {
      output.WriteRawTag(130, 1);
      output.WriteBytes(EncryptionMyEphemeralPublicKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasChallengeTime) {
      size += 1 + 4;
    }
    if (HasChallenge) {
      size += 1 + 8;
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasLegacyPeerSteamId) {
      size += 1 + 8;
    }
    if (HasPeerIdentityString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PeerIdentityString);
    }
    if (HasPeerConnectionId) {
      size += 1 + 4;
    }
    if (HasEncryptedData) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedData);
    }
    if (HasEncryptionYourPublicKeyLeadByte) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EncryptionYourPublicKeyLeadByte);
    }
    if (HasEncryptionMyEphemeralPublicKey) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(EncryptionMyEphemeralPublicKey);
    }
    if (HasProtocolVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtocolVersion);
    }
    if (HasNetworkConfigVersion) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NetworkConfigVersion);
    }
    if (HasPlatform) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
    }
    if (HasBuild) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Build);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PSessionRequestBody other) {
    if (other == null) {
      return;
    }
    if (other.HasChallengeTime) {
      ChallengeTime = other.ChallengeTime;
    }
    if (other.HasChallenge) {
      Challenge = other.Challenge;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasLegacyPeerSteamId) {
      LegacyPeerSteamId = other.LegacyPeerSteamId;
    }
    if (other.HasPeerIdentityString) {
      PeerIdentityString = other.PeerIdentityString;
    }
    if (other.HasPeerConnectionId) {
      PeerConnectionId = other.PeerConnectionId;
    }
    if (other.HasEncryptedData) {
      EncryptedData = other.EncryptedData;
    }
    if (other.HasEncryptionYourPublicKeyLeadByte) {
      EncryptionYourPublicKeyLeadByte = other.EncryptionYourPublicKeyLeadByte;
    }
    if (other.HasEncryptionMyEphemeralPublicKey) {
      EncryptionMyEphemeralPublicKey = other.EncryptionMyEphemeralPublicKey;
    }
    if (other.HasProtocolVersion) {
      ProtocolVersion = other.ProtocolVersion;
    }
    if (other.HasNetworkConfigVersion) {
      NetworkConfigVersion = other.NetworkConfigVersion;
    }
    if (other.HasPlatform) {
      Platform = other.Platform;
    }
    if (other.HasBuild) {
      Build = other.Build;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ChallengeTime = input.ReadFixed32();
          break;
        }
        case 17: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 29: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 33: {
          LegacyPeerSteamId = input.ReadFixed64();
          break;
        }
        case 45: {
          PeerConnectionId = input.ReadFixed32();
          break;
        }
        case 64: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 72: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 90: {
          PeerIdentityString = input.ReadString();
          break;
        }
        case 98: {
          Platform = input.ReadString();
          break;
        }
        case 106: {
          Build = input.ReadString();
          break;
        }
        case 114: {
          EncryptedData = input.ReadBytes();
          break;
        }
        case 120: {
          EncryptionYourPublicKeyLeadByte = input.ReadUInt32();
          break;
        }
        case 130: {
          EncryptionMyEphemeralPublicKey = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ChallengeTime = input.ReadFixed32();
          break;
        }
        case 17: {
          Challenge = input.ReadFixed64();
          break;
        }
        case 29: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 33: {
          LegacyPeerSteamId = input.ReadFixed64();
          break;
        }
        case 45: {
          PeerConnectionId = input.ReadFixed32();
          break;
        }
        case 64: {
          ProtocolVersion = input.ReadUInt32();
          break;
        }
        case 72: {
          NetworkConfigVersion = input.ReadUInt64();
          break;
        }
        case 90: {
          PeerIdentityString = input.ReadString();
          break;
        }
        case 98: {
          Platform = input.ReadString();
          break;
        }
        case 106: {
          Build = input.ReadString();
          break;
        }
        case 114: {
          EncryptedData = input.ReadBytes();
          break;
        }
        case 120: {
          EncryptionYourPublicKeyLeadByte = input.ReadUInt32();
          break;
        }
        case 130: {
          EncryptionMyEphemeralPublicKey = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramP2PSessionRequestBody message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class EncryptedData : pb::IMessage<EncryptedData>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<EncryptedData> _parser = new pb::MessageParser<EncryptedData>(() => new EncryptedData());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<EncryptedData> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramP2PSessionRequestBody.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public EncryptedData() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public EncryptedData(EncryptedData other) : this() {
        peerIdentityString_ = other.peerIdentityString_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public EncryptedData Clone() {
        return new EncryptedData(this);
      }

      /// <summary>Field number for the "peer_identity_string" field.</summary>
      public const int PeerIdentityStringFieldNumber = 1;
      private readonly static string PeerIdentityStringDefaultValue = "";

      private string peerIdentityString_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string PeerIdentityString {
        get { return peerIdentityString_ ?? PeerIdentityStringDefaultValue; }
        set {
          peerIdentityString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "peer_identity_string" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPeerIdentityString {
        get { return peerIdentityString_ != null; }
      }
      /// <summary>Clears the value of the "peer_identity_string" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPeerIdentityString() {
        peerIdentityString_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as EncryptedData);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(EncryptedData other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (PeerIdentityString != other.PeerIdentityString) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasPeerIdentityString) hash ^= PeerIdentityString.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasPeerIdentityString) {
          output.WriteRawTag(10);
          output.WriteString(PeerIdentityString);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasPeerIdentityString) {
          output.WriteRawTag(10);
          output.WriteString(PeerIdentityString);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasPeerIdentityString) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(PeerIdentityString);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(EncryptedData other) {
        if (other == null) {
          return;
        }
        if (other.HasPeerIdentityString) {
          PeerIdentityString = other.PeerIdentityString;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              PeerIdentityString = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              PeerIdentityString = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramP2PSessionRequest : pb::IMessage<CMsgSteamDatagramP2PSessionRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PSessionRequest> _parser = new pb::MessageParser<CMsgSteamDatagramP2PSessionRequest>(() => new CMsgSteamDatagramP2PSessionRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PSessionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequest(CMsgSteamDatagramP2PSessionRequest other) : this() {
    cert_ = other.cert_ != null ? other.cert_.Clone() : null;
    body_ = other.body_;
    signature_ = other.signature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionRequest Clone() {
    return new CMsgSteamDatagramP2PSessionRequest(this);
  }

  /// <summary>Field number for the "cert" field.</summary>
  public const int CertFieldNumber = 1;
  private global::CMsgSteamDatagramCertificateSigned cert_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramCertificateSigned Cert {
    get { return cert_; }
    set {
      cert_ = value;
    }
  }

  /// <summary>Field number for the "body" field.</summary>
  public const int BodyFieldNumber = 2;
  private readonly static pb::ByteString BodyDefaultValue = pb::ByteString.Empty;

  private pb::ByteString body_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Body {
    get { return body_ ?? BodyDefaultValue; }
    set {
      body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "body" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBody {
    get { return body_ != null; }
  }
  /// <summary>Clears the value of the "body" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBody() {
    body_ = null;
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 3;
  private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

  private pb::ByteString signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignature() {
    signature_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PSessionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PSessionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Cert, other.Cert)) return false;
    if (Body != other.Body) return false;
    if (Signature != other.Signature) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (cert_ != null) hash ^= Cert.GetHashCode();
    if (HasBody) hash ^= Body.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (cert_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Cert);
    }
    if (HasBody) {
      output.WriteRawTag(18);
      output.WriteBytes(Body);
    }
    if (HasSignature) {
      output.WriteRawTag(26);
      output.WriteBytes(Signature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (cert_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Cert);
    }
    if (HasBody) {
      output.WriteRawTag(18);
      output.WriteBytes(Body);
    }
    if (HasSignature) {
      output.WriteRawTag(26);
      output.WriteBytes(Signature);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (cert_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cert);
    }
    if (HasBody) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PSessionRequest other) {
    if (other == null) {
      return;
    }
    if (other.cert_ != null) {
      if (cert_ == null) {
        Cert = new global::CMsgSteamDatagramCertificateSigned();
      }
      Cert.MergeFrom(other.Cert);
    }
    if (other.HasBody) {
      Body = other.Body;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 18: {
          Body = input.ReadBytes();
          break;
        }
        case 26: {
          Signature = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (cert_ == null) {
            Cert = new global::CMsgSteamDatagramCertificateSigned();
          }
          input.ReadMessage(Cert);
          break;
        }
        case 18: {
          Body = input.ReadBytes();
          break;
        }
        case 26: {
          Signature = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramP2PSessionEstablished : pb::IMessage<CMsgSteamDatagramP2PSessionEstablished>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PSessionEstablished> _parser = new pb::MessageParser<CMsgSteamDatagramP2PSessionEstablished>(() => new CMsgSteamDatagramP2PSessionEstablished());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PSessionEstablished> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionEstablished() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionEstablished(CMsgSteamDatagramP2PSessionEstablished other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    relayRoutingToken_ = other.relayRoutingToken_;
    seqNumR2C_ = other.seqNumR2C_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PSessionEstablished Clone() {
    return new CMsgSteamDatagramP2PSessionEstablished(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 3;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 2) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 2;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "relay_routing_token" field.</summary>
  public const int RelayRoutingTokenFieldNumber = 4;
  private readonly static pb::ByteString RelayRoutingTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString relayRoutingToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString RelayRoutingToken {
    get { return relayRoutingToken_ ?? RelayRoutingTokenDefaultValue; }
    set {
      relayRoutingToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "relay_routing_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelayRoutingToken {
    get { return relayRoutingToken_ != null; }
  }
  /// <summary>Clears the value of the "relay_routing_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelayRoutingToken() {
    relayRoutingToken_ = null;
  }

  /// <summary>Field number for the "seq_num_r2c" field.</summary>
  public const int SeqNumR2CFieldNumber = 5;
  private readonly static uint SeqNumR2CDefaultValue = 0;

  private uint seqNumR2C_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumR2C {
    get { if ((_hasBits0 & 4) != 0) { return seqNumR2C_; } else { return SeqNumR2CDefaultValue; } }
    set {
      _hasBits0 |= 4;
      seqNumR2C_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_r2c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumR2C {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_r2c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumR2C() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PSessionEstablished);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PSessionEstablished other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    if (RelayRoutingToken != other.RelayRoutingToken) return false;
    if (SeqNumR2C != other.SeqNumR2C) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (HasRelayRoutingToken) hash ^= RelayRoutingToken.GetHashCode();
    if (HasSeqNumR2C) hash ^= SeqNumR2C.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(24);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasRelayRoutingToken) {
      output.WriteRawTag(34);
      output.WriteBytes(RelayRoutingToken);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(40);
      output.WriteUInt32(SeqNumR2C);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(24);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasRelayRoutingToken) {
      output.WriteRawTag(34);
      output.WriteBytes(RelayRoutingToken);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(40);
      output.WriteUInt32(SeqNumR2C);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (HasRelayRoutingToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RelayRoutingToken);
    }
    if (HasSeqNumR2C) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumR2C);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PSessionEstablished other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    if (other.HasRelayRoutingToken) {
      RelayRoutingToken = other.RelayRoutingToken;
    }
    if (other.HasSeqNumR2C) {
      SeqNumR2C = other.SeqNumR2C;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 24: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 34: {
          RelayRoutingToken = input.ReadBytes();
          break;
        }
        case 40: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 24: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 34: {
          RelayRoutingToken = input.ReadBytes();
          break;
        }
        case 40: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramConnectionStatsP2PClientToRouter : pb::IMessage<CMsgSteamDatagramConnectionStatsP2PClientToRouter>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PClientToRouter> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(() => new CMsgSteamDatagramConnectionStatsP2PClientToRouter());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PClientToRouter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PClientToRouter(CMsgSteamDatagramConnectionStatsP2PClientToRouter other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    p2PRoutingSummary_ = other.p2PRoutingSummary_ != null ? other.p2PRoutingSummary_.Clone() : null;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    forwardTargetRelayRoutingToken_ = other.forwardTargetRelayRoutingToken_;
    forwardTargetRevision_ = other.forwardTargetRevision_;
    routes_ = other.routes_;
    ackPeerRoutesRevision_ = other.ackPeerRoutesRevision_;
    connectionId_ = other.connectionId_;
    seqNumC2R_ = other.seqNumC2R_;
    seqNumE2E_ = other.seqNumE2E_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PClientToRouter Clone() {
    return new CMsgSteamDatagramConnectionStatsP2PClientToRouter(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "p2p_routing_summary" field.</summary>
  public const int P2PRoutingSummaryFieldNumber = 14;
  private global::CMsgSteamDatagramP2PRoutingSummary p2PRoutingSummary_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramP2PRoutingSummary P2PRoutingSummary {
    get { return p2PRoutingSummary_; }
    set {
      p2PRoutingSummary_ = value;
    }
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(29);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(37);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 5;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 1) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "forward_target_relay_routing_token" field.</summary>
  public const int ForwardTargetRelayRoutingTokenFieldNumber = 6;
  private readonly static pb::ByteString ForwardTargetRelayRoutingTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString forwardTargetRelayRoutingToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString ForwardTargetRelayRoutingToken {
    get { return forwardTargetRelayRoutingToken_ ?? ForwardTargetRelayRoutingTokenDefaultValue; }
    set {
      forwardTargetRelayRoutingToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "forward_target_relay_routing_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForwardTargetRelayRoutingToken {
    get { return forwardTargetRelayRoutingToken_ != null; }
  }
  /// <summary>Clears the value of the "forward_target_relay_routing_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForwardTargetRelayRoutingToken() {
    forwardTargetRelayRoutingToken_ = null;
  }

  /// <summary>Field number for the "forward_target_revision" field.</summary>
  public const int ForwardTargetRevisionFieldNumber = 7;
  private readonly static uint ForwardTargetRevisionDefaultValue = 0;

  private uint forwardTargetRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ForwardTargetRevision {
    get { if ((_hasBits0 & 2) != 0) { return forwardTargetRevision_; } else { return ForwardTargetRevisionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      forwardTargetRevision_ = value;
    }
  }
  /// <summary>Gets whether the "forward_target_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForwardTargetRevision {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "forward_target_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForwardTargetRevision() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "routes" field.</summary>
  public const int RoutesFieldNumber = 8;
  private readonly static pb::ByteString RoutesDefaultValue = pb::ByteString.Empty;

  private pb::ByteString routes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Routes {
    get { return routes_ ?? RoutesDefaultValue; }
    set {
      routes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "routes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutes {
    get { return routes_ != null; }
  }
  /// <summary>Clears the value of the "routes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutes() {
    routes_ = null;
  }

  /// <summary>Field number for the "ack_peer_routes_revision" field.</summary>
  public const int AckPeerRoutesRevisionFieldNumber = 9;
  private readonly static uint AckPeerRoutesRevisionDefaultValue = 0;

  private uint ackPeerRoutesRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AckPeerRoutesRevision {
    get { if ((_hasBits0 & 4) != 0) { return ackPeerRoutesRevision_; } else { return AckPeerRoutesRevisionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ackPeerRoutesRevision_ = value;
    }
  }
  /// <summary>Gets whether the "ack_peer_routes_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAckPeerRoutesRevision {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ack_peer_routes_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAckPeerRoutesRevision() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 10;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 8) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "seq_num_c2r" field.</summary>
  public const int SeqNumC2RFieldNumber = 11;
  private readonly static uint SeqNumC2RDefaultValue = 0;

  private uint seqNumC2R_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumC2R {
    get { if ((_hasBits0 & 16) != 0) { return seqNumC2R_; } else { return SeqNumC2RDefaultValue; } }
    set {
      _hasBits0 |= 16;
      seqNumC2R_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_c2r" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumC2R {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_c2r" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumC2R() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 12;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 32) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 32;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsP2PClientToRouter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsP2PClientToRouter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if (!object.Equals(P2PRoutingSummary, other.P2PRoutingSummary)) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (ForwardTargetRelayRoutingToken != other.ForwardTargetRelayRoutingToken) return false;
    if (ForwardTargetRevision != other.ForwardTargetRevision) return false;
    if (Routes != other.Routes) return false;
    if (AckPeerRoutesRevision != other.AckPeerRoutesRevision) return false;
    if (ConnectionId != other.ConnectionId) return false;
    if (SeqNumC2R != other.SeqNumC2R) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    if (p2PRoutingSummary_ != null) hash ^= P2PRoutingSummary.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasForwardTargetRelayRoutingToken) hash ^= ForwardTargetRelayRoutingToken.GetHashCode();
    if (HasForwardTargetRevision) hash ^= ForwardTargetRevision.GetHashCode();
    if (HasRoutes) hash ^= Routes.GetHashCode();
    if (HasAckPeerRoutesRevision) hash ^= AckPeerRoutesRevision.GetHashCode();
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasSeqNumC2R) hash ^= SeqNumC2R.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(40);
      output.WriteUInt32(Flags);
    }
    if (HasForwardTargetRelayRoutingToken) {
      output.WriteRawTag(50);
      output.WriteBytes(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      output.WriteRawTag(56);
      output.WriteUInt32(ForwardTargetRevision);
    }
    if (HasRoutes) {
      output.WriteRawTag(66);
      output.WriteBytes(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      output.WriteRawTag(72);
      output.WriteUInt32(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSeqNumC2R) {
      output.WriteRawTag(88);
      output.WriteUInt32(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(96);
      output.WriteUInt32(SeqNumE2E);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(40);
      output.WriteUInt32(Flags);
    }
    if (HasForwardTargetRelayRoutingToken) {
      output.WriteRawTag(50);
      output.WriteBytes(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      output.WriteRawTag(56);
      output.WriteUInt32(ForwardTargetRevision);
    }
    if (HasRoutes) {
      output.WriteRawTag(66);
      output.WriteBytes(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      output.WriteRawTag(72);
      output.WriteUInt32(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      output.WriteRawTag(85);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSeqNumC2R) {
      output.WriteRawTag(88);
      output.WriteUInt32(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(96);
      output.WriteUInt32(SeqNumE2E);
    }
    if (p2PRoutingSummary_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(P2PRoutingSummary);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    if (p2PRoutingSummary_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2PRoutingSummary);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasForwardTargetRelayRoutingToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ForwardTargetRelayRoutingToken);
    }
    if (HasForwardTargetRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForwardTargetRevision);
    }
    if (HasRoutes) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasSeqNumC2R) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumC2R);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsP2PClientToRouter other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    if (other.p2PRoutingSummary_ != null) {
      if (p2PRoutingSummary_ == null) {
        P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
      }
      P2PRoutingSummary.MergeFrom(other.P2PRoutingSummary);
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasForwardTargetRelayRoutingToken) {
      ForwardTargetRelayRoutingToken = other.ForwardTargetRelayRoutingToken;
    }
    if (other.HasForwardTargetRevision) {
      ForwardTargetRevision = other.ForwardTargetRevision;
    }
    if (other.HasRoutes) {
      Routes = other.Routes;
    }
    if (other.HasAckPeerRoutesRevision) {
      AckPeerRoutesRevision = other.AckPeerRoutesRevision;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasSeqNumC2R) {
      SeqNumC2R = other.SeqNumC2R;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 26:
        case 29: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 34:
        case 37: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 40: {
          Flags = input.ReadUInt32();
          break;
        }
        case 50: {
          ForwardTargetRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 56: {
          ForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 66: {
          Routes = input.ReadBytes();
          break;
        }
        case 72: {
          AckPeerRoutesRevision = input.ReadUInt32();
          break;
        }
        case 85: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 88: {
          SeqNumC2R = input.ReadUInt32();
          break;
        }
        case 96: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 114: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 26:
        case 29: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 34:
        case 37: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 40: {
          Flags = input.ReadUInt32();
          break;
        }
        case 50: {
          ForwardTargetRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 56: {
          ForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 66: {
          Routes = input.ReadBytes();
          break;
        }
        case 72: {
          AckPeerRoutesRevision = input.ReadUInt32();
          break;
        }
        case 85: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 88: {
          SeqNumC2R = input.ReadUInt32();
          break;
        }
        case 96: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
        case 114: {
          if (p2PRoutingSummary_ == null) {
            P2PRoutingSummary = new global::CMsgSteamDatagramP2PRoutingSummary();
          }
          input.ReadMessage(P2PRoutingSummary);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsP2PClientToRouter message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
      [pbr::OriginalName("NOT_PRIMARY_SESSION")] NotPrimarySession = 8,
      [pbr::OriginalName("NOT_PRIMARY_TRANSPORT_E2E")] NotPrimaryTransportE2E = 16,
      [pbr::OriginalName("CLIENT_RELAY_OVERRIDE")] ClientRelayOverride = 32,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramConnectionStatsP2PRouterToClient : pb::IMessage<CMsgSteamDatagramConnectionStatsP2PRouterToClient>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PRouterToClient> _parser = new pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(() => new CMsgSteamDatagramConnectionStatsP2PRouterToClient());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramConnectionStatsP2PRouterToClient> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PRouterToClient(CMsgSteamDatagramConnectionStatsP2PRouterToClient other) : this() {
    _hasBits0 = other._hasBits0;
    qualityRelay_ = other.qualityRelay_ != null ? other.qualityRelay_.Clone() : null;
    qualityE2E_ = other.qualityE2E_ != null ? other.qualityE2E_.Clone() : null;
    secondsUntilShutdown_ = other.secondsUntilShutdown_;
    migrateRequestIp_ = other.migrateRequestIp_;
    migrateRequestPort_ = other.migrateRequestPort_;
    scoringPenaltyRelayCluster_ = other.scoringPenaltyRelayCluster_;
    ackRelay_ = other.ackRelay_.Clone();
    legacyAckE2E_ = other.legacyAckE2E_.Clone();
    flags_ = other.flags_;
    ackForwardTargetRevision_ = other.ackForwardTargetRevision_;
    routes_ = other.routes_;
    ackPeerRoutesRevision_ = other.ackPeerRoutesRevision_;
    connectionId_ = other.connectionId_;
    seqNumR2C_ = other.seqNumR2C_;
    seqNumE2E_ = other.seqNumE2E_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramConnectionStatsP2PRouterToClient Clone() {
    return new CMsgSteamDatagramConnectionStatsP2PRouterToClient(this);
  }

  /// <summary>Field number for the "quality_relay" field.</summary>
  public const int QualityRelayFieldNumber = 1;
  private global::CMsgSteamDatagramConnectionQuality qualityRelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityRelay {
    get { return qualityRelay_; }
    set {
      qualityRelay_ = value;
    }
  }

  /// <summary>Field number for the "quality_e2e" field.</summary>
  public const int QualityE2EFieldNumber = 2;
  private global::CMsgSteamDatagramConnectionQuality qualityE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgSteamDatagramConnectionQuality QualityE2E {
    get { return qualityE2E_; }
    set {
      qualityE2E_ = value;
    }
  }

  /// <summary>Field number for the "seconds_until_shutdown" field.</summary>
  public const int SecondsUntilShutdownFieldNumber = 3;
  private readonly static uint SecondsUntilShutdownDefaultValue = 0;

  private uint secondsUntilShutdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SecondsUntilShutdown {
    get { if ((_hasBits0 & 1) != 0) { return secondsUntilShutdown_; } else { return SecondsUntilShutdownDefaultValue; } }
    set {
      _hasBits0 |= 1;
      secondsUntilShutdown_ = value;
    }
  }
  /// <summary>Gets whether the "seconds_until_shutdown" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecondsUntilShutdown {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "seconds_until_shutdown" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecondsUntilShutdown() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "migrate_request_ip" field.</summary>
  public const int MigrateRequestIpFieldNumber = 4;
  private readonly static uint MigrateRequestIpDefaultValue = 0;

  private uint migrateRequestIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MigrateRequestIp {
    get { if ((_hasBits0 & 2) != 0) { return migrateRequestIp_; } else { return MigrateRequestIpDefaultValue; } }
    set {
      _hasBits0 |= 2;
      migrateRequestIp_ = value;
    }
  }
  /// <summary>Gets whether the "migrate_request_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMigrateRequestIp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "migrate_request_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMigrateRequestIp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "migrate_request_port" field.</summary>
  public const int MigrateRequestPortFieldNumber = 5;
  private readonly static uint MigrateRequestPortDefaultValue = 0;

  private uint migrateRequestPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MigrateRequestPort {
    get { if ((_hasBits0 & 4) != 0) { return migrateRequestPort_; } else { return MigrateRequestPortDefaultValue; } }
    set {
      _hasBits0 |= 4;
      migrateRequestPort_ = value;
    }
  }
  /// <summary>Gets whether the "migrate_request_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMigrateRequestPort {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "migrate_request_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMigrateRequestPort() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "scoring_penalty_relay_cluster" field.</summary>
  public const int ScoringPenaltyRelayClusterFieldNumber = 6;
  private readonly static uint ScoringPenaltyRelayClusterDefaultValue = 0;

  private uint scoringPenaltyRelayCluster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ScoringPenaltyRelayCluster {
    get { if ((_hasBits0 & 8) != 0) { return scoringPenaltyRelayCluster_; } else { return ScoringPenaltyRelayClusterDefaultValue; } }
    set {
      _hasBits0 |= 8;
      scoringPenaltyRelayCluster_ = value;
    }
  }
  /// <summary>Gets whether the "scoring_penalty_relay_cluster" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScoringPenaltyRelayCluster {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "scoring_penalty_relay_cluster" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScoringPenaltyRelayCluster() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ack_relay" field.</summary>
  public const int AckRelayFieldNumber = 7;
  private static readonly pb::FieldCodec<uint> _repeated_ackRelay_codec
      = pb::FieldCodec.ForFixed32(61);
  private readonly pbc::RepeatedField<uint> ackRelay_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> AckRelay {
    get { return ackRelay_; }
  }

  /// <summary>Field number for the "legacy_ack_e2e" field.</summary>
  public const int LegacyAckE2EFieldNumber = 8;
  private static readonly pb::FieldCodec<uint> _repeated_legacyAckE2E_codec
      = pb::FieldCodec.ForFixed32(69);
  private readonly pbc::RepeatedField<uint> legacyAckE2E_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> LegacyAckE2E {
    get { return legacyAckE2E_; }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 9;
  private readonly static uint FlagsDefaultValue = 0;

  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Flags {
    get { if ((_hasBits0 & 16) != 0) { return flags_; } else { return FlagsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      flags_ = value;
    }
  }
  /// <summary>Gets whether the "flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFlags {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFlags() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ack_forward_target_revision" field.</summary>
  public const int AckForwardTargetRevisionFieldNumber = 10;
  private readonly static uint AckForwardTargetRevisionDefaultValue = 0;

  private uint ackForwardTargetRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AckForwardTargetRevision {
    get { if ((_hasBits0 & 32) != 0) { return ackForwardTargetRevision_; } else { return AckForwardTargetRevisionDefaultValue; } }
    set {
      _hasBits0 |= 32;
      ackForwardTargetRevision_ = value;
    }
  }
  /// <summary>Gets whether the "ack_forward_target_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAckForwardTargetRevision {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ack_forward_target_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAckForwardTargetRevision() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "routes" field.</summary>
  public const int RoutesFieldNumber = 11;
  private readonly static pb::ByteString RoutesDefaultValue = pb::ByteString.Empty;

  private pb::ByteString routes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Routes {
    get { return routes_ ?? RoutesDefaultValue; }
    set {
      routes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "routes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoutes {
    get { return routes_ != null; }
  }
  /// <summary>Clears the value of the "routes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoutes() {
    routes_ = null;
  }

  /// <summary>Field number for the "ack_peer_routes_revision" field.</summary>
  public const int AckPeerRoutesRevisionFieldNumber = 12;
  private readonly static uint AckPeerRoutesRevisionDefaultValue = 0;

  private uint ackPeerRoutesRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AckPeerRoutesRevision {
    get { if ((_hasBits0 & 64) != 0) { return ackPeerRoutesRevision_; } else { return AckPeerRoutesRevisionDefaultValue; } }
    set {
      _hasBits0 |= 64;
      ackPeerRoutesRevision_ = value;
    }
  }
  /// <summary>Gets whether the "ack_peer_routes_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAckPeerRoutesRevision {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "ack_peer_routes_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAckPeerRoutesRevision() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 13;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 128) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "seq_num_r2c" field.</summary>
  public const int SeqNumR2CFieldNumber = 14;
  private readonly static uint SeqNumR2CDefaultValue = 0;

  private uint seqNumR2C_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumR2C {
    get { if ((_hasBits0 & 256) != 0) { return seqNumR2C_; } else { return SeqNumR2CDefaultValue; } }
    set {
      _hasBits0 |= 256;
      seqNumR2C_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_r2c" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumR2C {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_r2c" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumR2C() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "seq_num_e2e" field.</summary>
  public const int SeqNumE2EFieldNumber = 15;
  private readonly static uint SeqNumE2EDefaultValue = 0;

  private uint seqNumE2E_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SeqNumE2E {
    get { if ((_hasBits0 & 512) != 0) { return seqNumE2E_; } else { return SeqNumE2EDefaultValue; } }
    set {
      _hasBits0 |= 512;
      seqNumE2E_ = value;
    }
  }
  /// <summary>Gets whether the "seq_num_e2e" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSeqNumE2E {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "seq_num_e2e" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSeqNumE2E() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramConnectionStatsP2PRouterToClient);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramConnectionStatsP2PRouterToClient other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(QualityRelay, other.QualityRelay)) return false;
    if (!object.Equals(QualityE2E, other.QualityE2E)) return false;
    if (SecondsUntilShutdown != other.SecondsUntilShutdown) return false;
    if (MigrateRequestIp != other.MigrateRequestIp) return false;
    if (MigrateRequestPort != other.MigrateRequestPort) return false;
    if (ScoringPenaltyRelayCluster != other.ScoringPenaltyRelayCluster) return false;
    if(!ackRelay_.Equals(other.ackRelay_)) return false;
    if(!legacyAckE2E_.Equals(other.legacyAckE2E_)) return false;
    if (Flags != other.Flags) return false;
    if (AckForwardTargetRevision != other.AckForwardTargetRevision) return false;
    if (Routes != other.Routes) return false;
    if (AckPeerRoutesRevision != other.AckPeerRoutesRevision) return false;
    if (ConnectionId != other.ConnectionId) return false;
    if (SeqNumR2C != other.SeqNumR2C) return false;
    if (SeqNumE2E != other.SeqNumE2E) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (qualityRelay_ != null) hash ^= QualityRelay.GetHashCode();
    if (qualityE2E_ != null) hash ^= QualityE2E.GetHashCode();
    if (HasSecondsUntilShutdown) hash ^= SecondsUntilShutdown.GetHashCode();
    if (HasMigrateRequestIp) hash ^= MigrateRequestIp.GetHashCode();
    if (HasMigrateRequestPort) hash ^= MigrateRequestPort.GetHashCode();
    if (HasScoringPenaltyRelayCluster) hash ^= ScoringPenaltyRelayCluster.GetHashCode();
    hash ^= ackRelay_.GetHashCode();
    hash ^= legacyAckE2E_.GetHashCode();
    if (HasFlags) hash ^= Flags.GetHashCode();
    if (HasAckForwardTargetRevision) hash ^= AckForwardTargetRevision.GetHashCode();
    if (HasRoutes) hash ^= Routes.GetHashCode();
    if (HasAckPeerRoutesRevision) hash ^= AckPeerRoutesRevision.GetHashCode();
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasSeqNumR2C) hash ^= SeqNumR2C.GetHashCode();
    if (HasSeqNumE2E) hash ^= SeqNumE2E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(24);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasMigrateRequestIp) {
      output.WriteRawTag(37);
      output.WriteFixed32(MigrateRequestIp);
    }
    if (HasMigrateRequestPort) {
      output.WriteRawTag(40);
      output.WriteUInt32(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(48);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    ackRelay_.WriteTo(output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(72);
      output.WriteUInt32(Flags);
    }
    if (HasAckForwardTargetRevision) {
      output.WriteRawTag(80);
      output.WriteUInt32(AckForwardTargetRevision);
    }
    if (HasRoutes) {
      output.WriteRawTag(90);
      output.WriteBytes(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      output.WriteRawTag(96);
      output.WriteUInt32(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      output.WriteRawTag(109);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(112);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(120);
      output.WriteUInt32(SeqNumE2E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (qualityRelay_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(QualityRelay);
    }
    if (qualityE2E_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      output.WriteRawTag(24);
      output.WriteUInt32(SecondsUntilShutdown);
    }
    if (HasMigrateRequestIp) {
      output.WriteRawTag(37);
      output.WriteFixed32(MigrateRequestIp);
    }
    if (HasMigrateRequestPort) {
      output.WriteRawTag(40);
      output.WriteUInt32(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      output.WriteRawTag(48);
      output.WriteUInt32(ScoringPenaltyRelayCluster);
    }
    ackRelay_.WriteTo(ref output, _repeated_ackRelay_codec);
    legacyAckE2E_.WriteTo(ref output, _repeated_legacyAckE2E_codec);
    if (HasFlags) {
      output.WriteRawTag(72);
      output.WriteUInt32(Flags);
    }
    if (HasAckForwardTargetRevision) {
      output.WriteRawTag(80);
      output.WriteUInt32(AckForwardTargetRevision);
    }
    if (HasRoutes) {
      output.WriteRawTag(90);
      output.WriteBytes(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      output.WriteRawTag(96);
      output.WriteUInt32(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      output.WriteRawTag(109);
      output.WriteFixed32(ConnectionId);
    }
    if (HasSeqNumR2C) {
      output.WriteRawTag(112);
      output.WriteUInt32(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      output.WriteRawTag(120);
      output.WriteUInt32(SeqNumE2E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (qualityRelay_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityRelay);
    }
    if (qualityE2E_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QualityE2E);
    }
    if (HasSecondsUntilShutdown) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsUntilShutdown);
    }
    if (HasMigrateRequestIp) {
      size += 1 + 4;
    }
    if (HasMigrateRequestPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MigrateRequestPort);
    }
    if (HasScoringPenaltyRelayCluster) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoringPenaltyRelayCluster);
    }
    size += ackRelay_.CalculateSize(_repeated_ackRelay_codec);
    size += legacyAckE2E_.CalculateSize(_repeated_legacyAckE2E_codec);
    if (HasFlags) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (HasAckForwardTargetRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckForwardTargetRevision);
    }
    if (HasRoutes) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Routes);
    }
    if (HasAckPeerRoutesRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckPeerRoutesRevision);
    }
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasSeqNumR2C) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumR2C);
    }
    if (HasSeqNumE2E) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNumE2E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramConnectionStatsP2PRouterToClient other) {
    if (other == null) {
      return;
    }
    if (other.qualityRelay_ != null) {
      if (qualityRelay_ == null) {
        QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityRelay.MergeFrom(other.QualityRelay);
    }
    if (other.qualityE2E_ != null) {
      if (qualityE2E_ == null) {
        QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
      }
      QualityE2E.MergeFrom(other.QualityE2E);
    }
    if (other.HasSecondsUntilShutdown) {
      SecondsUntilShutdown = other.SecondsUntilShutdown;
    }
    if (other.HasMigrateRequestIp) {
      MigrateRequestIp = other.MigrateRequestIp;
    }
    if (other.HasMigrateRequestPort) {
      MigrateRequestPort = other.MigrateRequestPort;
    }
    if (other.HasScoringPenaltyRelayCluster) {
      ScoringPenaltyRelayCluster = other.ScoringPenaltyRelayCluster;
    }
    ackRelay_.Add(other.ackRelay_);
    legacyAckE2E_.Add(other.legacyAckE2E_);
    if (other.HasFlags) {
      Flags = other.Flags;
    }
    if (other.HasAckForwardTargetRevision) {
      AckForwardTargetRevision = other.AckForwardTargetRevision;
    }
    if (other.HasRoutes) {
      Routes = other.Routes;
    }
    if (other.HasAckPeerRoutesRevision) {
      AckPeerRoutesRevision = other.AckPeerRoutesRevision;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasSeqNumR2C) {
      SeqNumR2C = other.SeqNumR2C;
    }
    if (other.HasSeqNumE2E) {
      SeqNumE2E = other.SeqNumE2E;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 24: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 37: {
          MigrateRequestIp = input.ReadFixed32();
          break;
        }
        case 40: {
          MigrateRequestPort = input.ReadUInt32();
          break;
        }
        case 48: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 58:
        case 61: {
          ackRelay_.AddEntriesFrom(input, _repeated_ackRelay_codec);
          break;
        }
        case 66:
        case 69: {
          legacyAckE2E_.AddEntriesFrom(input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 72: {
          Flags = input.ReadUInt32();
          break;
        }
        case 80: {
          AckForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 90: {
          Routes = input.ReadBytes();
          break;
        }
        case 96: {
          AckPeerRoutesRevision = input.ReadUInt32();
          break;
        }
        case 109: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 112: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 120: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (qualityRelay_ == null) {
            QualityRelay = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityRelay);
          break;
        }
        case 18: {
          if (qualityE2E_ == null) {
            QualityE2E = new global::CMsgSteamDatagramConnectionQuality();
          }
          input.ReadMessage(QualityE2E);
          break;
        }
        case 24: {
          SecondsUntilShutdown = input.ReadUInt32();
          break;
        }
        case 37: {
          MigrateRequestIp = input.ReadFixed32();
          break;
        }
        case 40: {
          MigrateRequestPort = input.ReadUInt32();
          break;
        }
        case 48: {
          ScoringPenaltyRelayCluster = input.ReadUInt32();
          break;
        }
        case 58:
        case 61: {
          ackRelay_.AddEntriesFrom(ref input, _repeated_ackRelay_codec);
          break;
        }
        case 66:
        case 69: {
          legacyAckE2E_.AddEntriesFrom(ref input, _repeated_legacyAckE2E_codec);
          break;
        }
        case 72: {
          Flags = input.ReadUInt32();
          break;
        }
        case 80: {
          AckForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 90: {
          Routes = input.ReadBytes();
          break;
        }
        case 96: {
          AckPeerRoutesRevision = input.ReadUInt32();
          break;
        }
        case 109: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 112: {
          SeqNumR2C = input.ReadUInt32();
          break;
        }
        case 120: {
          SeqNumE2E = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramConnectionStatsP2PRouterToClient message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum Flags {
      [pbr::OriginalName("ACK_REQUEST_RELAY")] AckRequestRelay = 1,
      [pbr::OriginalName("ACK_REQUEST_E2E")] AckRequestE2E = 2,
      [pbr::OriginalName("ACK_REQUEST_IMMEDIATE")] AckRequestImmediate = 4,
      [pbr::OriginalName("NOT_PRIMARY_TRANSPORT_E2E")] NotPrimaryTransportE2E = 16,
    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramP2PBadRouteRouterToClient : pb::IMessage<CMsgSteamDatagramP2PBadRouteRouterToClient>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PBadRouteRouterToClient> _parser = new pb::MessageParser<CMsgSteamDatagramP2PBadRouteRouterToClient>(() => new CMsgSteamDatagramP2PBadRouteRouterToClient());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PBadRouteRouterToClient> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PBadRouteRouterToClient() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PBadRouteRouterToClient(CMsgSteamDatagramP2PBadRouteRouterToClient other) : this() {
    _hasBits0 = other._hasBits0;
    connectionId_ = other.connectionId_;
    failedRelayRoutingToken_ = other.failedRelayRoutingToken_;
    ackForwardTargetRevision_ = other.ackForwardTargetRevision_;
    kludgePad_ = other.kludgePad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PBadRouteRouterToClient Clone() {
    return new CMsgSteamDatagramP2PBadRouteRouterToClient(this);
  }

  /// <summary>Field number for the "connection_id" field.</summary>
  public const int ConnectionIdFieldNumber = 1;
  private readonly static uint ConnectionIdDefaultValue = 0;

  private uint connectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConnectionId {
    get { if ((_hasBits0 & 1) != 0) { return connectionId_; } else { return ConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      connectionId_ = value;
    }
  }
  /// <summary>Gets whether the "connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConnectionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConnectionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "failed_relay_routing_token" field.</summary>
  public const int FailedRelayRoutingTokenFieldNumber = 2;
  private readonly static pb::ByteString FailedRelayRoutingTokenDefaultValue = pb::ByteString.Empty;

  private pb::ByteString failedRelayRoutingToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString FailedRelayRoutingToken {
    get { return failedRelayRoutingToken_ ?? FailedRelayRoutingTokenDefaultValue; }
    set {
      failedRelayRoutingToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "failed_relay_routing_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFailedRelayRoutingToken {
    get { return failedRelayRoutingToken_ != null; }
  }
  /// <summary>Clears the value of the "failed_relay_routing_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFailedRelayRoutingToken() {
    failedRelayRoutingToken_ = null;
  }

  /// <summary>Field number for the "ack_forward_target_revision" field.</summary>
  public const int AckForwardTargetRevisionFieldNumber = 3;
  private readonly static uint AckForwardTargetRevisionDefaultValue = 0;

  private uint ackForwardTargetRevision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AckForwardTargetRevision {
    get { if ((_hasBits0 & 2) != 0) { return ackForwardTargetRevision_; } else { return AckForwardTargetRevisionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ackForwardTargetRevision_ = value;
    }
  }
  /// <summary>Gets whether the "ack_forward_target_revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAckForwardTargetRevision {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ack_forward_target_revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAckForwardTargetRevision() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "kludge_pad" field.</summary>
  public const int KludgePadFieldNumber = 99;
  private readonly static ulong KludgePadDefaultValue = 0UL;

  private ulong kludgePad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong KludgePad {
    get { if ((_hasBits0 & 4) != 0) { return kludgePad_; } else { return KludgePadDefaultValue; } }
    set {
      _hasBits0 |= 4;
      kludgePad_ = value;
    }
  }
  /// <summary>Gets whether the "kludge_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKludgePad {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "kludge_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKludgePad() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PBadRouteRouterToClient);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PBadRouteRouterToClient other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConnectionId != other.ConnectionId) return false;
    if (FailedRelayRoutingToken != other.FailedRelayRoutingToken) return false;
    if (AckForwardTargetRevision != other.AckForwardTargetRevision) return false;
    if (KludgePad != other.KludgePad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasConnectionId) hash ^= ConnectionId.GetHashCode();
    if (HasFailedRelayRoutingToken) hash ^= FailedRelayRoutingToken.GetHashCode();
    if (HasAckForwardTargetRevision) hash ^= AckForwardTargetRevision.GetHashCode();
    if (HasKludgePad) hash ^= KludgePad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasFailedRelayRoutingToken) {
      output.WriteRawTag(18);
      output.WriteBytes(FailedRelayRoutingToken);
    }
    if (HasAckForwardTargetRevision) {
      output.WriteRawTag(24);
      output.WriteUInt32(AckForwardTargetRevision);
    }
    if (HasKludgePad) {
      output.WriteRawTag(153, 6);
      output.WriteFixed64(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasConnectionId) {
      output.WriteRawTag(13);
      output.WriteFixed32(ConnectionId);
    }
    if (HasFailedRelayRoutingToken) {
      output.WriteRawTag(18);
      output.WriteBytes(FailedRelayRoutingToken);
    }
    if (HasAckForwardTargetRevision) {
      output.WriteRawTag(24);
      output.WriteUInt32(AckForwardTargetRevision);
    }
    if (HasKludgePad) {
      output.WriteRawTag(153, 6);
      output.WriteFixed64(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasConnectionId) {
      size += 1 + 4;
    }
    if (HasFailedRelayRoutingToken) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FailedRelayRoutingToken);
    }
    if (HasAckForwardTargetRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AckForwardTargetRevision);
    }
    if (HasKludgePad) {
      size += 2 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PBadRouteRouterToClient other) {
    if (other == null) {
      return;
    }
    if (other.HasConnectionId) {
      ConnectionId = other.ConnectionId;
    }
    if (other.HasFailedRelayRoutingToken) {
      FailedRelayRoutingToken = other.FailedRelayRoutingToken;
    }
    if (other.HasAckForwardTargetRevision) {
      AckForwardTargetRevision = other.AckForwardTargetRevision;
    }
    if (other.HasKludgePad) {
      KludgePad = other.KludgePad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          FailedRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 24: {
          AckForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 793: {
          KludgePad = input.ReadFixed64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ConnectionId = input.ReadFixed32();
          break;
        }
        case 18: {
          FailedRelayRoutingToken = input.ReadBytes();
          break;
        }
        case 24: {
          AckForwardTargetRevision = input.ReadUInt32();
          break;
        }
        case 793: {
          KludgePad = input.ReadFixed64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramP2PRoutes : pb::IMessage<CMsgSteamDatagramP2PRoutes>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramP2PRoutes> _parser = new pb::MessageParser<CMsgSteamDatagramP2PRoutes>(() => new CMsgSteamDatagramP2PRoutes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramP2PRoutes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutes(CMsgSteamDatagramP2PRoutes other) : this() {
    _hasBits0 = other._hasBits0;
    relayClusters_ = other.relayClusters_.Clone();
    routes_ = other.routes_.Clone();
    revision_ = other.revision_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramP2PRoutes Clone() {
    return new CMsgSteamDatagramP2PRoutes(this);
  }

  /// <summary>Field number for the "relay_clusters" field.</summary>
  public const int RelayClustersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster> _repeated_relayClusters_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster> relayClusters_ = new pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.RelayCluster> RelayClusters {
    get { return relayClusters_; }
  }

  /// <summary>Field number for the "routes" field.</summary>
  public const int RoutesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CMsgSteamDatagramP2PRoutes.Types.Route> _repeated_routes_codec
      = pb::FieldCodec.ForMessage(18, global::CMsgSteamDatagramP2PRoutes.Types.Route.Parser);
  private readonly pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.Route> routes_ = new pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.Route>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgSteamDatagramP2PRoutes.Types.Route> Routes {
    get { return routes_; }
  }

  /// <summary>Field number for the "revision" field.</summary>
  public const int RevisionFieldNumber = 3;
  private readonly static uint RevisionDefaultValue = 0;

  private uint revision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Revision {
    get { if ((_hasBits0 & 1) != 0) { return revision_; } else { return RevisionDefaultValue; } }
    set {
      _hasBits0 |= 1;
      revision_ = value;
    }
  }
  /// <summary>Gets whether the "revision" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRevision {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "revision" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRevision() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramP2PRoutes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramP2PRoutes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!relayClusters_.Equals(other.relayClusters_)) return false;
    if(!routes_.Equals(other.routes_)) return false;
    if (Revision != other.Revision) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= relayClusters_.GetHashCode();
    hash ^= routes_.GetHashCode();
    if (HasRevision) hash ^= Revision.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    relayClusters_.WriteTo(output, _repeated_relayClusters_codec);
    routes_.WriteTo(output, _repeated_routes_codec);
    if (HasRevision) {
      output.WriteRawTag(24);
      output.WriteUInt32(Revision);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    relayClusters_.WriteTo(ref output, _repeated_relayClusters_codec);
    routes_.WriteTo(ref output, _repeated_routes_codec);
    if (HasRevision) {
      output.WriteRawTag(24);
      output.WriteUInt32(Revision);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += relayClusters_.CalculateSize(_repeated_relayClusters_codec);
    size += routes_.CalculateSize(_repeated_routes_codec);
    if (HasRevision) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramP2PRoutes other) {
    if (other == null) {
      return;
    }
    relayClusters_.Add(other.relayClusters_);
    routes_.Add(other.routes_);
    if (other.HasRevision) {
      Revision = other.Revision;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          relayClusters_.AddEntriesFrom(input, _repeated_relayClusters_codec);
          break;
        }
        case 18: {
          routes_.AddEntriesFrom(input, _repeated_routes_codec);
          break;
        }
        case 24: {
          Revision = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          relayClusters_.AddEntriesFrom(ref input, _repeated_relayClusters_codec);
          break;
        }
        case 18: {
          routes_.AddEntriesFrom(ref input, _repeated_routes_codec);
          break;
        }
        case 24: {
          Revision = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgSteamDatagramP2PRoutes message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class RelayCluster : pb::IMessage<RelayCluster>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<RelayCluster> _parser = new pb::MessageParser<RelayCluster>(() => new RelayCluster());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<RelayCluster> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramP2PRoutes.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RelayCluster() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RelayCluster(RelayCluster other) : this() {
        _hasBits0 = other._hasBits0;
        popId_ = other.popId_;
        pingMs_ = other.pingMs_;
        scorePenalty_ = other.scorePenalty_;
        sessionRelayRoutingToken_ = other.sessionRelayRoutingToken_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public RelayCluster Clone() {
        return new RelayCluster(this);
      }

      /// <summary>Field number for the "pop_id" field.</summary>
      public const int PopIdFieldNumber = 1;
      private readonly static uint PopIdDefaultValue = 0;

      private uint popId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint PopId {
        get { if ((_hasBits0 & 1) != 0) { return popId_; } else { return PopIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          popId_ = value;
        }
      }
      /// <summary>Gets whether the "pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPopId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPopId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "ping_ms" field.</summary>
      public const int PingMsFieldNumber = 2;
      private readonly static uint PingMsDefaultValue = 0;

      private uint pingMs_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint PingMs {
        get { if ((_hasBits0 & 2) != 0) { return pingMs_; } else { return PingMsDefaultValue; } }
        set {
          _hasBits0 |= 2;
          pingMs_ = value;
        }
      }
      /// <summary>Gets whether the "ping_ms" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPingMs {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "ping_ms" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPingMs() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "score_penalty" field.</summary>
      public const int ScorePenaltyFieldNumber = 3;
      private readonly static uint ScorePenaltyDefaultValue = 0;

      private uint scorePenalty_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint ScorePenalty {
        get { if ((_hasBits0 & 4) != 0) { return scorePenalty_; } else { return ScorePenaltyDefaultValue; } }
        set {
          _hasBits0 |= 4;
          scorePenalty_ = value;
        }
      }
      /// <summary>Gets whether the "score_penalty" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasScorePenalty {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "score_penalty" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearScorePenalty() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "session_relay_routing_token" field.</summary>
      public const int SessionRelayRoutingTokenFieldNumber = 4;
      private readonly static pb::ByteString SessionRelayRoutingTokenDefaultValue = pb::ByteString.Empty;

      private pb::ByteString sessionRelayRoutingToken_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pb::ByteString SessionRelayRoutingToken {
        get { return sessionRelayRoutingToken_ ?? SessionRelayRoutingTokenDefaultValue; }
        set {
          sessionRelayRoutingToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "session_relay_routing_token" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSessionRelayRoutingToken {
        get { return sessionRelayRoutingToken_ != null; }
      }
      /// <summary>Clears the value of the "session_relay_routing_token" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSessionRelayRoutingToken() {
        sessionRelayRoutingToken_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as RelayCluster);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(RelayCluster other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (PopId != other.PopId) return false;
        if (PingMs != other.PingMs) return false;
        if (ScorePenalty != other.ScorePenalty) return false;
        if (SessionRelayRoutingToken != other.SessionRelayRoutingToken) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasPopId) hash ^= PopId.GetHashCode();
        if (HasPingMs) hash ^= PingMs.GetHashCode();
        if (HasScorePenalty) hash ^= ScorePenalty.GetHashCode();
        if (HasSessionRelayRoutingToken) hash ^= SessionRelayRoutingToken.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(PopId);
        }
        if (HasPingMs) {
          output.WriteRawTag(16);
          output.WriteUInt32(PingMs);
        }
        if (HasScorePenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(ScorePenalty);
        }
        if (HasSessionRelayRoutingToken) {
          output.WriteRawTag(34);
          output.WriteBytes(SessionRelayRoutingToken);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(PopId);
        }
        if (HasPingMs) {
          output.WriteRawTag(16);
          output.WriteUInt32(PingMs);
        }
        if (HasScorePenalty) {
          output.WriteRawTag(24);
          output.WriteUInt32(ScorePenalty);
        }
        if (HasSessionRelayRoutingToken) {
          output.WriteRawTag(34);
          output.WriteBytes(SessionRelayRoutingToken);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasPopId) {
          size += 1 + 4;
        }
        if (HasPingMs) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingMs);
        }
        if (HasScorePenalty) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScorePenalty);
        }
        if (HasSessionRelayRoutingToken) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(SessionRelayRoutingToken);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(RelayCluster other) {
        if (other == null) {
          return;
        }
        if (other.HasPopId) {
          PopId = other.PopId;
        }
        if (other.HasPingMs) {
          PingMs = other.PingMs;
        }
        if (other.HasScorePenalty) {
          ScorePenalty = other.ScorePenalty;
        }
        if (other.HasSessionRelayRoutingToken) {
          SessionRelayRoutingToken = other.SessionRelayRoutingToken;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              PopId = input.ReadFixed32();
              break;
            }
            case 16: {
              PingMs = input.ReadUInt32();
              break;
            }
            case 24: {
              ScorePenalty = input.ReadUInt32();
              break;
            }
            case 34: {
              SessionRelayRoutingToken = input.ReadBytes();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              PopId = input.ReadFixed32();
              break;
            }
            case 16: {
              PingMs = input.ReadUInt32();
              break;
            }
            case 24: {
              ScorePenalty = input.ReadUInt32();
              break;
            }
            case 34: {
              SessionRelayRoutingToken = input.ReadBytes();
              break;
            }
          }
        }
      }
      #endif

    }

    public sealed partial class Route : pb::IMessage<Route>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Route> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgSteamDatagramP2PRoutes.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Route() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Route(Route other) : this() {
        _hasBits0 = other._hasBits0;
        myPopId_ = other.myPopId_;
        yourPopId_ = other.yourPopId_;
        legacyScore_ = other.legacyScore_;
        interiorScore_ = other.interiorScore_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Route Clone() {
        return new Route(this);
      }

      /// <summary>Field number for the "my_pop_id" field.</summary>
      public const int MyPopIdFieldNumber = 1;
      private readonly static uint MyPopIdDefaultValue = 0;

      private uint myPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint MyPopId {
        get { if ((_hasBits0 & 1) != 0) { return myPopId_; } else { return MyPopIdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          myPopId_ = value;
        }
      }
      /// <summary>Gets whether the "my_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMyPopId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "my_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMyPopId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "your_pop_id" field.</summary>
      public const int YourPopIdFieldNumber = 2;
      private readonly static uint YourPopIdDefaultValue = 0;

      private uint yourPopId_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint YourPopId {
        get { if ((_hasBits0 & 2) != 0) { return yourPopId_; } else { return YourPopIdDefaultValue; } }
        set {
          _hasBits0 |= 2;
          yourPopId_ = value;
        }
      }
      /// <summary>Gets whether the "your_pop_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasYourPopId {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "your_pop_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearYourPopId() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "legacy_score" field.</summary>
      public const int LegacyScoreFieldNumber = 3;
      private readonly static uint LegacyScoreDefaultValue = 0;

      private uint legacyScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint LegacyScore {
        get { if ((_hasBits0 & 4) != 0) { return legacyScore_; } else { return LegacyScoreDefaultValue; } }
        set {
          _hasBits0 |= 4;
          legacyScore_ = value;
        }
      }
      /// <summary>Gets whether the "legacy_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasLegacyScore {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "legacy_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearLegacyScore() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "interior_score" field.</summary>
      public const int InteriorScoreFieldNumber = 4;
      private readonly static uint InteriorScoreDefaultValue = 0;

      private uint interiorScore_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint InteriorScore {
        get { if ((_hasBits0 & 8) != 0) { return interiorScore_; } else { return InteriorScoreDefaultValue; } }
        set {
          _hasBits0 |= 8;
          interiorScore_ = value;
        }
      }
      /// <summary>Gets whether the "interior_score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasInteriorScore {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "interior_score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearInteriorScore() {
        _hasBits0 &= ~8;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Route);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Route other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (MyPopId != other.MyPopId) return false;
        if (YourPopId != other.YourPopId) return false;
        if (LegacyScore != other.LegacyScore) return false;
        if (InteriorScore != other.InteriorScore) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasMyPopId) hash ^= MyPopId.GetHashCode();
        if (HasYourPopId) hash ^= YourPopId.GetHashCode();
        if (HasLegacyScore) hash ^= LegacyScore.GetHashCode();
        if (HasInteriorScore) hash ^= InteriorScore.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasMyPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(MyPopId);
        }
        if (HasYourPopId) {
          output.WriteRawTag(21);
          output.WriteFixed32(YourPopId);
        }
        if (HasLegacyScore) {
          output.WriteRawTag(24);
          output.WriteUInt32(LegacyScore);
        }
        if (HasInteriorScore) {
          output.WriteRawTag(32);
          output.WriteUInt32(InteriorScore);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasMyPopId) {
          output.WriteRawTag(13);
          output.WriteFixed32(MyPopId);
        }
        if (HasYourPopId) {
          output.WriteRawTag(21);
          output.WriteFixed32(YourPopId);
        }
        if (HasLegacyScore) {
          output.WriteRawTag(24);
          output.WriteUInt32(LegacyScore);
        }
        if (HasInteriorScore) {
          output.WriteRawTag(32);
          output.WriteUInt32(InteriorScore);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasMyPopId) {
          size += 1 + 4;
        }
        if (HasYourPopId) {
          size += 1 + 4;
        }
        if (HasLegacyScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyScore);
        }
        if (HasInteriorScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InteriorScore);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Route other) {
        if (other == null) {
          return;
        }
        if (other.HasMyPopId) {
          MyPopId = other.MyPopId;
        }
        if (other.HasYourPopId) {
          YourPopId = other.YourPopId;
        }
        if (other.HasLegacyScore) {
          LegacyScore = other.LegacyScore;
        }
        if (other.HasInteriorScore) {
          InteriorScore = other.InteriorScore;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              MyPopId = input.ReadFixed32();
              break;
            }
            case 21: {
              YourPopId = input.ReadFixed32();
              break;
            }
            case 24: {
              LegacyScore = input.ReadUInt32();
              break;
            }
            case 32: {
              InteriorScore = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              MyPopId = input.ReadFixed32();
              break;
            }
            case 21: {
              YourPopId = input.ReadFixed32();
              break;
            }
            case 24: {
              LegacyScore = input.ReadUInt32();
              break;
            }
            case 32: {
              InteriorScore = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgSteamDatagramSetSecondaryAddressRequest : pb::IMessage<CMsgSteamDatagramSetSecondaryAddressRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressRequest> _parser = new pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressRequest>(() => new CMsgSteamDatagramSetSecondaryAddressRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressRequest(CMsgSteamDatagramSetSecondaryAddressRequest other) : this() {
    _hasBits0 = other._hasBits0;
    clientMainIp_ = other.clientMainIp_;
    clientMainPort_ = other.clientMainPort_;
    clientConnectionId_ = other.clientConnectionId_;
    clientIdentity_ = other.clientIdentity_;
    requestSendDuplication_ = other.requestSendDuplication_;
    kludgePad_ = other.kludgePad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressRequest Clone() {
    return new CMsgSteamDatagramSetSecondaryAddressRequest(this);
  }

  /// <summary>Field number for the "client_main_ip" field.</summary>
  public const int ClientMainIpFieldNumber = 1;
  private readonly static uint ClientMainIpDefaultValue = 0;

  private uint clientMainIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientMainIp {
    get { if ((_hasBits0 & 1) != 0) { return clientMainIp_; } else { return ClientMainIpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      clientMainIp_ = value;
    }
  }
  /// <summary>Gets whether the "client_main_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientMainIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "client_main_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientMainIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "client_main_port" field.</summary>
  public const int ClientMainPortFieldNumber = 2;
  private readonly static uint ClientMainPortDefaultValue = 0;

  private uint clientMainPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientMainPort {
    get { if ((_hasBits0 & 2) != 0) { return clientMainPort_; } else { return ClientMainPortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientMainPort_ = value;
    }
  }
  /// <summary>Gets whether the "client_main_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientMainPort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "client_main_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientMainPort() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "client_connection_id" field.</summary>
  public const int ClientConnectionIdFieldNumber = 3;
  private readonly static uint ClientConnectionIdDefaultValue = 0;

  private uint clientConnectionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientConnectionId {
    get { if ((_hasBits0 & 4) != 0) { return clientConnectionId_; } else { return ClientConnectionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      clientConnectionId_ = value;
    }
  }
  /// <summary>Gets whether the "client_connection_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientConnectionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "client_connection_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientConnectionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "client_identity" field.</summary>
  public const int ClientIdentityFieldNumber = 4;
  private readonly static string ClientIdentityDefaultValue = "";

  private string clientIdentity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientIdentity {
    get { return clientIdentity_ ?? ClientIdentityDefaultValue; }
    set {
      clientIdentity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "client_identity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientIdentity {
    get { return clientIdentity_ != null; }
  }
  /// <summary>Clears the value of the "client_identity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientIdentity() {
    clientIdentity_ = null;
  }

  /// <summary>Field number for the "request_send_duplication" field.</summary>
  public const int RequestSendDuplicationFieldNumber = 5;
  private readonly static bool RequestSendDuplicationDefaultValue = false;

  private bool requestSendDuplication_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RequestSendDuplication {
    get { if ((_hasBits0 & 8) != 0) { return requestSendDuplication_; } else { return RequestSendDuplicationDefaultValue; } }
    set {
      _hasBits0 |= 8;
      requestSendDuplication_ = value;
    }
  }
  /// <summary>Gets whether the "request_send_duplication" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRequestSendDuplication {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "request_send_duplication" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRequestSendDuplication() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "kludge_pad" field.</summary>
  public const int KludgePadFieldNumber = 99;
  private readonly static pb::ByteString KludgePadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString kludgePad_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString KludgePad {
    get { return kludgePad_ ?? KludgePadDefaultValue; }
    set {
      kludgePad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "kludge_pad" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKludgePad {
    get { return kludgePad_ != null; }
  }
  /// <summary>Clears the value of the "kludge_pad" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKludgePad() {
    kludgePad_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramSetSecondaryAddressRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramSetSecondaryAddressRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientMainIp != other.ClientMainIp) return false;
    if (ClientMainPort != other.ClientMainPort) return false;
    if (ClientConnectionId != other.ClientConnectionId) return false;
    if (ClientIdentity != other.ClientIdentity) return false;
    if (RequestSendDuplication != other.RequestSendDuplication) return false;
    if (KludgePad != other.KludgePad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasClientMainIp) hash ^= ClientMainIp.GetHashCode();
    if (HasClientMainPort) hash ^= ClientMainPort.GetHashCode();
    if (HasClientConnectionId) hash ^= ClientConnectionId.GetHashCode();
    if (HasClientIdentity) hash ^= ClientIdentity.GetHashCode();
    if (HasRequestSendDuplication) hash ^= RequestSendDuplication.GetHashCode();
    if (HasKludgePad) hash ^= KludgePad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasClientMainIp) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientMainIp);
    }
    if (HasClientMainPort) {
      output.WriteRawTag(21);
      output.WriteFixed32(ClientMainPort);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(29);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasClientIdentity) {
      output.WriteRawTag(34);
      output.WriteString(ClientIdentity);
    }
    if (HasRequestSendDuplication) {
      output.WriteRawTag(40);
      output.WriteBool(RequestSendDuplication);
    }
    if (HasKludgePad) {
      output.WriteRawTag(154, 6);
      output.WriteBytes(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasClientMainIp) {
      output.WriteRawTag(13);
      output.WriteFixed32(ClientMainIp);
    }
    if (HasClientMainPort) {
      output.WriteRawTag(21);
      output.WriteFixed32(ClientMainPort);
    }
    if (HasClientConnectionId) {
      output.WriteRawTag(29);
      output.WriteFixed32(ClientConnectionId);
    }
    if (HasClientIdentity) {
      output.WriteRawTag(34);
      output.WriteString(ClientIdentity);
    }
    if (HasRequestSendDuplication) {
      output.WriteRawTag(40);
      output.WriteBool(RequestSendDuplication);
    }
    if (HasKludgePad) {
      output.WriteRawTag(154, 6);
      output.WriteBytes(KludgePad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasClientMainIp) {
      size += 1 + 4;
    }
    if (HasClientMainPort) {
      size += 1 + 4;
    }
    if (HasClientConnectionId) {
      size += 1 + 4;
    }
    if (HasClientIdentity) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIdentity);
    }
    if (HasRequestSendDuplication) {
      size += 1 + 1;
    }
    if (HasKludgePad) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(KludgePad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramSetSecondaryAddressRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasClientMainIp) {
      ClientMainIp = other.ClientMainIp;
    }
    if (other.HasClientMainPort) {
      ClientMainPort = other.ClientMainPort;
    }
    if (other.HasClientConnectionId) {
      ClientConnectionId = other.ClientConnectionId;
    }
    if (other.HasClientIdentity) {
      ClientIdentity = other.ClientIdentity;
    }
    if (other.HasRequestSendDuplication) {
      RequestSendDuplication = other.RequestSendDuplication;
    }
    if (other.HasKludgePad) {
      KludgePad = other.KludgePad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          ClientMainIp = input.ReadFixed32();
          break;
        }
        case 21: {
          ClientMainPort = input.ReadFixed32();
          break;
        }
        case 29: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 34: {
          ClientIdentity = input.ReadString();
          break;
        }
        case 40: {
          RequestSendDuplication = input.ReadBool();
          break;
        }
        case 794: {
          KludgePad = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          ClientMainIp = input.ReadFixed32();
          break;
        }
        case 21: {
          ClientMainPort = input.ReadFixed32();
          break;
        }
        case 29: {
          ClientConnectionId = input.ReadFixed32();
          break;
        }
        case 34: {
          ClientIdentity = input.ReadString();
          break;
        }
        case 40: {
          RequestSendDuplication = input.ReadBool();
          break;
        }
        case 794: {
          KludgePad = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgSteamDatagramSetSecondaryAddressResult : pb::IMessage<CMsgSteamDatagramSetSecondaryAddressResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressResult> _parser = new pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressResult>(() => new CMsgSteamDatagramSetSecondaryAddressResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgSteamDatagramSetSecondaryAddressResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteamdatagramMessagesSdrReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressResult(CMsgSteamDatagramSetSecondaryAddressResult other) : this() {
    _hasBits0 = other._hasBits0;
    success_ = other.success_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgSteamDatagramSetSecondaryAddressResult Clone() {
    return new CMsgSteamDatagramSetSecondaryAddressResult(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private readonly static bool SuccessDefaultValue = false;

  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Success {
    get { if ((_hasBits0 & 1) != 0) { return success_; } else { return SuccessDefaultValue; } }
    set {
      _hasBits0 |= 1;
      success_ = value;
    }
  }
  /// <summary>Gets whether the "success" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSuccess {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "success" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSuccess() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgSteamDatagramSetSecondaryAddressResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgSteamDatagramSetSecondaryAddressResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSuccess) hash ^= Success.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSuccess) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (HasMessage) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSuccess) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (HasMessage) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSuccess) {
      size += 1 + 1;
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgSteamDatagramSetSecondaryAddressResult other) {
    if (other == null) {
      return;
    }
    if (other.HasSuccess) {
      Success = other.Success;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
