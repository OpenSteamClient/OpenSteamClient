// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_clientsettings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_clientsettings.proto</summary>
public static partial class SteammessagesClientsettingsReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_clientsettings.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesClientsettingsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiJzdGVhbW1lc3NhZ2VzX2NsaWVudHNldHRpbmdzLnByb3RvGiBnb29nbGUv",
          "cHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxoLZW51bXMucHJvdG8ifAoKQ01z",
          "Z0hvdGtleRIQCghrZXlfY29kZRgBIAEoDRIPCgdhbHRfa2V5GAIgASgIEhEK",
          "CXNoaWZ0X2tleRgDIAEoCBIQCghjdHJsX2tleRgEIAEoCBIQCghtZXRhX2tl",
          "eRgFIAEoCBIUCgxkaXNwbGF5X25hbWUYBiABKAki9DoKEkNNc2dDbGllbnRT",
          "ZXR0aW5ncxJOChVub19zYXZlX3BlcnNvbmFsX2luZm8YASABKAhCL4CmHQGK",
          "ph0nU29mdHdhcmVcVmFsdmVcU3RlYW1cTm9TYXZlUGVyc29uYWxJbmZvElAK",
          "Fm9vYmVfdGVzdF9tb2RlX2VuYWJsZWQYAiABKAhCMICmHQGKph0oU29mdHdh",
          "cmVcVmFsdmVcU3RlYW1cT09CRVRlc3RNb2RlRW5hYmxlZBIgCg5pbl9jbGll",
          "bnRfYmV0YRgDIAEoCEIIgKYdBZCmHQESJQoTaXNfc3RlYW1fc2lkZWxvYWRl",
          "ZBgEIAEoCEIIgKYdBZCmHQESNQoRcHJlZmVycmVkX21vbml0b3IYBSABKAlC",
          "GoCmHQGKph0SQmlnUGljdHVyZS9Nb25pdG9yEnAKIHN0ZWFtX2NlZl9ncHVf",
          "YmxvY2tsaXN0X2Rpc2FibGVkGAYgASgIQkaAph0EiqYdPkhLRVlfQ1VSUkVO",
          "VF9VU0VSXFNvZnR3YXJlXFZhbHZlXFN0ZWFtXENFRkdQVUJsb2NrbGlzdERp",
          "c2FibGVkEjwKE2JpZ3BpY3R1cmVfd2luZG93ZWQYByABKAhCH4CmHQGKph0T",
          "QmlnUGljdHVyZS9XaW5kb3dlZJCmHQESNQoMZGlzcGxheV9uYW1lGAggASgJ",
          "Qh+Aph0BiqYdF1VJL0Rpc3BsYXkvQ3VycmVudC9OYW1lEkkKE2lzX2V4dGVy",
          "bmFsX2Rpc3BsYXkYCSABKAhCLICmHQGKph0kVUkvRGlzcGxheS9DdXJyZW50",
          "L0lzRXh0ZXJuYWxEaXNwbGF5EkUKGHN0ZWFtX29zX3VuZGVyc2Nhbl9sZXZl",
          "bBgKIAEoAkIjgKYdAYqmHRtTdGVhbU9TU2NyZWVuVW5kZXJzY2FuTGV2ZWwS",
          "SQoac3RlYW1fb3NfdW5kZXJzY2FuX2VuYWJsZWQYCyABKAhCJYCmHQGKph0d",
          "U3RlYW1PU1NjcmVlblVuZGVyc2NhbkVuYWJsZWQSQwoQbWluX3NjYWxlX2Zh",
          "Y3RvchgMIAEoAkIpgKYdAYqmHSFVSS9EaXNwbGF5L0N1cnJlbnQvTWluU2Nh",
          "bGVGYWN0b3ISQwoQbWF4X3NjYWxlX2ZhY3RvchgNIAEoAkIpgKYdAYqmHSFV",
          "SS9EaXNwbGF5L0N1cnJlbnQvTWF4U2NhbGVGYWN0b3ISRQoRYXV0b19zY2Fs",
          "ZV9mYWN0b3IYDiABKAJCKoCmHQGKph0iVUkvRGlzcGxheS9DdXJyZW50L0F1",
          "dG9TY2FsZUZhY3RvchI4ChRlbmFibGVfdGVzdF91cGRhdGVycxgPIAEoCEIa",
          "gKYdAYqmHRJFbmFibGVUZXN0VXBkYXRlcnMSOgoKc21hbGxfbW9kZRgQIAEo",
          "CEImgKYdA4qmHR5Tb2Z0d2FyZVxWYWx2ZVxTdGVhbVxTbWFsbE1vZGUSSQob",
          "c2tpcF9zdGVhbXZyX2luc3RhbGxfZGlhbG9nGBMgASgIQiSAph0DiqYdHHN5",
          "c3RlbVxTdGVhbVZSSE1EVkdVSVdhcm5pbmcSTwoYYWx3YXlzX3Nob3dfdXNl",
          "cl9jaG9vc2VyGBQgASgIQi2Aph0BiqYdJVdlYlN0b3JhZ2VcQXV0aFxBbHdh",
          "eXNTaG93VXNlckNob29zZXISMAohc2hvd19mYW1pbHlfc2hhcmluZ19ub3Rp",
          "ZmljYXRpb25zGLgXIAEoCEIEgKYdBRJOChpvdmVybGF5X2Zwc19jb3VudGVy",
          "X2Nvcm5lchigHyABKAVCKYCmHQOKph0hc3lzdGVtXEluR2FtZU92ZXJsYXlT",
          "aG93RlBTQ29ybmVyElcKIW92ZXJsYXlfZnBzX2NvdW50ZXJfaGlnaF9jb250",
          "cmFzdBihHyABKAhCK4CmHQOKph0jc3lzdGVtXEluR2FtZU92ZXJsYXlTaG93",
          "RlBTQ29udHJhc3QSWwoLb3ZlcmxheV9rZXkYoh8gASgLMgsuQ01zZ0hvdGtl",
          "eUI4gKYdA4qmHR9zeXN0ZW1cSW5HYW1lT3ZlcmxheVNob3J0Y3V0S2V5uqYd",
          "DVNoaWZ0CUtFWV9UQUISXQoOc2NyZWVuc2hvdF9rZXkYox8gASgLMgsuQ01z",
          "Z0hvdGtleUI3gKYdA4qmHSRzeXN0ZW1cSW5HYW1lT3ZlcmxheVNjcmVlbnNo",
          "b3RIb3RLZXm6ph0HS0VZX0YxMhI5Cg5lbmFibGVfb3ZlcmxheRikHyABKAhC",
          "IICmHQOKph0Yc3lzdGVtXEVuYWJsZUdhbWVPdmVybGF5EkcKHGRpc2FibGVf",
          "ZGVza3RvcF9nYW1lX3RoZWF0ZXIYpR8gASgIQiCAph0DiqYdGHN5c3RlbVxE",
          "aXNhYmxlTGF1bmNoSW5WUhJbCh5lbmFibGVfc2NyZWVuc2hvdF9ub3RpZmlj",
          "YXRpb24Yph8gASgIQjKAph0DiqYdKnN5c3RlbVxJbkdhbWVPdmVybGF5U2Ny",
          "ZWVuc2hvdE5vdGlmaWNhdGlvbhJRChdlbmFibGVfc2NyZWVuc2hvdF9zb3Vu",
          "ZBinHyABKAhCL4CmHQOKph0nc3lzdGVtXEluR2FtZU92ZXJsYXlTY3JlZW5z",
          "aG90UGxheVNvdW5kEl4KHXNhdmVfdW5jb21wcmVzc2VkX3NjcmVlbnNob3Rz",
          "GKgfIAEoCEI2gKYdA4qmHS5zeXN0ZW1cSW5HYW1lT3ZlcmxheVNjcmVlbnNo",
          "b3RTYXZlVW5jb21wcmVzc2VkEh8KEHNjcmVlbnNob3RzX3BhdGgYqR8gASgJ",
          "QgSAph0FEmwKEWRlZmF1bHRfcGluZ19yYXRlGKofIAEoBUJQgKYdBcCmHQHK",
          "ph1EQ29tcHV0ZWQgZGVmYXVsdCAoYXV0b21hdGljKSBzZXJ2ZXIgcGluZyBy",
          "YXRlIGJhc2VkIG9uIG5ldHdvcmsgc3BlZWQSHwoQc2VydmVyX3BpbmdfcmF0",
          "ZRirHyABKAVCBICmHQUSKAoZc3RlYW1fbmV0d29ya2luZ19zaGFyZV9pcBis",
          "HyABKAVCBICmHQUSHwoQd2ViX2Jyb3dzZXJfaG9tZRitHyABKAlCBICmHQUS",
          "JAoVdm9pY2VfbWljX2RldmljZV9uYW1lGK4fIAEoCUIEgKYdBRIjChR2b2lj",
          "ZV9taWNfaW5wdXRfZ2FpbhivHyABKAJCBICmHQUSKAoZdm9pY2Vfc3BlYWtl",
          "cl9vdXRwdXRfZ2FpbhiwHyABKAJCBICmHQUSKQoadm9pY2VfcHVzaF90b190",
          "YWxrX3NldHRpbmcYsR8gASgFQgSAph0FEjIKFnZvaWNlX3B1c2hfdG9fdGFs",
          "a19rZXkYsh8gASgLMgsuQ01zZ0hvdGtleUIEgKYdBRJCChlvdmVybGF5X3Rv",
          "b2xiYXJfbGlzdF92aWV3GLMfIAEoCEIegKYdA4qmHRZPdmVybGF5VG9vbEJh",
          "ckxpc3RWaWV3ElQKHGFsd2F5c191c2VfZ2FtZXBhZHVpX292ZXJsYXkYtB8g",
          "ASgIQi2Aph0DiqYdJXN5c3RlbVxFbmFibGVTQ1RlbkZvb3RPdmVybGF5Q2hl",
          "Y2tOZXcSKgoMb3ZlcmxheV90YWJzGLUfIAEoCUITgKYdAoqmHQtPdmVybGF5",
          "VGFicxJqChdvdmVybGF5X3NjYWxlX2ludGVyZmFjZRi2HyABKAhCSICmHQSK",
          "ph08SEtFWV9DVVJSRU5UX1VTRVJcU29mdHdhcmVcVmFsdmVcU3RlYW1cT3Zl",
          "cmxheVNjYWxlSW50ZXJmYWNlmKYdARJoChZzbW9vdGhfc2Nyb2xsX3dlYnZp",
          "ZXdzGIgnIAEoCEJHgKYdBIqmHTtIS0VZX0NVUlJFTlRfVVNFUlxTb2Z0d2Fy",
          "ZVxWYWx2ZVxTdGVhbVxTbW9vdGhTY3JvbGxXZWJWaWV3c5imHQESLgofZW5h",
          "YmxlX2dwdV9hY2NlbGVyYXRlZF93ZWJ2aWV3cxiJJyABKAhCBICmHQUSLQoe",
          "ZW5hYmxlX2hhcmR3YXJlX3ZpZGVvX2RlY29kaW5nGIsnIAEoCEIEgKYdBRId",
          "Cg5ydW5fYXRfc3RhcnR1cBiMJyABKAhCBICmHQUSIQoSZW5hYmxlX2RwaV9z",
          "Y2FsaW5nGI0nIAEoCEIEgKYdBRJJChllbmFibGVfbWFya2V0aW5nX21lc3Nh",
          "Z2VzGI4nIAEoCEIlgKYdA4qmHRluZXdzXE5vdGlmeUF2YWlsYWJsZUdhbWVz",
          "mKYdARIoChlzdGFydF9pbl9iaWdfcGljdHVyZV9tb2RlGI8nIAEoCEIEgKYd",
          "BRI+Cg5qdW1wbGlzdF9mbGFncxiQJyABKA1CJYCmHQOKph0Xc3lzdGVtXEp1",
          "bXBsaXN0U2V0dGluZ3Ooph3w3gQSPAoQZW5hYmxlX3VpX3NvdW5kcxiRJyAB",
          "KAhCIYCmHQOKph0Vc3lzdGVtXEVuYWJsZVVJU291bmRzmKYdARI1ChJkaXNh",
          "YmxlX2FsbF90b2FzdHMY8C4gASgIQhiAph0CiqYdEERpc2FibGVBbGxUb2Fz",
          "dHMSPAoWZGlzYWJsZV90b2FzdHNfaW5fZ2FtZRjxLiABKAhCG4CmHQKKph0T",
          "RGlzYWJsZVRvYXN0c0luR2FtZRI6ChNwbGF5X3NvdW5kX29uX3RvYXN0GPIu",
          "IAEoCEIcgKYdAoqmHRBQbGF5U291bmRPblRvYXN0mKYdARI5ChRsaWJyYXJ5",
          "X2Rpc3BsYXlfc2l6ZRjYNiABKAVCGoCmHQOKph0STGlicmFyeURpc3BsYXlT",
          "aXplEmMKK2xpYnJhcnlfd2hhdHNfbmV3X3Nob3dfb25seV9wcm9kdWN0X3Vw",
          "ZGF0ZXMY2TYgASgIQi2Aph0CiqYdJUxpYnJhcnlXaGF0c05ld1Nob3dPbmx5",
          "UHJvZHVjdFVwZGF0ZXMSRwoac2hvd19zdG9yZV9jb250ZW50X29uX2hvbWUY",
          "2jYgASgIQiKAph0CiqYdFlNob3dTdG9yZUNvbnRlbnRPbkhvbWWYph0BEhkK",
          "CnN0YXJ0X3BhZ2UY2zYgASgJQgSAph0FEkQKGmxpYnJhcnlfbG93X2JhbmR3",
          "aWR0aF9tb2RlGNw2IAEoCEIfgKYdA4qmHRdMaWJyYXJ5TG93QmFuZHdpZHRo",
          "TW9kZRI6ChVsaWJyYXJ5X2xvd19wZXJmX21vZGUY3TYgASgIQhqAph0DiqYd",
          "EkxpYnJhcnlMb3dQZXJmTW9kZRJSCiFsaWJyYXJ5X2Rpc2FibGVfY29tbXVu",
          "aXR5X2NvbnRlbnQY3jYgASgIQiaAph0DiqYdHkxpYnJhcnlEaXNhYmxlQ29t",
          "bXVuaXR5Q29udGVudBJUCiFsaWJyYXJ5X2Rpc3BsYXlfaWNvbl9pbl9nYW1l",
          "X2xpc3QY3zYgASgIQiiAph0DiqYdHExpYnJhcnlEaXNwbGF5SWNvbkluR2Ft",
          "ZUxpc3SYph0BEk8KIHJlYWR5X3RvX3BsYXlfaW5jbHVkZXNfc3RyZWFtaW5n",
          "GOA2IAEoCEIkgKYdBYqmHRxSZWFkeVRvUGxheUluY2x1ZGVzU3RyZWFtaW5n",
          "EkEKFHNob3dfc3RlYW1fZGVja19pbmZvGOE2IAEoCEIigKYdA4qmHRpTaG93",
          "U3RlYW1EZWNrSW5mb0luTGlicmFyeRIlChZlbmFibGVfc2hhZGVyX3ByZWNh",
          "Y2hlGMA+IAEoCEIEgKYdBRIyCiNlbmFibGVfc2hhZGVyX2JhY2tncm91bmRf",
          "cHJvY2Vzc2luZxjBPiABKAhCBICmHQUSKAoVc2hhZGVyX3ByZWNhY2hlZF9z",
          "aXplGMI+IAEoBEIIgKYdBcCmHQESLQoabmVlZHNfc3RlYW1fc2VydmljZV9y",
          "ZXBhaXIYwz4gASgIQgiAph0FwKYdARIkChVkb3dubG9hZF9wZWVyX2NvbnRl",
          "bnQYxD4gASgFQgSAph0FEicKGGRvd25sb2FkX3JhdGVfYml0c19wZXJfcxjF",
          "PiABKAhCBICmHQUSJAoVcmVzdHJpY3RfYXV0b191cGRhdGVzGMY+IAEoCEIE",
          "gKYdBRIqChtyZXN0cmljdF9hdXRvX3VwZGF0ZXNfc3RhcnQYxz4gASgFQgSA",
          "ph0FEigKGXJlc3RyaWN0X2F1dG9fdXBkYXRlc19lbmQYyD4gASgFQgSAph0F",
          "Eh4KD2Rvd25sb2FkX3JlZ2lvbhjJPiABKAVCBICmHQUSKQoaZG93bmxvYWRf",
          "d2hpbGVfYXBwX3J1bm5pbmcYyj4gASgIQgSAph0FEjAKIWRvd25sb2FkX3Ro",
          "cm90dGxlX3doaWxlX3N0cmVhbWluZxjLPiABKAhCBICmHQUSJQoWZG93bmxv",
          "YWRfdGhyb3R0bGVfcmF0ZRjMPiABKAVCBICmHQUSHAoNY2xvdWRfZW5hYmxl",
          "ZBiQTiABKAhCBICmHQUSVAoXc2hvd19zY3JlZW5zaG90X21hbmFnZXIYkU4g",
          "ASgIQjKAph0CiqYdKlNvZnR3YXJlXFZhbHZlXFN0ZWFtXFNob3dTY3JlZW5z",
          "aG90TWFuYWdlchIbCgxtdXNpY192b2x1bWUY+FUgASgFQgSAph0FEkkKGG11",
          "c2ljX3BhdXNlX29uX2FwcF9zdGFydBj5VSABKAhCJoCmHQGKph0eTXVzaWNc",
          "UGF1c2VPbkFwcFN0YXJ0ZWRQcm9jZXNzEkIKGW11c2ljX3BhdXNlX29uX3Zv",
          "aWNlX2NoYXQY+lUgASgIQh6Aph0BiqYdFk11c2ljXFBhdXNlT25Wb2ljZUNo",
          "YXQSVwobbXVzaWNfZG93bmxvYWRfaGlnaF9xdWFsaXR5GPtVIAEoCEIxgKYd",
          "AYqmHSlNdXNpY1xEb3dubG9hZEhpZ2hRdWFsaXR5QXVkaW9Tb3VuZHRyYWNr",
          "cxJSChttdXNpY19wbGF5bGlzdF9ub3RpZmljYXRpb24Y/FUgASgIQiyAph0B",
          "iqYdJE11c2ljXFBsYXlsaXN0Tm93UGxheWluZ05vdGlmaWNhdGlvbhJ4ChVi",
          "cm9hZGNhc3RfcGVybWlzc2lvbnMY4F0gASgOMhUuRUJyb2FkY2FzdFBlcm1p",
          "c3Npb246HmtfRUJyb2FkY2FzdFBlcm1pc3Npb25EaXNhYmxlZEIhgKYdA4qm",
          "HRVCcm9hZGNhc3RcUGVybWlzc2lvbnOgph0BEj4KFmJyb2FkY2FzdF9vdXRw",
          "dXRfd2lkdGgY4V0gASgFQh2Aph0DiqYdFUJyb2FkY2FzdFxPdXRwdXRXaWR0",
          "aBJAChdicm9hZGNhc3Rfb3V0cHV0X2hlaWdodBjiXSABKAVCHoCmHQOKph0W",
          "QnJvYWRjYXN0XE91dHB1dEhlaWdodBI1ChFicm9hZGNhc3RfYml0cmF0ZRjj",
          "XSABKAVCGYCmHQOKph0RQnJvYWRjYXN0XE1heEticHMSfwoZYnJvYWRjYXN0",
          "X2VuY29kaW5nX29wdGlvbhjkXSABKA4yGS5FQnJvYWRjYXN0RW5jb2RlclNl",
          "dHRpbmc6HmtfRUJyb2FkY2FzdEVuY29kZXJCZXN0UXVhbGl0eUIggKYdA4qm",
          "HRhCcm9hZGNhc3RcRW5jb2RlclNldHRpbmcSRQoaYnJvYWRjYXN0X3JlY29y",
          "ZF9hbGxfdmlkZW8Y5V0gASgIQiCAph0DiqYdGEJyb2FkY2FzdFxJbmNsdWRl",
          "RGVza3RvcBJIChpicm9hZGNhc3RfcmVjb3JkX2FsbF9hdWRpbxjmXSABKAhC",
          "I4CmHQOKph0bQnJvYWRjYXN0XFJlY29yZFN5c3RlbUF1ZGlvEkEKG2Jyb2Fk",
          "Y2FzdF9yZWNvcmRfbWljcm9waG9uZRjnXSABKAhCG4CmHQOKph0TQnJvYWRj",
          "YXN0XFJlY29yZE1pYxJFChticm9hZGNhc3Rfc2hvd191cGxvYWRfc3RhdHMY",
          "6F0gASgIQh+Aph0DiqYdF0Jyb2FkY2FzdFxTaG93RGVidWdJbmZvEkkKHGJy",
          "b2FkY2FzdF9zaG93X2xpdmVfcmVtaW5kZXIY6V0gASgIQiKAph0DiqYdFkJy",
          "b2FkY2FzdFxTaG93UmVtaW5kZXKYph0BEj4KFWJyb2FkY2FzdF9jaGF0X2Nv",
          "cm5lchjqXSABKAVCHoCmHQOKph0SQnJvYWRjYXN0XFNob3dDaGF0oKYdARJj",
          "CilzdGVhbV9pbnB1dF9jb25maWd1cmF0b3JfZXJyb3JfbXNnX2VuYWJsZRix",
          "bSABKAhCL4CmHQGKph0nU3RlYW1JbnB1dC9Db25maWd1cmF0b3IvRXJyb3JN",
          "c2dFbmFibGVkElEKI2NvbnRyb2xsZXJfZ3VpZGVfYnV0dG9uX2ZvY3VzX3N0",
          "ZWFtGLJtIAEoCEIjgKYdA4qmHRtDb250cm9sbGVyX0NoZWNrR3VpZGVCdXR0",
          "b24SQwoWY29udHJvbGxlcl9wczRfc3VwcG9ydBizbSABKAhCIoCmHQOKph0a",
          "U3RlYW1Db250cm9sbGVyX1BTNFN1cHBvcnQSRQoXY29udHJvbGxlcl94Ym94",
          "X3N1cHBvcnQYtG0gASgIQiOAph0DiqYdG1N0ZWFtQ29udHJvbGxlcl9YQm94",
          "U3VwcG9ydBJDChZjb250cm9sbGVyX3hib3hfZHJpdmVyGLVtIAEoCEIigKYd",
          "A4qmHRpTdGVhbUNvbnRyb2xsZXJfWEJveERyaXZlchJJChljb250cm9sbGVy",
          "X3N3aXRjaF9zdXBwb3J0GLZtIAEoCEIlgKYdA4qmHR1TdGVhbUNvbnRyb2xs",
          "ZXJfU3dpdGNoU3VwcG9ydBJSChpjb250cm9sbGVyX2dlbmVyaWNfc3VwcG9y",
          "dBi3bSABKAhCLYCmHQOKph0lU3RlYW1Db250cm9sbGVyX0dlbmVyaWNHYW1l",
          "cGFkU3VwcG9ydBJXChxjb250cm9sbGVyX3Bvd2VyX29mZl90aW1lb3V0GLht",
          "IAEoBUIwgKYdA4qmHSRDU2V0dGluZ3NQYW5lbEdhbWVDb250cm9sbGVyLlRp",
          "bWVvdXSgph0PElIKG3R1cm5fb2ZmX2NvbnRyb2xsZXJfb25fZXhpdBi5bSAB",
          "KAhCLICmHQOKph0kQ1NldHRpbmdzUGFuZWxHYW1lQ29udHJvbGxlci5UdXJu",
          "T2ZmEjIKI2NvbnRyb2xsZXJfY29tYmluZV9uaW50ZW5kb19qb3ljb25zGLpt",
          "IAEoCEIEgKYdBRJJChBzdGFydHVwX21vdmllX2lkGIB9IAEoBEIugKYdAYqm",
          "HSJDdXN0b21pemF0aW9uL1N0YXJ0dXBNb3ZpZS9Nb3ZpZUlEkKYdARJTChhz",
          "dGFydHVwX21vdmllX2xvY2FsX3BhdGgYgX0gASgJQjCAph0BiqYdJEN1c3Rv",
          "bWl6YXRpb24vU3RhcnR1cE1vdmllL0xvY2FsUGF0aJCmHQESTgoVc3RhcnR1",
          "cF9tb3ZpZV9zaHVmZmxlGIJ9IAEoCEIugKYdAYqmHSJDdXN0b21pemF0aW9u",
          "L1N0YXJ0dXBNb3ZpZS9TaHVmZmxlkKYdARJYCh1zdGFydHVwX21vdmllX3Vz",
          "ZWRfZm9yX3Jlc3VtZRiDfSABKAhCMICmHQOKph0oQ3VzdG9taXphdGlvbi9T",
          "dGFydHVwTW92aWUvVXNlZEZvclJlc3VtZRJNChxnYW1lX25vdGVzX2VuYWJs",
          "ZV9zcGVsbGNoZWNrGOmEASABKAhCJYCmHQKKph0ZR2FtZU5vdGVzRW5hYmxl",
          "U3BlbGxjaGVja5imHQESSQoYc2NyZWVuc2hvdF9pdGVtc19wZXJfcm93GNCM",
          "ASABKAVCJYCmHQKKph0ZU2NyZWVuc2hvdFZpZXdJdGVtc1BlclJvd6CmHQES",
          "JAoUZ19iYWNrZ3JvdW5kX2VuYWJsZWQYmI4BIAEoCEIEgKYdBRIhChFnX2Jh",
          "Y2tncm91bmRfcGF0aBiZjgEgASgJQgSAph0FEiUKFWdfYmFja2dyb3VuZF9t",
          "YXhfa2VlcBiajgEgASgJQgSAph0FEk8KGnNob3dfdGltZXN0YW1wc19pbl9j",
          "b25zb2xlGKCcASABKAhCKYCmHQOKph0hRGV2ZWxvcGVyXFNob3dUaW1lc3Rh",
          "bXBzSW5Db25zb2xlKpUCChNFQ2xpZW50U2V0dGluZ1N0b3JlEiEKHWtfRUNs",
          "aWVudFNldHRpbmdTdG9yZV9JbnZhbGlkEAASLQopa19FQ2xpZW50U2V0dGlu",
          "Z1N0b3JlX0NvbmZpZ1N0b3JlX0luc3RhbGwQARIxCi1rX0VDbGllbnRTZXR0",
          "aW5nU3RvcmVfQ29uZmlnU3RvcmVfVXNlclJvYW1pbmcQAhIvCitrX0VDbGll",
          "bnRTZXR0aW5nU3RvcmVfQ29uZmlnU3RvcmVfVXNlckxvY2FsEAMSIgoea19F",
          "Q2xpZW50U2V0dGluZ1N0b3JlX1JlZ2lzdHJ5EAQSJAoga19FQ2xpZW50U2V0",
          "dGluZ1N0b3JlX0N1c3RvbUZ1bmMQBSq1AQoZRU92ZXJsYXlUb2dnbGVCYXJM",
          "b2NhdGlvbhImCiJrX0VPdmVybGF5VG9nZ2xlQmFyTG9jYXRpb25fQm90dG9t",
          "EAASJAoga19FT3ZlcmxheVRvZ2dsZUJhckxvY2F0aW9uX0xlZnQQARIlCiFr",
          "X0VPdmVybGF5VG9nZ2xlQmFyTG9jYXRpb25fUmlnaHQQAhIjCh9rX0VPdmVy",
          "bGF5VG9nZ2xlQmFyTG9jYXRpb25fVG9wEAM6awoNc2V0dGluZ19zdG9yZRId",
          "Lmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY4NQDIAEoDjIULkVDbGll",
          "bnRTZXR0aW5nU3RvcmU6HWtfRUNsaWVudFNldHRpbmdTdG9yZV9JbnZhbGlk",
          "OjUKDHNldHRpbmdfbmFtZRIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlv",
          "bnMY4dQDIAEoCTo6ChFzZXR0aW5nX3ByZV9sb2dpbhIdLmdvb2dsZS5wcm90",
          "b2J1Zi5GaWVsZE9wdGlvbnMY4tQDIAEoCDo9ChRzZXR0aW5nX2RlZmF1bHRf",
          "Ym9vbBIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY49QDIAEoCDo8",
          "ChNzZXR0aW5nX2RlZmF1bHRfaW50Eh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxk",
          "T3B0aW9ucxjk1AMgASgFOj0KFHNldHRpbmdfZGVmYXVsdF91aW50Eh0uZ29v",
          "Z2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxjl1AMgASgNOj4KFXNldHRpbmdf",
          "ZGVmYXVsdF9mbG9hdBIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMY",
          "5tQDIAEoAjo/ChZzZXR0aW5nX2RlZmF1bHRfc3RyaW5nEh0uZ29vZ2xlLnBy",
          "b3RvYnVmLkZpZWxkT3B0aW9ucxjn1AMgASgJOjkKEHNldHRpbmdfcmVhZG9u",
          "bHkSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGOjUAyABKAg6PAoT",
          "c2V0dGluZ19kZXNjcmlwdGlvbhIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9w",
          "dGlvbnMY6dQDIAEoCUIFSAGAAQE="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::EnumsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EClientSettingStore), typeof(global::EOverlayToggleBarLocation), }, new pb::Extension[] { SteammessagesClientsettingsExtensions.SettingStore, SteammessagesClientsettingsExtensions.SettingName, SteammessagesClientsettingsExtensions.SettingPreLogin, SteammessagesClientsettingsExtensions.SettingDefaultBool, SteammessagesClientsettingsExtensions.SettingDefaultInt, SteammessagesClientsettingsExtensions.SettingDefaultUint, SteammessagesClientsettingsExtensions.SettingDefaultFloat, SteammessagesClientsettingsExtensions.SettingDefaultString, SteammessagesClientsettingsExtensions.SettingReadonly, SteammessagesClientsettingsExtensions.SettingDescription }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgHotkey), global::CMsgHotkey.Parser, new[]{ "KeyCode", "AltKey", "ShiftKey", "CtrlKey", "MetaKey", "DisplayName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgClientSettings), global::CMsgClientSettings.Parser, new[]{ "NoSavePersonalInfo", "OobeTestModeEnabled", "InClientBeta", "IsSteamSideloaded", "PreferredMonitor", "SteamCefGpuBlocklistDisabled", "BigpictureWindowed", "DisplayName", "IsExternalDisplay", "SteamOsUnderscanLevel", "SteamOsUnderscanEnabled", "MinScaleFactor", "MaxScaleFactor", "AutoScaleFactor", "EnableTestUpdaters", "SmallMode", "SkipSteamvrInstallDialog", "AlwaysShowUserChooser", "ShowFamilySharingNotifications", "OverlayFpsCounterCorner", "OverlayFpsCounterHighContrast", "OverlayKey", "ScreenshotKey", "EnableOverlay", "DisableDesktopGameTheater", "EnableScreenshotNotification", "EnableScreenshotSound", "SaveUncompressedScreenshots", "ScreenshotsPath", "DefaultPingRate", "ServerPingRate", "SteamNetworkingShareIp", "WebBrowserHome", "VoiceMicDeviceName", "VoiceMicInputGain", "VoiceSpeakerOutputGain", "VoicePushToTalkSetting", "VoicePushToTalkKey", "OverlayToolbarListView", "AlwaysUseGamepaduiOverlay", "OverlayTabs", "OverlayScaleInterface", "SmoothScrollWebviews", "EnableGpuAcceleratedWebviews", "EnableHardwareVideoDecoding", "RunAtStartup", "EnableDpiScaling", "EnableMarketingMessages", "StartInBigPictureMode", "JumplistFlags", "EnableUiSounds", "DisableAllToasts", "DisableToastsInGame", "PlaySoundOnToast", "LibraryDisplaySize", "LibraryWhatsNewShowOnlyProductUpdates", "ShowStoreContentOnHome", "StartPage", "LibraryLowBandwidthMode", "LibraryLowPerfMode", "LibraryDisableCommunityContent", "LibraryDisplayIconInGameList", "ReadyToPlayIncludesStreaming", "ShowSteamDeckInfo", "EnableShaderPrecache", "EnableShaderBackgroundProcessing", "ShaderPrecachedSize", "NeedsSteamServiceRepair", "DownloadPeerContent", "DownloadRateBitsPerS", "RestrictAutoUpdates", "RestrictAutoUpdatesStart", "RestrictAutoUpdatesEnd", "DownloadRegion", "DownloadWhileAppRunning", "DownloadThrottleWhileStreaming", "DownloadThrottleRate", "CloudEnabled", "ShowScreenshotManager", "MusicVolume", "MusicPauseOnAppStart", "MusicPauseOnVoiceChat", "MusicDownloadHighQuality", "MusicPlaylistNotification", "BroadcastPermissions", "BroadcastOutputWidth", "BroadcastOutputHeight", "BroadcastBitrate", "BroadcastEncodingOption", "BroadcastRecordAllVideo", "BroadcastRecordAllAudio", "BroadcastRecordMicrophone", "BroadcastShowUploadStats", "BroadcastShowLiveReminder", "BroadcastChatCorner", "SteamInputConfiguratorErrorMsgEnable", "ControllerGuideButtonFocusSteam", "ControllerPs4Support", "ControllerXboxSupport", "ControllerXboxDriver", "ControllerSwitchSupport", "ControllerGenericSupport", "ControllerPowerOffTimeout", "TurnOffControllerOnExit", "ControllerCombineNintendoJoycons", "StartupMovieId", "StartupMovieLocalPath", "StartupMovieShuffle", "StartupMovieUsedForResume", "GameNotesEnableSpellcheck", "ScreenshotItemsPerRow", "GBackgroundEnabled", "GBackgroundPath", "GBackgroundMaxKeep", "ShowTimestampsInConsole" }, null, null, null, null)
        }));
  }
  #endregion

}
/// <summary>Holder for extension identifiers generated from the top level of steammessages_clientsettings.proto</summary>
public static partial class SteammessagesClientsettingsExtensions {
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::EClientSettingStore> SettingStore =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::EClientSettingStore>(60000, pb::FieldCodec.ForEnum(480000, x => (int) x, x => (global::EClientSettingStore) x, global::EClientSettingStore.KEclientSettingStoreInvalid));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string> SettingName =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string>(60001, pb::FieldCodec.ForString(480010, ""));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool> SettingPreLogin =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool>(60002, pb::FieldCodec.ForBool(480016, false));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool> SettingDefaultBool =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool>(60003, pb::FieldCodec.ForBool(480024, false));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, int> SettingDefaultInt =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, int>(60004, pb::FieldCodec.ForInt32(480032, 0));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, uint> SettingDefaultUint =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, uint>(60005, pb::FieldCodec.ForUInt32(480040, 0));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, float> SettingDefaultFloat =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, float>(60006, pb::FieldCodec.ForFloat(480053, 0F));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string> SettingDefaultString =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string>(60007, pb::FieldCodec.ForString(480058, ""));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool> SettingReadonly =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, bool>(60008, pb::FieldCodec.ForBool(480064, false));
  public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string> SettingDescription =
    new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, string>(60009, pb::FieldCodec.ForString(480074, ""));
}

#region Enums
public enum EClientSettingStore {
  [pbr::OriginalName("k_EClientSettingStore_Invalid")] KEclientSettingStoreInvalid = 0,
  [pbr::OriginalName("k_EClientSettingStore_ConfigStore_Install")] KEclientSettingStoreConfigStoreInstall = 1,
  [pbr::OriginalName("k_EClientSettingStore_ConfigStore_UserRoaming")] KEclientSettingStoreConfigStoreUserRoaming = 2,
  [pbr::OriginalName("k_EClientSettingStore_ConfigStore_UserLocal")] KEclientSettingStoreConfigStoreUserLocal = 3,
  [pbr::OriginalName("k_EClientSettingStore_Registry")] KEclientSettingStoreRegistry = 4,
  [pbr::OriginalName("k_EClientSettingStore_CustomFunc")] KEclientSettingStoreCustomFunc = 5,
}

public enum EOverlayToggleBarLocation {
  [pbr::OriginalName("k_EOverlayToggleBarLocation_Bottom")] KEoverlayToggleBarLocationBottom = 0,
  [pbr::OriginalName("k_EOverlayToggleBarLocation_Left")] KEoverlayToggleBarLocationLeft = 1,
  [pbr::OriginalName("k_EOverlayToggleBarLocation_Right")] KEoverlayToggleBarLocationRight = 2,
  [pbr::OriginalName("k_EOverlayToggleBarLocation_Top")] KEoverlayToggleBarLocationTop = 3,
}

#endregion

#region Messages
public sealed partial class CMsgHotkey : pb::IMessage<CMsgHotkey>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgHotkey> _parser = new pb::MessageParser<CMsgHotkey>(() => new CMsgHotkey());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgHotkey> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientsettingsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgHotkey() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgHotkey(CMsgHotkey other) : this() {
    _hasBits0 = other._hasBits0;
    keyCode_ = other.keyCode_;
    altKey_ = other.altKey_;
    shiftKey_ = other.shiftKey_;
    ctrlKey_ = other.ctrlKey_;
    metaKey_ = other.metaKey_;
    displayName_ = other.displayName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgHotkey Clone() {
    return new CMsgHotkey(this);
  }

  /// <summary>Field number for the "key_code" field.</summary>
  public const int KeyCodeFieldNumber = 1;
  private readonly static uint KeyCodeDefaultValue = 0;

  private uint keyCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint KeyCode {
    get { if ((_hasBits0 & 1) != 0) { return keyCode_; } else { return KeyCodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      keyCode_ = value;
    }
  }
  /// <summary>Gets whether the "key_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKeyCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "key_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKeyCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "alt_key" field.</summary>
  public const int AltKeyFieldNumber = 2;
  private readonly static bool AltKeyDefaultValue = false;

  private bool altKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AltKey {
    get { if ((_hasBits0 & 2) != 0) { return altKey_; } else { return AltKeyDefaultValue; } }
    set {
      _hasBits0 |= 2;
      altKey_ = value;
    }
  }
  /// <summary>Gets whether the "alt_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAltKey {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "alt_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAltKey() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "shift_key" field.</summary>
  public const int ShiftKeyFieldNumber = 3;
  private readonly static bool ShiftKeyDefaultValue = false;

  private bool shiftKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShiftKey {
    get { if ((_hasBits0 & 4) != 0) { return shiftKey_; } else { return ShiftKeyDefaultValue; } }
    set {
      _hasBits0 |= 4;
      shiftKey_ = value;
    }
  }
  /// <summary>Gets whether the "shift_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShiftKey {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "shift_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShiftKey() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ctrl_key" field.</summary>
  public const int CtrlKeyFieldNumber = 4;
  private readonly static bool CtrlKeyDefaultValue = false;

  private bool ctrlKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CtrlKey {
    get { if ((_hasBits0 & 8) != 0) { return ctrlKey_; } else { return CtrlKeyDefaultValue; } }
    set {
      _hasBits0 |= 8;
      ctrlKey_ = value;
    }
  }
  /// <summary>Gets whether the "ctrl_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtrlKey {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ctrl_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtrlKey() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "meta_key" field.</summary>
  public const int MetaKeyFieldNumber = 5;
  private readonly static bool MetaKeyDefaultValue = false;

  private bool metaKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MetaKey {
    get { if ((_hasBits0 & 16) != 0) { return metaKey_; } else { return MetaKeyDefaultValue; } }
    set {
      _hasBits0 |= 16;
      metaKey_ = value;
    }
  }
  /// <summary>Gets whether the "meta_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMetaKey {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "meta_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMetaKey() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "display_name" field.</summary>
  public const int DisplayNameFieldNumber = 6;
  private readonly static string DisplayNameDefaultValue = "";

  private string displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DisplayName {
    get { return displayName_ ?? DisplayNameDefaultValue; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "display_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayName {
    get { return displayName_ != null; }
  }
  /// <summary>Clears the value of the "display_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayName() {
    displayName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgHotkey);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgHotkey other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (KeyCode != other.KeyCode) return false;
    if (AltKey != other.AltKey) return false;
    if (ShiftKey != other.ShiftKey) return false;
    if (CtrlKey != other.CtrlKey) return false;
    if (MetaKey != other.MetaKey) return false;
    if (DisplayName != other.DisplayName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasKeyCode) hash ^= KeyCode.GetHashCode();
    if (HasAltKey) hash ^= AltKey.GetHashCode();
    if (HasShiftKey) hash ^= ShiftKey.GetHashCode();
    if (HasCtrlKey) hash ^= CtrlKey.GetHashCode();
    if (HasMetaKey) hash ^= MetaKey.GetHashCode();
    if (HasDisplayName) hash ^= DisplayName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasKeyCode) {
      output.WriteRawTag(8);
      output.WriteUInt32(KeyCode);
    }
    if (HasAltKey) {
      output.WriteRawTag(16);
      output.WriteBool(AltKey);
    }
    if (HasShiftKey) {
      output.WriteRawTag(24);
      output.WriteBool(ShiftKey);
    }
    if (HasCtrlKey) {
      output.WriteRawTag(32);
      output.WriteBool(CtrlKey);
    }
    if (HasMetaKey) {
      output.WriteRawTag(40);
      output.WriteBool(MetaKey);
    }
    if (HasDisplayName) {
      output.WriteRawTag(50);
      output.WriteString(DisplayName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasKeyCode) {
      output.WriteRawTag(8);
      output.WriteUInt32(KeyCode);
    }
    if (HasAltKey) {
      output.WriteRawTag(16);
      output.WriteBool(AltKey);
    }
    if (HasShiftKey) {
      output.WriteRawTag(24);
      output.WriteBool(ShiftKey);
    }
    if (HasCtrlKey) {
      output.WriteRawTag(32);
      output.WriteBool(CtrlKey);
    }
    if (HasMetaKey) {
      output.WriteRawTag(40);
      output.WriteBool(MetaKey);
    }
    if (HasDisplayName) {
      output.WriteRawTag(50);
      output.WriteString(DisplayName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasKeyCode) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyCode);
    }
    if (HasAltKey) {
      size += 1 + 1;
    }
    if (HasShiftKey) {
      size += 1 + 1;
    }
    if (HasCtrlKey) {
      size += 1 + 1;
    }
    if (HasMetaKey) {
      size += 1 + 1;
    }
    if (HasDisplayName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgHotkey other) {
    if (other == null) {
      return;
    }
    if (other.HasKeyCode) {
      KeyCode = other.KeyCode;
    }
    if (other.HasAltKey) {
      AltKey = other.AltKey;
    }
    if (other.HasShiftKey) {
      ShiftKey = other.ShiftKey;
    }
    if (other.HasCtrlKey) {
      CtrlKey = other.CtrlKey;
    }
    if (other.HasMetaKey) {
      MetaKey = other.MetaKey;
    }
    if (other.HasDisplayName) {
      DisplayName = other.DisplayName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          KeyCode = input.ReadUInt32();
          break;
        }
        case 16: {
          AltKey = input.ReadBool();
          break;
        }
        case 24: {
          ShiftKey = input.ReadBool();
          break;
        }
        case 32: {
          CtrlKey = input.ReadBool();
          break;
        }
        case 40: {
          MetaKey = input.ReadBool();
          break;
        }
        case 50: {
          DisplayName = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          KeyCode = input.ReadUInt32();
          break;
        }
        case 16: {
          AltKey = input.ReadBool();
          break;
        }
        case 24: {
          ShiftKey = input.ReadBool();
          break;
        }
        case 32: {
          CtrlKey = input.ReadBool();
          break;
        }
        case 40: {
          MetaKey = input.ReadBool();
          break;
        }
        case 50: {
          DisplayName = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgClientSettings : pb::IMessage<CMsgClientSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgClientSettings> _parser = new pb::MessageParser<CMsgClientSettings>(() => new CMsgClientSettings());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  private int _hasBits1;
  private int _hasBits2;
  private int _hasBits3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgClientSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesClientsettingsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientSettings(CMsgClientSettings other) : this() {
    _hasBits0 = other._hasBits0;
    _hasBits1 = other._hasBits1;
    _hasBits2 = other._hasBits2;
    _hasBits3 = other._hasBits3;
    noSavePersonalInfo_ = other.noSavePersonalInfo_;
    oobeTestModeEnabled_ = other.oobeTestModeEnabled_;
    inClientBeta_ = other.inClientBeta_;
    isSteamSideloaded_ = other.isSteamSideloaded_;
    preferredMonitor_ = other.preferredMonitor_;
    steamCefGpuBlocklistDisabled_ = other.steamCefGpuBlocklistDisabled_;
    bigpictureWindowed_ = other.bigpictureWindowed_;
    displayName_ = other.displayName_;
    isExternalDisplay_ = other.isExternalDisplay_;
    steamOsUnderscanLevel_ = other.steamOsUnderscanLevel_;
    steamOsUnderscanEnabled_ = other.steamOsUnderscanEnabled_;
    minScaleFactor_ = other.minScaleFactor_;
    maxScaleFactor_ = other.maxScaleFactor_;
    autoScaleFactor_ = other.autoScaleFactor_;
    enableTestUpdaters_ = other.enableTestUpdaters_;
    smallMode_ = other.smallMode_;
    skipSteamvrInstallDialog_ = other.skipSteamvrInstallDialog_;
    alwaysShowUserChooser_ = other.alwaysShowUserChooser_;
    showFamilySharingNotifications_ = other.showFamilySharingNotifications_;
    overlayFpsCounterCorner_ = other.overlayFpsCounterCorner_;
    overlayFpsCounterHighContrast_ = other.overlayFpsCounterHighContrast_;
    overlayKey_ = other.overlayKey_ != null ? other.overlayKey_.Clone() : null;
    screenshotKey_ = other.screenshotKey_ != null ? other.screenshotKey_.Clone() : null;
    enableOverlay_ = other.enableOverlay_;
    disableDesktopGameTheater_ = other.disableDesktopGameTheater_;
    enableScreenshotNotification_ = other.enableScreenshotNotification_;
    enableScreenshotSound_ = other.enableScreenshotSound_;
    saveUncompressedScreenshots_ = other.saveUncompressedScreenshots_;
    screenshotsPath_ = other.screenshotsPath_;
    defaultPingRate_ = other.defaultPingRate_;
    serverPingRate_ = other.serverPingRate_;
    steamNetworkingShareIp_ = other.steamNetworkingShareIp_;
    webBrowserHome_ = other.webBrowserHome_;
    voiceMicDeviceName_ = other.voiceMicDeviceName_;
    voiceMicInputGain_ = other.voiceMicInputGain_;
    voiceSpeakerOutputGain_ = other.voiceSpeakerOutputGain_;
    voicePushToTalkSetting_ = other.voicePushToTalkSetting_;
    voicePushToTalkKey_ = other.voicePushToTalkKey_ != null ? other.voicePushToTalkKey_.Clone() : null;
    overlayToolbarListView_ = other.overlayToolbarListView_;
    alwaysUseGamepaduiOverlay_ = other.alwaysUseGamepaduiOverlay_;
    overlayTabs_ = other.overlayTabs_;
    overlayScaleInterface_ = other.overlayScaleInterface_;
    smoothScrollWebviews_ = other.smoothScrollWebviews_;
    enableGpuAcceleratedWebviews_ = other.enableGpuAcceleratedWebviews_;
    enableHardwareVideoDecoding_ = other.enableHardwareVideoDecoding_;
    runAtStartup_ = other.runAtStartup_;
    enableDpiScaling_ = other.enableDpiScaling_;
    enableMarketingMessages_ = other.enableMarketingMessages_;
    startInBigPictureMode_ = other.startInBigPictureMode_;
    jumplistFlags_ = other.jumplistFlags_;
    enableUiSounds_ = other.enableUiSounds_;
    disableAllToasts_ = other.disableAllToasts_;
    disableToastsInGame_ = other.disableToastsInGame_;
    playSoundOnToast_ = other.playSoundOnToast_;
    libraryDisplaySize_ = other.libraryDisplaySize_;
    libraryWhatsNewShowOnlyProductUpdates_ = other.libraryWhatsNewShowOnlyProductUpdates_;
    showStoreContentOnHome_ = other.showStoreContentOnHome_;
    startPage_ = other.startPage_;
    libraryLowBandwidthMode_ = other.libraryLowBandwidthMode_;
    libraryLowPerfMode_ = other.libraryLowPerfMode_;
    libraryDisableCommunityContent_ = other.libraryDisableCommunityContent_;
    libraryDisplayIconInGameList_ = other.libraryDisplayIconInGameList_;
    readyToPlayIncludesStreaming_ = other.readyToPlayIncludesStreaming_;
    showSteamDeckInfo_ = other.showSteamDeckInfo_;
    enableShaderPrecache_ = other.enableShaderPrecache_;
    enableShaderBackgroundProcessing_ = other.enableShaderBackgroundProcessing_;
    shaderPrecachedSize_ = other.shaderPrecachedSize_;
    needsSteamServiceRepair_ = other.needsSteamServiceRepair_;
    downloadPeerContent_ = other.downloadPeerContent_;
    downloadRateBitsPerS_ = other.downloadRateBitsPerS_;
    restrictAutoUpdates_ = other.restrictAutoUpdates_;
    restrictAutoUpdatesStart_ = other.restrictAutoUpdatesStart_;
    restrictAutoUpdatesEnd_ = other.restrictAutoUpdatesEnd_;
    downloadRegion_ = other.downloadRegion_;
    downloadWhileAppRunning_ = other.downloadWhileAppRunning_;
    downloadThrottleWhileStreaming_ = other.downloadThrottleWhileStreaming_;
    downloadThrottleRate_ = other.downloadThrottleRate_;
    cloudEnabled_ = other.cloudEnabled_;
    showScreenshotManager_ = other.showScreenshotManager_;
    musicVolume_ = other.musicVolume_;
    musicPauseOnAppStart_ = other.musicPauseOnAppStart_;
    musicPauseOnVoiceChat_ = other.musicPauseOnVoiceChat_;
    musicDownloadHighQuality_ = other.musicDownloadHighQuality_;
    musicPlaylistNotification_ = other.musicPlaylistNotification_;
    broadcastPermissions_ = other.broadcastPermissions_;
    broadcastOutputWidth_ = other.broadcastOutputWidth_;
    broadcastOutputHeight_ = other.broadcastOutputHeight_;
    broadcastBitrate_ = other.broadcastBitrate_;
    broadcastEncodingOption_ = other.broadcastEncodingOption_;
    broadcastRecordAllVideo_ = other.broadcastRecordAllVideo_;
    broadcastRecordAllAudio_ = other.broadcastRecordAllAudio_;
    broadcastRecordMicrophone_ = other.broadcastRecordMicrophone_;
    broadcastShowUploadStats_ = other.broadcastShowUploadStats_;
    broadcastShowLiveReminder_ = other.broadcastShowLiveReminder_;
    broadcastChatCorner_ = other.broadcastChatCorner_;
    steamInputConfiguratorErrorMsgEnable_ = other.steamInputConfiguratorErrorMsgEnable_;
    controllerGuideButtonFocusSteam_ = other.controllerGuideButtonFocusSteam_;
    controllerPs4Support_ = other.controllerPs4Support_;
    controllerXboxSupport_ = other.controllerXboxSupport_;
    controllerXboxDriver_ = other.controllerXboxDriver_;
    controllerSwitchSupport_ = other.controllerSwitchSupport_;
    controllerGenericSupport_ = other.controllerGenericSupport_;
    controllerPowerOffTimeout_ = other.controllerPowerOffTimeout_;
    turnOffControllerOnExit_ = other.turnOffControllerOnExit_;
    controllerCombineNintendoJoycons_ = other.controllerCombineNintendoJoycons_;
    startupMovieId_ = other.startupMovieId_;
    startupMovieLocalPath_ = other.startupMovieLocalPath_;
    startupMovieShuffle_ = other.startupMovieShuffle_;
    startupMovieUsedForResume_ = other.startupMovieUsedForResume_;
    gameNotesEnableSpellcheck_ = other.gameNotesEnableSpellcheck_;
    screenshotItemsPerRow_ = other.screenshotItemsPerRow_;
    gBackgroundEnabled_ = other.gBackgroundEnabled_;
    gBackgroundPath_ = other.gBackgroundPath_;
    gBackgroundMaxKeep_ = other.gBackgroundMaxKeep_;
    showTimestampsInConsole_ = other.showTimestampsInConsole_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgClientSettings Clone() {
    return new CMsgClientSettings(this);
  }

  /// <summary>Field number for the "no_save_personal_info" field.</summary>
  public const int NoSavePersonalInfoFieldNumber = 1;
  private readonly static bool NoSavePersonalInfoDefaultValue = false;

  private bool noSavePersonalInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoSavePersonalInfo {
    get { if ((_hasBits0 & 1) != 0) { return noSavePersonalInfo_; } else { return NoSavePersonalInfoDefaultValue; } }
    set {
      _hasBits0 |= 1;
      noSavePersonalInfo_ = value;
    }
  }
  /// <summary>Gets whether the "no_save_personal_info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNoSavePersonalInfo {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "no_save_personal_info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNoSavePersonalInfo() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "oobe_test_mode_enabled" field.</summary>
  public const int OobeTestModeEnabledFieldNumber = 2;
  private readonly static bool OobeTestModeEnabledDefaultValue = false;

  private bool oobeTestModeEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool OobeTestModeEnabled {
    get { if ((_hasBits0 & 2) != 0) { return oobeTestModeEnabled_; } else { return OobeTestModeEnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      oobeTestModeEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "oobe_test_mode_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOobeTestModeEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "oobe_test_mode_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOobeTestModeEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "in_client_beta" field.</summary>
  public const int InClientBetaFieldNumber = 3;
  private readonly static bool InClientBetaDefaultValue = false;

  private bool inClientBeta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool InClientBeta {
    get { if ((_hasBits0 & 4) != 0) { return inClientBeta_; } else { return InClientBetaDefaultValue; } }
    set {
      _hasBits0 |= 4;
      inClientBeta_ = value;
    }
  }
  /// <summary>Gets whether the "in_client_beta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInClientBeta {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "in_client_beta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInClientBeta() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_steam_sideloaded" field.</summary>
  public const int IsSteamSideloadedFieldNumber = 4;
  private readonly static bool IsSteamSideloadedDefaultValue = false;

  private bool isSteamSideloaded_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsSteamSideloaded {
    get { if ((_hasBits0 & 8) != 0) { return isSteamSideloaded_; } else { return IsSteamSideloadedDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isSteamSideloaded_ = value;
    }
  }
  /// <summary>Gets whether the "is_steam_sideloaded" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsSteamSideloaded {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_steam_sideloaded" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsSteamSideloaded() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "preferred_monitor" field.</summary>
  public const int PreferredMonitorFieldNumber = 5;
  private readonly static string PreferredMonitorDefaultValue = "";

  private string preferredMonitor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PreferredMonitor {
    get { return preferredMonitor_ ?? PreferredMonitorDefaultValue; }
    set {
      preferredMonitor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "preferred_monitor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPreferredMonitor {
    get { return preferredMonitor_ != null; }
  }
  /// <summary>Clears the value of the "preferred_monitor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPreferredMonitor() {
    preferredMonitor_ = null;
  }

  /// <summary>Field number for the "steam_cef_gpu_blocklist_disabled" field.</summary>
  public const int SteamCefGpuBlocklistDisabledFieldNumber = 6;
  private readonly static bool SteamCefGpuBlocklistDisabledDefaultValue = false;

  private bool steamCefGpuBlocklistDisabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SteamCefGpuBlocklistDisabled {
    get { if ((_hasBits0 & 16) != 0) { return steamCefGpuBlocklistDisabled_; } else { return SteamCefGpuBlocklistDisabledDefaultValue; } }
    set {
      _hasBits0 |= 16;
      steamCefGpuBlocklistDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "steam_cef_gpu_blocklist_disabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamCefGpuBlocklistDisabled {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "steam_cef_gpu_blocklist_disabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamCefGpuBlocklistDisabled() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "bigpicture_windowed" field.</summary>
  public const int BigpictureWindowedFieldNumber = 7;
  private readonly static bool BigpictureWindowedDefaultValue = false;

  private bool bigpictureWindowed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BigpictureWindowed {
    get { if ((_hasBits0 & 32) != 0) { return bigpictureWindowed_; } else { return BigpictureWindowedDefaultValue; } }
    set {
      _hasBits0 |= 32;
      bigpictureWindowed_ = value;
    }
  }
  /// <summary>Gets whether the "bigpicture_windowed" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBigpictureWindowed {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "bigpicture_windowed" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBigpictureWindowed() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "display_name" field.</summary>
  public const int DisplayNameFieldNumber = 8;
  private readonly static string DisplayNameDefaultValue = "";

  private string displayName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DisplayName {
    get { return displayName_ ?? DisplayNameDefaultValue; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "display_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayName {
    get { return displayName_ != null; }
  }
  /// <summary>Clears the value of the "display_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayName() {
    displayName_ = null;
  }

  /// <summary>Field number for the "is_external_display" field.</summary>
  public const int IsExternalDisplayFieldNumber = 9;
  private readonly static bool IsExternalDisplayDefaultValue = false;

  private bool isExternalDisplay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsExternalDisplay {
    get { if ((_hasBits0 & 64) != 0) { return isExternalDisplay_; } else { return IsExternalDisplayDefaultValue; } }
    set {
      _hasBits0 |= 64;
      isExternalDisplay_ = value;
    }
  }
  /// <summary>Gets whether the "is_external_display" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsExternalDisplay {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "is_external_display" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsExternalDisplay() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "steam_os_underscan_level" field.</summary>
  public const int SteamOsUnderscanLevelFieldNumber = 10;
  private readonly static float SteamOsUnderscanLevelDefaultValue = 0F;

  private float steamOsUnderscanLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SteamOsUnderscanLevel {
    get { if ((_hasBits0 & 128) != 0) { return steamOsUnderscanLevel_; } else { return SteamOsUnderscanLevelDefaultValue; } }
    set {
      _hasBits0 |= 128;
      steamOsUnderscanLevel_ = value;
    }
  }
  /// <summary>Gets whether the "steam_os_underscan_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamOsUnderscanLevel {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "steam_os_underscan_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamOsUnderscanLevel() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "steam_os_underscan_enabled" field.</summary>
  public const int SteamOsUnderscanEnabledFieldNumber = 11;
  private readonly static bool SteamOsUnderscanEnabledDefaultValue = false;

  private bool steamOsUnderscanEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SteamOsUnderscanEnabled {
    get { if ((_hasBits0 & 256) != 0) { return steamOsUnderscanEnabled_; } else { return SteamOsUnderscanEnabledDefaultValue; } }
    set {
      _hasBits0 |= 256;
      steamOsUnderscanEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "steam_os_underscan_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamOsUnderscanEnabled {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "steam_os_underscan_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamOsUnderscanEnabled() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "min_scale_factor" field.</summary>
  public const int MinScaleFactorFieldNumber = 12;
  private readonly static float MinScaleFactorDefaultValue = 0F;

  private float minScaleFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MinScaleFactor {
    get { if ((_hasBits0 & 512) != 0) { return minScaleFactor_; } else { return MinScaleFactorDefaultValue; } }
    set {
      _hasBits0 |= 512;
      minScaleFactor_ = value;
    }
  }
  /// <summary>Gets whether the "min_scale_factor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinScaleFactor {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "min_scale_factor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinScaleFactor() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "max_scale_factor" field.</summary>
  public const int MaxScaleFactorFieldNumber = 13;
  private readonly static float MaxScaleFactorDefaultValue = 0F;

  private float maxScaleFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MaxScaleFactor {
    get { if ((_hasBits0 & 1024) != 0) { return maxScaleFactor_; } else { return MaxScaleFactorDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      maxScaleFactor_ = value;
    }
  }
  /// <summary>Gets whether the "max_scale_factor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxScaleFactor {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "max_scale_factor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxScaleFactor() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "auto_scale_factor" field.</summary>
  public const int AutoScaleFactorFieldNumber = 14;
  private readonly static float AutoScaleFactorDefaultValue = 0F;

  private float autoScaleFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AutoScaleFactor {
    get { if ((_hasBits0 & 2048) != 0) { return autoScaleFactor_; } else { return AutoScaleFactorDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      autoScaleFactor_ = value;
    }
  }
  /// <summary>Gets whether the "auto_scale_factor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutoScaleFactor {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "auto_scale_factor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutoScaleFactor() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "enable_test_updaters" field.</summary>
  public const int EnableTestUpdatersFieldNumber = 15;
  private readonly static bool EnableTestUpdatersDefaultValue = false;

  private bool enableTestUpdaters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableTestUpdaters {
    get { if ((_hasBits0 & 4096) != 0) { return enableTestUpdaters_; } else { return EnableTestUpdatersDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      enableTestUpdaters_ = value;
    }
  }
  /// <summary>Gets whether the "enable_test_updaters" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableTestUpdaters {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "enable_test_updaters" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableTestUpdaters() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "small_mode" field.</summary>
  public const int SmallModeFieldNumber = 16;
  private readonly static bool SmallModeDefaultValue = false;

  private bool smallMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SmallMode {
    get { if ((_hasBits0 & 8192) != 0) { return smallMode_; } else { return SmallModeDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      smallMode_ = value;
    }
  }
  /// <summary>Gets whether the "small_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSmallMode {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "small_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSmallMode() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "skip_steamvr_install_dialog" field.</summary>
  public const int SkipSteamvrInstallDialogFieldNumber = 19;
  private readonly static bool SkipSteamvrInstallDialogDefaultValue = false;

  private bool skipSteamvrInstallDialog_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SkipSteamvrInstallDialog {
    get { if ((_hasBits0 & 16384) != 0) { return skipSteamvrInstallDialog_; } else { return SkipSteamvrInstallDialogDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      skipSteamvrInstallDialog_ = value;
    }
  }
  /// <summary>Gets whether the "skip_steamvr_install_dialog" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSkipSteamvrInstallDialog {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "skip_steamvr_install_dialog" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSkipSteamvrInstallDialog() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "always_show_user_chooser" field.</summary>
  public const int AlwaysShowUserChooserFieldNumber = 20;
  private readonly static bool AlwaysShowUserChooserDefaultValue = false;

  private bool alwaysShowUserChooser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AlwaysShowUserChooser {
    get { if ((_hasBits0 & 32768) != 0) { return alwaysShowUserChooser_; } else { return AlwaysShowUserChooserDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      alwaysShowUserChooser_ = value;
    }
  }
  /// <summary>Gets whether the "always_show_user_chooser" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlwaysShowUserChooser {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "always_show_user_chooser" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlwaysShowUserChooser() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "show_family_sharing_notifications" field.</summary>
  public const int ShowFamilySharingNotificationsFieldNumber = 3000;
  private readonly static bool ShowFamilySharingNotificationsDefaultValue = false;

  private bool showFamilySharingNotifications_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowFamilySharingNotifications {
    get { if ((_hasBits0 & 65536) != 0) { return showFamilySharingNotifications_; } else { return ShowFamilySharingNotificationsDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      showFamilySharingNotifications_ = value;
    }
  }
  /// <summary>Gets whether the "show_family_sharing_notifications" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowFamilySharingNotifications {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "show_family_sharing_notifications" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowFamilySharingNotifications() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "overlay_fps_counter_corner" field.</summary>
  public const int OverlayFpsCounterCornerFieldNumber = 4000;
  private readonly static int OverlayFpsCounterCornerDefaultValue = 0;

  private int overlayFpsCounterCorner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OverlayFpsCounterCorner {
    get { if ((_hasBits0 & 131072) != 0) { return overlayFpsCounterCorner_; } else { return OverlayFpsCounterCornerDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      overlayFpsCounterCorner_ = value;
    }
  }
  /// <summary>Gets whether the "overlay_fps_counter_corner" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverlayFpsCounterCorner {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "overlay_fps_counter_corner" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverlayFpsCounterCorner() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "overlay_fps_counter_high_contrast" field.</summary>
  public const int OverlayFpsCounterHighContrastFieldNumber = 4001;
  private readonly static bool OverlayFpsCounterHighContrastDefaultValue = false;

  private bool overlayFpsCounterHighContrast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool OverlayFpsCounterHighContrast {
    get { if ((_hasBits0 & 262144) != 0) { return overlayFpsCounterHighContrast_; } else { return OverlayFpsCounterHighContrastDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      overlayFpsCounterHighContrast_ = value;
    }
  }
  /// <summary>Gets whether the "overlay_fps_counter_high_contrast" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverlayFpsCounterHighContrast {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "overlay_fps_counter_high_contrast" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverlayFpsCounterHighContrast() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "overlay_key" field.</summary>
  public const int OverlayKeyFieldNumber = 4002;
  private global::CMsgHotkey overlayKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgHotkey OverlayKey {
    get { return overlayKey_; }
    set {
      overlayKey_ = value;
    }
  }

  /// <summary>Field number for the "screenshot_key" field.</summary>
  public const int ScreenshotKeyFieldNumber = 4003;
  private global::CMsgHotkey screenshotKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgHotkey ScreenshotKey {
    get { return screenshotKey_; }
    set {
      screenshotKey_ = value;
    }
  }

  /// <summary>Field number for the "enable_overlay" field.</summary>
  public const int EnableOverlayFieldNumber = 4004;
  private readonly static bool EnableOverlayDefaultValue = false;

  private bool enableOverlay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableOverlay {
    get { if ((_hasBits0 & 524288) != 0) { return enableOverlay_; } else { return EnableOverlayDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      enableOverlay_ = value;
    }
  }
  /// <summary>Gets whether the "enable_overlay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableOverlay {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "enable_overlay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableOverlay() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "disable_desktop_game_theater" field.</summary>
  public const int DisableDesktopGameTheaterFieldNumber = 4005;
  private readonly static bool DisableDesktopGameTheaterDefaultValue = false;

  private bool disableDesktopGameTheater_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisableDesktopGameTheater {
    get { if ((_hasBits0 & 1048576) != 0) { return disableDesktopGameTheater_; } else { return DisableDesktopGameTheaterDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      disableDesktopGameTheater_ = value;
    }
  }
  /// <summary>Gets whether the "disable_desktop_game_theater" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisableDesktopGameTheater {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "disable_desktop_game_theater" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisableDesktopGameTheater() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "enable_screenshot_notification" field.</summary>
  public const int EnableScreenshotNotificationFieldNumber = 4006;
  private readonly static bool EnableScreenshotNotificationDefaultValue = false;

  private bool enableScreenshotNotification_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableScreenshotNotification {
    get { if ((_hasBits0 & 2097152) != 0) { return enableScreenshotNotification_; } else { return EnableScreenshotNotificationDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      enableScreenshotNotification_ = value;
    }
  }
  /// <summary>Gets whether the "enable_screenshot_notification" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableScreenshotNotification {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "enable_screenshot_notification" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableScreenshotNotification() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "enable_screenshot_sound" field.</summary>
  public const int EnableScreenshotSoundFieldNumber = 4007;
  private readonly static bool EnableScreenshotSoundDefaultValue = false;

  private bool enableScreenshotSound_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableScreenshotSound {
    get { if ((_hasBits0 & 4194304) != 0) { return enableScreenshotSound_; } else { return EnableScreenshotSoundDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      enableScreenshotSound_ = value;
    }
  }
  /// <summary>Gets whether the "enable_screenshot_sound" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableScreenshotSound {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "enable_screenshot_sound" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableScreenshotSound() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "save_uncompressed_screenshots" field.</summary>
  public const int SaveUncompressedScreenshotsFieldNumber = 4008;
  private readonly static bool SaveUncompressedScreenshotsDefaultValue = false;

  private bool saveUncompressedScreenshots_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SaveUncompressedScreenshots {
    get { if ((_hasBits0 & 8388608) != 0) { return saveUncompressedScreenshots_; } else { return SaveUncompressedScreenshotsDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      saveUncompressedScreenshots_ = value;
    }
  }
  /// <summary>Gets whether the "save_uncompressed_screenshots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSaveUncompressedScreenshots {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "save_uncompressed_screenshots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSaveUncompressedScreenshots() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "screenshots_path" field.</summary>
  public const int ScreenshotsPathFieldNumber = 4009;
  private readonly static string ScreenshotsPathDefaultValue = "";

  private string screenshotsPath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ScreenshotsPath {
    get { return screenshotsPath_ ?? ScreenshotsPathDefaultValue; }
    set {
      screenshotsPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "screenshots_path" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScreenshotsPath {
    get { return screenshotsPath_ != null; }
  }
  /// <summary>Clears the value of the "screenshots_path" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScreenshotsPath() {
    screenshotsPath_ = null;
  }

  /// <summary>Field number for the "default_ping_rate" field.</summary>
  public const int DefaultPingRateFieldNumber = 4010;
  private readonly static int DefaultPingRateDefaultValue = 0;

  private int defaultPingRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultPingRate {
    get { if ((_hasBits0 & 16777216) != 0) { return defaultPingRate_; } else { return DefaultPingRateDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      defaultPingRate_ = value;
    }
  }
  /// <summary>Gets whether the "default_ping_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultPingRate {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "default_ping_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultPingRate() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "server_ping_rate" field.</summary>
  public const int ServerPingRateFieldNumber = 4011;
  private readonly static int ServerPingRateDefaultValue = 0;

  private int serverPingRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ServerPingRate {
    get { if ((_hasBits0 & 33554432) != 0) { return serverPingRate_; } else { return ServerPingRateDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      serverPingRate_ = value;
    }
  }
  /// <summary>Gets whether the "server_ping_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerPingRate {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "server_ping_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerPingRate() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "steam_networking_share_ip" field.</summary>
  public const int SteamNetworkingShareIpFieldNumber = 4012;
  private readonly static int SteamNetworkingShareIpDefaultValue = 0;

  private int steamNetworkingShareIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SteamNetworkingShareIp {
    get { if ((_hasBits0 & 67108864) != 0) { return steamNetworkingShareIp_; } else { return SteamNetworkingShareIpDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      steamNetworkingShareIp_ = value;
    }
  }
  /// <summary>Gets whether the "steam_networking_share_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamNetworkingShareIp {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "steam_networking_share_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamNetworkingShareIp() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "web_browser_home" field.</summary>
  public const int WebBrowserHomeFieldNumber = 4013;
  private readonly static string WebBrowserHomeDefaultValue = "";

  private string webBrowserHome_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string WebBrowserHome {
    get { return webBrowserHome_ ?? WebBrowserHomeDefaultValue; }
    set {
      webBrowserHome_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "web_browser_home" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWebBrowserHome {
    get { return webBrowserHome_ != null; }
  }
  /// <summary>Clears the value of the "web_browser_home" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWebBrowserHome() {
    webBrowserHome_ = null;
  }

  /// <summary>Field number for the "voice_mic_device_name" field.</summary>
  public const int VoiceMicDeviceNameFieldNumber = 4014;
  private readonly static string VoiceMicDeviceNameDefaultValue = "";

  private string voiceMicDeviceName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string VoiceMicDeviceName {
    get { return voiceMicDeviceName_ ?? VoiceMicDeviceNameDefaultValue; }
    set {
      voiceMicDeviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "voice_mic_device_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVoiceMicDeviceName {
    get { return voiceMicDeviceName_ != null; }
  }
  /// <summary>Clears the value of the "voice_mic_device_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVoiceMicDeviceName() {
    voiceMicDeviceName_ = null;
  }

  /// <summary>Field number for the "voice_mic_input_gain" field.</summary>
  public const int VoiceMicInputGainFieldNumber = 4015;
  private readonly static float VoiceMicInputGainDefaultValue = 0F;

  private float voiceMicInputGain_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float VoiceMicInputGain {
    get { if ((_hasBits0 & 134217728) != 0) { return voiceMicInputGain_; } else { return VoiceMicInputGainDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      voiceMicInputGain_ = value;
    }
  }
  /// <summary>Gets whether the "voice_mic_input_gain" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVoiceMicInputGain {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "voice_mic_input_gain" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVoiceMicInputGain() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "voice_speaker_output_gain" field.</summary>
  public const int VoiceSpeakerOutputGainFieldNumber = 4016;
  private readonly static float VoiceSpeakerOutputGainDefaultValue = 0F;

  private float voiceSpeakerOutputGain_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float VoiceSpeakerOutputGain {
    get { if ((_hasBits0 & 268435456) != 0) { return voiceSpeakerOutputGain_; } else { return VoiceSpeakerOutputGainDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      voiceSpeakerOutputGain_ = value;
    }
  }
  /// <summary>Gets whether the "voice_speaker_output_gain" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVoiceSpeakerOutputGain {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "voice_speaker_output_gain" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVoiceSpeakerOutputGain() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "voice_push_to_talk_setting" field.</summary>
  public const int VoicePushToTalkSettingFieldNumber = 4017;
  private readonly static int VoicePushToTalkSettingDefaultValue = 0;

  private int voicePushToTalkSetting_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int VoicePushToTalkSetting {
    get { if ((_hasBits0 & 536870912) != 0) { return voicePushToTalkSetting_; } else { return VoicePushToTalkSettingDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      voicePushToTalkSetting_ = value;
    }
  }
  /// <summary>Gets whether the "voice_push_to_talk_setting" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVoicePushToTalkSetting {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "voice_push_to_talk_setting" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVoicePushToTalkSetting() {
    _hasBits0 &= ~536870912;
  }

  /// <summary>Field number for the "voice_push_to_talk_key" field.</summary>
  public const int VoicePushToTalkKeyFieldNumber = 4018;
  private global::CMsgHotkey voicePushToTalkKey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgHotkey VoicePushToTalkKey {
    get { return voicePushToTalkKey_; }
    set {
      voicePushToTalkKey_ = value;
    }
  }

  /// <summary>Field number for the "overlay_toolbar_list_view" field.</summary>
  public const int OverlayToolbarListViewFieldNumber = 4019;
  private readonly static bool OverlayToolbarListViewDefaultValue = false;

  private bool overlayToolbarListView_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool OverlayToolbarListView {
    get { if ((_hasBits0 & 1073741824) != 0) { return overlayToolbarListView_; } else { return OverlayToolbarListViewDefaultValue; } }
    set {
      _hasBits0 |= 1073741824;
      overlayToolbarListView_ = value;
    }
  }
  /// <summary>Gets whether the "overlay_toolbar_list_view" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverlayToolbarListView {
    get { return (_hasBits0 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "overlay_toolbar_list_view" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverlayToolbarListView() {
    _hasBits0 &= ~1073741824;
  }

  /// <summary>Field number for the "always_use_gamepadui_overlay" field.</summary>
  public const int AlwaysUseGamepaduiOverlayFieldNumber = 4020;
  private readonly static bool AlwaysUseGamepaduiOverlayDefaultValue = false;

  private bool alwaysUseGamepaduiOverlay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AlwaysUseGamepaduiOverlay {
    get { if ((_hasBits0 & -2147483648) != 0) { return alwaysUseGamepaduiOverlay_; } else { return AlwaysUseGamepaduiOverlayDefaultValue; } }
    set {
      _hasBits0 |= -2147483648;
      alwaysUseGamepaduiOverlay_ = value;
    }
  }
  /// <summary>Gets whether the "always_use_gamepadui_overlay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlwaysUseGamepaduiOverlay {
    get { return (_hasBits0 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "always_use_gamepadui_overlay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlwaysUseGamepaduiOverlay() {
    _hasBits0 &= ~-2147483648;
  }

  /// <summary>Field number for the "overlay_tabs" field.</summary>
  public const int OverlayTabsFieldNumber = 4021;
  private readonly static string OverlayTabsDefaultValue = "";

  private string overlayTabs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string OverlayTabs {
    get { return overlayTabs_ ?? OverlayTabsDefaultValue; }
    set {
      overlayTabs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "overlay_tabs" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverlayTabs {
    get { return overlayTabs_ != null; }
  }
  /// <summary>Clears the value of the "overlay_tabs" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverlayTabs() {
    overlayTabs_ = null;
  }

  /// <summary>Field number for the "overlay_scale_interface" field.</summary>
  public const int OverlayScaleInterfaceFieldNumber = 4022;
  private readonly static bool OverlayScaleInterfaceDefaultValue = false;

  private bool overlayScaleInterface_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool OverlayScaleInterface {
    get { if ((_hasBits1 & 1) != 0) { return overlayScaleInterface_; } else { return OverlayScaleInterfaceDefaultValue; } }
    set {
      _hasBits1 |= 1;
      overlayScaleInterface_ = value;
    }
  }
  /// <summary>Gets whether the "overlay_scale_interface" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOverlayScaleInterface {
    get { return (_hasBits1 & 1) != 0; }
  }
  /// <summary>Clears the value of the "overlay_scale_interface" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOverlayScaleInterface() {
    _hasBits1 &= ~1;
  }

  /// <summary>Field number for the "smooth_scroll_webviews" field.</summary>
  public const int SmoothScrollWebviewsFieldNumber = 5000;
  private readonly static bool SmoothScrollWebviewsDefaultValue = false;

  private bool smoothScrollWebviews_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SmoothScrollWebviews {
    get { if ((_hasBits1 & 2) != 0) { return smoothScrollWebviews_; } else { return SmoothScrollWebviewsDefaultValue; } }
    set {
      _hasBits1 |= 2;
      smoothScrollWebviews_ = value;
    }
  }
  /// <summary>Gets whether the "smooth_scroll_webviews" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSmoothScrollWebviews {
    get { return (_hasBits1 & 2) != 0; }
  }
  /// <summary>Clears the value of the "smooth_scroll_webviews" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSmoothScrollWebviews() {
    _hasBits1 &= ~2;
  }

  /// <summary>Field number for the "enable_gpu_accelerated_webviews" field.</summary>
  public const int EnableGpuAcceleratedWebviewsFieldNumber = 5001;
  private readonly static bool EnableGpuAcceleratedWebviewsDefaultValue = false;

  private bool enableGpuAcceleratedWebviews_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableGpuAcceleratedWebviews {
    get { if ((_hasBits1 & 4) != 0) { return enableGpuAcceleratedWebviews_; } else { return EnableGpuAcceleratedWebviewsDefaultValue; } }
    set {
      _hasBits1 |= 4;
      enableGpuAcceleratedWebviews_ = value;
    }
  }
  /// <summary>Gets whether the "enable_gpu_accelerated_webviews" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableGpuAcceleratedWebviews {
    get { return (_hasBits1 & 4) != 0; }
  }
  /// <summary>Clears the value of the "enable_gpu_accelerated_webviews" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableGpuAcceleratedWebviews() {
    _hasBits1 &= ~4;
  }

  /// <summary>Field number for the "enable_hardware_video_decoding" field.</summary>
  public const int EnableHardwareVideoDecodingFieldNumber = 5003;
  private readonly static bool EnableHardwareVideoDecodingDefaultValue = false;

  private bool enableHardwareVideoDecoding_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableHardwareVideoDecoding {
    get { if ((_hasBits1 & 8) != 0) { return enableHardwareVideoDecoding_; } else { return EnableHardwareVideoDecodingDefaultValue; } }
    set {
      _hasBits1 |= 8;
      enableHardwareVideoDecoding_ = value;
    }
  }
  /// <summary>Gets whether the "enable_hardware_video_decoding" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableHardwareVideoDecoding {
    get { return (_hasBits1 & 8) != 0; }
  }
  /// <summary>Clears the value of the "enable_hardware_video_decoding" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableHardwareVideoDecoding() {
    _hasBits1 &= ~8;
  }

  /// <summary>Field number for the "run_at_startup" field.</summary>
  public const int RunAtStartupFieldNumber = 5004;
  private readonly static bool RunAtStartupDefaultValue = false;

  private bool runAtStartup_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RunAtStartup {
    get { if ((_hasBits1 & 16) != 0) { return runAtStartup_; } else { return RunAtStartupDefaultValue; } }
    set {
      _hasBits1 |= 16;
      runAtStartup_ = value;
    }
  }
  /// <summary>Gets whether the "run_at_startup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRunAtStartup {
    get { return (_hasBits1 & 16) != 0; }
  }
  /// <summary>Clears the value of the "run_at_startup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRunAtStartup() {
    _hasBits1 &= ~16;
  }

  /// <summary>Field number for the "enable_dpi_scaling" field.</summary>
  public const int EnableDpiScalingFieldNumber = 5005;
  private readonly static bool EnableDpiScalingDefaultValue = false;

  private bool enableDpiScaling_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableDpiScaling {
    get { if ((_hasBits1 & 32) != 0) { return enableDpiScaling_; } else { return EnableDpiScalingDefaultValue; } }
    set {
      _hasBits1 |= 32;
      enableDpiScaling_ = value;
    }
  }
  /// <summary>Gets whether the "enable_dpi_scaling" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableDpiScaling {
    get { return (_hasBits1 & 32) != 0; }
  }
  /// <summary>Clears the value of the "enable_dpi_scaling" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableDpiScaling() {
    _hasBits1 &= ~32;
  }

  /// <summary>Field number for the "enable_marketing_messages" field.</summary>
  public const int EnableMarketingMessagesFieldNumber = 5006;
  private readonly static bool EnableMarketingMessagesDefaultValue = false;

  private bool enableMarketingMessages_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableMarketingMessages {
    get { if ((_hasBits1 & 64) != 0) { return enableMarketingMessages_; } else { return EnableMarketingMessagesDefaultValue; } }
    set {
      _hasBits1 |= 64;
      enableMarketingMessages_ = value;
    }
  }
  /// <summary>Gets whether the "enable_marketing_messages" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableMarketingMessages {
    get { return (_hasBits1 & 64) != 0; }
  }
  /// <summary>Clears the value of the "enable_marketing_messages" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableMarketingMessages() {
    _hasBits1 &= ~64;
  }

  /// <summary>Field number for the "start_in_big_picture_mode" field.</summary>
  public const int StartInBigPictureModeFieldNumber = 5007;
  private readonly static bool StartInBigPictureModeDefaultValue = false;

  private bool startInBigPictureMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool StartInBigPictureMode {
    get { if ((_hasBits1 & 128) != 0) { return startInBigPictureMode_; } else { return StartInBigPictureModeDefaultValue; } }
    set {
      _hasBits1 |= 128;
      startInBigPictureMode_ = value;
    }
  }
  /// <summary>Gets whether the "start_in_big_picture_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartInBigPictureMode {
    get { return (_hasBits1 & 128) != 0; }
  }
  /// <summary>Clears the value of the "start_in_big_picture_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartInBigPictureMode() {
    _hasBits1 &= ~128;
  }

  /// <summary>Field number for the "jumplist_flags" field.</summary>
  public const int JumplistFlagsFieldNumber = 5008;
  private readonly static uint JumplistFlagsDefaultValue = 0;

  private uint jumplistFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint JumplistFlags {
    get { if ((_hasBits1 & 256) != 0) { return jumplistFlags_; } else { return JumplistFlagsDefaultValue; } }
    set {
      _hasBits1 |= 256;
      jumplistFlags_ = value;
    }
  }
  /// <summary>Gets whether the "jumplist_flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasJumplistFlags {
    get { return (_hasBits1 & 256) != 0; }
  }
  /// <summary>Clears the value of the "jumplist_flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearJumplistFlags() {
    _hasBits1 &= ~256;
  }

  /// <summary>Field number for the "enable_ui_sounds" field.</summary>
  public const int EnableUiSoundsFieldNumber = 5009;
  private readonly static bool EnableUiSoundsDefaultValue = false;

  private bool enableUiSounds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableUiSounds {
    get { if ((_hasBits1 & 512) != 0) { return enableUiSounds_; } else { return EnableUiSoundsDefaultValue; } }
    set {
      _hasBits1 |= 512;
      enableUiSounds_ = value;
    }
  }
  /// <summary>Gets whether the "enable_ui_sounds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableUiSounds {
    get { return (_hasBits1 & 512) != 0; }
  }
  /// <summary>Clears the value of the "enable_ui_sounds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableUiSounds() {
    _hasBits1 &= ~512;
  }

  /// <summary>Field number for the "disable_all_toasts" field.</summary>
  public const int DisableAllToastsFieldNumber = 6000;
  private readonly static bool DisableAllToastsDefaultValue = false;

  private bool disableAllToasts_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisableAllToasts {
    get { if ((_hasBits1 & 1024) != 0) { return disableAllToasts_; } else { return DisableAllToastsDefaultValue; } }
    set {
      _hasBits1 |= 1024;
      disableAllToasts_ = value;
    }
  }
  /// <summary>Gets whether the "disable_all_toasts" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisableAllToasts {
    get { return (_hasBits1 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "disable_all_toasts" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisableAllToasts() {
    _hasBits1 &= ~1024;
  }

  /// <summary>Field number for the "disable_toasts_in_game" field.</summary>
  public const int DisableToastsInGameFieldNumber = 6001;
  private readonly static bool DisableToastsInGameDefaultValue = false;

  private bool disableToastsInGame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisableToastsInGame {
    get { if ((_hasBits1 & 2048) != 0) { return disableToastsInGame_; } else { return DisableToastsInGameDefaultValue; } }
    set {
      _hasBits1 |= 2048;
      disableToastsInGame_ = value;
    }
  }
  /// <summary>Gets whether the "disable_toasts_in_game" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisableToastsInGame {
    get { return (_hasBits1 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "disable_toasts_in_game" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisableToastsInGame() {
    _hasBits1 &= ~2048;
  }

  /// <summary>Field number for the "play_sound_on_toast" field.</summary>
  public const int PlaySoundOnToastFieldNumber = 6002;
  private readonly static bool PlaySoundOnToastDefaultValue = false;

  private bool playSoundOnToast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool PlaySoundOnToast {
    get { if ((_hasBits1 & 4096) != 0) { return playSoundOnToast_; } else { return PlaySoundOnToastDefaultValue; } }
    set {
      _hasBits1 |= 4096;
      playSoundOnToast_ = value;
    }
  }
  /// <summary>Gets whether the "play_sound_on_toast" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPlaySoundOnToast {
    get { return (_hasBits1 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "play_sound_on_toast" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPlaySoundOnToast() {
    _hasBits1 &= ~4096;
  }

  /// <summary>Field number for the "library_display_size" field.</summary>
  public const int LibraryDisplaySizeFieldNumber = 7000;
  private readonly static int LibraryDisplaySizeDefaultValue = 0;

  private int libraryDisplaySize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LibraryDisplaySize {
    get { if ((_hasBits1 & 8192) != 0) { return libraryDisplaySize_; } else { return LibraryDisplaySizeDefaultValue; } }
    set {
      _hasBits1 |= 8192;
      libraryDisplaySize_ = value;
    }
  }
  /// <summary>Gets whether the "library_display_size" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryDisplaySize {
    get { return (_hasBits1 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "library_display_size" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryDisplaySize() {
    _hasBits1 &= ~8192;
  }

  /// <summary>Field number for the "library_whats_new_show_only_product_updates" field.</summary>
  public const int LibraryWhatsNewShowOnlyProductUpdatesFieldNumber = 7001;
  private readonly static bool LibraryWhatsNewShowOnlyProductUpdatesDefaultValue = false;

  private bool libraryWhatsNewShowOnlyProductUpdates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LibraryWhatsNewShowOnlyProductUpdates {
    get { if ((_hasBits1 & 16384) != 0) { return libraryWhatsNewShowOnlyProductUpdates_; } else { return LibraryWhatsNewShowOnlyProductUpdatesDefaultValue; } }
    set {
      _hasBits1 |= 16384;
      libraryWhatsNewShowOnlyProductUpdates_ = value;
    }
  }
  /// <summary>Gets whether the "library_whats_new_show_only_product_updates" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryWhatsNewShowOnlyProductUpdates {
    get { return (_hasBits1 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "library_whats_new_show_only_product_updates" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryWhatsNewShowOnlyProductUpdates() {
    _hasBits1 &= ~16384;
  }

  /// <summary>Field number for the "show_store_content_on_home" field.</summary>
  public const int ShowStoreContentOnHomeFieldNumber = 7002;
  private readonly static bool ShowStoreContentOnHomeDefaultValue = false;

  private bool showStoreContentOnHome_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowStoreContentOnHome {
    get { if ((_hasBits1 & 32768) != 0) { return showStoreContentOnHome_; } else { return ShowStoreContentOnHomeDefaultValue; } }
    set {
      _hasBits1 |= 32768;
      showStoreContentOnHome_ = value;
    }
  }
  /// <summary>Gets whether the "show_store_content_on_home" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowStoreContentOnHome {
    get { return (_hasBits1 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "show_store_content_on_home" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowStoreContentOnHome() {
    _hasBits1 &= ~32768;
  }

  /// <summary>Field number for the "start_page" field.</summary>
  public const int StartPageFieldNumber = 7003;
  private readonly static string StartPageDefaultValue = "";

  private string startPage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string StartPage {
    get { return startPage_ ?? StartPageDefaultValue; }
    set {
      startPage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "start_page" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartPage {
    get { return startPage_ != null; }
  }
  /// <summary>Clears the value of the "start_page" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartPage() {
    startPage_ = null;
  }

  /// <summary>Field number for the "library_low_bandwidth_mode" field.</summary>
  public const int LibraryLowBandwidthModeFieldNumber = 7004;
  private readonly static bool LibraryLowBandwidthModeDefaultValue = false;

  private bool libraryLowBandwidthMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LibraryLowBandwidthMode {
    get { if ((_hasBits1 & 65536) != 0) { return libraryLowBandwidthMode_; } else { return LibraryLowBandwidthModeDefaultValue; } }
    set {
      _hasBits1 |= 65536;
      libraryLowBandwidthMode_ = value;
    }
  }
  /// <summary>Gets whether the "library_low_bandwidth_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryLowBandwidthMode {
    get { return (_hasBits1 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "library_low_bandwidth_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryLowBandwidthMode() {
    _hasBits1 &= ~65536;
  }

  /// <summary>Field number for the "library_low_perf_mode" field.</summary>
  public const int LibraryLowPerfModeFieldNumber = 7005;
  private readonly static bool LibraryLowPerfModeDefaultValue = false;

  private bool libraryLowPerfMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LibraryLowPerfMode {
    get { if ((_hasBits1 & 131072) != 0) { return libraryLowPerfMode_; } else { return LibraryLowPerfModeDefaultValue; } }
    set {
      _hasBits1 |= 131072;
      libraryLowPerfMode_ = value;
    }
  }
  /// <summary>Gets whether the "library_low_perf_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryLowPerfMode {
    get { return (_hasBits1 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "library_low_perf_mode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryLowPerfMode() {
    _hasBits1 &= ~131072;
  }

  /// <summary>Field number for the "library_disable_community_content" field.</summary>
  public const int LibraryDisableCommunityContentFieldNumber = 7006;
  private readonly static bool LibraryDisableCommunityContentDefaultValue = false;

  private bool libraryDisableCommunityContent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LibraryDisableCommunityContent {
    get { if ((_hasBits1 & 262144) != 0) { return libraryDisableCommunityContent_; } else { return LibraryDisableCommunityContentDefaultValue; } }
    set {
      _hasBits1 |= 262144;
      libraryDisableCommunityContent_ = value;
    }
  }
  /// <summary>Gets whether the "library_disable_community_content" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryDisableCommunityContent {
    get { return (_hasBits1 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "library_disable_community_content" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryDisableCommunityContent() {
    _hasBits1 &= ~262144;
  }

  /// <summary>Field number for the "library_display_icon_in_game_list" field.</summary>
  public const int LibraryDisplayIconInGameListFieldNumber = 7007;
  private readonly static bool LibraryDisplayIconInGameListDefaultValue = false;

  private bool libraryDisplayIconInGameList_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LibraryDisplayIconInGameList {
    get { if ((_hasBits1 & 524288) != 0) { return libraryDisplayIconInGameList_; } else { return LibraryDisplayIconInGameListDefaultValue; } }
    set {
      _hasBits1 |= 524288;
      libraryDisplayIconInGameList_ = value;
    }
  }
  /// <summary>Gets whether the "library_display_icon_in_game_list" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLibraryDisplayIconInGameList {
    get { return (_hasBits1 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "library_display_icon_in_game_list" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLibraryDisplayIconInGameList() {
    _hasBits1 &= ~524288;
  }

  /// <summary>Field number for the "ready_to_play_includes_streaming" field.</summary>
  public const int ReadyToPlayIncludesStreamingFieldNumber = 7008;
  private readonly static bool ReadyToPlayIncludesStreamingDefaultValue = false;

  private bool readyToPlayIncludesStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ReadyToPlayIncludesStreaming {
    get { if ((_hasBits1 & 1048576) != 0) { return readyToPlayIncludesStreaming_; } else { return ReadyToPlayIncludesStreamingDefaultValue; } }
    set {
      _hasBits1 |= 1048576;
      readyToPlayIncludesStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "ready_to_play_includes_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReadyToPlayIncludesStreaming {
    get { return (_hasBits1 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "ready_to_play_includes_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReadyToPlayIncludesStreaming() {
    _hasBits1 &= ~1048576;
  }

  /// <summary>Field number for the "show_steam_deck_info" field.</summary>
  public const int ShowSteamDeckInfoFieldNumber = 7009;
  private readonly static bool ShowSteamDeckInfoDefaultValue = false;

  private bool showSteamDeckInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowSteamDeckInfo {
    get { if ((_hasBits1 & 2097152) != 0) { return showSteamDeckInfo_; } else { return ShowSteamDeckInfoDefaultValue; } }
    set {
      _hasBits1 |= 2097152;
      showSteamDeckInfo_ = value;
    }
  }
  /// <summary>Gets whether the "show_steam_deck_info" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowSteamDeckInfo {
    get { return (_hasBits1 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "show_steam_deck_info" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowSteamDeckInfo() {
    _hasBits1 &= ~2097152;
  }

  /// <summary>Field number for the "enable_shader_precache" field.</summary>
  public const int EnableShaderPrecacheFieldNumber = 8000;
  private readonly static bool EnableShaderPrecacheDefaultValue = false;

  private bool enableShaderPrecache_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableShaderPrecache {
    get { if ((_hasBits1 & 4194304) != 0) { return enableShaderPrecache_; } else { return EnableShaderPrecacheDefaultValue; } }
    set {
      _hasBits1 |= 4194304;
      enableShaderPrecache_ = value;
    }
  }
  /// <summary>Gets whether the "enable_shader_precache" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableShaderPrecache {
    get { return (_hasBits1 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "enable_shader_precache" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableShaderPrecache() {
    _hasBits1 &= ~4194304;
  }

  /// <summary>Field number for the "enable_shader_background_processing" field.</summary>
  public const int EnableShaderBackgroundProcessingFieldNumber = 8001;
  private readonly static bool EnableShaderBackgroundProcessingDefaultValue = false;

  private bool enableShaderBackgroundProcessing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableShaderBackgroundProcessing {
    get { if ((_hasBits1 & 8388608) != 0) { return enableShaderBackgroundProcessing_; } else { return EnableShaderBackgroundProcessingDefaultValue; } }
    set {
      _hasBits1 |= 8388608;
      enableShaderBackgroundProcessing_ = value;
    }
  }
  /// <summary>Gets whether the "enable_shader_background_processing" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableShaderBackgroundProcessing {
    get { return (_hasBits1 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "enable_shader_background_processing" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableShaderBackgroundProcessing() {
    _hasBits1 &= ~8388608;
  }

  /// <summary>Field number for the "shader_precached_size" field.</summary>
  public const int ShaderPrecachedSizeFieldNumber = 8002;
  private readonly static ulong ShaderPrecachedSizeDefaultValue = 0UL;

  private ulong shaderPrecachedSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ShaderPrecachedSize {
    get { if ((_hasBits1 & 16777216) != 0) { return shaderPrecachedSize_; } else { return ShaderPrecachedSizeDefaultValue; } }
    set {
      _hasBits1 |= 16777216;
      shaderPrecachedSize_ = value;
    }
  }
  /// <summary>Gets whether the "shader_precached_size" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShaderPrecachedSize {
    get { return (_hasBits1 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "shader_precached_size" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShaderPrecachedSize() {
    _hasBits1 &= ~16777216;
  }

  /// <summary>Field number for the "needs_steam_service_repair" field.</summary>
  public const int NeedsSteamServiceRepairFieldNumber = 8003;
  private readonly static bool NeedsSteamServiceRepairDefaultValue = false;

  private bool needsSteamServiceRepair_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NeedsSteamServiceRepair {
    get { if ((_hasBits1 & 33554432) != 0) { return needsSteamServiceRepair_; } else { return NeedsSteamServiceRepairDefaultValue; } }
    set {
      _hasBits1 |= 33554432;
      needsSteamServiceRepair_ = value;
    }
  }
  /// <summary>Gets whether the "needs_steam_service_repair" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNeedsSteamServiceRepair {
    get { return (_hasBits1 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "needs_steam_service_repair" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNeedsSteamServiceRepair() {
    _hasBits1 &= ~33554432;
  }

  /// <summary>Field number for the "download_peer_content" field.</summary>
  public const int DownloadPeerContentFieldNumber = 8004;
  private readonly static int DownloadPeerContentDefaultValue = 0;

  private int downloadPeerContent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DownloadPeerContent {
    get { if ((_hasBits1 & 67108864) != 0) { return downloadPeerContent_; } else { return DownloadPeerContentDefaultValue; } }
    set {
      _hasBits1 |= 67108864;
      downloadPeerContent_ = value;
    }
  }
  /// <summary>Gets whether the "download_peer_content" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadPeerContent {
    get { return (_hasBits1 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "download_peer_content" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadPeerContent() {
    _hasBits1 &= ~67108864;
  }

  /// <summary>Field number for the "download_rate_bits_per_s" field.</summary>
  public const int DownloadRateBitsPerSFieldNumber = 8005;
  private readonly static bool DownloadRateBitsPerSDefaultValue = false;

  private bool downloadRateBitsPerS_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DownloadRateBitsPerS {
    get { if ((_hasBits1 & 134217728) != 0) { return downloadRateBitsPerS_; } else { return DownloadRateBitsPerSDefaultValue; } }
    set {
      _hasBits1 |= 134217728;
      downloadRateBitsPerS_ = value;
    }
  }
  /// <summary>Gets whether the "download_rate_bits_per_s" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadRateBitsPerS {
    get { return (_hasBits1 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "download_rate_bits_per_s" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadRateBitsPerS() {
    _hasBits1 &= ~134217728;
  }

  /// <summary>Field number for the "restrict_auto_updates" field.</summary>
  public const int RestrictAutoUpdatesFieldNumber = 8006;
  private readonly static bool RestrictAutoUpdatesDefaultValue = false;

  private bool restrictAutoUpdates_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RestrictAutoUpdates {
    get { if ((_hasBits1 & 268435456) != 0) { return restrictAutoUpdates_; } else { return RestrictAutoUpdatesDefaultValue; } }
    set {
      _hasBits1 |= 268435456;
      restrictAutoUpdates_ = value;
    }
  }
  /// <summary>Gets whether the "restrict_auto_updates" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRestrictAutoUpdates {
    get { return (_hasBits1 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "restrict_auto_updates" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRestrictAutoUpdates() {
    _hasBits1 &= ~268435456;
  }

  /// <summary>Field number for the "restrict_auto_updates_start" field.</summary>
  public const int RestrictAutoUpdatesStartFieldNumber = 8007;
  private readonly static int RestrictAutoUpdatesStartDefaultValue = 0;

  private int restrictAutoUpdatesStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RestrictAutoUpdatesStart {
    get { if ((_hasBits1 & 536870912) != 0) { return restrictAutoUpdatesStart_; } else { return RestrictAutoUpdatesStartDefaultValue; } }
    set {
      _hasBits1 |= 536870912;
      restrictAutoUpdatesStart_ = value;
    }
  }
  /// <summary>Gets whether the "restrict_auto_updates_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRestrictAutoUpdatesStart {
    get { return (_hasBits1 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "restrict_auto_updates_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRestrictAutoUpdatesStart() {
    _hasBits1 &= ~536870912;
  }

  /// <summary>Field number for the "restrict_auto_updates_end" field.</summary>
  public const int RestrictAutoUpdatesEndFieldNumber = 8008;
  private readonly static int RestrictAutoUpdatesEndDefaultValue = 0;

  private int restrictAutoUpdatesEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RestrictAutoUpdatesEnd {
    get { if ((_hasBits1 & 1073741824) != 0) { return restrictAutoUpdatesEnd_; } else { return RestrictAutoUpdatesEndDefaultValue; } }
    set {
      _hasBits1 |= 1073741824;
      restrictAutoUpdatesEnd_ = value;
    }
  }
  /// <summary>Gets whether the "restrict_auto_updates_end" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRestrictAutoUpdatesEnd {
    get { return (_hasBits1 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "restrict_auto_updates_end" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRestrictAutoUpdatesEnd() {
    _hasBits1 &= ~1073741824;
  }

  /// <summary>Field number for the "download_region" field.</summary>
  public const int DownloadRegionFieldNumber = 8009;
  private readonly static int DownloadRegionDefaultValue = 0;

  private int downloadRegion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DownloadRegion {
    get { if ((_hasBits1 & -2147483648) != 0) { return downloadRegion_; } else { return DownloadRegionDefaultValue; } }
    set {
      _hasBits1 |= -2147483648;
      downloadRegion_ = value;
    }
  }
  /// <summary>Gets whether the "download_region" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadRegion {
    get { return (_hasBits1 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "download_region" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadRegion() {
    _hasBits1 &= ~-2147483648;
  }

  /// <summary>Field number for the "download_while_app_running" field.</summary>
  public const int DownloadWhileAppRunningFieldNumber = 8010;
  private readonly static bool DownloadWhileAppRunningDefaultValue = false;

  private bool downloadWhileAppRunning_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DownloadWhileAppRunning {
    get { if ((_hasBits2 & 1) != 0) { return downloadWhileAppRunning_; } else { return DownloadWhileAppRunningDefaultValue; } }
    set {
      _hasBits2 |= 1;
      downloadWhileAppRunning_ = value;
    }
  }
  /// <summary>Gets whether the "download_while_app_running" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadWhileAppRunning {
    get { return (_hasBits2 & 1) != 0; }
  }
  /// <summary>Clears the value of the "download_while_app_running" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadWhileAppRunning() {
    _hasBits2 &= ~1;
  }

  /// <summary>Field number for the "download_throttle_while_streaming" field.</summary>
  public const int DownloadThrottleWhileStreamingFieldNumber = 8011;
  private readonly static bool DownloadThrottleWhileStreamingDefaultValue = false;

  private bool downloadThrottleWhileStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DownloadThrottleWhileStreaming {
    get { if ((_hasBits2 & 2) != 0) { return downloadThrottleWhileStreaming_; } else { return DownloadThrottleWhileStreamingDefaultValue; } }
    set {
      _hasBits2 |= 2;
      downloadThrottleWhileStreaming_ = value;
    }
  }
  /// <summary>Gets whether the "download_throttle_while_streaming" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadThrottleWhileStreaming {
    get { return (_hasBits2 & 2) != 0; }
  }
  /// <summary>Clears the value of the "download_throttle_while_streaming" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadThrottleWhileStreaming() {
    _hasBits2 &= ~2;
  }

  /// <summary>Field number for the "download_throttle_rate" field.</summary>
  public const int DownloadThrottleRateFieldNumber = 8012;
  private readonly static int DownloadThrottleRateDefaultValue = 0;

  private int downloadThrottleRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DownloadThrottleRate {
    get { if ((_hasBits2 & 4) != 0) { return downloadThrottleRate_; } else { return DownloadThrottleRateDefaultValue; } }
    set {
      _hasBits2 |= 4;
      downloadThrottleRate_ = value;
    }
  }
  /// <summary>Gets whether the "download_throttle_rate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDownloadThrottleRate {
    get { return (_hasBits2 & 4) != 0; }
  }
  /// <summary>Clears the value of the "download_throttle_rate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDownloadThrottleRate() {
    _hasBits2 &= ~4;
  }

  /// <summary>Field number for the "cloud_enabled" field.</summary>
  public const int CloudEnabledFieldNumber = 10000;
  private readonly static bool CloudEnabledDefaultValue = false;

  private bool cloudEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CloudEnabled {
    get { if ((_hasBits2 & 8) != 0) { return cloudEnabled_; } else { return CloudEnabledDefaultValue; } }
    set {
      _hasBits2 |= 8;
      cloudEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "cloud_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCloudEnabled {
    get { return (_hasBits2 & 8) != 0; }
  }
  /// <summary>Clears the value of the "cloud_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCloudEnabled() {
    _hasBits2 &= ~8;
  }

  /// <summary>Field number for the "show_screenshot_manager" field.</summary>
  public const int ShowScreenshotManagerFieldNumber = 10001;
  private readonly static bool ShowScreenshotManagerDefaultValue = false;

  private bool showScreenshotManager_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowScreenshotManager {
    get { if ((_hasBits2 & 16) != 0) { return showScreenshotManager_; } else { return ShowScreenshotManagerDefaultValue; } }
    set {
      _hasBits2 |= 16;
      showScreenshotManager_ = value;
    }
  }
  /// <summary>Gets whether the "show_screenshot_manager" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowScreenshotManager {
    get { return (_hasBits2 & 16) != 0; }
  }
  /// <summary>Clears the value of the "show_screenshot_manager" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowScreenshotManager() {
    _hasBits2 &= ~16;
  }

  /// <summary>Field number for the "music_volume" field.</summary>
  public const int MusicVolumeFieldNumber = 11000;
  private readonly static int MusicVolumeDefaultValue = 0;

  private int musicVolume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MusicVolume {
    get { if ((_hasBits2 & 32) != 0) { return musicVolume_; } else { return MusicVolumeDefaultValue; } }
    set {
      _hasBits2 |= 32;
      musicVolume_ = value;
    }
  }
  /// <summary>Gets whether the "music_volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMusicVolume {
    get { return (_hasBits2 & 32) != 0; }
  }
  /// <summary>Clears the value of the "music_volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMusicVolume() {
    _hasBits2 &= ~32;
  }

  /// <summary>Field number for the "music_pause_on_app_start" field.</summary>
  public const int MusicPauseOnAppStartFieldNumber = 11001;
  private readonly static bool MusicPauseOnAppStartDefaultValue = false;

  private bool musicPauseOnAppStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MusicPauseOnAppStart {
    get { if ((_hasBits2 & 64) != 0) { return musicPauseOnAppStart_; } else { return MusicPauseOnAppStartDefaultValue; } }
    set {
      _hasBits2 |= 64;
      musicPauseOnAppStart_ = value;
    }
  }
  /// <summary>Gets whether the "music_pause_on_app_start" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMusicPauseOnAppStart {
    get { return (_hasBits2 & 64) != 0; }
  }
  /// <summary>Clears the value of the "music_pause_on_app_start" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMusicPauseOnAppStart() {
    _hasBits2 &= ~64;
  }

  /// <summary>Field number for the "music_pause_on_voice_chat" field.</summary>
  public const int MusicPauseOnVoiceChatFieldNumber = 11002;
  private readonly static bool MusicPauseOnVoiceChatDefaultValue = false;

  private bool musicPauseOnVoiceChat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MusicPauseOnVoiceChat {
    get { if ((_hasBits2 & 128) != 0) { return musicPauseOnVoiceChat_; } else { return MusicPauseOnVoiceChatDefaultValue; } }
    set {
      _hasBits2 |= 128;
      musicPauseOnVoiceChat_ = value;
    }
  }
  /// <summary>Gets whether the "music_pause_on_voice_chat" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMusicPauseOnVoiceChat {
    get { return (_hasBits2 & 128) != 0; }
  }
  /// <summary>Clears the value of the "music_pause_on_voice_chat" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMusicPauseOnVoiceChat() {
    _hasBits2 &= ~128;
  }

  /// <summary>Field number for the "music_download_high_quality" field.</summary>
  public const int MusicDownloadHighQualityFieldNumber = 11003;
  private readonly static bool MusicDownloadHighQualityDefaultValue = false;

  private bool musicDownloadHighQuality_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MusicDownloadHighQuality {
    get { if ((_hasBits2 & 256) != 0) { return musicDownloadHighQuality_; } else { return MusicDownloadHighQualityDefaultValue; } }
    set {
      _hasBits2 |= 256;
      musicDownloadHighQuality_ = value;
    }
  }
  /// <summary>Gets whether the "music_download_high_quality" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMusicDownloadHighQuality {
    get { return (_hasBits2 & 256) != 0; }
  }
  /// <summary>Clears the value of the "music_download_high_quality" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMusicDownloadHighQuality() {
    _hasBits2 &= ~256;
  }

  /// <summary>Field number for the "music_playlist_notification" field.</summary>
  public const int MusicPlaylistNotificationFieldNumber = 11004;
  private readonly static bool MusicPlaylistNotificationDefaultValue = false;

  private bool musicPlaylistNotification_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MusicPlaylistNotification {
    get { if ((_hasBits2 & 512) != 0) { return musicPlaylistNotification_; } else { return MusicPlaylistNotificationDefaultValue; } }
    set {
      _hasBits2 |= 512;
      musicPlaylistNotification_ = value;
    }
  }
  /// <summary>Gets whether the "music_playlist_notification" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMusicPlaylistNotification {
    get { return (_hasBits2 & 512) != 0; }
  }
  /// <summary>Clears the value of the "music_playlist_notification" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMusicPlaylistNotification() {
    _hasBits2 &= ~512;
  }

  /// <summary>Field number for the "broadcast_permissions" field.</summary>
  public const int BroadcastPermissionsFieldNumber = 12000;
  private readonly static global::EBroadcastPermission BroadcastPermissionsDefaultValue = global::EBroadcastPermission.KEbroadcastPermissionDisabled;

  private global::EBroadcastPermission broadcastPermissions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EBroadcastPermission BroadcastPermissions {
    get { if ((_hasBits2 & 1024) != 0) { return broadcastPermissions_; } else { return BroadcastPermissionsDefaultValue; } }
    set {
      _hasBits2 |= 1024;
      broadcastPermissions_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_permissions" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastPermissions {
    get { return (_hasBits2 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_permissions" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastPermissions() {
    _hasBits2 &= ~1024;
  }

  /// <summary>Field number for the "broadcast_output_width" field.</summary>
  public const int BroadcastOutputWidthFieldNumber = 12001;
  private readonly static int BroadcastOutputWidthDefaultValue = 0;

  private int broadcastOutputWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BroadcastOutputWidth {
    get { if ((_hasBits2 & 2048) != 0) { return broadcastOutputWidth_; } else { return BroadcastOutputWidthDefaultValue; } }
    set {
      _hasBits2 |= 2048;
      broadcastOutputWidth_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_output_width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastOutputWidth {
    get { return (_hasBits2 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_output_width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastOutputWidth() {
    _hasBits2 &= ~2048;
  }

  /// <summary>Field number for the "broadcast_output_height" field.</summary>
  public const int BroadcastOutputHeightFieldNumber = 12002;
  private readonly static int BroadcastOutputHeightDefaultValue = 0;

  private int broadcastOutputHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BroadcastOutputHeight {
    get { if ((_hasBits2 & 4096) != 0) { return broadcastOutputHeight_; } else { return BroadcastOutputHeightDefaultValue; } }
    set {
      _hasBits2 |= 4096;
      broadcastOutputHeight_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_output_height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastOutputHeight {
    get { return (_hasBits2 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_output_height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastOutputHeight() {
    _hasBits2 &= ~4096;
  }

  /// <summary>Field number for the "broadcast_bitrate" field.</summary>
  public const int BroadcastBitrateFieldNumber = 12003;
  private readonly static int BroadcastBitrateDefaultValue = 0;

  private int broadcastBitrate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BroadcastBitrate {
    get { if ((_hasBits2 & 8192) != 0) { return broadcastBitrate_; } else { return BroadcastBitrateDefaultValue; } }
    set {
      _hasBits2 |= 8192;
      broadcastBitrate_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_bitrate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastBitrate {
    get { return (_hasBits2 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_bitrate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastBitrate() {
    _hasBits2 &= ~8192;
  }

  /// <summary>Field number for the "broadcast_encoding_option" field.</summary>
  public const int BroadcastEncodingOptionFieldNumber = 12004;
  private readonly static global::EBroadcastEncoderSetting BroadcastEncodingOptionDefaultValue = global::EBroadcastEncoderSetting.KEbroadcastEncoderBestQuality;

  private global::EBroadcastEncoderSetting broadcastEncodingOption_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::EBroadcastEncoderSetting BroadcastEncodingOption {
    get { if ((_hasBits2 & 16384) != 0) { return broadcastEncodingOption_; } else { return BroadcastEncodingOptionDefaultValue; } }
    set {
      _hasBits2 |= 16384;
      broadcastEncodingOption_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_encoding_option" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastEncodingOption {
    get { return (_hasBits2 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_encoding_option" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastEncodingOption() {
    _hasBits2 &= ~16384;
  }

  /// <summary>Field number for the "broadcast_record_all_video" field.</summary>
  public const int BroadcastRecordAllVideoFieldNumber = 12005;
  private readonly static bool BroadcastRecordAllVideoDefaultValue = false;

  private bool broadcastRecordAllVideo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BroadcastRecordAllVideo {
    get { if ((_hasBits2 & 32768) != 0) { return broadcastRecordAllVideo_; } else { return BroadcastRecordAllVideoDefaultValue; } }
    set {
      _hasBits2 |= 32768;
      broadcastRecordAllVideo_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_record_all_video" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastRecordAllVideo {
    get { return (_hasBits2 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_record_all_video" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastRecordAllVideo() {
    _hasBits2 &= ~32768;
  }

  /// <summary>Field number for the "broadcast_record_all_audio" field.</summary>
  public const int BroadcastRecordAllAudioFieldNumber = 12006;
  private readonly static bool BroadcastRecordAllAudioDefaultValue = false;

  private bool broadcastRecordAllAudio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BroadcastRecordAllAudio {
    get { if ((_hasBits2 & 65536) != 0) { return broadcastRecordAllAudio_; } else { return BroadcastRecordAllAudioDefaultValue; } }
    set {
      _hasBits2 |= 65536;
      broadcastRecordAllAudio_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_record_all_audio" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastRecordAllAudio {
    get { return (_hasBits2 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_record_all_audio" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastRecordAllAudio() {
    _hasBits2 &= ~65536;
  }

  /// <summary>Field number for the "broadcast_record_microphone" field.</summary>
  public const int BroadcastRecordMicrophoneFieldNumber = 12007;
  private readonly static bool BroadcastRecordMicrophoneDefaultValue = false;

  private bool broadcastRecordMicrophone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BroadcastRecordMicrophone {
    get { if ((_hasBits2 & 131072) != 0) { return broadcastRecordMicrophone_; } else { return BroadcastRecordMicrophoneDefaultValue; } }
    set {
      _hasBits2 |= 131072;
      broadcastRecordMicrophone_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_record_microphone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastRecordMicrophone {
    get { return (_hasBits2 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_record_microphone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastRecordMicrophone() {
    _hasBits2 &= ~131072;
  }

  /// <summary>Field number for the "broadcast_show_upload_stats" field.</summary>
  public const int BroadcastShowUploadStatsFieldNumber = 12008;
  private readonly static bool BroadcastShowUploadStatsDefaultValue = false;

  private bool broadcastShowUploadStats_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BroadcastShowUploadStats {
    get { if ((_hasBits2 & 262144) != 0) { return broadcastShowUploadStats_; } else { return BroadcastShowUploadStatsDefaultValue; } }
    set {
      _hasBits2 |= 262144;
      broadcastShowUploadStats_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_show_upload_stats" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastShowUploadStats {
    get { return (_hasBits2 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_show_upload_stats" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastShowUploadStats() {
    _hasBits2 &= ~262144;
  }

  /// <summary>Field number for the "broadcast_show_live_reminder" field.</summary>
  public const int BroadcastShowLiveReminderFieldNumber = 12009;
  private readonly static bool BroadcastShowLiveReminderDefaultValue = false;

  private bool broadcastShowLiveReminder_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BroadcastShowLiveReminder {
    get { if ((_hasBits2 & 524288) != 0) { return broadcastShowLiveReminder_; } else { return BroadcastShowLiveReminderDefaultValue; } }
    set {
      _hasBits2 |= 524288;
      broadcastShowLiveReminder_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_show_live_reminder" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastShowLiveReminder {
    get { return (_hasBits2 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_show_live_reminder" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastShowLiveReminder() {
    _hasBits2 &= ~524288;
  }

  /// <summary>Field number for the "broadcast_chat_corner" field.</summary>
  public const int BroadcastChatCornerFieldNumber = 12010;
  private readonly static int BroadcastChatCornerDefaultValue = 0;

  private int broadcastChatCorner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BroadcastChatCorner {
    get { if ((_hasBits2 & 1048576) != 0) { return broadcastChatCorner_; } else { return BroadcastChatCornerDefaultValue; } }
    set {
      _hasBits2 |= 1048576;
      broadcastChatCorner_ = value;
    }
  }
  /// <summary>Gets whether the "broadcast_chat_corner" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBroadcastChatCorner {
    get { return (_hasBits2 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "broadcast_chat_corner" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBroadcastChatCorner() {
    _hasBits2 &= ~1048576;
  }

  /// <summary>Field number for the "steam_input_configurator_error_msg_enable" field.</summary>
  public const int SteamInputConfiguratorErrorMsgEnableFieldNumber = 14001;
  private readonly static bool SteamInputConfiguratorErrorMsgEnableDefaultValue = false;

  private bool steamInputConfiguratorErrorMsgEnable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SteamInputConfiguratorErrorMsgEnable {
    get { if ((_hasBits2 & 2097152) != 0) { return steamInputConfiguratorErrorMsgEnable_; } else { return SteamInputConfiguratorErrorMsgEnableDefaultValue; } }
    set {
      _hasBits2 |= 2097152;
      steamInputConfiguratorErrorMsgEnable_ = value;
    }
  }
  /// <summary>Gets whether the "steam_input_configurator_error_msg_enable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamInputConfiguratorErrorMsgEnable {
    get { return (_hasBits2 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "steam_input_configurator_error_msg_enable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamInputConfiguratorErrorMsgEnable() {
    _hasBits2 &= ~2097152;
  }

  /// <summary>Field number for the "controller_guide_button_focus_steam" field.</summary>
  public const int ControllerGuideButtonFocusSteamFieldNumber = 14002;
  private readonly static bool ControllerGuideButtonFocusSteamDefaultValue = false;

  private bool controllerGuideButtonFocusSteam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerGuideButtonFocusSteam {
    get { if ((_hasBits2 & 4194304) != 0) { return controllerGuideButtonFocusSteam_; } else { return ControllerGuideButtonFocusSteamDefaultValue; } }
    set {
      _hasBits2 |= 4194304;
      controllerGuideButtonFocusSteam_ = value;
    }
  }
  /// <summary>Gets whether the "controller_guide_button_focus_steam" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerGuideButtonFocusSteam {
    get { return (_hasBits2 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "controller_guide_button_focus_steam" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerGuideButtonFocusSteam() {
    _hasBits2 &= ~4194304;
  }

  /// <summary>Field number for the "controller_ps4_support" field.</summary>
  public const int ControllerPs4SupportFieldNumber = 14003;
  private readonly static bool ControllerPs4SupportDefaultValue = false;

  private bool controllerPs4Support_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerPs4Support {
    get { if ((_hasBits2 & 8388608) != 0) { return controllerPs4Support_; } else { return ControllerPs4SupportDefaultValue; } }
    set {
      _hasBits2 |= 8388608;
      controllerPs4Support_ = value;
    }
  }
  /// <summary>Gets whether the "controller_ps4_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerPs4Support {
    get { return (_hasBits2 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "controller_ps4_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerPs4Support() {
    _hasBits2 &= ~8388608;
  }

  /// <summary>Field number for the "controller_xbox_support" field.</summary>
  public const int ControllerXboxSupportFieldNumber = 14004;
  private readonly static bool ControllerXboxSupportDefaultValue = false;

  private bool controllerXboxSupport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerXboxSupport {
    get { if ((_hasBits2 & 16777216) != 0) { return controllerXboxSupport_; } else { return ControllerXboxSupportDefaultValue; } }
    set {
      _hasBits2 |= 16777216;
      controllerXboxSupport_ = value;
    }
  }
  /// <summary>Gets whether the "controller_xbox_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerXboxSupport {
    get { return (_hasBits2 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "controller_xbox_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerXboxSupport() {
    _hasBits2 &= ~16777216;
  }

  /// <summary>Field number for the "controller_xbox_driver" field.</summary>
  public const int ControllerXboxDriverFieldNumber = 14005;
  private readonly static bool ControllerXboxDriverDefaultValue = false;

  private bool controllerXboxDriver_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerXboxDriver {
    get { if ((_hasBits2 & 33554432) != 0) { return controllerXboxDriver_; } else { return ControllerXboxDriverDefaultValue; } }
    set {
      _hasBits2 |= 33554432;
      controllerXboxDriver_ = value;
    }
  }
  /// <summary>Gets whether the "controller_xbox_driver" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerXboxDriver {
    get { return (_hasBits2 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "controller_xbox_driver" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerXboxDriver() {
    _hasBits2 &= ~33554432;
  }

  /// <summary>Field number for the "controller_switch_support" field.</summary>
  public const int ControllerSwitchSupportFieldNumber = 14006;
  private readonly static bool ControllerSwitchSupportDefaultValue = false;

  private bool controllerSwitchSupport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerSwitchSupport {
    get { if ((_hasBits2 & 67108864) != 0) { return controllerSwitchSupport_; } else { return ControllerSwitchSupportDefaultValue; } }
    set {
      _hasBits2 |= 67108864;
      controllerSwitchSupport_ = value;
    }
  }
  /// <summary>Gets whether the "controller_switch_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerSwitchSupport {
    get { return (_hasBits2 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "controller_switch_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerSwitchSupport() {
    _hasBits2 &= ~67108864;
  }

  /// <summary>Field number for the "controller_generic_support" field.</summary>
  public const int ControllerGenericSupportFieldNumber = 14007;
  private readonly static bool ControllerGenericSupportDefaultValue = false;

  private bool controllerGenericSupport_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerGenericSupport {
    get { if ((_hasBits2 & 134217728) != 0) { return controllerGenericSupport_; } else { return ControllerGenericSupportDefaultValue; } }
    set {
      _hasBits2 |= 134217728;
      controllerGenericSupport_ = value;
    }
  }
  /// <summary>Gets whether the "controller_generic_support" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerGenericSupport {
    get { return (_hasBits2 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "controller_generic_support" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerGenericSupport() {
    _hasBits2 &= ~134217728;
  }

  /// <summary>Field number for the "controller_power_off_timeout" field.</summary>
  public const int ControllerPowerOffTimeoutFieldNumber = 14008;
  private readonly static int ControllerPowerOffTimeoutDefaultValue = 0;

  private int controllerPowerOffTimeout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ControllerPowerOffTimeout {
    get { if ((_hasBits2 & 268435456) != 0) { return controllerPowerOffTimeout_; } else { return ControllerPowerOffTimeoutDefaultValue; } }
    set {
      _hasBits2 |= 268435456;
      controllerPowerOffTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "controller_power_off_timeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerPowerOffTimeout {
    get { return (_hasBits2 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "controller_power_off_timeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerPowerOffTimeout() {
    _hasBits2 &= ~268435456;
  }

  /// <summary>Field number for the "turn_off_controller_on_exit" field.</summary>
  public const int TurnOffControllerOnExitFieldNumber = 14009;
  private readonly static bool TurnOffControllerOnExitDefaultValue = false;

  private bool turnOffControllerOnExit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool TurnOffControllerOnExit {
    get { if ((_hasBits2 & 536870912) != 0) { return turnOffControllerOnExit_; } else { return TurnOffControllerOnExitDefaultValue; } }
    set {
      _hasBits2 |= 536870912;
      turnOffControllerOnExit_ = value;
    }
  }
  /// <summary>Gets whether the "turn_off_controller_on_exit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTurnOffControllerOnExit {
    get { return (_hasBits2 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "turn_off_controller_on_exit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTurnOffControllerOnExit() {
    _hasBits2 &= ~536870912;
  }

  /// <summary>Field number for the "controller_combine_nintendo_joycons" field.</summary>
  public const int ControllerCombineNintendoJoyconsFieldNumber = 14010;
  private readonly static bool ControllerCombineNintendoJoyconsDefaultValue = false;

  private bool controllerCombineNintendoJoycons_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ControllerCombineNintendoJoycons {
    get { if ((_hasBits2 & 1073741824) != 0) { return controllerCombineNintendoJoycons_; } else { return ControllerCombineNintendoJoyconsDefaultValue; } }
    set {
      _hasBits2 |= 1073741824;
      controllerCombineNintendoJoycons_ = value;
    }
  }
  /// <summary>Gets whether the "controller_combine_nintendo_joycons" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasControllerCombineNintendoJoycons {
    get { return (_hasBits2 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "controller_combine_nintendo_joycons" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearControllerCombineNintendoJoycons() {
    _hasBits2 &= ~1073741824;
  }

  /// <summary>Field number for the "startup_movie_id" field.</summary>
  public const int StartupMovieIdFieldNumber = 16000;
  private readonly static ulong StartupMovieIdDefaultValue = 0UL;

  private ulong startupMovieId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong StartupMovieId {
    get { if ((_hasBits2 & -2147483648) != 0) { return startupMovieId_; } else { return StartupMovieIdDefaultValue; } }
    set {
      _hasBits2 |= -2147483648;
      startupMovieId_ = value;
    }
  }
  /// <summary>Gets whether the "startup_movie_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartupMovieId {
    get { return (_hasBits2 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "startup_movie_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartupMovieId() {
    _hasBits2 &= ~-2147483648;
  }

  /// <summary>Field number for the "startup_movie_local_path" field.</summary>
  public const int StartupMovieLocalPathFieldNumber = 16001;
  private readonly static string StartupMovieLocalPathDefaultValue = "";

  private string startupMovieLocalPath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string StartupMovieLocalPath {
    get { return startupMovieLocalPath_ ?? StartupMovieLocalPathDefaultValue; }
    set {
      startupMovieLocalPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "startup_movie_local_path" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartupMovieLocalPath {
    get { return startupMovieLocalPath_ != null; }
  }
  /// <summary>Clears the value of the "startup_movie_local_path" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartupMovieLocalPath() {
    startupMovieLocalPath_ = null;
  }

  /// <summary>Field number for the "startup_movie_shuffle" field.</summary>
  public const int StartupMovieShuffleFieldNumber = 16002;
  private readonly static bool StartupMovieShuffleDefaultValue = false;

  private bool startupMovieShuffle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool StartupMovieShuffle {
    get { if ((_hasBits3 & 1) != 0) { return startupMovieShuffle_; } else { return StartupMovieShuffleDefaultValue; } }
    set {
      _hasBits3 |= 1;
      startupMovieShuffle_ = value;
    }
  }
  /// <summary>Gets whether the "startup_movie_shuffle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartupMovieShuffle {
    get { return (_hasBits3 & 1) != 0; }
  }
  /// <summary>Clears the value of the "startup_movie_shuffle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartupMovieShuffle() {
    _hasBits3 &= ~1;
  }

  /// <summary>Field number for the "startup_movie_used_for_resume" field.</summary>
  public const int StartupMovieUsedForResumeFieldNumber = 16003;
  private readonly static bool StartupMovieUsedForResumeDefaultValue = false;

  private bool startupMovieUsedForResume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool StartupMovieUsedForResume {
    get { if ((_hasBits3 & 2) != 0) { return startupMovieUsedForResume_; } else { return StartupMovieUsedForResumeDefaultValue; } }
    set {
      _hasBits3 |= 2;
      startupMovieUsedForResume_ = value;
    }
  }
  /// <summary>Gets whether the "startup_movie_used_for_resume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartupMovieUsedForResume {
    get { return (_hasBits3 & 2) != 0; }
  }
  /// <summary>Clears the value of the "startup_movie_used_for_resume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartupMovieUsedForResume() {
    _hasBits3 &= ~2;
  }

  /// <summary>Field number for the "game_notes_enable_spellcheck" field.</summary>
  public const int GameNotesEnableSpellcheckFieldNumber = 17001;
  private readonly static bool GameNotesEnableSpellcheckDefaultValue = false;

  private bool gameNotesEnableSpellcheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GameNotesEnableSpellcheck {
    get { if ((_hasBits3 & 4) != 0) { return gameNotesEnableSpellcheck_; } else { return GameNotesEnableSpellcheckDefaultValue; } }
    set {
      _hasBits3 |= 4;
      gameNotesEnableSpellcheck_ = value;
    }
  }
  /// <summary>Gets whether the "game_notes_enable_spellcheck" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameNotesEnableSpellcheck {
    get { return (_hasBits3 & 4) != 0; }
  }
  /// <summary>Clears the value of the "game_notes_enable_spellcheck" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameNotesEnableSpellcheck() {
    _hasBits3 &= ~4;
  }

  /// <summary>Field number for the "screenshot_items_per_row" field.</summary>
  public const int ScreenshotItemsPerRowFieldNumber = 18000;
  private readonly static int ScreenshotItemsPerRowDefaultValue = 0;

  private int screenshotItemsPerRow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ScreenshotItemsPerRow {
    get { if ((_hasBits3 & 8) != 0) { return screenshotItemsPerRow_; } else { return ScreenshotItemsPerRowDefaultValue; } }
    set {
      _hasBits3 |= 8;
      screenshotItemsPerRow_ = value;
    }
  }
  /// <summary>Gets whether the "screenshot_items_per_row" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScreenshotItemsPerRow {
    get { return (_hasBits3 & 8) != 0; }
  }
  /// <summary>Clears the value of the "screenshot_items_per_row" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScreenshotItemsPerRow() {
    _hasBits3 &= ~8;
  }

  /// <summary>Field number for the "g_background_enabled" field.</summary>
  public const int GBackgroundEnabledFieldNumber = 18200;
  private readonly static bool GBackgroundEnabledDefaultValue = false;

  private bool gBackgroundEnabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GBackgroundEnabled {
    get { if ((_hasBits3 & 16) != 0) { return gBackgroundEnabled_; } else { return GBackgroundEnabledDefaultValue; } }
    set {
      _hasBits3 |= 16;
      gBackgroundEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "g_background_enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGBackgroundEnabled {
    get { return (_hasBits3 & 16) != 0; }
  }
  /// <summary>Clears the value of the "g_background_enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGBackgroundEnabled() {
    _hasBits3 &= ~16;
  }

  /// <summary>Field number for the "g_background_path" field.</summary>
  public const int GBackgroundPathFieldNumber = 18201;
  private readonly static string GBackgroundPathDefaultValue = "";

  private string gBackgroundPath_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GBackgroundPath {
    get { return gBackgroundPath_ ?? GBackgroundPathDefaultValue; }
    set {
      gBackgroundPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "g_background_path" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGBackgroundPath {
    get { return gBackgroundPath_ != null; }
  }
  /// <summary>Clears the value of the "g_background_path" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGBackgroundPath() {
    gBackgroundPath_ = null;
  }

  /// <summary>Field number for the "g_background_max_keep" field.</summary>
  public const int GBackgroundMaxKeepFieldNumber = 18202;
  private readonly static string GBackgroundMaxKeepDefaultValue = "";

  private string gBackgroundMaxKeep_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GBackgroundMaxKeep {
    get { return gBackgroundMaxKeep_ ?? GBackgroundMaxKeepDefaultValue; }
    set {
      gBackgroundMaxKeep_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "g_background_max_keep" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGBackgroundMaxKeep {
    get { return gBackgroundMaxKeep_ != null; }
  }
  /// <summary>Clears the value of the "g_background_max_keep" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGBackgroundMaxKeep() {
    gBackgroundMaxKeep_ = null;
  }

  /// <summary>Field number for the "show_timestamps_in_console" field.</summary>
  public const int ShowTimestampsInConsoleFieldNumber = 20000;
  private readonly static bool ShowTimestampsInConsoleDefaultValue = false;

  private bool showTimestampsInConsole_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowTimestampsInConsole {
    get { if ((_hasBits3 & 32) != 0) { return showTimestampsInConsole_; } else { return ShowTimestampsInConsoleDefaultValue; } }
    set {
      _hasBits3 |= 32;
      showTimestampsInConsole_ = value;
    }
  }
  /// <summary>Gets whether the "show_timestamps_in_console" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowTimestampsInConsole {
    get { return (_hasBits3 & 32) != 0; }
  }
  /// <summary>Clears the value of the "show_timestamps_in_console" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowTimestampsInConsole() {
    _hasBits3 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgClientSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgClientSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NoSavePersonalInfo != other.NoSavePersonalInfo) return false;
    if (OobeTestModeEnabled != other.OobeTestModeEnabled) return false;
    if (InClientBeta != other.InClientBeta) return false;
    if (IsSteamSideloaded != other.IsSteamSideloaded) return false;
    if (PreferredMonitor != other.PreferredMonitor) return false;
    if (SteamCefGpuBlocklistDisabled != other.SteamCefGpuBlocklistDisabled) return false;
    if (BigpictureWindowed != other.BigpictureWindowed) return false;
    if (DisplayName != other.DisplayName) return false;
    if (IsExternalDisplay != other.IsExternalDisplay) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SteamOsUnderscanLevel, other.SteamOsUnderscanLevel)) return false;
    if (SteamOsUnderscanEnabled != other.SteamOsUnderscanEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinScaleFactor, other.MinScaleFactor)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxScaleFactor, other.MaxScaleFactor)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AutoScaleFactor, other.AutoScaleFactor)) return false;
    if (EnableTestUpdaters != other.EnableTestUpdaters) return false;
    if (SmallMode != other.SmallMode) return false;
    if (SkipSteamvrInstallDialog != other.SkipSteamvrInstallDialog) return false;
    if (AlwaysShowUserChooser != other.AlwaysShowUserChooser) return false;
    if (ShowFamilySharingNotifications != other.ShowFamilySharingNotifications) return false;
    if (OverlayFpsCounterCorner != other.OverlayFpsCounterCorner) return false;
    if (OverlayFpsCounterHighContrast != other.OverlayFpsCounterHighContrast) return false;
    if (!object.Equals(OverlayKey, other.OverlayKey)) return false;
    if (!object.Equals(ScreenshotKey, other.ScreenshotKey)) return false;
    if (EnableOverlay != other.EnableOverlay) return false;
    if (DisableDesktopGameTheater != other.DisableDesktopGameTheater) return false;
    if (EnableScreenshotNotification != other.EnableScreenshotNotification) return false;
    if (EnableScreenshotSound != other.EnableScreenshotSound) return false;
    if (SaveUncompressedScreenshots != other.SaveUncompressedScreenshots) return false;
    if (ScreenshotsPath != other.ScreenshotsPath) return false;
    if (DefaultPingRate != other.DefaultPingRate) return false;
    if (ServerPingRate != other.ServerPingRate) return false;
    if (SteamNetworkingShareIp != other.SteamNetworkingShareIp) return false;
    if (WebBrowserHome != other.WebBrowserHome) return false;
    if (VoiceMicDeviceName != other.VoiceMicDeviceName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VoiceMicInputGain, other.VoiceMicInputGain)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VoiceSpeakerOutputGain, other.VoiceSpeakerOutputGain)) return false;
    if (VoicePushToTalkSetting != other.VoicePushToTalkSetting) return false;
    if (!object.Equals(VoicePushToTalkKey, other.VoicePushToTalkKey)) return false;
    if (OverlayToolbarListView != other.OverlayToolbarListView) return false;
    if (AlwaysUseGamepaduiOverlay != other.AlwaysUseGamepaduiOverlay) return false;
    if (OverlayTabs != other.OverlayTabs) return false;
    if (OverlayScaleInterface != other.OverlayScaleInterface) return false;
    if (SmoothScrollWebviews != other.SmoothScrollWebviews) return false;
    if (EnableGpuAcceleratedWebviews != other.EnableGpuAcceleratedWebviews) return false;
    if (EnableHardwareVideoDecoding != other.EnableHardwareVideoDecoding) return false;
    if (RunAtStartup != other.RunAtStartup) return false;
    if (EnableDpiScaling != other.EnableDpiScaling) return false;
    if (EnableMarketingMessages != other.EnableMarketingMessages) return false;
    if (StartInBigPictureMode != other.StartInBigPictureMode) return false;
    if (JumplistFlags != other.JumplistFlags) return false;
    if (EnableUiSounds != other.EnableUiSounds) return false;
    if (DisableAllToasts != other.DisableAllToasts) return false;
    if (DisableToastsInGame != other.DisableToastsInGame) return false;
    if (PlaySoundOnToast != other.PlaySoundOnToast) return false;
    if (LibraryDisplaySize != other.LibraryDisplaySize) return false;
    if (LibraryWhatsNewShowOnlyProductUpdates != other.LibraryWhatsNewShowOnlyProductUpdates) return false;
    if (ShowStoreContentOnHome != other.ShowStoreContentOnHome) return false;
    if (StartPage != other.StartPage) return false;
    if (LibraryLowBandwidthMode != other.LibraryLowBandwidthMode) return false;
    if (LibraryLowPerfMode != other.LibraryLowPerfMode) return false;
    if (LibraryDisableCommunityContent != other.LibraryDisableCommunityContent) return false;
    if (LibraryDisplayIconInGameList != other.LibraryDisplayIconInGameList) return false;
    if (ReadyToPlayIncludesStreaming != other.ReadyToPlayIncludesStreaming) return false;
    if (ShowSteamDeckInfo != other.ShowSteamDeckInfo) return false;
    if (EnableShaderPrecache != other.EnableShaderPrecache) return false;
    if (EnableShaderBackgroundProcessing != other.EnableShaderBackgroundProcessing) return false;
    if (ShaderPrecachedSize != other.ShaderPrecachedSize) return false;
    if (NeedsSteamServiceRepair != other.NeedsSteamServiceRepair) return false;
    if (DownloadPeerContent != other.DownloadPeerContent) return false;
    if (DownloadRateBitsPerS != other.DownloadRateBitsPerS) return false;
    if (RestrictAutoUpdates != other.RestrictAutoUpdates) return false;
    if (RestrictAutoUpdatesStart != other.RestrictAutoUpdatesStart) return false;
    if (RestrictAutoUpdatesEnd != other.RestrictAutoUpdatesEnd) return false;
    if (DownloadRegion != other.DownloadRegion) return false;
    if (DownloadWhileAppRunning != other.DownloadWhileAppRunning) return false;
    if (DownloadThrottleWhileStreaming != other.DownloadThrottleWhileStreaming) return false;
    if (DownloadThrottleRate != other.DownloadThrottleRate) return false;
    if (CloudEnabled != other.CloudEnabled) return false;
    if (ShowScreenshotManager != other.ShowScreenshotManager) return false;
    if (MusicVolume != other.MusicVolume) return false;
    if (MusicPauseOnAppStart != other.MusicPauseOnAppStart) return false;
    if (MusicPauseOnVoiceChat != other.MusicPauseOnVoiceChat) return false;
    if (MusicDownloadHighQuality != other.MusicDownloadHighQuality) return false;
    if (MusicPlaylistNotification != other.MusicPlaylistNotification) return false;
    if (BroadcastPermissions != other.BroadcastPermissions) return false;
    if (BroadcastOutputWidth != other.BroadcastOutputWidth) return false;
    if (BroadcastOutputHeight != other.BroadcastOutputHeight) return false;
    if (BroadcastBitrate != other.BroadcastBitrate) return false;
    if (BroadcastEncodingOption != other.BroadcastEncodingOption) return false;
    if (BroadcastRecordAllVideo != other.BroadcastRecordAllVideo) return false;
    if (BroadcastRecordAllAudio != other.BroadcastRecordAllAudio) return false;
    if (BroadcastRecordMicrophone != other.BroadcastRecordMicrophone) return false;
    if (BroadcastShowUploadStats != other.BroadcastShowUploadStats) return false;
    if (BroadcastShowLiveReminder != other.BroadcastShowLiveReminder) return false;
    if (BroadcastChatCorner != other.BroadcastChatCorner) return false;
    if (SteamInputConfiguratorErrorMsgEnable != other.SteamInputConfiguratorErrorMsgEnable) return false;
    if (ControllerGuideButtonFocusSteam != other.ControllerGuideButtonFocusSteam) return false;
    if (ControllerPs4Support != other.ControllerPs4Support) return false;
    if (ControllerXboxSupport != other.ControllerXboxSupport) return false;
    if (ControllerXboxDriver != other.ControllerXboxDriver) return false;
    if (ControllerSwitchSupport != other.ControllerSwitchSupport) return false;
    if (ControllerGenericSupport != other.ControllerGenericSupport) return false;
    if (ControllerPowerOffTimeout != other.ControllerPowerOffTimeout) return false;
    if (TurnOffControllerOnExit != other.TurnOffControllerOnExit) return false;
    if (ControllerCombineNintendoJoycons != other.ControllerCombineNintendoJoycons) return false;
    if (StartupMovieId != other.StartupMovieId) return false;
    if (StartupMovieLocalPath != other.StartupMovieLocalPath) return false;
    if (StartupMovieShuffle != other.StartupMovieShuffle) return false;
    if (StartupMovieUsedForResume != other.StartupMovieUsedForResume) return false;
    if (GameNotesEnableSpellcheck != other.GameNotesEnableSpellcheck) return false;
    if (ScreenshotItemsPerRow != other.ScreenshotItemsPerRow) return false;
    if (GBackgroundEnabled != other.GBackgroundEnabled) return false;
    if (GBackgroundPath != other.GBackgroundPath) return false;
    if (GBackgroundMaxKeep != other.GBackgroundMaxKeep) return false;
    if (ShowTimestampsInConsole != other.ShowTimestampsInConsole) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNoSavePersonalInfo) hash ^= NoSavePersonalInfo.GetHashCode();
    if (HasOobeTestModeEnabled) hash ^= OobeTestModeEnabled.GetHashCode();
    if (HasInClientBeta) hash ^= InClientBeta.GetHashCode();
    if (HasIsSteamSideloaded) hash ^= IsSteamSideloaded.GetHashCode();
    if (HasPreferredMonitor) hash ^= PreferredMonitor.GetHashCode();
    if (HasSteamCefGpuBlocklistDisabled) hash ^= SteamCefGpuBlocklistDisabled.GetHashCode();
    if (HasBigpictureWindowed) hash ^= BigpictureWindowed.GetHashCode();
    if (HasDisplayName) hash ^= DisplayName.GetHashCode();
    if (HasIsExternalDisplay) hash ^= IsExternalDisplay.GetHashCode();
    if (HasSteamOsUnderscanLevel) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SteamOsUnderscanLevel);
    if (HasSteamOsUnderscanEnabled) hash ^= SteamOsUnderscanEnabled.GetHashCode();
    if (HasMinScaleFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinScaleFactor);
    if (HasMaxScaleFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxScaleFactor);
    if (HasAutoScaleFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AutoScaleFactor);
    if (HasEnableTestUpdaters) hash ^= EnableTestUpdaters.GetHashCode();
    if (HasSmallMode) hash ^= SmallMode.GetHashCode();
    if (HasSkipSteamvrInstallDialog) hash ^= SkipSteamvrInstallDialog.GetHashCode();
    if (HasAlwaysShowUserChooser) hash ^= AlwaysShowUserChooser.GetHashCode();
    if (HasShowFamilySharingNotifications) hash ^= ShowFamilySharingNotifications.GetHashCode();
    if (HasOverlayFpsCounterCorner) hash ^= OverlayFpsCounterCorner.GetHashCode();
    if (HasOverlayFpsCounterHighContrast) hash ^= OverlayFpsCounterHighContrast.GetHashCode();
    if (overlayKey_ != null) hash ^= OverlayKey.GetHashCode();
    if (screenshotKey_ != null) hash ^= ScreenshotKey.GetHashCode();
    if (HasEnableOverlay) hash ^= EnableOverlay.GetHashCode();
    if (HasDisableDesktopGameTheater) hash ^= DisableDesktopGameTheater.GetHashCode();
    if (HasEnableScreenshotNotification) hash ^= EnableScreenshotNotification.GetHashCode();
    if (HasEnableScreenshotSound) hash ^= EnableScreenshotSound.GetHashCode();
    if (HasSaveUncompressedScreenshots) hash ^= SaveUncompressedScreenshots.GetHashCode();
    if (HasScreenshotsPath) hash ^= ScreenshotsPath.GetHashCode();
    if (HasDefaultPingRate) hash ^= DefaultPingRate.GetHashCode();
    if (HasServerPingRate) hash ^= ServerPingRate.GetHashCode();
    if (HasSteamNetworkingShareIp) hash ^= SteamNetworkingShareIp.GetHashCode();
    if (HasWebBrowserHome) hash ^= WebBrowserHome.GetHashCode();
    if (HasVoiceMicDeviceName) hash ^= VoiceMicDeviceName.GetHashCode();
    if (HasVoiceMicInputGain) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VoiceMicInputGain);
    if (HasVoiceSpeakerOutputGain) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VoiceSpeakerOutputGain);
    if (HasVoicePushToTalkSetting) hash ^= VoicePushToTalkSetting.GetHashCode();
    if (voicePushToTalkKey_ != null) hash ^= VoicePushToTalkKey.GetHashCode();
    if (HasOverlayToolbarListView) hash ^= OverlayToolbarListView.GetHashCode();
    if (HasAlwaysUseGamepaduiOverlay) hash ^= AlwaysUseGamepaduiOverlay.GetHashCode();
    if (HasOverlayTabs) hash ^= OverlayTabs.GetHashCode();
    if (HasOverlayScaleInterface) hash ^= OverlayScaleInterface.GetHashCode();
    if (HasSmoothScrollWebviews) hash ^= SmoothScrollWebviews.GetHashCode();
    if (HasEnableGpuAcceleratedWebviews) hash ^= EnableGpuAcceleratedWebviews.GetHashCode();
    if (HasEnableHardwareVideoDecoding) hash ^= EnableHardwareVideoDecoding.GetHashCode();
    if (HasRunAtStartup) hash ^= RunAtStartup.GetHashCode();
    if (HasEnableDpiScaling) hash ^= EnableDpiScaling.GetHashCode();
    if (HasEnableMarketingMessages) hash ^= EnableMarketingMessages.GetHashCode();
    if (HasStartInBigPictureMode) hash ^= StartInBigPictureMode.GetHashCode();
    if (HasJumplistFlags) hash ^= JumplistFlags.GetHashCode();
    if (HasEnableUiSounds) hash ^= EnableUiSounds.GetHashCode();
    if (HasDisableAllToasts) hash ^= DisableAllToasts.GetHashCode();
    if (HasDisableToastsInGame) hash ^= DisableToastsInGame.GetHashCode();
    if (HasPlaySoundOnToast) hash ^= PlaySoundOnToast.GetHashCode();
    if (HasLibraryDisplaySize) hash ^= LibraryDisplaySize.GetHashCode();
    if (HasLibraryWhatsNewShowOnlyProductUpdates) hash ^= LibraryWhatsNewShowOnlyProductUpdates.GetHashCode();
    if (HasShowStoreContentOnHome) hash ^= ShowStoreContentOnHome.GetHashCode();
    if (HasStartPage) hash ^= StartPage.GetHashCode();
    if (HasLibraryLowBandwidthMode) hash ^= LibraryLowBandwidthMode.GetHashCode();
    if (HasLibraryLowPerfMode) hash ^= LibraryLowPerfMode.GetHashCode();
    if (HasLibraryDisableCommunityContent) hash ^= LibraryDisableCommunityContent.GetHashCode();
    if (HasLibraryDisplayIconInGameList) hash ^= LibraryDisplayIconInGameList.GetHashCode();
    if (HasReadyToPlayIncludesStreaming) hash ^= ReadyToPlayIncludesStreaming.GetHashCode();
    if (HasShowSteamDeckInfo) hash ^= ShowSteamDeckInfo.GetHashCode();
    if (HasEnableShaderPrecache) hash ^= EnableShaderPrecache.GetHashCode();
    if (HasEnableShaderBackgroundProcessing) hash ^= EnableShaderBackgroundProcessing.GetHashCode();
    if (HasShaderPrecachedSize) hash ^= ShaderPrecachedSize.GetHashCode();
    if (HasNeedsSteamServiceRepair) hash ^= NeedsSteamServiceRepair.GetHashCode();
    if (HasDownloadPeerContent) hash ^= DownloadPeerContent.GetHashCode();
    if (HasDownloadRateBitsPerS) hash ^= DownloadRateBitsPerS.GetHashCode();
    if (HasRestrictAutoUpdates) hash ^= RestrictAutoUpdates.GetHashCode();
    if (HasRestrictAutoUpdatesStart) hash ^= RestrictAutoUpdatesStart.GetHashCode();
    if (HasRestrictAutoUpdatesEnd) hash ^= RestrictAutoUpdatesEnd.GetHashCode();
    if (HasDownloadRegion) hash ^= DownloadRegion.GetHashCode();
    if (HasDownloadWhileAppRunning) hash ^= DownloadWhileAppRunning.GetHashCode();
    if (HasDownloadThrottleWhileStreaming) hash ^= DownloadThrottleWhileStreaming.GetHashCode();
    if (HasDownloadThrottleRate) hash ^= DownloadThrottleRate.GetHashCode();
    if (HasCloudEnabled) hash ^= CloudEnabled.GetHashCode();
    if (HasShowScreenshotManager) hash ^= ShowScreenshotManager.GetHashCode();
    if (HasMusicVolume) hash ^= MusicVolume.GetHashCode();
    if (HasMusicPauseOnAppStart) hash ^= MusicPauseOnAppStart.GetHashCode();
    if (HasMusicPauseOnVoiceChat) hash ^= MusicPauseOnVoiceChat.GetHashCode();
    if (HasMusicDownloadHighQuality) hash ^= MusicDownloadHighQuality.GetHashCode();
    if (HasMusicPlaylistNotification) hash ^= MusicPlaylistNotification.GetHashCode();
    if (HasBroadcastPermissions) hash ^= BroadcastPermissions.GetHashCode();
    if (HasBroadcastOutputWidth) hash ^= BroadcastOutputWidth.GetHashCode();
    if (HasBroadcastOutputHeight) hash ^= BroadcastOutputHeight.GetHashCode();
    if (HasBroadcastBitrate) hash ^= BroadcastBitrate.GetHashCode();
    if (HasBroadcastEncodingOption) hash ^= BroadcastEncodingOption.GetHashCode();
    if (HasBroadcastRecordAllVideo) hash ^= BroadcastRecordAllVideo.GetHashCode();
    if (HasBroadcastRecordAllAudio) hash ^= BroadcastRecordAllAudio.GetHashCode();
    if (HasBroadcastRecordMicrophone) hash ^= BroadcastRecordMicrophone.GetHashCode();
    if (HasBroadcastShowUploadStats) hash ^= BroadcastShowUploadStats.GetHashCode();
    if (HasBroadcastShowLiveReminder) hash ^= BroadcastShowLiveReminder.GetHashCode();
    if (HasBroadcastChatCorner) hash ^= BroadcastChatCorner.GetHashCode();
    if (HasSteamInputConfiguratorErrorMsgEnable) hash ^= SteamInputConfiguratorErrorMsgEnable.GetHashCode();
    if (HasControllerGuideButtonFocusSteam) hash ^= ControllerGuideButtonFocusSteam.GetHashCode();
    if (HasControllerPs4Support) hash ^= ControllerPs4Support.GetHashCode();
    if (HasControllerXboxSupport) hash ^= ControllerXboxSupport.GetHashCode();
    if (HasControllerXboxDriver) hash ^= ControllerXboxDriver.GetHashCode();
    if (HasControllerSwitchSupport) hash ^= ControllerSwitchSupport.GetHashCode();
    if (HasControllerGenericSupport) hash ^= ControllerGenericSupport.GetHashCode();
    if (HasControllerPowerOffTimeout) hash ^= ControllerPowerOffTimeout.GetHashCode();
    if (HasTurnOffControllerOnExit) hash ^= TurnOffControllerOnExit.GetHashCode();
    if (HasControllerCombineNintendoJoycons) hash ^= ControllerCombineNintendoJoycons.GetHashCode();
    if (HasStartupMovieId) hash ^= StartupMovieId.GetHashCode();
    if (HasStartupMovieLocalPath) hash ^= StartupMovieLocalPath.GetHashCode();
    if (HasStartupMovieShuffle) hash ^= StartupMovieShuffle.GetHashCode();
    if (HasStartupMovieUsedForResume) hash ^= StartupMovieUsedForResume.GetHashCode();
    if (HasGameNotesEnableSpellcheck) hash ^= GameNotesEnableSpellcheck.GetHashCode();
    if (HasScreenshotItemsPerRow) hash ^= ScreenshotItemsPerRow.GetHashCode();
    if (HasGBackgroundEnabled) hash ^= GBackgroundEnabled.GetHashCode();
    if (HasGBackgroundPath) hash ^= GBackgroundPath.GetHashCode();
    if (HasGBackgroundMaxKeep) hash ^= GBackgroundMaxKeep.GetHashCode();
    if (HasShowTimestampsInConsole) hash ^= ShowTimestampsInConsole.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasNoSavePersonalInfo) {
      output.WriteRawTag(8);
      output.WriteBool(NoSavePersonalInfo);
    }
    if (HasOobeTestModeEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(OobeTestModeEnabled);
    }
    if (HasInClientBeta) {
      output.WriteRawTag(24);
      output.WriteBool(InClientBeta);
    }
    if (HasIsSteamSideloaded) {
      output.WriteRawTag(32);
      output.WriteBool(IsSteamSideloaded);
    }
    if (HasPreferredMonitor) {
      output.WriteRawTag(42);
      output.WriteString(PreferredMonitor);
    }
    if (HasSteamCefGpuBlocklistDisabled) {
      output.WriteRawTag(48);
      output.WriteBool(SteamCefGpuBlocklistDisabled);
    }
    if (HasBigpictureWindowed) {
      output.WriteRawTag(56);
      output.WriteBool(BigpictureWindowed);
    }
    if (HasDisplayName) {
      output.WriteRawTag(66);
      output.WriteString(DisplayName);
    }
    if (HasIsExternalDisplay) {
      output.WriteRawTag(72);
      output.WriteBool(IsExternalDisplay);
    }
    if (HasSteamOsUnderscanLevel) {
      output.WriteRawTag(85);
      output.WriteFloat(SteamOsUnderscanLevel);
    }
    if (HasSteamOsUnderscanEnabled) {
      output.WriteRawTag(88);
      output.WriteBool(SteamOsUnderscanEnabled);
    }
    if (HasMinScaleFactor) {
      output.WriteRawTag(101);
      output.WriteFloat(MinScaleFactor);
    }
    if (HasMaxScaleFactor) {
      output.WriteRawTag(109);
      output.WriteFloat(MaxScaleFactor);
    }
    if (HasAutoScaleFactor) {
      output.WriteRawTag(117);
      output.WriteFloat(AutoScaleFactor);
    }
    if (HasEnableTestUpdaters) {
      output.WriteRawTag(120);
      output.WriteBool(EnableTestUpdaters);
    }
    if (HasSmallMode) {
      output.WriteRawTag(128, 1);
      output.WriteBool(SmallMode);
    }
    if (HasSkipSteamvrInstallDialog) {
      output.WriteRawTag(152, 1);
      output.WriteBool(SkipSteamvrInstallDialog);
    }
    if (HasAlwaysShowUserChooser) {
      output.WriteRawTag(160, 1);
      output.WriteBool(AlwaysShowUserChooser);
    }
    if (HasShowFamilySharingNotifications) {
      output.WriteRawTag(192, 187, 1);
      output.WriteBool(ShowFamilySharingNotifications);
    }
    if (HasOverlayFpsCounterCorner) {
      output.WriteRawTag(128, 250, 1);
      output.WriteInt32(OverlayFpsCounterCorner);
    }
    if (HasOverlayFpsCounterHighContrast) {
      output.WriteRawTag(136, 250, 1);
      output.WriteBool(OverlayFpsCounterHighContrast);
    }
    if (overlayKey_ != null) {
      output.WriteRawTag(146, 250, 1);
      output.WriteMessage(OverlayKey);
    }
    if (screenshotKey_ != null) {
      output.WriteRawTag(154, 250, 1);
      output.WriteMessage(ScreenshotKey);
    }
    if (HasEnableOverlay) {
      output.WriteRawTag(160, 250, 1);
      output.WriteBool(EnableOverlay);
    }
    if (HasDisableDesktopGameTheater) {
      output.WriteRawTag(168, 250, 1);
      output.WriteBool(DisableDesktopGameTheater);
    }
    if (HasEnableScreenshotNotification) {
      output.WriteRawTag(176, 250, 1);
      output.WriteBool(EnableScreenshotNotification);
    }
    if (HasEnableScreenshotSound) {
      output.WriteRawTag(184, 250, 1);
      output.WriteBool(EnableScreenshotSound);
    }
    if (HasSaveUncompressedScreenshots) {
      output.WriteRawTag(192, 250, 1);
      output.WriteBool(SaveUncompressedScreenshots);
    }
    if (HasScreenshotsPath) {
      output.WriteRawTag(202, 250, 1);
      output.WriteString(ScreenshotsPath);
    }
    if (HasDefaultPingRate) {
      output.WriteRawTag(208, 250, 1);
      output.WriteInt32(DefaultPingRate);
    }
    if (HasServerPingRate) {
      output.WriteRawTag(216, 250, 1);
      output.WriteInt32(ServerPingRate);
    }
    if (HasSteamNetworkingShareIp) {
      output.WriteRawTag(224, 250, 1);
      output.WriteInt32(SteamNetworkingShareIp);
    }
    if (HasWebBrowserHome) {
      output.WriteRawTag(234, 250, 1);
      output.WriteString(WebBrowserHome);
    }
    if (HasVoiceMicDeviceName) {
      output.WriteRawTag(242, 250, 1);
      output.WriteString(VoiceMicDeviceName);
    }
    if (HasVoiceMicInputGain) {
      output.WriteRawTag(253, 250, 1);
      output.WriteFloat(VoiceMicInputGain);
    }
    if (HasVoiceSpeakerOutputGain) {
      output.WriteRawTag(133, 251, 1);
      output.WriteFloat(VoiceSpeakerOutputGain);
    }
    if (HasVoicePushToTalkSetting) {
      output.WriteRawTag(136, 251, 1);
      output.WriteInt32(VoicePushToTalkSetting);
    }
    if (voicePushToTalkKey_ != null) {
      output.WriteRawTag(146, 251, 1);
      output.WriteMessage(VoicePushToTalkKey);
    }
    if (HasOverlayToolbarListView) {
      output.WriteRawTag(152, 251, 1);
      output.WriteBool(OverlayToolbarListView);
    }
    if (HasAlwaysUseGamepaduiOverlay) {
      output.WriteRawTag(160, 251, 1);
      output.WriteBool(AlwaysUseGamepaduiOverlay);
    }
    if (HasOverlayTabs) {
      output.WriteRawTag(170, 251, 1);
      output.WriteString(OverlayTabs);
    }
    if (HasOverlayScaleInterface) {
      output.WriteRawTag(176, 251, 1);
      output.WriteBool(OverlayScaleInterface);
    }
    if (HasSmoothScrollWebviews) {
      output.WriteRawTag(192, 184, 2);
      output.WriteBool(SmoothScrollWebviews);
    }
    if (HasEnableGpuAcceleratedWebviews) {
      output.WriteRawTag(200, 184, 2);
      output.WriteBool(EnableGpuAcceleratedWebviews);
    }
    if (HasEnableHardwareVideoDecoding) {
      output.WriteRawTag(216, 184, 2);
      output.WriteBool(EnableHardwareVideoDecoding);
    }
    if (HasRunAtStartup) {
      output.WriteRawTag(224, 184, 2);
      output.WriteBool(RunAtStartup);
    }
    if (HasEnableDpiScaling) {
      output.WriteRawTag(232, 184, 2);
      output.WriteBool(EnableDpiScaling);
    }
    if (HasEnableMarketingMessages) {
      output.WriteRawTag(240, 184, 2);
      output.WriteBool(EnableMarketingMessages);
    }
    if (HasStartInBigPictureMode) {
      output.WriteRawTag(248, 184, 2);
      output.WriteBool(StartInBigPictureMode);
    }
    if (HasJumplistFlags) {
      output.WriteRawTag(128, 185, 2);
      output.WriteUInt32(JumplistFlags);
    }
    if (HasEnableUiSounds) {
      output.WriteRawTag(136, 185, 2);
      output.WriteBool(EnableUiSounds);
    }
    if (HasDisableAllToasts) {
      output.WriteRawTag(128, 247, 2);
      output.WriteBool(DisableAllToasts);
    }
    if (HasDisableToastsInGame) {
      output.WriteRawTag(136, 247, 2);
      output.WriteBool(DisableToastsInGame);
    }
    if (HasPlaySoundOnToast) {
      output.WriteRawTag(144, 247, 2);
      output.WriteBool(PlaySoundOnToast);
    }
    if (HasLibraryDisplaySize) {
      output.WriteRawTag(192, 181, 3);
      output.WriteInt32(LibraryDisplaySize);
    }
    if (HasLibraryWhatsNewShowOnlyProductUpdates) {
      output.WriteRawTag(200, 181, 3);
      output.WriteBool(LibraryWhatsNewShowOnlyProductUpdates);
    }
    if (HasShowStoreContentOnHome) {
      output.WriteRawTag(208, 181, 3);
      output.WriteBool(ShowStoreContentOnHome);
    }
    if (HasStartPage) {
      output.WriteRawTag(218, 181, 3);
      output.WriteString(StartPage);
    }
    if (HasLibraryLowBandwidthMode) {
      output.WriteRawTag(224, 181, 3);
      output.WriteBool(LibraryLowBandwidthMode);
    }
    if (HasLibraryLowPerfMode) {
      output.WriteRawTag(232, 181, 3);
      output.WriteBool(LibraryLowPerfMode);
    }
    if (HasLibraryDisableCommunityContent) {
      output.WriteRawTag(240, 181, 3);
      output.WriteBool(LibraryDisableCommunityContent);
    }
    if (HasLibraryDisplayIconInGameList) {
      output.WriteRawTag(248, 181, 3);
      output.WriteBool(LibraryDisplayIconInGameList);
    }
    if (HasReadyToPlayIncludesStreaming) {
      output.WriteRawTag(128, 182, 3);
      output.WriteBool(ReadyToPlayIncludesStreaming);
    }
    if (HasShowSteamDeckInfo) {
      output.WriteRawTag(136, 182, 3);
      output.WriteBool(ShowSteamDeckInfo);
    }
    if (HasEnableShaderPrecache) {
      output.WriteRawTag(128, 244, 3);
      output.WriteBool(EnableShaderPrecache);
    }
    if (HasEnableShaderBackgroundProcessing) {
      output.WriteRawTag(136, 244, 3);
      output.WriteBool(EnableShaderBackgroundProcessing);
    }
    if (HasShaderPrecachedSize) {
      output.WriteRawTag(144, 244, 3);
      output.WriteUInt64(ShaderPrecachedSize);
    }
    if (HasNeedsSteamServiceRepair) {
      output.WriteRawTag(152, 244, 3);
      output.WriteBool(NeedsSteamServiceRepair);
    }
    if (HasDownloadPeerContent) {
      output.WriteRawTag(160, 244, 3);
      output.WriteInt32(DownloadPeerContent);
    }
    if (HasDownloadRateBitsPerS) {
      output.WriteRawTag(168, 244, 3);
      output.WriteBool(DownloadRateBitsPerS);
    }
    if (HasRestrictAutoUpdates) {
      output.WriteRawTag(176, 244, 3);
      output.WriteBool(RestrictAutoUpdates);
    }
    if (HasRestrictAutoUpdatesStart) {
      output.WriteRawTag(184, 244, 3);
      output.WriteInt32(RestrictAutoUpdatesStart);
    }
    if (HasRestrictAutoUpdatesEnd) {
      output.WriteRawTag(192, 244, 3);
      output.WriteInt32(RestrictAutoUpdatesEnd);
    }
    if (HasDownloadRegion) {
      output.WriteRawTag(200, 244, 3);
      output.WriteInt32(DownloadRegion);
    }
    if (HasDownloadWhileAppRunning) {
      output.WriteRawTag(208, 244, 3);
      output.WriteBool(DownloadWhileAppRunning);
    }
    if (HasDownloadThrottleWhileStreaming) {
      output.WriteRawTag(216, 244, 3);
      output.WriteBool(DownloadThrottleWhileStreaming);
    }
    if (HasDownloadThrottleRate) {
      output.WriteRawTag(224, 244, 3);
      output.WriteInt32(DownloadThrottleRate);
    }
    if (HasCloudEnabled) {
      output.WriteRawTag(128, 241, 4);
      output.WriteBool(CloudEnabled);
    }
    if (HasShowScreenshotManager) {
      output.WriteRawTag(136, 241, 4);
      output.WriteBool(ShowScreenshotManager);
    }
    if (HasMusicVolume) {
      output.WriteRawTag(192, 175, 5);
      output.WriteInt32(MusicVolume);
    }
    if (HasMusicPauseOnAppStart) {
      output.WriteRawTag(200, 175, 5);
      output.WriteBool(MusicPauseOnAppStart);
    }
    if (HasMusicPauseOnVoiceChat) {
      output.WriteRawTag(208, 175, 5);
      output.WriteBool(MusicPauseOnVoiceChat);
    }
    if (HasMusicDownloadHighQuality) {
      output.WriteRawTag(216, 175, 5);
      output.WriteBool(MusicDownloadHighQuality);
    }
    if (HasMusicPlaylistNotification) {
      output.WriteRawTag(224, 175, 5);
      output.WriteBool(MusicPlaylistNotification);
    }
    if (HasBroadcastPermissions) {
      output.WriteRawTag(128, 238, 5);
      output.WriteEnum((int) BroadcastPermissions);
    }
    if (HasBroadcastOutputWidth) {
      output.WriteRawTag(136, 238, 5);
      output.WriteInt32(BroadcastOutputWidth);
    }
    if (HasBroadcastOutputHeight) {
      output.WriteRawTag(144, 238, 5);
      output.WriteInt32(BroadcastOutputHeight);
    }
    if (HasBroadcastBitrate) {
      output.WriteRawTag(152, 238, 5);
      output.WriteInt32(BroadcastBitrate);
    }
    if (HasBroadcastEncodingOption) {
      output.WriteRawTag(160, 238, 5);
      output.WriteEnum((int) BroadcastEncodingOption);
    }
    if (HasBroadcastRecordAllVideo) {
      output.WriteRawTag(168, 238, 5);
      output.WriteBool(BroadcastRecordAllVideo);
    }
    if (HasBroadcastRecordAllAudio) {
      output.WriteRawTag(176, 238, 5);
      output.WriteBool(BroadcastRecordAllAudio);
    }
    if (HasBroadcastRecordMicrophone) {
      output.WriteRawTag(184, 238, 5);
      output.WriteBool(BroadcastRecordMicrophone);
    }
    if (HasBroadcastShowUploadStats) {
      output.WriteRawTag(192, 238, 5);
      output.WriteBool(BroadcastShowUploadStats);
    }
    if (HasBroadcastShowLiveReminder) {
      output.WriteRawTag(200, 238, 5);
      output.WriteBool(BroadcastShowLiveReminder);
    }
    if (HasBroadcastChatCorner) {
      output.WriteRawTag(208, 238, 5);
      output.WriteInt32(BroadcastChatCorner);
    }
    if (HasSteamInputConfiguratorErrorMsgEnable) {
      output.WriteRawTag(136, 235, 6);
      output.WriteBool(SteamInputConfiguratorErrorMsgEnable);
    }
    if (HasControllerGuideButtonFocusSteam) {
      output.WriteRawTag(144, 235, 6);
      output.WriteBool(ControllerGuideButtonFocusSteam);
    }
    if (HasControllerPs4Support) {
      output.WriteRawTag(152, 235, 6);
      output.WriteBool(ControllerPs4Support);
    }
    if (HasControllerXboxSupport) {
      output.WriteRawTag(160, 235, 6);
      output.WriteBool(ControllerXboxSupport);
    }
    if (HasControllerXboxDriver) {
      output.WriteRawTag(168, 235, 6);
      output.WriteBool(ControllerXboxDriver);
    }
    if (HasControllerSwitchSupport) {
      output.WriteRawTag(176, 235, 6);
      output.WriteBool(ControllerSwitchSupport);
    }
    if (HasControllerGenericSupport) {
      output.WriteRawTag(184, 235, 6);
      output.WriteBool(ControllerGenericSupport);
    }
    if (HasControllerPowerOffTimeout) {
      output.WriteRawTag(192, 235, 6);
      output.WriteInt32(ControllerPowerOffTimeout);
    }
    if (HasTurnOffControllerOnExit) {
      output.WriteRawTag(200, 235, 6);
      output.WriteBool(TurnOffControllerOnExit);
    }
    if (HasControllerCombineNintendoJoycons) {
      output.WriteRawTag(208, 235, 6);
      output.WriteBool(ControllerCombineNintendoJoycons);
    }
    if (HasStartupMovieId) {
      output.WriteRawTag(128, 232, 7);
      output.WriteUInt64(StartupMovieId);
    }
    if (HasStartupMovieLocalPath) {
      output.WriteRawTag(138, 232, 7);
      output.WriteString(StartupMovieLocalPath);
    }
    if (HasStartupMovieShuffle) {
      output.WriteRawTag(144, 232, 7);
      output.WriteBool(StartupMovieShuffle);
    }
    if (HasStartupMovieUsedForResume) {
      output.WriteRawTag(152, 232, 7);
      output.WriteBool(StartupMovieUsedForResume);
    }
    if (HasGameNotesEnableSpellcheck) {
      output.WriteRawTag(200, 166, 8);
      output.WriteBool(GameNotesEnableSpellcheck);
    }
    if (HasScreenshotItemsPerRow) {
      output.WriteRawTag(128, 229, 8);
      output.WriteInt32(ScreenshotItemsPerRow);
    }
    if (HasGBackgroundEnabled) {
      output.WriteRawTag(192, 241, 8);
      output.WriteBool(GBackgroundEnabled);
    }
    if (HasGBackgroundPath) {
      output.WriteRawTag(202, 241, 8);
      output.WriteString(GBackgroundPath);
    }
    if (HasGBackgroundMaxKeep) {
      output.WriteRawTag(210, 241, 8);
      output.WriteString(GBackgroundMaxKeep);
    }
    if (HasShowTimestampsInConsole) {
      output.WriteRawTag(128, 226, 9);
      output.WriteBool(ShowTimestampsInConsole);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasNoSavePersonalInfo) {
      output.WriteRawTag(8);
      output.WriteBool(NoSavePersonalInfo);
    }
    if (HasOobeTestModeEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(OobeTestModeEnabled);
    }
    if (HasInClientBeta) {
      output.WriteRawTag(24);
      output.WriteBool(InClientBeta);
    }
    if (HasIsSteamSideloaded) {
      output.WriteRawTag(32);
      output.WriteBool(IsSteamSideloaded);
    }
    if (HasPreferredMonitor) {
      output.WriteRawTag(42);
      output.WriteString(PreferredMonitor);
    }
    if (HasSteamCefGpuBlocklistDisabled) {
      output.WriteRawTag(48);
      output.WriteBool(SteamCefGpuBlocklistDisabled);
    }
    if (HasBigpictureWindowed) {
      output.WriteRawTag(56);
      output.WriteBool(BigpictureWindowed);
    }
    if (HasDisplayName) {
      output.WriteRawTag(66);
      output.WriteString(DisplayName);
    }
    if (HasIsExternalDisplay) {
      output.WriteRawTag(72);
      output.WriteBool(IsExternalDisplay);
    }
    if (HasSteamOsUnderscanLevel) {
      output.WriteRawTag(85);
      output.WriteFloat(SteamOsUnderscanLevel);
    }
    if (HasSteamOsUnderscanEnabled) {
      output.WriteRawTag(88);
      output.WriteBool(SteamOsUnderscanEnabled);
    }
    if (HasMinScaleFactor) {
      output.WriteRawTag(101);
      output.WriteFloat(MinScaleFactor);
    }
    if (HasMaxScaleFactor) {
      output.WriteRawTag(109);
      output.WriteFloat(MaxScaleFactor);
    }
    if (HasAutoScaleFactor) {
      output.WriteRawTag(117);
      output.WriteFloat(AutoScaleFactor);
    }
    if (HasEnableTestUpdaters) {
      output.WriteRawTag(120);
      output.WriteBool(EnableTestUpdaters);
    }
    if (HasSmallMode) {
      output.WriteRawTag(128, 1);
      output.WriteBool(SmallMode);
    }
    if (HasSkipSteamvrInstallDialog) {
      output.WriteRawTag(152, 1);
      output.WriteBool(SkipSteamvrInstallDialog);
    }
    if (HasAlwaysShowUserChooser) {
      output.WriteRawTag(160, 1);
      output.WriteBool(AlwaysShowUserChooser);
    }
    if (HasShowFamilySharingNotifications) {
      output.WriteRawTag(192, 187, 1);
      output.WriteBool(ShowFamilySharingNotifications);
    }
    if (HasOverlayFpsCounterCorner) {
      output.WriteRawTag(128, 250, 1);
      output.WriteInt32(OverlayFpsCounterCorner);
    }
    if (HasOverlayFpsCounterHighContrast) {
      output.WriteRawTag(136, 250, 1);
      output.WriteBool(OverlayFpsCounterHighContrast);
    }
    if (overlayKey_ != null) {
      output.WriteRawTag(146, 250, 1);
      output.WriteMessage(OverlayKey);
    }
    if (screenshotKey_ != null) {
      output.WriteRawTag(154, 250, 1);
      output.WriteMessage(ScreenshotKey);
    }
    if (HasEnableOverlay) {
      output.WriteRawTag(160, 250, 1);
      output.WriteBool(EnableOverlay);
    }
    if (HasDisableDesktopGameTheater) {
      output.WriteRawTag(168, 250, 1);
      output.WriteBool(DisableDesktopGameTheater);
    }
    if (HasEnableScreenshotNotification) {
      output.WriteRawTag(176, 250, 1);
      output.WriteBool(EnableScreenshotNotification);
    }
    if (HasEnableScreenshotSound) {
      output.WriteRawTag(184, 250, 1);
      output.WriteBool(EnableScreenshotSound);
    }
    if (HasSaveUncompressedScreenshots) {
      output.WriteRawTag(192, 250, 1);
      output.WriteBool(SaveUncompressedScreenshots);
    }
    if (HasScreenshotsPath) {
      output.WriteRawTag(202, 250, 1);
      output.WriteString(ScreenshotsPath);
    }
    if (HasDefaultPingRate) {
      output.WriteRawTag(208, 250, 1);
      output.WriteInt32(DefaultPingRate);
    }
    if (HasServerPingRate) {
      output.WriteRawTag(216, 250, 1);
      output.WriteInt32(ServerPingRate);
    }
    if (HasSteamNetworkingShareIp) {
      output.WriteRawTag(224, 250, 1);
      output.WriteInt32(SteamNetworkingShareIp);
    }
    if (HasWebBrowserHome) {
      output.WriteRawTag(234, 250, 1);
      output.WriteString(WebBrowserHome);
    }
    if (HasVoiceMicDeviceName) {
      output.WriteRawTag(242, 250, 1);
      output.WriteString(VoiceMicDeviceName);
    }
    if (HasVoiceMicInputGain) {
      output.WriteRawTag(253, 250, 1);
      output.WriteFloat(VoiceMicInputGain);
    }
    if (HasVoiceSpeakerOutputGain) {
      output.WriteRawTag(133, 251, 1);
      output.WriteFloat(VoiceSpeakerOutputGain);
    }
    if (HasVoicePushToTalkSetting) {
      output.WriteRawTag(136, 251, 1);
      output.WriteInt32(VoicePushToTalkSetting);
    }
    if (voicePushToTalkKey_ != null) {
      output.WriteRawTag(146, 251, 1);
      output.WriteMessage(VoicePushToTalkKey);
    }
    if (HasOverlayToolbarListView) {
      output.WriteRawTag(152, 251, 1);
      output.WriteBool(OverlayToolbarListView);
    }
    if (HasAlwaysUseGamepaduiOverlay) {
      output.WriteRawTag(160, 251, 1);
      output.WriteBool(AlwaysUseGamepaduiOverlay);
    }
    if (HasOverlayTabs) {
      output.WriteRawTag(170, 251, 1);
      output.WriteString(OverlayTabs);
    }
    if (HasOverlayScaleInterface) {
      output.WriteRawTag(176, 251, 1);
      output.WriteBool(OverlayScaleInterface);
    }
    if (HasSmoothScrollWebviews) {
      output.WriteRawTag(192, 184, 2);
      output.WriteBool(SmoothScrollWebviews);
    }
    if (HasEnableGpuAcceleratedWebviews) {
      output.WriteRawTag(200, 184, 2);
      output.WriteBool(EnableGpuAcceleratedWebviews);
    }
    if (HasEnableHardwareVideoDecoding) {
      output.WriteRawTag(216, 184, 2);
      output.WriteBool(EnableHardwareVideoDecoding);
    }
    if (HasRunAtStartup) {
      output.WriteRawTag(224, 184, 2);
      output.WriteBool(RunAtStartup);
    }
    if (HasEnableDpiScaling) {
      output.WriteRawTag(232, 184, 2);
      output.WriteBool(EnableDpiScaling);
    }
    if (HasEnableMarketingMessages) {
      output.WriteRawTag(240, 184, 2);
      output.WriteBool(EnableMarketingMessages);
    }
    if (HasStartInBigPictureMode) {
      output.WriteRawTag(248, 184, 2);
      output.WriteBool(StartInBigPictureMode);
    }
    if (HasJumplistFlags) {
      output.WriteRawTag(128, 185, 2);
      output.WriteUInt32(JumplistFlags);
    }
    if (HasEnableUiSounds) {
      output.WriteRawTag(136, 185, 2);
      output.WriteBool(EnableUiSounds);
    }
    if (HasDisableAllToasts) {
      output.WriteRawTag(128, 247, 2);
      output.WriteBool(DisableAllToasts);
    }
    if (HasDisableToastsInGame) {
      output.WriteRawTag(136, 247, 2);
      output.WriteBool(DisableToastsInGame);
    }
    if (HasPlaySoundOnToast) {
      output.WriteRawTag(144, 247, 2);
      output.WriteBool(PlaySoundOnToast);
    }
    if (HasLibraryDisplaySize) {
      output.WriteRawTag(192, 181, 3);
      output.WriteInt32(LibraryDisplaySize);
    }
    if (HasLibraryWhatsNewShowOnlyProductUpdates) {
      output.WriteRawTag(200, 181, 3);
      output.WriteBool(LibraryWhatsNewShowOnlyProductUpdates);
    }
    if (HasShowStoreContentOnHome) {
      output.WriteRawTag(208, 181, 3);
      output.WriteBool(ShowStoreContentOnHome);
    }
    if (HasStartPage) {
      output.WriteRawTag(218, 181, 3);
      output.WriteString(StartPage);
    }
    if (HasLibraryLowBandwidthMode) {
      output.WriteRawTag(224, 181, 3);
      output.WriteBool(LibraryLowBandwidthMode);
    }
    if (HasLibraryLowPerfMode) {
      output.WriteRawTag(232, 181, 3);
      output.WriteBool(LibraryLowPerfMode);
    }
    if (HasLibraryDisableCommunityContent) {
      output.WriteRawTag(240, 181, 3);
      output.WriteBool(LibraryDisableCommunityContent);
    }
    if (HasLibraryDisplayIconInGameList) {
      output.WriteRawTag(248, 181, 3);
      output.WriteBool(LibraryDisplayIconInGameList);
    }
    if (HasReadyToPlayIncludesStreaming) {
      output.WriteRawTag(128, 182, 3);
      output.WriteBool(ReadyToPlayIncludesStreaming);
    }
    if (HasShowSteamDeckInfo) {
      output.WriteRawTag(136, 182, 3);
      output.WriteBool(ShowSteamDeckInfo);
    }
    if (HasEnableShaderPrecache) {
      output.WriteRawTag(128, 244, 3);
      output.WriteBool(EnableShaderPrecache);
    }
    if (HasEnableShaderBackgroundProcessing) {
      output.WriteRawTag(136, 244, 3);
      output.WriteBool(EnableShaderBackgroundProcessing);
    }
    if (HasShaderPrecachedSize) {
      output.WriteRawTag(144, 244, 3);
      output.WriteUInt64(ShaderPrecachedSize);
    }
    if (HasNeedsSteamServiceRepair) {
      output.WriteRawTag(152, 244, 3);
      output.WriteBool(NeedsSteamServiceRepair);
    }
    if (HasDownloadPeerContent) {
      output.WriteRawTag(160, 244, 3);
      output.WriteInt32(DownloadPeerContent);
    }
    if (HasDownloadRateBitsPerS) {
      output.WriteRawTag(168, 244, 3);
      output.WriteBool(DownloadRateBitsPerS);
    }
    if (HasRestrictAutoUpdates) {
      output.WriteRawTag(176, 244, 3);
      output.WriteBool(RestrictAutoUpdates);
    }
    if (HasRestrictAutoUpdatesStart) {
      output.WriteRawTag(184, 244, 3);
      output.WriteInt32(RestrictAutoUpdatesStart);
    }
    if (HasRestrictAutoUpdatesEnd) {
      output.WriteRawTag(192, 244, 3);
      output.WriteInt32(RestrictAutoUpdatesEnd);
    }
    if (HasDownloadRegion) {
      output.WriteRawTag(200, 244, 3);
      output.WriteInt32(DownloadRegion);
    }
    if (HasDownloadWhileAppRunning) {
      output.WriteRawTag(208, 244, 3);
      output.WriteBool(DownloadWhileAppRunning);
    }
    if (HasDownloadThrottleWhileStreaming) {
      output.WriteRawTag(216, 244, 3);
      output.WriteBool(DownloadThrottleWhileStreaming);
    }
    if (HasDownloadThrottleRate) {
      output.WriteRawTag(224, 244, 3);
      output.WriteInt32(DownloadThrottleRate);
    }
    if (HasCloudEnabled) {
      output.WriteRawTag(128, 241, 4);
      output.WriteBool(CloudEnabled);
    }
    if (HasShowScreenshotManager) {
      output.WriteRawTag(136, 241, 4);
      output.WriteBool(ShowScreenshotManager);
    }
    if (HasMusicVolume) {
      output.WriteRawTag(192, 175, 5);
      output.WriteInt32(MusicVolume);
    }
    if (HasMusicPauseOnAppStart) {
      output.WriteRawTag(200, 175, 5);
      output.WriteBool(MusicPauseOnAppStart);
    }
    if (HasMusicPauseOnVoiceChat) {
      output.WriteRawTag(208, 175, 5);
      output.WriteBool(MusicPauseOnVoiceChat);
    }
    if (HasMusicDownloadHighQuality) {
      output.WriteRawTag(216, 175, 5);
      output.WriteBool(MusicDownloadHighQuality);
    }
    if (HasMusicPlaylistNotification) {
      output.WriteRawTag(224, 175, 5);
      output.WriteBool(MusicPlaylistNotification);
    }
    if (HasBroadcastPermissions) {
      output.WriteRawTag(128, 238, 5);
      output.WriteEnum((int) BroadcastPermissions);
    }
    if (HasBroadcastOutputWidth) {
      output.WriteRawTag(136, 238, 5);
      output.WriteInt32(BroadcastOutputWidth);
    }
    if (HasBroadcastOutputHeight) {
      output.WriteRawTag(144, 238, 5);
      output.WriteInt32(BroadcastOutputHeight);
    }
    if (HasBroadcastBitrate) {
      output.WriteRawTag(152, 238, 5);
      output.WriteInt32(BroadcastBitrate);
    }
    if (HasBroadcastEncodingOption) {
      output.WriteRawTag(160, 238, 5);
      output.WriteEnum((int) BroadcastEncodingOption);
    }
    if (HasBroadcastRecordAllVideo) {
      output.WriteRawTag(168, 238, 5);
      output.WriteBool(BroadcastRecordAllVideo);
    }
    if (HasBroadcastRecordAllAudio) {
      output.WriteRawTag(176, 238, 5);
      output.WriteBool(BroadcastRecordAllAudio);
    }
    if (HasBroadcastRecordMicrophone) {
      output.WriteRawTag(184, 238, 5);
      output.WriteBool(BroadcastRecordMicrophone);
    }
    if (HasBroadcastShowUploadStats) {
      output.WriteRawTag(192, 238, 5);
      output.WriteBool(BroadcastShowUploadStats);
    }
    if (HasBroadcastShowLiveReminder) {
      output.WriteRawTag(200, 238, 5);
      output.WriteBool(BroadcastShowLiveReminder);
    }
    if (HasBroadcastChatCorner) {
      output.WriteRawTag(208, 238, 5);
      output.WriteInt32(BroadcastChatCorner);
    }
    if (HasSteamInputConfiguratorErrorMsgEnable) {
      output.WriteRawTag(136, 235, 6);
      output.WriteBool(SteamInputConfiguratorErrorMsgEnable);
    }
    if (HasControllerGuideButtonFocusSteam) {
      output.WriteRawTag(144, 235, 6);
      output.WriteBool(ControllerGuideButtonFocusSteam);
    }
    if (HasControllerPs4Support) {
      output.WriteRawTag(152, 235, 6);
      output.WriteBool(ControllerPs4Support);
    }
    if (HasControllerXboxSupport) {
      output.WriteRawTag(160, 235, 6);
      output.WriteBool(ControllerXboxSupport);
    }
    if (HasControllerXboxDriver) {
      output.WriteRawTag(168, 235, 6);
      output.WriteBool(ControllerXboxDriver);
    }
    if (HasControllerSwitchSupport) {
      output.WriteRawTag(176, 235, 6);
      output.WriteBool(ControllerSwitchSupport);
    }
    if (HasControllerGenericSupport) {
      output.WriteRawTag(184, 235, 6);
      output.WriteBool(ControllerGenericSupport);
    }
    if (HasControllerPowerOffTimeout) {
      output.WriteRawTag(192, 235, 6);
      output.WriteInt32(ControllerPowerOffTimeout);
    }
    if (HasTurnOffControllerOnExit) {
      output.WriteRawTag(200, 235, 6);
      output.WriteBool(TurnOffControllerOnExit);
    }
    if (HasControllerCombineNintendoJoycons) {
      output.WriteRawTag(208, 235, 6);
      output.WriteBool(ControllerCombineNintendoJoycons);
    }
    if (HasStartupMovieId) {
      output.WriteRawTag(128, 232, 7);
      output.WriteUInt64(StartupMovieId);
    }
    if (HasStartupMovieLocalPath) {
      output.WriteRawTag(138, 232, 7);
      output.WriteString(StartupMovieLocalPath);
    }
    if (HasStartupMovieShuffle) {
      output.WriteRawTag(144, 232, 7);
      output.WriteBool(StartupMovieShuffle);
    }
    if (HasStartupMovieUsedForResume) {
      output.WriteRawTag(152, 232, 7);
      output.WriteBool(StartupMovieUsedForResume);
    }
    if (HasGameNotesEnableSpellcheck) {
      output.WriteRawTag(200, 166, 8);
      output.WriteBool(GameNotesEnableSpellcheck);
    }
    if (HasScreenshotItemsPerRow) {
      output.WriteRawTag(128, 229, 8);
      output.WriteInt32(ScreenshotItemsPerRow);
    }
    if (HasGBackgroundEnabled) {
      output.WriteRawTag(192, 241, 8);
      output.WriteBool(GBackgroundEnabled);
    }
    if (HasGBackgroundPath) {
      output.WriteRawTag(202, 241, 8);
      output.WriteString(GBackgroundPath);
    }
    if (HasGBackgroundMaxKeep) {
      output.WriteRawTag(210, 241, 8);
      output.WriteString(GBackgroundMaxKeep);
    }
    if (HasShowTimestampsInConsole) {
      output.WriteRawTag(128, 226, 9);
      output.WriteBool(ShowTimestampsInConsole);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasNoSavePersonalInfo) {
      size += 1 + 1;
    }
    if (HasOobeTestModeEnabled) {
      size += 1 + 1;
    }
    if (HasInClientBeta) {
      size += 1 + 1;
    }
    if (HasIsSteamSideloaded) {
      size += 1 + 1;
    }
    if (HasPreferredMonitor) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PreferredMonitor);
    }
    if (HasSteamCefGpuBlocklistDisabled) {
      size += 1 + 1;
    }
    if (HasBigpictureWindowed) {
      size += 1 + 1;
    }
    if (HasDisplayName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (HasIsExternalDisplay) {
      size += 1 + 1;
    }
    if (HasSteamOsUnderscanLevel) {
      size += 1 + 4;
    }
    if (HasSteamOsUnderscanEnabled) {
      size += 1 + 1;
    }
    if (HasMinScaleFactor) {
      size += 1 + 4;
    }
    if (HasMaxScaleFactor) {
      size += 1 + 4;
    }
    if (HasAutoScaleFactor) {
      size += 1 + 4;
    }
    if (HasEnableTestUpdaters) {
      size += 1 + 1;
    }
    if (HasSmallMode) {
      size += 2 + 1;
    }
    if (HasSkipSteamvrInstallDialog) {
      size += 2 + 1;
    }
    if (HasAlwaysShowUserChooser) {
      size += 2 + 1;
    }
    if (HasShowFamilySharingNotifications) {
      size += 3 + 1;
    }
    if (HasOverlayFpsCounterCorner) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(OverlayFpsCounterCorner);
    }
    if (HasOverlayFpsCounterHighContrast) {
      size += 3 + 1;
    }
    if (overlayKey_ != null) {
      size += 3 + pb::CodedOutputStream.ComputeMessageSize(OverlayKey);
    }
    if (screenshotKey_ != null) {
      size += 3 + pb::CodedOutputStream.ComputeMessageSize(ScreenshotKey);
    }
    if (HasEnableOverlay) {
      size += 3 + 1;
    }
    if (HasDisableDesktopGameTheater) {
      size += 3 + 1;
    }
    if (HasEnableScreenshotNotification) {
      size += 3 + 1;
    }
    if (HasEnableScreenshotSound) {
      size += 3 + 1;
    }
    if (HasSaveUncompressedScreenshots) {
      size += 3 + 1;
    }
    if (HasScreenshotsPath) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(ScreenshotsPath);
    }
    if (HasDefaultPingRate) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(DefaultPingRate);
    }
    if (HasServerPingRate) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(ServerPingRate);
    }
    if (HasSteamNetworkingShareIp) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(SteamNetworkingShareIp);
    }
    if (HasWebBrowserHome) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(WebBrowserHome);
    }
    if (HasVoiceMicDeviceName) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(VoiceMicDeviceName);
    }
    if (HasVoiceMicInputGain) {
      size += 3 + 4;
    }
    if (HasVoiceSpeakerOutputGain) {
      size += 3 + 4;
    }
    if (HasVoicePushToTalkSetting) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(VoicePushToTalkSetting);
    }
    if (voicePushToTalkKey_ != null) {
      size += 3 + pb::CodedOutputStream.ComputeMessageSize(VoicePushToTalkKey);
    }
    if (HasOverlayToolbarListView) {
      size += 3 + 1;
    }
    if (HasAlwaysUseGamepaduiOverlay) {
      size += 3 + 1;
    }
    if (HasOverlayTabs) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(OverlayTabs);
    }
    if (HasOverlayScaleInterface) {
      size += 3 + 1;
    }
    if (HasSmoothScrollWebviews) {
      size += 3 + 1;
    }
    if (HasEnableGpuAcceleratedWebviews) {
      size += 3 + 1;
    }
    if (HasEnableHardwareVideoDecoding) {
      size += 3 + 1;
    }
    if (HasRunAtStartup) {
      size += 3 + 1;
    }
    if (HasEnableDpiScaling) {
      size += 3 + 1;
    }
    if (HasEnableMarketingMessages) {
      size += 3 + 1;
    }
    if (HasStartInBigPictureMode) {
      size += 3 + 1;
    }
    if (HasJumplistFlags) {
      size += 3 + pb::CodedOutputStream.ComputeUInt32Size(JumplistFlags);
    }
    if (HasEnableUiSounds) {
      size += 3 + 1;
    }
    if (HasDisableAllToasts) {
      size += 3 + 1;
    }
    if (HasDisableToastsInGame) {
      size += 3 + 1;
    }
    if (HasPlaySoundOnToast) {
      size += 3 + 1;
    }
    if (HasLibraryDisplaySize) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(LibraryDisplaySize);
    }
    if (HasLibraryWhatsNewShowOnlyProductUpdates) {
      size += 3 + 1;
    }
    if (HasShowStoreContentOnHome) {
      size += 3 + 1;
    }
    if (HasStartPage) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(StartPage);
    }
    if (HasLibraryLowBandwidthMode) {
      size += 3 + 1;
    }
    if (HasLibraryLowPerfMode) {
      size += 3 + 1;
    }
    if (HasLibraryDisableCommunityContent) {
      size += 3 + 1;
    }
    if (HasLibraryDisplayIconInGameList) {
      size += 3 + 1;
    }
    if (HasReadyToPlayIncludesStreaming) {
      size += 3 + 1;
    }
    if (HasShowSteamDeckInfo) {
      size += 3 + 1;
    }
    if (HasEnableShaderPrecache) {
      size += 3 + 1;
    }
    if (HasEnableShaderBackgroundProcessing) {
      size += 3 + 1;
    }
    if (HasShaderPrecachedSize) {
      size += 3 + pb::CodedOutputStream.ComputeUInt64Size(ShaderPrecachedSize);
    }
    if (HasNeedsSteamServiceRepair) {
      size += 3 + 1;
    }
    if (HasDownloadPeerContent) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(DownloadPeerContent);
    }
    if (HasDownloadRateBitsPerS) {
      size += 3 + 1;
    }
    if (HasRestrictAutoUpdates) {
      size += 3 + 1;
    }
    if (HasRestrictAutoUpdatesStart) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(RestrictAutoUpdatesStart);
    }
    if (HasRestrictAutoUpdatesEnd) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(RestrictAutoUpdatesEnd);
    }
    if (HasDownloadRegion) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(DownloadRegion);
    }
    if (HasDownloadWhileAppRunning) {
      size += 3 + 1;
    }
    if (HasDownloadThrottleWhileStreaming) {
      size += 3 + 1;
    }
    if (HasDownloadThrottleRate) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(DownloadThrottleRate);
    }
    if (HasCloudEnabled) {
      size += 3 + 1;
    }
    if (HasShowScreenshotManager) {
      size += 3 + 1;
    }
    if (HasMusicVolume) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(MusicVolume);
    }
    if (HasMusicPauseOnAppStart) {
      size += 3 + 1;
    }
    if (HasMusicPauseOnVoiceChat) {
      size += 3 + 1;
    }
    if (HasMusicDownloadHighQuality) {
      size += 3 + 1;
    }
    if (HasMusicPlaylistNotification) {
      size += 3 + 1;
    }
    if (HasBroadcastPermissions) {
      size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) BroadcastPermissions);
    }
    if (HasBroadcastOutputWidth) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(BroadcastOutputWidth);
    }
    if (HasBroadcastOutputHeight) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(BroadcastOutputHeight);
    }
    if (HasBroadcastBitrate) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(BroadcastBitrate);
    }
    if (HasBroadcastEncodingOption) {
      size += 3 + pb::CodedOutputStream.ComputeEnumSize((int) BroadcastEncodingOption);
    }
    if (HasBroadcastRecordAllVideo) {
      size += 3 + 1;
    }
    if (HasBroadcastRecordAllAudio) {
      size += 3 + 1;
    }
    if (HasBroadcastRecordMicrophone) {
      size += 3 + 1;
    }
    if (HasBroadcastShowUploadStats) {
      size += 3 + 1;
    }
    if (HasBroadcastShowLiveReminder) {
      size += 3 + 1;
    }
    if (HasBroadcastChatCorner) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(BroadcastChatCorner);
    }
    if (HasSteamInputConfiguratorErrorMsgEnable) {
      size += 3 + 1;
    }
    if (HasControllerGuideButtonFocusSteam) {
      size += 3 + 1;
    }
    if (HasControllerPs4Support) {
      size += 3 + 1;
    }
    if (HasControllerXboxSupport) {
      size += 3 + 1;
    }
    if (HasControllerXboxDriver) {
      size += 3 + 1;
    }
    if (HasControllerSwitchSupport) {
      size += 3 + 1;
    }
    if (HasControllerGenericSupport) {
      size += 3 + 1;
    }
    if (HasControllerPowerOffTimeout) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(ControllerPowerOffTimeout);
    }
    if (HasTurnOffControllerOnExit) {
      size += 3 + 1;
    }
    if (HasControllerCombineNintendoJoycons) {
      size += 3 + 1;
    }
    if (HasStartupMovieId) {
      size += 3 + pb::CodedOutputStream.ComputeUInt64Size(StartupMovieId);
    }
    if (HasStartupMovieLocalPath) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(StartupMovieLocalPath);
    }
    if (HasStartupMovieShuffle) {
      size += 3 + 1;
    }
    if (HasStartupMovieUsedForResume) {
      size += 3 + 1;
    }
    if (HasGameNotesEnableSpellcheck) {
      size += 3 + 1;
    }
    if (HasScreenshotItemsPerRow) {
      size += 3 + pb::CodedOutputStream.ComputeInt32Size(ScreenshotItemsPerRow);
    }
    if (HasGBackgroundEnabled) {
      size += 3 + 1;
    }
    if (HasGBackgroundPath) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(GBackgroundPath);
    }
    if (HasGBackgroundMaxKeep) {
      size += 3 + pb::CodedOutputStream.ComputeStringSize(GBackgroundMaxKeep);
    }
    if (HasShowTimestampsInConsole) {
      size += 3 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgClientSettings other) {
    if (other == null) {
      return;
    }
    if (other.HasNoSavePersonalInfo) {
      NoSavePersonalInfo = other.NoSavePersonalInfo;
    }
    if (other.HasOobeTestModeEnabled) {
      OobeTestModeEnabled = other.OobeTestModeEnabled;
    }
    if (other.HasInClientBeta) {
      InClientBeta = other.InClientBeta;
    }
    if (other.HasIsSteamSideloaded) {
      IsSteamSideloaded = other.IsSteamSideloaded;
    }
    if (other.HasPreferredMonitor) {
      PreferredMonitor = other.PreferredMonitor;
    }
    if (other.HasSteamCefGpuBlocklistDisabled) {
      SteamCefGpuBlocklistDisabled = other.SteamCefGpuBlocklistDisabled;
    }
    if (other.HasBigpictureWindowed) {
      BigpictureWindowed = other.BigpictureWindowed;
    }
    if (other.HasDisplayName) {
      DisplayName = other.DisplayName;
    }
    if (other.HasIsExternalDisplay) {
      IsExternalDisplay = other.IsExternalDisplay;
    }
    if (other.HasSteamOsUnderscanLevel) {
      SteamOsUnderscanLevel = other.SteamOsUnderscanLevel;
    }
    if (other.HasSteamOsUnderscanEnabled) {
      SteamOsUnderscanEnabled = other.SteamOsUnderscanEnabled;
    }
    if (other.HasMinScaleFactor) {
      MinScaleFactor = other.MinScaleFactor;
    }
    if (other.HasMaxScaleFactor) {
      MaxScaleFactor = other.MaxScaleFactor;
    }
    if (other.HasAutoScaleFactor) {
      AutoScaleFactor = other.AutoScaleFactor;
    }
    if (other.HasEnableTestUpdaters) {
      EnableTestUpdaters = other.EnableTestUpdaters;
    }
    if (other.HasSmallMode) {
      SmallMode = other.SmallMode;
    }
    if (other.HasSkipSteamvrInstallDialog) {
      SkipSteamvrInstallDialog = other.SkipSteamvrInstallDialog;
    }
    if (other.HasAlwaysShowUserChooser) {
      AlwaysShowUserChooser = other.AlwaysShowUserChooser;
    }
    if (other.HasShowFamilySharingNotifications) {
      ShowFamilySharingNotifications = other.ShowFamilySharingNotifications;
    }
    if (other.HasOverlayFpsCounterCorner) {
      OverlayFpsCounterCorner = other.OverlayFpsCounterCorner;
    }
    if (other.HasOverlayFpsCounterHighContrast) {
      OverlayFpsCounterHighContrast = other.OverlayFpsCounterHighContrast;
    }
    if (other.overlayKey_ != null) {
      if (overlayKey_ == null) {
        OverlayKey = new global::CMsgHotkey();
      }
      OverlayKey.MergeFrom(other.OverlayKey);
    }
    if (other.screenshotKey_ != null) {
      if (screenshotKey_ == null) {
        ScreenshotKey = new global::CMsgHotkey();
      }
      ScreenshotKey.MergeFrom(other.ScreenshotKey);
    }
    if (other.HasEnableOverlay) {
      EnableOverlay = other.EnableOverlay;
    }
    if (other.HasDisableDesktopGameTheater) {
      DisableDesktopGameTheater = other.DisableDesktopGameTheater;
    }
    if (other.HasEnableScreenshotNotification) {
      EnableScreenshotNotification = other.EnableScreenshotNotification;
    }
    if (other.HasEnableScreenshotSound) {
      EnableScreenshotSound = other.EnableScreenshotSound;
    }
    if (other.HasSaveUncompressedScreenshots) {
      SaveUncompressedScreenshots = other.SaveUncompressedScreenshots;
    }
    if (other.HasScreenshotsPath) {
      ScreenshotsPath = other.ScreenshotsPath;
    }
    if (other.HasDefaultPingRate) {
      DefaultPingRate = other.DefaultPingRate;
    }
    if (other.HasServerPingRate) {
      ServerPingRate = other.ServerPingRate;
    }
    if (other.HasSteamNetworkingShareIp) {
      SteamNetworkingShareIp = other.SteamNetworkingShareIp;
    }
    if (other.HasWebBrowserHome) {
      WebBrowserHome = other.WebBrowserHome;
    }
    if (other.HasVoiceMicDeviceName) {
      VoiceMicDeviceName = other.VoiceMicDeviceName;
    }
    if (other.HasVoiceMicInputGain) {
      VoiceMicInputGain = other.VoiceMicInputGain;
    }
    if (other.HasVoiceSpeakerOutputGain) {
      VoiceSpeakerOutputGain = other.VoiceSpeakerOutputGain;
    }
    if (other.HasVoicePushToTalkSetting) {
      VoicePushToTalkSetting = other.VoicePushToTalkSetting;
    }
    if (other.voicePushToTalkKey_ != null) {
      if (voicePushToTalkKey_ == null) {
        VoicePushToTalkKey = new global::CMsgHotkey();
      }
      VoicePushToTalkKey.MergeFrom(other.VoicePushToTalkKey);
    }
    if (other.HasOverlayToolbarListView) {
      OverlayToolbarListView = other.OverlayToolbarListView;
    }
    if (other.HasAlwaysUseGamepaduiOverlay) {
      AlwaysUseGamepaduiOverlay = other.AlwaysUseGamepaduiOverlay;
    }
    if (other.HasOverlayTabs) {
      OverlayTabs = other.OverlayTabs;
    }
    if (other.HasOverlayScaleInterface) {
      OverlayScaleInterface = other.OverlayScaleInterface;
    }
    if (other.HasSmoothScrollWebviews) {
      SmoothScrollWebviews = other.SmoothScrollWebviews;
    }
    if (other.HasEnableGpuAcceleratedWebviews) {
      EnableGpuAcceleratedWebviews = other.EnableGpuAcceleratedWebviews;
    }
    if (other.HasEnableHardwareVideoDecoding) {
      EnableHardwareVideoDecoding = other.EnableHardwareVideoDecoding;
    }
    if (other.HasRunAtStartup) {
      RunAtStartup = other.RunAtStartup;
    }
    if (other.HasEnableDpiScaling) {
      EnableDpiScaling = other.EnableDpiScaling;
    }
    if (other.HasEnableMarketingMessages) {
      EnableMarketingMessages = other.EnableMarketingMessages;
    }
    if (other.HasStartInBigPictureMode) {
      StartInBigPictureMode = other.StartInBigPictureMode;
    }
    if (other.HasJumplistFlags) {
      JumplistFlags = other.JumplistFlags;
    }
    if (other.HasEnableUiSounds) {
      EnableUiSounds = other.EnableUiSounds;
    }
    if (other.HasDisableAllToasts) {
      DisableAllToasts = other.DisableAllToasts;
    }
    if (other.HasDisableToastsInGame) {
      DisableToastsInGame = other.DisableToastsInGame;
    }
    if (other.HasPlaySoundOnToast) {
      PlaySoundOnToast = other.PlaySoundOnToast;
    }
    if (other.HasLibraryDisplaySize) {
      LibraryDisplaySize = other.LibraryDisplaySize;
    }
    if (other.HasLibraryWhatsNewShowOnlyProductUpdates) {
      LibraryWhatsNewShowOnlyProductUpdates = other.LibraryWhatsNewShowOnlyProductUpdates;
    }
    if (other.HasShowStoreContentOnHome) {
      ShowStoreContentOnHome = other.ShowStoreContentOnHome;
    }
    if (other.HasStartPage) {
      StartPage = other.StartPage;
    }
    if (other.HasLibraryLowBandwidthMode) {
      LibraryLowBandwidthMode = other.LibraryLowBandwidthMode;
    }
    if (other.HasLibraryLowPerfMode) {
      LibraryLowPerfMode = other.LibraryLowPerfMode;
    }
    if (other.HasLibraryDisableCommunityContent) {
      LibraryDisableCommunityContent = other.LibraryDisableCommunityContent;
    }
    if (other.HasLibraryDisplayIconInGameList) {
      LibraryDisplayIconInGameList = other.LibraryDisplayIconInGameList;
    }
    if (other.HasReadyToPlayIncludesStreaming) {
      ReadyToPlayIncludesStreaming = other.ReadyToPlayIncludesStreaming;
    }
    if (other.HasShowSteamDeckInfo) {
      ShowSteamDeckInfo = other.ShowSteamDeckInfo;
    }
    if (other.HasEnableShaderPrecache) {
      EnableShaderPrecache = other.EnableShaderPrecache;
    }
    if (other.HasEnableShaderBackgroundProcessing) {
      EnableShaderBackgroundProcessing = other.EnableShaderBackgroundProcessing;
    }
    if (other.HasShaderPrecachedSize) {
      ShaderPrecachedSize = other.ShaderPrecachedSize;
    }
    if (other.HasNeedsSteamServiceRepair) {
      NeedsSteamServiceRepair = other.NeedsSteamServiceRepair;
    }
    if (other.HasDownloadPeerContent) {
      DownloadPeerContent = other.DownloadPeerContent;
    }
    if (other.HasDownloadRateBitsPerS) {
      DownloadRateBitsPerS = other.DownloadRateBitsPerS;
    }
    if (other.HasRestrictAutoUpdates) {
      RestrictAutoUpdates = other.RestrictAutoUpdates;
    }
    if (other.HasRestrictAutoUpdatesStart) {
      RestrictAutoUpdatesStart = other.RestrictAutoUpdatesStart;
    }
    if (other.HasRestrictAutoUpdatesEnd) {
      RestrictAutoUpdatesEnd = other.RestrictAutoUpdatesEnd;
    }
    if (other.HasDownloadRegion) {
      DownloadRegion = other.DownloadRegion;
    }
    if (other.HasDownloadWhileAppRunning) {
      DownloadWhileAppRunning = other.DownloadWhileAppRunning;
    }
    if (other.HasDownloadThrottleWhileStreaming) {
      DownloadThrottleWhileStreaming = other.DownloadThrottleWhileStreaming;
    }
    if (other.HasDownloadThrottleRate) {
      DownloadThrottleRate = other.DownloadThrottleRate;
    }
    if (other.HasCloudEnabled) {
      CloudEnabled = other.CloudEnabled;
    }
    if (other.HasShowScreenshotManager) {
      ShowScreenshotManager = other.ShowScreenshotManager;
    }
    if (other.HasMusicVolume) {
      MusicVolume = other.MusicVolume;
    }
    if (other.HasMusicPauseOnAppStart) {
      MusicPauseOnAppStart = other.MusicPauseOnAppStart;
    }
    if (other.HasMusicPauseOnVoiceChat) {
      MusicPauseOnVoiceChat = other.MusicPauseOnVoiceChat;
    }
    if (other.HasMusicDownloadHighQuality) {
      MusicDownloadHighQuality = other.MusicDownloadHighQuality;
    }
    if (other.HasMusicPlaylistNotification) {
      MusicPlaylistNotification = other.MusicPlaylistNotification;
    }
    if (other.HasBroadcastPermissions) {
      BroadcastPermissions = other.BroadcastPermissions;
    }
    if (other.HasBroadcastOutputWidth) {
      BroadcastOutputWidth = other.BroadcastOutputWidth;
    }
    if (other.HasBroadcastOutputHeight) {
      BroadcastOutputHeight = other.BroadcastOutputHeight;
    }
    if (other.HasBroadcastBitrate) {
      BroadcastBitrate = other.BroadcastBitrate;
    }
    if (other.HasBroadcastEncodingOption) {
      BroadcastEncodingOption = other.BroadcastEncodingOption;
    }
    if (other.HasBroadcastRecordAllVideo) {
      BroadcastRecordAllVideo = other.BroadcastRecordAllVideo;
    }
    if (other.HasBroadcastRecordAllAudio) {
      BroadcastRecordAllAudio = other.BroadcastRecordAllAudio;
    }
    if (other.HasBroadcastRecordMicrophone) {
      BroadcastRecordMicrophone = other.BroadcastRecordMicrophone;
    }
    if (other.HasBroadcastShowUploadStats) {
      BroadcastShowUploadStats = other.BroadcastShowUploadStats;
    }
    if (other.HasBroadcastShowLiveReminder) {
      BroadcastShowLiveReminder = other.BroadcastShowLiveReminder;
    }
    if (other.HasBroadcastChatCorner) {
      BroadcastChatCorner = other.BroadcastChatCorner;
    }
    if (other.HasSteamInputConfiguratorErrorMsgEnable) {
      SteamInputConfiguratorErrorMsgEnable = other.SteamInputConfiguratorErrorMsgEnable;
    }
    if (other.HasControllerGuideButtonFocusSteam) {
      ControllerGuideButtonFocusSteam = other.ControllerGuideButtonFocusSteam;
    }
    if (other.HasControllerPs4Support) {
      ControllerPs4Support = other.ControllerPs4Support;
    }
    if (other.HasControllerXboxSupport) {
      ControllerXboxSupport = other.ControllerXboxSupport;
    }
    if (other.HasControllerXboxDriver) {
      ControllerXboxDriver = other.ControllerXboxDriver;
    }
    if (other.HasControllerSwitchSupport) {
      ControllerSwitchSupport = other.ControllerSwitchSupport;
    }
    if (other.HasControllerGenericSupport) {
      ControllerGenericSupport = other.ControllerGenericSupport;
    }
    if (other.HasControllerPowerOffTimeout) {
      ControllerPowerOffTimeout = other.ControllerPowerOffTimeout;
    }
    if (other.HasTurnOffControllerOnExit) {
      TurnOffControllerOnExit = other.TurnOffControllerOnExit;
    }
    if (other.HasControllerCombineNintendoJoycons) {
      ControllerCombineNintendoJoycons = other.ControllerCombineNintendoJoycons;
    }
    if (other.HasStartupMovieId) {
      StartupMovieId = other.StartupMovieId;
    }
    if (other.HasStartupMovieLocalPath) {
      StartupMovieLocalPath = other.StartupMovieLocalPath;
    }
    if (other.HasStartupMovieShuffle) {
      StartupMovieShuffle = other.StartupMovieShuffle;
    }
    if (other.HasStartupMovieUsedForResume) {
      StartupMovieUsedForResume = other.StartupMovieUsedForResume;
    }
    if (other.HasGameNotesEnableSpellcheck) {
      GameNotesEnableSpellcheck = other.GameNotesEnableSpellcheck;
    }
    if (other.HasScreenshotItemsPerRow) {
      ScreenshotItemsPerRow = other.ScreenshotItemsPerRow;
    }
    if (other.HasGBackgroundEnabled) {
      GBackgroundEnabled = other.GBackgroundEnabled;
    }
    if (other.HasGBackgroundPath) {
      GBackgroundPath = other.GBackgroundPath;
    }
    if (other.HasGBackgroundMaxKeep) {
      GBackgroundMaxKeep = other.GBackgroundMaxKeep;
    }
    if (other.HasShowTimestampsInConsole) {
      ShowTimestampsInConsole = other.ShowTimestampsInConsole;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NoSavePersonalInfo = input.ReadBool();
          break;
        }
        case 16: {
          OobeTestModeEnabled = input.ReadBool();
          break;
        }
        case 24: {
          InClientBeta = input.ReadBool();
          break;
        }
        case 32: {
          IsSteamSideloaded = input.ReadBool();
          break;
        }
        case 42: {
          PreferredMonitor = input.ReadString();
          break;
        }
        case 48: {
          SteamCefGpuBlocklistDisabled = input.ReadBool();
          break;
        }
        case 56: {
          BigpictureWindowed = input.ReadBool();
          break;
        }
        case 66: {
          DisplayName = input.ReadString();
          break;
        }
        case 72: {
          IsExternalDisplay = input.ReadBool();
          break;
        }
        case 85: {
          SteamOsUnderscanLevel = input.ReadFloat();
          break;
        }
        case 88: {
          SteamOsUnderscanEnabled = input.ReadBool();
          break;
        }
        case 101: {
          MinScaleFactor = input.ReadFloat();
          break;
        }
        case 109: {
          MaxScaleFactor = input.ReadFloat();
          break;
        }
        case 117: {
          AutoScaleFactor = input.ReadFloat();
          break;
        }
        case 120: {
          EnableTestUpdaters = input.ReadBool();
          break;
        }
        case 128: {
          SmallMode = input.ReadBool();
          break;
        }
        case 152: {
          SkipSteamvrInstallDialog = input.ReadBool();
          break;
        }
        case 160: {
          AlwaysShowUserChooser = input.ReadBool();
          break;
        }
        case 24000: {
          ShowFamilySharingNotifications = input.ReadBool();
          break;
        }
        case 32000: {
          OverlayFpsCounterCorner = input.ReadInt32();
          break;
        }
        case 32008: {
          OverlayFpsCounterHighContrast = input.ReadBool();
          break;
        }
        case 32018: {
          if (overlayKey_ == null) {
            OverlayKey = new global::CMsgHotkey();
          }
          input.ReadMessage(OverlayKey);
          break;
        }
        case 32026: {
          if (screenshotKey_ == null) {
            ScreenshotKey = new global::CMsgHotkey();
          }
          input.ReadMessage(ScreenshotKey);
          break;
        }
        case 32032: {
          EnableOverlay = input.ReadBool();
          break;
        }
        case 32040: {
          DisableDesktopGameTheater = input.ReadBool();
          break;
        }
        case 32048: {
          EnableScreenshotNotification = input.ReadBool();
          break;
        }
        case 32056: {
          EnableScreenshotSound = input.ReadBool();
          break;
        }
        case 32064: {
          SaveUncompressedScreenshots = input.ReadBool();
          break;
        }
        case 32074: {
          ScreenshotsPath = input.ReadString();
          break;
        }
        case 32080: {
          DefaultPingRate = input.ReadInt32();
          break;
        }
        case 32088: {
          ServerPingRate = input.ReadInt32();
          break;
        }
        case 32096: {
          SteamNetworkingShareIp = input.ReadInt32();
          break;
        }
        case 32106: {
          WebBrowserHome = input.ReadString();
          break;
        }
        case 32114: {
          VoiceMicDeviceName = input.ReadString();
          break;
        }
        case 32125: {
          VoiceMicInputGain = input.ReadFloat();
          break;
        }
        case 32133: {
          VoiceSpeakerOutputGain = input.ReadFloat();
          break;
        }
        case 32136: {
          VoicePushToTalkSetting = input.ReadInt32();
          break;
        }
        case 32146: {
          if (voicePushToTalkKey_ == null) {
            VoicePushToTalkKey = new global::CMsgHotkey();
          }
          input.ReadMessage(VoicePushToTalkKey);
          break;
        }
        case 32152: {
          OverlayToolbarListView = input.ReadBool();
          break;
        }
        case 32160: {
          AlwaysUseGamepaduiOverlay = input.ReadBool();
          break;
        }
        case 32170: {
          OverlayTabs = input.ReadString();
          break;
        }
        case 32176: {
          OverlayScaleInterface = input.ReadBool();
          break;
        }
        case 40000: {
          SmoothScrollWebviews = input.ReadBool();
          break;
        }
        case 40008: {
          EnableGpuAcceleratedWebviews = input.ReadBool();
          break;
        }
        case 40024: {
          EnableHardwareVideoDecoding = input.ReadBool();
          break;
        }
        case 40032: {
          RunAtStartup = input.ReadBool();
          break;
        }
        case 40040: {
          EnableDpiScaling = input.ReadBool();
          break;
        }
        case 40048: {
          EnableMarketingMessages = input.ReadBool();
          break;
        }
        case 40056: {
          StartInBigPictureMode = input.ReadBool();
          break;
        }
        case 40064: {
          JumplistFlags = input.ReadUInt32();
          break;
        }
        case 40072: {
          EnableUiSounds = input.ReadBool();
          break;
        }
        case 48000: {
          DisableAllToasts = input.ReadBool();
          break;
        }
        case 48008: {
          DisableToastsInGame = input.ReadBool();
          break;
        }
        case 48016: {
          PlaySoundOnToast = input.ReadBool();
          break;
        }
        case 56000: {
          LibraryDisplaySize = input.ReadInt32();
          break;
        }
        case 56008: {
          LibraryWhatsNewShowOnlyProductUpdates = input.ReadBool();
          break;
        }
        case 56016: {
          ShowStoreContentOnHome = input.ReadBool();
          break;
        }
        case 56026: {
          StartPage = input.ReadString();
          break;
        }
        case 56032: {
          LibraryLowBandwidthMode = input.ReadBool();
          break;
        }
        case 56040: {
          LibraryLowPerfMode = input.ReadBool();
          break;
        }
        case 56048: {
          LibraryDisableCommunityContent = input.ReadBool();
          break;
        }
        case 56056: {
          LibraryDisplayIconInGameList = input.ReadBool();
          break;
        }
        case 56064: {
          ReadyToPlayIncludesStreaming = input.ReadBool();
          break;
        }
        case 56072: {
          ShowSteamDeckInfo = input.ReadBool();
          break;
        }
        case 64000: {
          EnableShaderPrecache = input.ReadBool();
          break;
        }
        case 64008: {
          EnableShaderBackgroundProcessing = input.ReadBool();
          break;
        }
        case 64016: {
          ShaderPrecachedSize = input.ReadUInt64();
          break;
        }
        case 64024: {
          NeedsSteamServiceRepair = input.ReadBool();
          break;
        }
        case 64032: {
          DownloadPeerContent = input.ReadInt32();
          break;
        }
        case 64040: {
          DownloadRateBitsPerS = input.ReadBool();
          break;
        }
        case 64048: {
          RestrictAutoUpdates = input.ReadBool();
          break;
        }
        case 64056: {
          RestrictAutoUpdatesStart = input.ReadInt32();
          break;
        }
        case 64064: {
          RestrictAutoUpdatesEnd = input.ReadInt32();
          break;
        }
        case 64072: {
          DownloadRegion = input.ReadInt32();
          break;
        }
        case 64080: {
          DownloadWhileAppRunning = input.ReadBool();
          break;
        }
        case 64088: {
          DownloadThrottleWhileStreaming = input.ReadBool();
          break;
        }
        case 64096: {
          DownloadThrottleRate = input.ReadInt32();
          break;
        }
        case 80000: {
          CloudEnabled = input.ReadBool();
          break;
        }
        case 80008: {
          ShowScreenshotManager = input.ReadBool();
          break;
        }
        case 88000: {
          MusicVolume = input.ReadInt32();
          break;
        }
        case 88008: {
          MusicPauseOnAppStart = input.ReadBool();
          break;
        }
        case 88016: {
          MusicPauseOnVoiceChat = input.ReadBool();
          break;
        }
        case 88024: {
          MusicDownloadHighQuality = input.ReadBool();
          break;
        }
        case 88032: {
          MusicPlaylistNotification = input.ReadBool();
          break;
        }
        case 96000: {
          BroadcastPermissions = (global::EBroadcastPermission) input.ReadEnum();
          break;
        }
        case 96008: {
          BroadcastOutputWidth = input.ReadInt32();
          break;
        }
        case 96016: {
          BroadcastOutputHeight = input.ReadInt32();
          break;
        }
        case 96024: {
          BroadcastBitrate = input.ReadInt32();
          break;
        }
        case 96032: {
          BroadcastEncodingOption = (global::EBroadcastEncoderSetting) input.ReadEnum();
          break;
        }
        case 96040: {
          BroadcastRecordAllVideo = input.ReadBool();
          break;
        }
        case 96048: {
          BroadcastRecordAllAudio = input.ReadBool();
          break;
        }
        case 96056: {
          BroadcastRecordMicrophone = input.ReadBool();
          break;
        }
        case 96064: {
          BroadcastShowUploadStats = input.ReadBool();
          break;
        }
        case 96072: {
          BroadcastShowLiveReminder = input.ReadBool();
          break;
        }
        case 96080: {
          BroadcastChatCorner = input.ReadInt32();
          break;
        }
        case 112008: {
          SteamInputConfiguratorErrorMsgEnable = input.ReadBool();
          break;
        }
        case 112016: {
          ControllerGuideButtonFocusSteam = input.ReadBool();
          break;
        }
        case 112024: {
          ControllerPs4Support = input.ReadBool();
          break;
        }
        case 112032: {
          ControllerXboxSupport = input.ReadBool();
          break;
        }
        case 112040: {
          ControllerXboxDriver = input.ReadBool();
          break;
        }
        case 112048: {
          ControllerSwitchSupport = input.ReadBool();
          break;
        }
        case 112056: {
          ControllerGenericSupport = input.ReadBool();
          break;
        }
        case 112064: {
          ControllerPowerOffTimeout = input.ReadInt32();
          break;
        }
        case 112072: {
          TurnOffControllerOnExit = input.ReadBool();
          break;
        }
        case 112080: {
          ControllerCombineNintendoJoycons = input.ReadBool();
          break;
        }
        case 128000: {
          StartupMovieId = input.ReadUInt64();
          break;
        }
        case 128010: {
          StartupMovieLocalPath = input.ReadString();
          break;
        }
        case 128016: {
          StartupMovieShuffle = input.ReadBool();
          break;
        }
        case 128024: {
          StartupMovieUsedForResume = input.ReadBool();
          break;
        }
        case 136008: {
          GameNotesEnableSpellcheck = input.ReadBool();
          break;
        }
        case 144000: {
          ScreenshotItemsPerRow = input.ReadInt32();
          break;
        }
        case 145600: {
          GBackgroundEnabled = input.ReadBool();
          break;
        }
        case 145610: {
          GBackgroundPath = input.ReadString();
          break;
        }
        case 145618: {
          GBackgroundMaxKeep = input.ReadString();
          break;
        }
        case 160000: {
          ShowTimestampsInConsole = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          NoSavePersonalInfo = input.ReadBool();
          break;
        }
        case 16: {
          OobeTestModeEnabled = input.ReadBool();
          break;
        }
        case 24: {
          InClientBeta = input.ReadBool();
          break;
        }
        case 32: {
          IsSteamSideloaded = input.ReadBool();
          break;
        }
        case 42: {
          PreferredMonitor = input.ReadString();
          break;
        }
        case 48: {
          SteamCefGpuBlocklistDisabled = input.ReadBool();
          break;
        }
        case 56: {
          BigpictureWindowed = input.ReadBool();
          break;
        }
        case 66: {
          DisplayName = input.ReadString();
          break;
        }
        case 72: {
          IsExternalDisplay = input.ReadBool();
          break;
        }
        case 85: {
          SteamOsUnderscanLevel = input.ReadFloat();
          break;
        }
        case 88: {
          SteamOsUnderscanEnabled = input.ReadBool();
          break;
        }
        case 101: {
          MinScaleFactor = input.ReadFloat();
          break;
        }
        case 109: {
          MaxScaleFactor = input.ReadFloat();
          break;
        }
        case 117: {
          AutoScaleFactor = input.ReadFloat();
          break;
        }
        case 120: {
          EnableTestUpdaters = input.ReadBool();
          break;
        }
        case 128: {
          SmallMode = input.ReadBool();
          break;
        }
        case 152: {
          SkipSteamvrInstallDialog = input.ReadBool();
          break;
        }
        case 160: {
          AlwaysShowUserChooser = input.ReadBool();
          break;
        }
        case 24000: {
          ShowFamilySharingNotifications = input.ReadBool();
          break;
        }
        case 32000: {
          OverlayFpsCounterCorner = input.ReadInt32();
          break;
        }
        case 32008: {
          OverlayFpsCounterHighContrast = input.ReadBool();
          break;
        }
        case 32018: {
          if (overlayKey_ == null) {
            OverlayKey = new global::CMsgHotkey();
          }
          input.ReadMessage(OverlayKey);
          break;
        }
        case 32026: {
          if (screenshotKey_ == null) {
            ScreenshotKey = new global::CMsgHotkey();
          }
          input.ReadMessage(ScreenshotKey);
          break;
        }
        case 32032: {
          EnableOverlay = input.ReadBool();
          break;
        }
        case 32040: {
          DisableDesktopGameTheater = input.ReadBool();
          break;
        }
        case 32048: {
          EnableScreenshotNotification = input.ReadBool();
          break;
        }
        case 32056: {
          EnableScreenshotSound = input.ReadBool();
          break;
        }
        case 32064: {
          SaveUncompressedScreenshots = input.ReadBool();
          break;
        }
        case 32074: {
          ScreenshotsPath = input.ReadString();
          break;
        }
        case 32080: {
          DefaultPingRate = input.ReadInt32();
          break;
        }
        case 32088: {
          ServerPingRate = input.ReadInt32();
          break;
        }
        case 32096: {
          SteamNetworkingShareIp = input.ReadInt32();
          break;
        }
        case 32106: {
          WebBrowserHome = input.ReadString();
          break;
        }
        case 32114: {
          VoiceMicDeviceName = input.ReadString();
          break;
        }
        case 32125: {
          VoiceMicInputGain = input.ReadFloat();
          break;
        }
        case 32133: {
          VoiceSpeakerOutputGain = input.ReadFloat();
          break;
        }
        case 32136: {
          VoicePushToTalkSetting = input.ReadInt32();
          break;
        }
        case 32146: {
          if (voicePushToTalkKey_ == null) {
            VoicePushToTalkKey = new global::CMsgHotkey();
          }
          input.ReadMessage(VoicePushToTalkKey);
          break;
        }
        case 32152: {
          OverlayToolbarListView = input.ReadBool();
          break;
        }
        case 32160: {
          AlwaysUseGamepaduiOverlay = input.ReadBool();
          break;
        }
        case 32170: {
          OverlayTabs = input.ReadString();
          break;
        }
        case 32176: {
          OverlayScaleInterface = input.ReadBool();
          break;
        }
        case 40000: {
          SmoothScrollWebviews = input.ReadBool();
          break;
        }
        case 40008: {
          EnableGpuAcceleratedWebviews = input.ReadBool();
          break;
        }
        case 40024: {
          EnableHardwareVideoDecoding = input.ReadBool();
          break;
        }
        case 40032: {
          RunAtStartup = input.ReadBool();
          break;
        }
        case 40040: {
          EnableDpiScaling = input.ReadBool();
          break;
        }
        case 40048: {
          EnableMarketingMessages = input.ReadBool();
          break;
        }
        case 40056: {
          StartInBigPictureMode = input.ReadBool();
          break;
        }
        case 40064: {
          JumplistFlags = input.ReadUInt32();
          break;
        }
        case 40072: {
          EnableUiSounds = input.ReadBool();
          break;
        }
        case 48000: {
          DisableAllToasts = input.ReadBool();
          break;
        }
        case 48008: {
          DisableToastsInGame = input.ReadBool();
          break;
        }
        case 48016: {
          PlaySoundOnToast = input.ReadBool();
          break;
        }
        case 56000: {
          LibraryDisplaySize = input.ReadInt32();
          break;
        }
        case 56008: {
          LibraryWhatsNewShowOnlyProductUpdates = input.ReadBool();
          break;
        }
        case 56016: {
          ShowStoreContentOnHome = input.ReadBool();
          break;
        }
        case 56026: {
          StartPage = input.ReadString();
          break;
        }
        case 56032: {
          LibraryLowBandwidthMode = input.ReadBool();
          break;
        }
        case 56040: {
          LibraryLowPerfMode = input.ReadBool();
          break;
        }
        case 56048: {
          LibraryDisableCommunityContent = input.ReadBool();
          break;
        }
        case 56056: {
          LibraryDisplayIconInGameList = input.ReadBool();
          break;
        }
        case 56064: {
          ReadyToPlayIncludesStreaming = input.ReadBool();
          break;
        }
        case 56072: {
          ShowSteamDeckInfo = input.ReadBool();
          break;
        }
        case 64000: {
          EnableShaderPrecache = input.ReadBool();
          break;
        }
        case 64008: {
          EnableShaderBackgroundProcessing = input.ReadBool();
          break;
        }
        case 64016: {
          ShaderPrecachedSize = input.ReadUInt64();
          break;
        }
        case 64024: {
          NeedsSteamServiceRepair = input.ReadBool();
          break;
        }
        case 64032: {
          DownloadPeerContent = input.ReadInt32();
          break;
        }
        case 64040: {
          DownloadRateBitsPerS = input.ReadBool();
          break;
        }
        case 64048: {
          RestrictAutoUpdates = input.ReadBool();
          break;
        }
        case 64056: {
          RestrictAutoUpdatesStart = input.ReadInt32();
          break;
        }
        case 64064: {
          RestrictAutoUpdatesEnd = input.ReadInt32();
          break;
        }
        case 64072: {
          DownloadRegion = input.ReadInt32();
          break;
        }
        case 64080: {
          DownloadWhileAppRunning = input.ReadBool();
          break;
        }
        case 64088: {
          DownloadThrottleWhileStreaming = input.ReadBool();
          break;
        }
        case 64096: {
          DownloadThrottleRate = input.ReadInt32();
          break;
        }
        case 80000: {
          CloudEnabled = input.ReadBool();
          break;
        }
        case 80008: {
          ShowScreenshotManager = input.ReadBool();
          break;
        }
        case 88000: {
          MusicVolume = input.ReadInt32();
          break;
        }
        case 88008: {
          MusicPauseOnAppStart = input.ReadBool();
          break;
        }
        case 88016: {
          MusicPauseOnVoiceChat = input.ReadBool();
          break;
        }
        case 88024: {
          MusicDownloadHighQuality = input.ReadBool();
          break;
        }
        case 88032: {
          MusicPlaylistNotification = input.ReadBool();
          break;
        }
        case 96000: {
          BroadcastPermissions = (global::EBroadcastPermission) input.ReadEnum();
          break;
        }
        case 96008: {
          BroadcastOutputWidth = input.ReadInt32();
          break;
        }
        case 96016: {
          BroadcastOutputHeight = input.ReadInt32();
          break;
        }
        case 96024: {
          BroadcastBitrate = input.ReadInt32();
          break;
        }
        case 96032: {
          BroadcastEncodingOption = (global::EBroadcastEncoderSetting) input.ReadEnum();
          break;
        }
        case 96040: {
          BroadcastRecordAllVideo = input.ReadBool();
          break;
        }
        case 96048: {
          BroadcastRecordAllAudio = input.ReadBool();
          break;
        }
        case 96056: {
          BroadcastRecordMicrophone = input.ReadBool();
          break;
        }
        case 96064: {
          BroadcastShowUploadStats = input.ReadBool();
          break;
        }
        case 96072: {
          BroadcastShowLiveReminder = input.ReadBool();
          break;
        }
        case 96080: {
          BroadcastChatCorner = input.ReadInt32();
          break;
        }
        case 112008: {
          SteamInputConfiguratorErrorMsgEnable = input.ReadBool();
          break;
        }
        case 112016: {
          ControllerGuideButtonFocusSteam = input.ReadBool();
          break;
        }
        case 112024: {
          ControllerPs4Support = input.ReadBool();
          break;
        }
        case 112032: {
          ControllerXboxSupport = input.ReadBool();
          break;
        }
        case 112040: {
          ControllerXboxDriver = input.ReadBool();
          break;
        }
        case 112048: {
          ControllerSwitchSupport = input.ReadBool();
          break;
        }
        case 112056: {
          ControllerGenericSupport = input.ReadBool();
          break;
        }
        case 112064: {
          ControllerPowerOffTimeout = input.ReadInt32();
          break;
        }
        case 112072: {
          TurnOffControllerOnExit = input.ReadBool();
          break;
        }
        case 112080: {
          ControllerCombineNintendoJoycons = input.ReadBool();
          break;
        }
        case 128000: {
          StartupMovieId = input.ReadUInt64();
          break;
        }
        case 128010: {
          StartupMovieLocalPath = input.ReadString();
          break;
        }
        case 128016: {
          StartupMovieShuffle = input.ReadBool();
          break;
        }
        case 128024: {
          StartupMovieUsedForResume = input.ReadBool();
          break;
        }
        case 136008: {
          GameNotesEnableSpellcheck = input.ReadBool();
          break;
        }
        case 144000: {
          ScreenshotItemsPerRow = input.ReadInt32();
          break;
        }
        case 145600: {
          GBackgroundEnabled = input.ReadBool();
          break;
        }
        case 145610: {
          GBackgroundPath = input.ReadString();
          break;
        }
        case 145618: {
          GBackgroundMaxKeep = input.ReadString();
          break;
        }
        case 160000: {
          ShowTimestampsInConsole = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
