// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_gameservers.steamclient.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from steammessages_gameservers.steamclient.proto</summary>
public static partial class SteammessagesGameserversSteamclientReflection {

  #region Descriptor
  /// <summary>File descriptor for steammessages_gameservers.steamclient.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SteammessagesGameserversSteamclientReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CitzdGVhbW1lc3NhZ2VzX2dhbWVzZXJ2ZXJzLnN0ZWFtY2xpZW50LnByb3Rv",
          "GhhzdGVhbW1lc3NhZ2VzX2Jhc2UucHJvdG8aLHN0ZWFtbWVzc2FnZXNfdW5p",
          "ZmllZF9iYXNlLnN0ZWFtY2xpZW50LnByb3RvIp8BCiJDR2FtZVNlcnZlcnNf",
          "R2V0U2VydmVyTGlzdF9SZXF1ZXN0EigKBmZpbHRlchgBIAEoCUIYgrUYFFF1",
          "ZXJ5IGZpbHRlciBzdHJpbmcuEk8KBWxpbWl0GAIgASgNOgMxMDBCO4K1GDdU",
          "aGUgbWF4aW11bSBudW1iZXIgb2Ygc2VydmVycyB0byByZXR1cm4gaW4gdGhl",
          "IHJlc3BvbnNlIuADCiNDR2FtZVNlcnZlcnNfR2V0U2VydmVyTGlzdF9SZXNw",
          "b25zZRJlCgdzZXJ2ZXJzGAEgAygLMisuQ0dhbWVTZXJ2ZXJzX0dldFNlcnZl",
          "ckxpc3RfUmVzcG9uc2UuU2VydmVyQieCtRgjTGlzdCBvZiBzZXJ2ZXJzIG1h",
          "dGNoaW5nIHRoZSBmaWx0ZXIa0QIKBlNlcnZlchIwCgRhZGRyGAEgASgJQiKC",
          "tRgeVGhlIHNlcnZlcidzIElQIGFuZCBxdWVyeSBwb3J0EhAKCGdhbWVwb3J0",
          "GAIgASgNEhAKCHNwZWNwb3J0GAMgASgNEg8KB3N0ZWFtaWQYBCABKAYSDAoE",
          "bmFtZRgFIAEoCRINCgVhcHBpZBgGIAEoDRIPCgdnYW1lZGlyGAcgASgJEg8K",
          "B3ZlcnNpb24YCCABKAkSDwoHcHJvZHVjdBgJIAEoCRIOCgZyZWdpb24YCiAB",
          "KAUSDwoHcGxheWVycxgLIAEoBRITCgttYXhfcGxheWVycxgMIAEoBRIMCgRi",
          "b3RzGA0gASgFEgsKA21hcBgOIAEoCRIOCgZzZWN1cmUYDyABKAgSEQoJZGVk",
          "aWNhdGVkGBAgASgIEgoKAm9zGBEgASgJEhAKCGdhbWV0eXBlGBIgASgJIkAK",
          "KkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJTdGVhbUlEc0J5SVBfUmVxdWVzdBIS",
          "CgpzZXJ2ZXJfaXBzGAEgAygJIpABCiVDR2FtZVNlcnZlcnNfSVBzV2l0aFN0",
          "ZWFtSURzX1Jlc3BvbnNlEj4KB3NlcnZlcnMYASADKAsyLS5DR2FtZVNlcnZl",
          "cnNfSVBzV2l0aFN0ZWFtSURzX1Jlc3BvbnNlLlNlcnZlchonCgZTZXJ2ZXIS",
          "DAoEYWRkchgBIAEoCRIPCgdzdGVhbWlkGAIgASgGIkUKKkNHYW1lU2VydmVy",
          "c19HZXRTZXJ2ZXJJUHNCeVN0ZWFtSURfUmVxdWVzdBIXCg9zZXJ2ZXJfc3Rl",
          "YW1pZHMYASADKAYilwMKIkNHYW1lU2VydmVyc19RdWVyeUJ5RmFrZUlQX1Jl",
          "cXVlc3QSLwoHZmFrZV9pcBgBIAEoDUIegrUYGkZha2VJUCBvZiBzZXJ2ZXIg",
          "dG8gcXVlcnkuEjQKCWZha2VfcG9ydBgCIAEoDUIhgrUYHUZha2UgcG9ydCBv",
          "ZiBzZXJ2ZXIgdG8gcXVlcnkuEkkKBmFwcF9pZBgDIAEoDUI5grUYNUFwcElE",
          "IHRvIHVzZS4gIEVhY2ggQXBwSUQgaGFzIGl0cyBvd24gRmFrZUlQIGFkZHJl",
          "c3MuEmoKCnF1ZXJ5X3R5cGUYBCABKA4yLi5DR2FtZVNlcnZlcnNfUXVlcnlC",
          "eUZha2VJUF9SZXF1ZXN0LkVRdWVyeVR5cGU6DVF1ZXJ5X0ludmFsaWRCF4K1",
          "GBNXaGF0IHR5cGUgb2YgcXVlcnk/IlMKCkVRdWVyeVR5cGUSEQoNUXVlcnlf",
          "SW52YWxpZBAAEg4KClF1ZXJ5X1BpbmcQARIRCg1RdWVyeV9QbGF5ZXJzEAIS",
          "DwoLUXVlcnlfUnVsZXMQAyLQAwobQ01zZ0dhbWVTZXJ2ZXJQaW5nUXVlcnlE",
          "YXRhEiEKCXNlcnZlcl9pcBgBIAEoCzIOLkNNc2dJUEFkZHJlc3MSEgoKcXVl",
          "cnlfcG9ydBgCIAEoDRIRCglnYW1lX3BvcnQYAyABKA0SFgoOc3BlY3RhdG9y",
          "X3BvcnQYBCABKA0SHQoVc3BlY3RhdG9yX3NlcnZlcl9uYW1lGAUgASgJEhMK",
          "C3NlcnZlcl9uYW1lGAYgASgJEg8KB3N0ZWFtaWQYByABKAYSDgoGYXBwX2lk",
          "GAggASgNEg8KB2dhbWVkaXIYCSABKAkSCwoDbWFwGAogASgJEhgKEGdhbWVf",
          "ZGVzY3JpcHRpb24YCyABKAkSEAoIZ2FtZXR5cGUYDCABKAkSEwoLbnVtX3Bs",
          "YXllcnMYDSABKA0SEwoLbWF4X3BsYXllcnMYDiABKA0SEAoIbnVtX2JvdHMY",
          "DyABKA0SEAoIcGFzc3dvcmQYECABKAgSDgoGc2VjdXJlGBEgASgIEhEKCWRl",
          "ZGljYXRlZBgSIAEoCBIPCgd2ZXJzaW9uGBMgASgJEhEKCXNkcl9wb3BpZBgU",
          "IAEoBxIbChNzZHJfbG9jYXRpb25fc3RyaW5nGBUgASgJIpUBCh5DTXNnR2Ft",
          "ZVNlcnZlclBsYXllcnNRdWVyeURhdGESNwoHcGxheWVycxgBIAMoCzImLkNN",
          "c2dHYW1lU2VydmVyUGxheWVyc1F1ZXJ5RGF0YS5QbGF5ZXIaOgoGUGxheWVy",
          "EgwKBG5hbWUYASABKAkSDQoFc2NvcmUYAiABKA0SEwoLdGltZV9wbGF5ZWQY",
          "AyABKA0idgocQ01zZ0dhbWVTZXJ2ZXJSdWxlc1F1ZXJ5RGF0YRIxCgVydWxl",
          "cxgBIAMoCzIiLkNNc2dHYW1lU2VydmVyUnVsZXNRdWVyeURhdGEuUnVsZRoj",
          "CgRSdWxlEgwKBHJ1bGUYASABKAkSDQoFdmFsdWUYAiABKAkiwgEKJUNHYW1l",
          "U2VydmVyc19HYW1lU2VydmVyUXVlcnlfUmVzcG9uc2USLwoJcGluZ19kYXRh",
          "GAEgASgLMhwuQ01zZ0dhbWVTZXJ2ZXJQaW5nUXVlcnlEYXRhEjUKDHBsYXll",
          "cnNfZGF0YRgCIAEoCzIfLkNNc2dHYW1lU2VydmVyUGxheWVyc1F1ZXJ5RGF0",
          "YRIxCgpydWxlc19kYXRhGAMgASgLMh0uQ01zZ0dhbWVTZXJ2ZXJSdWxlc1F1",
          "ZXJ5RGF0YSIqCihHYW1lU2VydmVyQ2xpZW50X1F1ZXJ5U2VydmVyRGF0YV9S",
          "ZXF1ZXN0IsYBCilHYW1lU2VydmVyQ2xpZW50X1F1ZXJ5U2VydmVyRGF0YV9S",
          "ZXNwb25zZRIvCglwaW5nX2RhdGEYASABKAsyHC5DTXNnR2FtZVNlcnZlclBp",
          "bmdRdWVyeURhdGESNQoMcGxheWVyc19kYXRhGAIgASgLMh8uQ01zZ0dhbWVT",
          "ZXJ2ZXJQbGF5ZXJzUXVlcnlEYXRhEjEKCnJ1bGVzX2RhdGEYAyABKAsyHS5D",
          "TXNnR2FtZVNlcnZlclJ1bGVzUXVlcnlEYXRhMr4FCgtHYW1lU2VydmVycxKM",
          "AQoNR2V0U2VydmVyTGlzdBIjLkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJMaXN0",
          "X1JlcXVlc3QaJC5DR2FtZVNlcnZlcnNfR2V0U2VydmVyTGlzdF9SZXNwb25z",
          "ZSIwgrUYLEdldHMgYSBsaXN0IG9mIHNlcnZlcnMgZ2l2ZW4gYSBmaWx0ZXIg",
          "c3RyaW5nEqQBChVHZXRTZXJ2ZXJTdGVhbUlEc0J5SVASKy5DR2FtZVNlcnZl",
          "cnNfR2V0U2VydmVyU3RlYW1JRHNCeUlQX1JlcXVlc3QaJi5DR2FtZVNlcnZl",
          "cnNfSVBzV2l0aFN0ZWFtSURzX1Jlc3BvbnNlIjaCtRgyR2V0cyBhIGxpc3Qg",
          "b2Ygc2VydmVyIFN0ZWFtSURzIGdpdmVuIGEgbGlzdCBvZiBJUHMSrQEKFUdl",
          "dFNlcnZlcklQc0J5U3RlYW1JRBIrLkNHYW1lU2VydmVyc19HZXRTZXJ2ZXJJ",
          "UHNCeVN0ZWFtSURfUmVxdWVzdBomLkNHYW1lU2VydmVyc19JUHNXaXRoU3Rl",
          "YW1JRHNfUmVzcG9uc2UiP4K1GDtHZXRzIGEgbGlzdCBvZiBzZXJ2ZXIgSVAg",
          "YWRkcmVzc2VzIGdpdmVuIGEgbGlzdCBvZiBTdGVhbUlEcxKQAQoNUXVlcnlC",
          "eUZha2VJUBIjLkNHYW1lU2VydmVyc19RdWVyeUJ5RmFrZUlQX1JlcXVlc3Qa",
          "Ji5DR2FtZVNlcnZlcnNfR2FtZVNlcnZlclF1ZXJ5X1Jlc3BvbnNlIjKCtRgu",
          "UGVyZm9ybSBhIHF1ZXJ5IG9uIGEgc3BlY2lmaWMgc2VydmVyIGJ5IEZha2VJ",
          "UBo2grUYMkEgc2VydmljZSBmb3Igc2VhcmNoaW5nIGFuZCBtYW5hZ2luZyBn",
          "YW1lIHNlcnZlcnMuMukBChBHYW1lU2VydmVyQ2xpZW50EpcBCg9RdWVyeVNl",
          "cnZlckRhdGESKS5HYW1lU2VydmVyQ2xpZW50X1F1ZXJ5U2VydmVyRGF0YV9S",
          "ZXF1ZXN0GiouR2FtZVNlcnZlckNsaWVudF9RdWVyeVNlcnZlckRhdGFfUmVz",
          "cG9uc2UiLYK1GClTdGVhbSBpcyBhc2tpbmcgYSBnYW1lc2VydmVyIGZvciBp",
          "dHMgZGF0YRo7grUYM1NlcnZpY2UgbWV0aG9kcyBleHBvc2VkIGJ5IEdhbWVT",
          "ZXJ2ZXIgU3RlYW0gY2xpZW50c8C1GAJCA4ABAQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SteammessagesBaseReflection.Descriptor, global::SteammessagesUnifiedBaseSteamclientReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GetServerList_Request), global::CGameServers_GetServerList_Request.Parser, new[]{ "Filter", "Limit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GetServerList_Response), global::CGameServers_GetServerList_Response.Parser, new[]{ "Servers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GetServerList_Response.Types.Server), global::CGameServers_GetServerList_Response.Types.Server.Parser, new[]{ "Addr", "Gameport", "Specport", "Steamid", "Name", "Appid", "Gamedir", "Version", "Product", "Region", "Players", "MaxPlayers", "Bots", "Map", "Secure", "Dedicated", "Os", "Gametype" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GetServerSteamIDsByIP_Request), global::CGameServers_GetServerSteamIDsByIP_Request.Parser, new[]{ "ServerIps" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_IPsWithSteamIDs_Response), global::CGameServers_IPsWithSteamIDs_Response.Parser, new[]{ "Servers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_IPsWithSteamIDs_Response.Types.Server), global::CGameServers_IPsWithSteamIDs_Response.Types.Server.Parser, new[]{ "Addr", "Steamid" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GetServerIPsBySteamID_Request), global::CGameServers_GetServerIPsBySteamID_Request.Parser, new[]{ "ServerSteamids" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_QueryByFakeIP_Request), global::CGameServers_QueryByFakeIP_Request.Parser, new[]{ "FakeIp", "FakePort", "AppId", "QueryType" }, null, new[]{ typeof(global::CGameServers_QueryByFakeIP_Request.Types.EQueryType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerPingQueryData), global::CMsgGameServerPingQueryData.Parser, new[]{ "ServerIp", "QueryPort", "GamePort", "SpectatorPort", "SpectatorServerName", "ServerName", "Steamid", "AppId", "Gamedir", "Map", "GameDescription", "Gametype", "NumPlayers", "MaxPlayers", "NumBots", "Password", "Secure", "Dedicated", "Version", "SdrPopid", "SdrLocationString" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerPlayersQueryData), global::CMsgGameServerPlayersQueryData.Parser, new[]{ "Players" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerPlayersQueryData.Types.Player), global::CMsgGameServerPlayersQueryData.Types.Player.Parser, new[]{ "Name", "Score", "TimePlayed" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerRulesQueryData), global::CMsgGameServerRulesQueryData.Parser, new[]{ "Rules" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CMsgGameServerRulesQueryData.Types.Rule), global::CMsgGameServerRulesQueryData.Types.Rule.Parser, new[]{ "Rule_", "Value" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::CGameServers_GameServerQuery_Response), global::CGameServers_GameServerQuery_Response.Parser, new[]{ "PingData", "PlayersData", "RulesData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameServerClient_QueryServerData_Request), global::GameServerClient_QueryServerData_Request.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameServerClient_QueryServerData_Response), global::GameServerClient_QueryServerData_Response.Parser, new[]{ "PingData", "PlayersData", "RulesData" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CGameServers_GetServerList_Request : pb::IMessage<CGameServers_GetServerList_Request>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_GetServerList_Request> _parser = new pb::MessageParser<CGameServers_GetServerList_Request>(() => new CGameServers_GetServerList_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_GetServerList_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Request(CGameServers_GetServerList_Request other) : this() {
    _hasBits0 = other._hasBits0;
    filter_ = other.filter_;
    limit_ = other.limit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Request Clone() {
    return new CGameServers_GetServerList_Request(this);
  }

  /// <summary>Field number for the "filter" field.</summary>
  public const int FilterFieldNumber = 1;
  private readonly static string FilterDefaultValue = "";

  private string filter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Filter {
    get { return filter_ ?? FilterDefaultValue; }
    set {
      filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "filter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilter {
    get { return filter_ != null; }
  }
  /// <summary>Clears the value of the "filter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilter() {
    filter_ = null;
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 2;
  private readonly static uint LimitDefaultValue = 100;

  private uint limit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Limit {
    get { if ((_hasBits0 & 1) != 0) { return limit_; } else { return LimitDefaultValue; } }
    set {
      _hasBits0 |= 1;
      limit_ = value;
    }
  }
  /// <summary>Gets whether the "limit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimit {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "limit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimit() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_GetServerList_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_GetServerList_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Filter != other.Filter) return false;
    if (Limit != other.Limit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFilter) hash ^= Filter.GetHashCode();
    if (HasLimit) hash ^= Limit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasFilter) {
      output.WriteRawTag(10);
      output.WriteString(Filter);
    }
    if (HasLimit) {
      output.WriteRawTag(16);
      output.WriteUInt32(Limit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasFilter) {
      output.WriteRawTag(10);
      output.WriteString(Filter);
    }
    if (HasLimit) {
      output.WriteRawTag(16);
      output.WriteUInt32(Limit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasFilter) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
    }
    if (HasLimit) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_GetServerList_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasFilter) {
      Filter = other.Filter;
    }
    if (other.HasLimit) {
      Limit = other.Limit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Filter = input.ReadString();
          break;
        }
        case 16: {
          Limit = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Filter = input.ReadString();
          break;
        }
        case 16: {
          Limit = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CGameServers_GetServerList_Response : pb::IMessage<CGameServers_GetServerList_Response>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_GetServerList_Response> _parser = new pb::MessageParser<CGameServers_GetServerList_Response>(() => new CGameServers_GetServerList_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_GetServerList_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Response(CGameServers_GetServerList_Response other) : this() {
    servers_ = other.servers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerList_Response Clone() {
    return new CGameServers_GetServerList_Response(this);
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CGameServers_GetServerList_Response.Types.Server> _repeated_servers_codec
      = pb::FieldCodec.ForMessage(10, global::CGameServers_GetServerList_Response.Types.Server.Parser);
  private readonly pbc::RepeatedField<global::CGameServers_GetServerList_Response.Types.Server> servers_ = new pbc::RepeatedField<global::CGameServers_GetServerList_Response.Types.Server>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CGameServers_GetServerList_Response.Types.Server> Servers {
    get { return servers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_GetServerList_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_GetServerList_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!servers_.Equals(other.servers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= servers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    servers_.WriteTo(output, _repeated_servers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    servers_.WriteTo(ref output, _repeated_servers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += servers_.CalculateSize(_repeated_servers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_GetServerList_Response other) {
    if (other == null) {
      return;
    }
    servers_.Add(other.servers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          servers_.AddEntriesFrom(ref input, _repeated_servers_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CGameServers_GetServerList_Response message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Server : pb::IMessage<Server>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Server> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CGameServers_GetServerList_Response.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server(Server other) : this() {
        _hasBits0 = other._hasBits0;
        addr_ = other.addr_;
        gameport_ = other.gameport_;
        specport_ = other.specport_;
        steamid_ = other.steamid_;
        name_ = other.name_;
        appid_ = other.appid_;
        gamedir_ = other.gamedir_;
        version_ = other.version_;
        product_ = other.product_;
        region_ = other.region_;
        players_ = other.players_;
        maxPlayers_ = other.maxPlayers_;
        bots_ = other.bots_;
        map_ = other.map_;
        secure_ = other.secure_;
        dedicated_ = other.dedicated_;
        os_ = other.os_;
        gametype_ = other.gametype_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server Clone() {
        return new Server(this);
      }

      /// <summary>Field number for the "addr" field.</summary>
      public const int AddrFieldNumber = 1;
      private readonly static string AddrDefaultValue = "";

      private string addr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Addr {
        get { return addr_ ?? AddrDefaultValue; }
        set {
          addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "addr" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAddr {
        get { return addr_ != null; }
      }
      /// <summary>Clears the value of the "addr" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAddr() {
        addr_ = null;
      }

      /// <summary>Field number for the "gameport" field.</summary>
      public const int GameportFieldNumber = 2;
      private readonly static uint GameportDefaultValue = 0;

      private uint gameport_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Gameport {
        get { if ((_hasBits0 & 1) != 0) { return gameport_; } else { return GameportDefaultValue; } }
        set {
          _hasBits0 |= 1;
          gameport_ = value;
        }
      }
      /// <summary>Gets whether the "gameport" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGameport {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "gameport" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGameport() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "specport" field.</summary>
      public const int SpecportFieldNumber = 3;
      private readonly static uint SpecportDefaultValue = 0;

      private uint specport_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Specport {
        get { if ((_hasBits0 & 2) != 0) { return specport_; } else { return SpecportDefaultValue; } }
        set {
          _hasBits0 |= 2;
          specport_ = value;
        }
      }
      /// <summary>Gets whether the "specport" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSpecport {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "specport" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSpecport() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "steamid" field.</summary>
      public const int SteamidFieldNumber = 4;
      private readonly static ulong SteamidDefaultValue = 0UL;

      private ulong steamid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong Steamid {
        get { if ((_hasBits0 & 4) != 0) { return steamid_; } else { return SteamidDefaultValue; } }
        set {
          _hasBits0 |= 4;
          steamid_ = value;
        }
      }
      /// <summary>Gets whether the "steamid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSteamid {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "steamid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSteamid() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 5;
      private readonly static string NameDefaultValue = "";

      private string name_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "appid" field.</summary>
      public const int AppidFieldNumber = 6;
      private readonly static uint AppidDefaultValue = 0;

      private uint appid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Appid {
        get { if ((_hasBits0 & 8) != 0) { return appid_; } else { return AppidDefaultValue; } }
        set {
          _hasBits0 |= 8;
          appid_ = value;
        }
      }
      /// <summary>Gets whether the "appid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAppid {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "appid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAppid() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "gamedir" field.</summary>
      public const int GamedirFieldNumber = 7;
      private readonly static string GamedirDefaultValue = "";

      private string gamedir_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Gamedir {
        get { return gamedir_ ?? GamedirDefaultValue; }
        set {
          gamedir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "gamedir" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGamedir {
        get { return gamedir_ != null; }
      }
      /// <summary>Clears the value of the "gamedir" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGamedir() {
        gamedir_ = null;
      }

      /// <summary>Field number for the "version" field.</summary>
      public const int VersionFieldNumber = 8;
      private readonly static string VersionDefaultValue = "";

      private string version_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Version {
        get { return version_ ?? VersionDefaultValue; }
        set {
          version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "version" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasVersion {
        get { return version_ != null; }
      }
      /// <summary>Clears the value of the "version" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearVersion() {
        version_ = null;
      }

      /// <summary>Field number for the "product" field.</summary>
      public const int ProductFieldNumber = 9;
      private readonly static string ProductDefaultValue = "";

      private string product_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Product {
        get { return product_ ?? ProductDefaultValue; }
        set {
          product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "product" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasProduct {
        get { return product_ != null; }
      }
      /// <summary>Clears the value of the "product" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearProduct() {
        product_ = null;
      }

      /// <summary>Field number for the "region" field.</summary>
      public const int RegionFieldNumber = 10;
      private readonly static int RegionDefaultValue = 0;

      private int region_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Region {
        get { if ((_hasBits0 & 16) != 0) { return region_; } else { return RegionDefaultValue; } }
        set {
          _hasBits0 |= 16;
          region_ = value;
        }
      }
      /// <summary>Gets whether the "region" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasRegion {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "region" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearRegion() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "players" field.</summary>
      public const int PlayersFieldNumber = 11;
      private readonly static int PlayersDefaultValue = 0;

      private int players_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Players {
        get { if ((_hasBits0 & 32) != 0) { return players_; } else { return PlayersDefaultValue; } }
        set {
          _hasBits0 |= 32;
          players_ = value;
        }
      }
      /// <summary>Gets whether the "players" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasPlayers {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "players" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearPlayers() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "max_players" field.</summary>
      public const int MaxPlayersFieldNumber = 12;
      private readonly static int MaxPlayersDefaultValue = 0;

      private int maxPlayers_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int MaxPlayers {
        get { if ((_hasBits0 & 64) != 0) { return maxPlayers_; } else { return MaxPlayersDefaultValue; } }
        set {
          _hasBits0 |= 64;
          maxPlayers_ = value;
        }
      }
      /// <summary>Gets whether the "max_players" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMaxPlayers {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "max_players" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMaxPlayers() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "bots" field.</summary>
      public const int BotsFieldNumber = 13;
      private readonly static int BotsDefaultValue = 0;

      private int bots_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int Bots {
        get { if ((_hasBits0 & 128) != 0) { return bots_; } else { return BotsDefaultValue; } }
        set {
          _hasBits0 |= 128;
          bots_ = value;
        }
      }
      /// <summary>Gets whether the "bots" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBots {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "bots" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBots() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "map" field.</summary>
      public const int MapFieldNumber = 14;
      private readonly static string MapDefaultValue = "";

      private string map_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Map {
        get { return map_ ?? MapDefaultValue; }
        set {
          map_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "map" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMap {
        get { return map_ != null; }
      }
      /// <summary>Clears the value of the "map" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMap() {
        map_ = null;
      }

      /// <summary>Field number for the "secure" field.</summary>
      public const int SecureFieldNumber = 15;
      private readonly static bool SecureDefaultValue = false;

      private bool secure_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Secure {
        get { if ((_hasBits0 & 256) != 0) { return secure_; } else { return SecureDefaultValue; } }
        set {
          _hasBits0 |= 256;
          secure_ = value;
        }
      }
      /// <summary>Gets whether the "secure" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSecure {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "secure" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSecure() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "dedicated" field.</summary>
      public const int DedicatedFieldNumber = 16;
      private readonly static bool DedicatedDefaultValue = false;

      private bool dedicated_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Dedicated {
        get { if ((_hasBits0 & 512) != 0) { return dedicated_; } else { return DedicatedDefaultValue; } }
        set {
          _hasBits0 |= 512;
          dedicated_ = value;
        }
      }
      /// <summary>Gets whether the "dedicated" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasDedicated {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "dedicated" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearDedicated() {
        _hasBits0 &= ~512;
      }

      /// <summary>Field number for the "os" field.</summary>
      public const int OsFieldNumber = 17;
      private readonly static string OsDefaultValue = "";

      private string os_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Os {
        get { return os_ ?? OsDefaultValue; }
        set {
          os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "os" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasOs {
        get { return os_ != null; }
      }
      /// <summary>Clears the value of the "os" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearOs() {
        os_ = null;
      }

      /// <summary>Field number for the "gametype" field.</summary>
      public const int GametypeFieldNumber = 18;
      private readonly static string GametypeDefaultValue = "";

      private string gametype_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Gametype {
        get { return gametype_ ?? GametypeDefaultValue; }
        set {
          gametype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "gametype" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGametype {
        get { return gametype_ != null; }
      }
      /// <summary>Clears the value of the "gametype" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGametype() {
        gametype_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Server);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Server other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Addr != other.Addr) return false;
        if (Gameport != other.Gameport) return false;
        if (Specport != other.Specport) return false;
        if (Steamid != other.Steamid) return false;
        if (Name != other.Name) return false;
        if (Appid != other.Appid) return false;
        if (Gamedir != other.Gamedir) return false;
        if (Version != other.Version) return false;
        if (Product != other.Product) return false;
        if (Region != other.Region) return false;
        if (Players != other.Players) return false;
        if (MaxPlayers != other.MaxPlayers) return false;
        if (Bots != other.Bots) return false;
        if (Map != other.Map) return false;
        if (Secure != other.Secure) return false;
        if (Dedicated != other.Dedicated) return false;
        if (Os != other.Os) return false;
        if (Gametype != other.Gametype) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasAddr) hash ^= Addr.GetHashCode();
        if (HasGameport) hash ^= Gameport.GetHashCode();
        if (HasSpecport) hash ^= Specport.GetHashCode();
        if (HasSteamid) hash ^= Steamid.GetHashCode();
        if (HasName) hash ^= Name.GetHashCode();
        if (HasAppid) hash ^= Appid.GetHashCode();
        if (HasGamedir) hash ^= Gamedir.GetHashCode();
        if (HasVersion) hash ^= Version.GetHashCode();
        if (HasProduct) hash ^= Product.GetHashCode();
        if (HasRegion) hash ^= Region.GetHashCode();
        if (HasPlayers) hash ^= Players.GetHashCode();
        if (HasMaxPlayers) hash ^= MaxPlayers.GetHashCode();
        if (HasBots) hash ^= Bots.GetHashCode();
        if (HasMap) hash ^= Map.GetHashCode();
        if (HasSecure) hash ^= Secure.GetHashCode();
        if (HasDedicated) hash ^= Dedicated.GetHashCode();
        if (HasOs) hash ^= Os.GetHashCode();
        if (HasGametype) hash ^= Gametype.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasAddr) {
          output.WriteRawTag(10);
          output.WriteString(Addr);
        }
        if (HasGameport) {
          output.WriteRawTag(16);
          output.WriteUInt32(Gameport);
        }
        if (HasSpecport) {
          output.WriteRawTag(24);
          output.WriteUInt32(Specport);
        }
        if (HasSteamid) {
          output.WriteRawTag(33);
          output.WriteFixed64(Steamid);
        }
        if (HasName) {
          output.WriteRawTag(42);
          output.WriteString(Name);
        }
        if (HasAppid) {
          output.WriteRawTag(48);
          output.WriteUInt32(Appid);
        }
        if (HasGamedir) {
          output.WriteRawTag(58);
          output.WriteString(Gamedir);
        }
        if (HasVersion) {
          output.WriteRawTag(66);
          output.WriteString(Version);
        }
        if (HasProduct) {
          output.WriteRawTag(74);
          output.WriteString(Product);
        }
        if (HasRegion) {
          output.WriteRawTag(80);
          output.WriteInt32(Region);
        }
        if (HasPlayers) {
          output.WriteRawTag(88);
          output.WriteInt32(Players);
        }
        if (HasMaxPlayers) {
          output.WriteRawTag(96);
          output.WriteInt32(MaxPlayers);
        }
        if (HasBots) {
          output.WriteRawTag(104);
          output.WriteInt32(Bots);
        }
        if (HasMap) {
          output.WriteRawTag(114);
          output.WriteString(Map);
        }
        if (HasSecure) {
          output.WriteRawTag(120);
          output.WriteBool(Secure);
        }
        if (HasDedicated) {
          output.WriteRawTag(128, 1);
          output.WriteBool(Dedicated);
        }
        if (HasOs) {
          output.WriteRawTag(138, 1);
          output.WriteString(Os);
        }
        if (HasGametype) {
          output.WriteRawTag(146, 1);
          output.WriteString(Gametype);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasAddr) {
          output.WriteRawTag(10);
          output.WriteString(Addr);
        }
        if (HasGameport) {
          output.WriteRawTag(16);
          output.WriteUInt32(Gameport);
        }
        if (HasSpecport) {
          output.WriteRawTag(24);
          output.WriteUInt32(Specport);
        }
        if (HasSteamid) {
          output.WriteRawTag(33);
          output.WriteFixed64(Steamid);
        }
        if (HasName) {
          output.WriteRawTag(42);
          output.WriteString(Name);
        }
        if (HasAppid) {
          output.WriteRawTag(48);
          output.WriteUInt32(Appid);
        }
        if (HasGamedir) {
          output.WriteRawTag(58);
          output.WriteString(Gamedir);
        }
        if (HasVersion) {
          output.WriteRawTag(66);
          output.WriteString(Version);
        }
        if (HasProduct) {
          output.WriteRawTag(74);
          output.WriteString(Product);
        }
        if (HasRegion) {
          output.WriteRawTag(80);
          output.WriteInt32(Region);
        }
        if (HasPlayers) {
          output.WriteRawTag(88);
          output.WriteInt32(Players);
        }
        if (HasMaxPlayers) {
          output.WriteRawTag(96);
          output.WriteInt32(MaxPlayers);
        }
        if (HasBots) {
          output.WriteRawTag(104);
          output.WriteInt32(Bots);
        }
        if (HasMap) {
          output.WriteRawTag(114);
          output.WriteString(Map);
        }
        if (HasSecure) {
          output.WriteRawTag(120);
          output.WriteBool(Secure);
        }
        if (HasDedicated) {
          output.WriteRawTag(128, 1);
          output.WriteBool(Dedicated);
        }
        if (HasOs) {
          output.WriteRawTag(138, 1);
          output.WriteString(Os);
        }
        if (HasGametype) {
          output.WriteRawTag(146, 1);
          output.WriteString(Gametype);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasAddr) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
        }
        if (HasGameport) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gameport);
        }
        if (HasSpecport) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Specport);
        }
        if (HasSteamid) {
          size += 1 + 8;
        }
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasAppid) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
        }
        if (HasGamedir) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Gamedir);
        }
        if (HasVersion) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
        }
        if (HasProduct) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
        }
        if (HasRegion) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
        }
        if (HasPlayers) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Players);
        }
        if (HasMaxPlayers) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
        }
        if (HasBots) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bots);
        }
        if (HasMap) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Map);
        }
        if (HasSecure) {
          size += 1 + 1;
        }
        if (HasDedicated) {
          size += 2 + 1;
        }
        if (HasOs) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(Os);
        }
        if (HasGametype) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(Gametype);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Server other) {
        if (other == null) {
          return;
        }
        if (other.HasAddr) {
          Addr = other.Addr;
        }
        if (other.HasGameport) {
          Gameport = other.Gameport;
        }
        if (other.HasSpecport) {
          Specport = other.Specport;
        }
        if (other.HasSteamid) {
          Steamid = other.Steamid;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasAppid) {
          Appid = other.Appid;
        }
        if (other.HasGamedir) {
          Gamedir = other.Gamedir;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasProduct) {
          Product = other.Product;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.HasPlayers) {
          Players = other.Players;
        }
        if (other.HasMaxPlayers) {
          MaxPlayers = other.MaxPlayers;
        }
        if (other.HasBots) {
          Bots = other.Bots;
        }
        if (other.HasMap) {
          Map = other.Map;
        }
        if (other.HasSecure) {
          Secure = other.Secure;
        }
        if (other.HasDedicated) {
          Dedicated = other.Dedicated;
        }
        if (other.HasOs) {
          Os = other.Os;
        }
        if (other.HasGametype) {
          Gametype = other.Gametype;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Addr = input.ReadString();
              break;
            }
            case 16: {
              Gameport = input.ReadUInt32();
              break;
            }
            case 24: {
              Specport = input.ReadUInt32();
              break;
            }
            case 33: {
              Steamid = input.ReadFixed64();
              break;
            }
            case 42: {
              Name = input.ReadString();
              break;
            }
            case 48: {
              Appid = input.ReadUInt32();
              break;
            }
            case 58: {
              Gamedir = input.ReadString();
              break;
            }
            case 66: {
              Version = input.ReadString();
              break;
            }
            case 74: {
              Product = input.ReadString();
              break;
            }
            case 80: {
              Region = input.ReadInt32();
              break;
            }
            case 88: {
              Players = input.ReadInt32();
              break;
            }
            case 96: {
              MaxPlayers = input.ReadInt32();
              break;
            }
            case 104: {
              Bots = input.ReadInt32();
              break;
            }
            case 114: {
              Map = input.ReadString();
              break;
            }
            case 120: {
              Secure = input.ReadBool();
              break;
            }
            case 128: {
              Dedicated = input.ReadBool();
              break;
            }
            case 138: {
              Os = input.ReadString();
              break;
            }
            case 146: {
              Gametype = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Addr = input.ReadString();
              break;
            }
            case 16: {
              Gameport = input.ReadUInt32();
              break;
            }
            case 24: {
              Specport = input.ReadUInt32();
              break;
            }
            case 33: {
              Steamid = input.ReadFixed64();
              break;
            }
            case 42: {
              Name = input.ReadString();
              break;
            }
            case 48: {
              Appid = input.ReadUInt32();
              break;
            }
            case 58: {
              Gamedir = input.ReadString();
              break;
            }
            case 66: {
              Version = input.ReadString();
              break;
            }
            case 74: {
              Product = input.ReadString();
              break;
            }
            case 80: {
              Region = input.ReadInt32();
              break;
            }
            case 88: {
              Players = input.ReadInt32();
              break;
            }
            case 96: {
              MaxPlayers = input.ReadInt32();
              break;
            }
            case 104: {
              Bots = input.ReadInt32();
              break;
            }
            case 114: {
              Map = input.ReadString();
              break;
            }
            case 120: {
              Secure = input.ReadBool();
              break;
            }
            case 128: {
              Dedicated = input.ReadBool();
              break;
            }
            case 138: {
              Os = input.ReadString();
              break;
            }
            case 146: {
              Gametype = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CGameServers_GetServerSteamIDsByIP_Request : pb::IMessage<CGameServers_GetServerSteamIDsByIP_Request>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_GetServerSteamIDsByIP_Request> _parser = new pb::MessageParser<CGameServers_GetServerSteamIDsByIP_Request>(() => new CGameServers_GetServerSteamIDsByIP_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_GetServerSteamIDsByIP_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerSteamIDsByIP_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerSteamIDsByIP_Request(CGameServers_GetServerSteamIDsByIP_Request other) : this() {
    serverIps_ = other.serverIps_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerSteamIDsByIP_Request Clone() {
    return new CGameServers_GetServerSteamIDsByIP_Request(this);
  }

  /// <summary>Field number for the "server_ips" field.</summary>
  public const int ServerIpsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_serverIps_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> serverIps_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> ServerIps {
    get { return serverIps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_GetServerSteamIDsByIP_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_GetServerSteamIDsByIP_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!serverIps_.Equals(other.serverIps_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= serverIps_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    serverIps_.WriteTo(output, _repeated_serverIps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    serverIps_.WriteTo(ref output, _repeated_serverIps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += serverIps_.CalculateSize(_repeated_serverIps_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_GetServerSteamIDsByIP_Request other) {
    if (other == null) {
      return;
    }
    serverIps_.Add(other.serverIps_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          serverIps_.AddEntriesFrom(input, _repeated_serverIps_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          serverIps_.AddEntriesFrom(ref input, _repeated_serverIps_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CGameServers_IPsWithSteamIDs_Response : pb::IMessage<CGameServers_IPsWithSteamIDs_Response>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_IPsWithSteamIDs_Response> _parser = new pb::MessageParser<CGameServers_IPsWithSteamIDs_Response>(() => new CGameServers_IPsWithSteamIDs_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_IPsWithSteamIDs_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_IPsWithSteamIDs_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_IPsWithSteamIDs_Response(CGameServers_IPsWithSteamIDs_Response other) : this() {
    servers_ = other.servers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_IPsWithSteamIDs_Response Clone() {
    return new CGameServers_IPsWithSteamIDs_Response(this);
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CGameServers_IPsWithSteamIDs_Response.Types.Server> _repeated_servers_codec
      = pb::FieldCodec.ForMessage(10, global::CGameServers_IPsWithSteamIDs_Response.Types.Server.Parser);
  private readonly pbc::RepeatedField<global::CGameServers_IPsWithSteamIDs_Response.Types.Server> servers_ = new pbc::RepeatedField<global::CGameServers_IPsWithSteamIDs_Response.Types.Server>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CGameServers_IPsWithSteamIDs_Response.Types.Server> Servers {
    get { return servers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_IPsWithSteamIDs_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_IPsWithSteamIDs_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!servers_.Equals(other.servers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= servers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    servers_.WriteTo(output, _repeated_servers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    servers_.WriteTo(ref output, _repeated_servers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += servers_.CalculateSize(_repeated_servers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_IPsWithSteamIDs_Response other) {
    if (other == null) {
      return;
    }
    servers_.Add(other.servers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          servers_.AddEntriesFrom(ref input, _repeated_servers_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CGameServers_IPsWithSteamIDs_Response message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Server : pb::IMessage<Server>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Server> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CGameServers_IPsWithSteamIDs_Response.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server(Server other) : this() {
        _hasBits0 = other._hasBits0;
        addr_ = other.addr_;
        steamid_ = other.steamid_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Server Clone() {
        return new Server(this);
      }

      /// <summary>Field number for the "addr" field.</summary>
      public const int AddrFieldNumber = 1;
      private readonly static string AddrDefaultValue = "";

      private string addr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Addr {
        get { return addr_ ?? AddrDefaultValue; }
        set {
          addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "addr" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasAddr {
        get { return addr_ != null; }
      }
      /// <summary>Clears the value of the "addr" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearAddr() {
        addr_ = null;
      }

      /// <summary>Field number for the "steamid" field.</summary>
      public const int SteamidFieldNumber = 2;
      private readonly static ulong SteamidDefaultValue = 0UL;

      private ulong steamid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public ulong Steamid {
        get { if ((_hasBits0 & 1) != 0) { return steamid_; } else { return SteamidDefaultValue; } }
        set {
          _hasBits0 |= 1;
          steamid_ = value;
        }
      }
      /// <summary>Gets whether the "steamid" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasSteamid {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "steamid" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearSteamid() {
        _hasBits0 &= ~1;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Server);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Server other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Addr != other.Addr) return false;
        if (Steamid != other.Steamid) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasAddr) hash ^= Addr.GetHashCode();
        if (HasSteamid) hash ^= Steamid.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasAddr) {
          output.WriteRawTag(10);
          output.WriteString(Addr);
        }
        if (HasSteamid) {
          output.WriteRawTag(17);
          output.WriteFixed64(Steamid);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasAddr) {
          output.WriteRawTag(10);
          output.WriteString(Addr);
        }
        if (HasSteamid) {
          output.WriteRawTag(17);
          output.WriteFixed64(Steamid);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasAddr) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
        }
        if (HasSteamid) {
          size += 1 + 8;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Server other) {
        if (other == null) {
          return;
        }
        if (other.HasAddr) {
          Addr = other.Addr;
        }
        if (other.HasSteamid) {
          Steamid = other.Steamid;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Addr = input.ReadString();
              break;
            }
            case 17: {
              Steamid = input.ReadFixed64();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Addr = input.ReadString();
              break;
            }
            case 17: {
              Steamid = input.ReadFixed64();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CGameServers_GetServerIPsBySteamID_Request : pb::IMessage<CGameServers_GetServerIPsBySteamID_Request>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_GetServerIPsBySteamID_Request> _parser = new pb::MessageParser<CGameServers_GetServerIPsBySteamID_Request>(() => new CGameServers_GetServerIPsBySteamID_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_GetServerIPsBySteamID_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerIPsBySteamID_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerIPsBySteamID_Request(CGameServers_GetServerIPsBySteamID_Request other) : this() {
    serverSteamids_ = other.serverSteamids_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GetServerIPsBySteamID_Request Clone() {
    return new CGameServers_GetServerIPsBySteamID_Request(this);
  }

  /// <summary>Field number for the "server_steamids" field.</summary>
  public const int ServerSteamidsFieldNumber = 1;
  private static readonly pb::FieldCodec<ulong> _repeated_serverSteamids_codec
      = pb::FieldCodec.ForFixed64(9);
  private readonly pbc::RepeatedField<ulong> serverSteamids_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<ulong> ServerSteamids {
    get { return serverSteamids_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_GetServerIPsBySteamID_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_GetServerIPsBySteamID_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!serverSteamids_.Equals(other.serverSteamids_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= serverSteamids_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    serverSteamids_.WriteTo(output, _repeated_serverSteamids_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    serverSteamids_.WriteTo(ref output, _repeated_serverSteamids_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += serverSteamids_.CalculateSize(_repeated_serverSteamids_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_GetServerIPsBySteamID_Request other) {
    if (other == null) {
      return;
    }
    serverSteamids_.Add(other.serverSteamids_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 9: {
          serverSteamids_.AddEntriesFrom(input, _repeated_serverSteamids_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10:
        case 9: {
          serverSteamids_.AddEntriesFrom(ref input, _repeated_serverSteamids_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CGameServers_QueryByFakeIP_Request : pb::IMessage<CGameServers_QueryByFakeIP_Request>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_QueryByFakeIP_Request> _parser = new pb::MessageParser<CGameServers_QueryByFakeIP_Request>(() => new CGameServers_QueryByFakeIP_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_QueryByFakeIP_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_QueryByFakeIP_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_QueryByFakeIP_Request(CGameServers_QueryByFakeIP_Request other) : this() {
    _hasBits0 = other._hasBits0;
    fakeIp_ = other.fakeIp_;
    fakePort_ = other.fakePort_;
    appId_ = other.appId_;
    queryType_ = other.queryType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_QueryByFakeIP_Request Clone() {
    return new CGameServers_QueryByFakeIP_Request(this);
  }

  /// <summary>Field number for the "fake_ip" field.</summary>
  public const int FakeIpFieldNumber = 1;
  private readonly static uint FakeIpDefaultValue = 0;

  private uint fakeIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FakeIp {
    get { if ((_hasBits0 & 1) != 0) { return fakeIp_; } else { return FakeIpDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fakeIp_ = value;
    }
  }
  /// <summary>Gets whether the "fake_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFakeIp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fake_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFakeIp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fake_port" field.</summary>
  public const int FakePortFieldNumber = 2;
  private readonly static uint FakePortDefaultValue = 0;

  private uint fakePort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FakePort {
    get { if ((_hasBits0 & 2) != 0) { return fakePort_; } else { return FakePortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fakePort_ = value;
    }
  }
  /// <summary>Gets whether the "fake_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFakePort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fake_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFakePort() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 3;
  private readonly static uint AppIdDefaultValue = 0;

  private uint appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AppId {
    get { if ((_hasBits0 & 4) != 0) { return appId_; } else { return AppIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "query_type" field.</summary>
  public const int QueryTypeFieldNumber = 4;
  private readonly static global::CGameServers_QueryByFakeIP_Request.Types.EQueryType QueryTypeDefaultValue = global::CGameServers_QueryByFakeIP_Request.Types.EQueryType.QueryInvalid;

  private global::CGameServers_QueryByFakeIP_Request.Types.EQueryType queryType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CGameServers_QueryByFakeIP_Request.Types.EQueryType QueryType {
    get { if ((_hasBits0 & 8) != 0) { return queryType_; } else { return QueryTypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      queryType_ = value;
    }
  }
  /// <summary>Gets whether the "query_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQueryType {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "query_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQueryType() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_QueryByFakeIP_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_QueryByFakeIP_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FakeIp != other.FakeIp) return false;
    if (FakePort != other.FakePort) return false;
    if (AppId != other.AppId) return false;
    if (QueryType != other.QueryType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFakeIp) hash ^= FakeIp.GetHashCode();
    if (HasFakePort) hash ^= FakePort.GetHashCode();
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasQueryType) hash ^= QueryType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasFakeIp) {
      output.WriteRawTag(8);
      output.WriteUInt32(FakeIp);
    }
    if (HasFakePort) {
      output.WriteRawTag(16);
      output.WriteUInt32(FakePort);
    }
    if (HasAppId) {
      output.WriteRawTag(24);
      output.WriteUInt32(AppId);
    }
    if (HasQueryType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) QueryType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasFakeIp) {
      output.WriteRawTag(8);
      output.WriteUInt32(FakeIp);
    }
    if (HasFakePort) {
      output.WriteRawTag(16);
      output.WriteUInt32(FakePort);
    }
    if (HasAppId) {
      output.WriteRawTag(24);
      output.WriteUInt32(AppId);
    }
    if (HasQueryType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) QueryType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasFakeIp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FakeIp);
    }
    if (HasFakePort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FakePort);
    }
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasQueryType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QueryType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_QueryByFakeIP_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasFakeIp) {
      FakeIp = other.FakeIp;
    }
    if (other.HasFakePort) {
      FakePort = other.FakePort;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasQueryType) {
      QueryType = other.QueryType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FakeIp = input.ReadUInt32();
          break;
        }
        case 16: {
          FakePort = input.ReadUInt32();
          break;
        }
        case 24: {
          AppId = input.ReadUInt32();
          break;
        }
        case 32: {
          QueryType = (global::CGameServers_QueryByFakeIP_Request.Types.EQueryType) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          FakeIp = input.ReadUInt32();
          break;
        }
        case 16: {
          FakePort = input.ReadUInt32();
          break;
        }
        case 24: {
          AppId = input.ReadUInt32();
          break;
        }
        case 32: {
          QueryType = (global::CGameServers_QueryByFakeIP_Request.Types.EQueryType) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CGameServers_QueryByFakeIP_Request message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum EQueryType {
      [pbr::OriginalName("Query_Invalid")] QueryInvalid = 0,
      [pbr::OriginalName("Query_Ping")] QueryPing = 1,
      [pbr::OriginalName("Query_Players")] QueryPlayers = 2,
      [pbr::OriginalName("Query_Rules")] QueryRules = 3,
    }

  }
  #endregion

}

public sealed partial class CMsgGameServerPingQueryData : pb::IMessage<CMsgGameServerPingQueryData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerPingQueryData> _parser = new pb::MessageParser<CMsgGameServerPingQueryData>(() => new CMsgGameServerPingQueryData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerPingQueryData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPingQueryData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPingQueryData(CMsgGameServerPingQueryData other) : this() {
    _hasBits0 = other._hasBits0;
    serverIp_ = other.serverIp_ != null ? other.serverIp_.Clone() : null;
    queryPort_ = other.queryPort_;
    gamePort_ = other.gamePort_;
    spectatorPort_ = other.spectatorPort_;
    spectatorServerName_ = other.spectatorServerName_;
    serverName_ = other.serverName_;
    steamid_ = other.steamid_;
    appId_ = other.appId_;
    gamedir_ = other.gamedir_;
    map_ = other.map_;
    gameDescription_ = other.gameDescription_;
    gametype_ = other.gametype_;
    numPlayers_ = other.numPlayers_;
    maxPlayers_ = other.maxPlayers_;
    numBots_ = other.numBots_;
    password_ = other.password_;
    secure_ = other.secure_;
    dedicated_ = other.dedicated_;
    version_ = other.version_;
    sdrPopid_ = other.sdrPopid_;
    sdrLocationString_ = other.sdrLocationString_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPingQueryData Clone() {
    return new CMsgGameServerPingQueryData(this);
  }

  /// <summary>Field number for the "server_ip" field.</summary>
  public const int ServerIpFieldNumber = 1;
  private global::CMsgIPAddress serverIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgIPAddress ServerIp {
    get { return serverIp_; }
    set {
      serverIp_ = value;
    }
  }

  /// <summary>Field number for the "query_port" field.</summary>
  public const int QueryPortFieldNumber = 2;
  private readonly static uint QueryPortDefaultValue = 0;

  private uint queryPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint QueryPort {
    get { if ((_hasBits0 & 1) != 0) { return queryPort_; } else { return QueryPortDefaultValue; } }
    set {
      _hasBits0 |= 1;
      queryPort_ = value;
    }
  }
  /// <summary>Gets whether the "query_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQueryPort {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "query_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQueryPort() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "game_port" field.</summary>
  public const int GamePortFieldNumber = 3;
  private readonly static uint GamePortDefaultValue = 0;

  private uint gamePort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GamePort {
    get { if ((_hasBits0 & 2) != 0) { return gamePort_; } else { return GamePortDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gamePort_ = value;
    }
  }
  /// <summary>Gets whether the "game_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamePort {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "game_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamePort() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "spectator_port" field.</summary>
  public const int SpectatorPortFieldNumber = 4;
  private readonly static uint SpectatorPortDefaultValue = 0;

  private uint spectatorPort_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SpectatorPort {
    get { if ((_hasBits0 & 4) != 0) { return spectatorPort_; } else { return SpectatorPortDefaultValue; } }
    set {
      _hasBits0 |= 4;
      spectatorPort_ = value;
    }
  }
  /// <summary>Gets whether the "spectator_port" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpectatorPort {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "spectator_port" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpectatorPort() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "spectator_server_name" field.</summary>
  public const int SpectatorServerNameFieldNumber = 5;
  private readonly static string SpectatorServerNameDefaultValue = "";

  private string spectatorServerName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SpectatorServerName {
    get { return spectatorServerName_ ?? SpectatorServerNameDefaultValue; }
    set {
      spectatorServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "spectator_server_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpectatorServerName {
    get { return spectatorServerName_ != null; }
  }
  /// <summary>Clears the value of the "spectator_server_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpectatorServerName() {
    spectatorServerName_ = null;
  }

  /// <summary>Field number for the "server_name" field.</summary>
  public const int ServerNameFieldNumber = 6;
  private readonly static string ServerNameDefaultValue = "";

  private string serverName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ServerName {
    get { return serverName_ ?? ServerNameDefaultValue; }
    set {
      serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "server_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerName {
    get { return serverName_ != null; }
  }
  /// <summary>Clears the value of the "server_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerName() {
    serverName_ = null;
  }

  /// <summary>Field number for the "steamid" field.</summary>
  public const int SteamidFieldNumber = 7;
  private readonly static ulong SteamidDefaultValue = 0UL;

  private ulong steamid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Steamid {
    get { if ((_hasBits0 & 8) != 0) { return steamid_; } else { return SteamidDefaultValue; } }
    set {
      _hasBits0 |= 8;
      steamid_ = value;
    }
  }
  /// <summary>Gets whether the "steamid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSteamid {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "steamid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSteamid() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "app_id" field.</summary>
  public const int AppIdFieldNumber = 8;
  private readonly static uint AppIdDefaultValue = 0;

  private uint appId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AppId {
    get { if ((_hasBits0 & 16) != 0) { return appId_; } else { return AppIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      appId_ = value;
    }
  }
  /// <summary>Gets whether the "app_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAppId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "app_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAppId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "gamedir" field.</summary>
  public const int GamedirFieldNumber = 9;
  private readonly static string GamedirDefaultValue = "";

  private string gamedir_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Gamedir {
    get { return gamedir_ ?? GamedirDefaultValue; }
    set {
      gamedir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gamedir" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGamedir {
    get { return gamedir_ != null; }
  }
  /// <summary>Clears the value of the "gamedir" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGamedir() {
    gamedir_ = null;
  }

  /// <summary>Field number for the "map" field.</summary>
  public const int MapFieldNumber = 10;
  private readonly static string MapDefaultValue = "";

  private string map_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Map {
    get { return map_ ?? MapDefaultValue; }
    set {
      map_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "map" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMap {
    get { return map_ != null; }
  }
  /// <summary>Clears the value of the "map" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMap() {
    map_ = null;
  }

  /// <summary>Field number for the "game_description" field.</summary>
  public const int GameDescriptionFieldNumber = 11;
  private readonly static string GameDescriptionDefaultValue = "";

  private string gameDescription_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameDescription {
    get { return gameDescription_ ?? GameDescriptionDefaultValue; }
    set {
      gameDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "game_description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGameDescription {
    get { return gameDescription_ != null; }
  }
  /// <summary>Clears the value of the "game_description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGameDescription() {
    gameDescription_ = null;
  }

  /// <summary>Field number for the "gametype" field.</summary>
  public const int GametypeFieldNumber = 12;
  private readonly static string GametypeDefaultValue = "";

  private string gametype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Gametype {
    get { return gametype_ ?? GametypeDefaultValue; }
    set {
      gametype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "gametype" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGametype {
    get { return gametype_ != null; }
  }
  /// <summary>Clears the value of the "gametype" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGametype() {
    gametype_ = null;
  }

  /// <summary>Field number for the "num_players" field.</summary>
  public const int NumPlayersFieldNumber = 13;
  private readonly static uint NumPlayersDefaultValue = 0;

  private uint numPlayers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NumPlayers {
    get { if ((_hasBits0 & 32) != 0) { return numPlayers_; } else { return NumPlayersDefaultValue; } }
    set {
      _hasBits0 |= 32;
      numPlayers_ = value;
    }
  }
  /// <summary>Gets whether the "num_players" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNumPlayers {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "num_players" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNumPlayers() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "max_players" field.</summary>
  public const int MaxPlayersFieldNumber = 14;
  private readonly static uint MaxPlayersDefaultValue = 0;

  private uint maxPlayers_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxPlayers {
    get { if ((_hasBits0 & 64) != 0) { return maxPlayers_; } else { return MaxPlayersDefaultValue; } }
    set {
      _hasBits0 |= 64;
      maxPlayers_ = value;
    }
  }
  /// <summary>Gets whether the "max_players" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxPlayers {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "max_players" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxPlayers() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "num_bots" field.</summary>
  public const int NumBotsFieldNumber = 15;
  private readonly static uint NumBotsDefaultValue = 0;

  private uint numBots_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NumBots {
    get { if ((_hasBits0 & 128) != 0) { return numBots_; } else { return NumBotsDefaultValue; } }
    set {
      _hasBits0 |= 128;
      numBots_ = value;
    }
  }
  /// <summary>Gets whether the "num_bots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNumBots {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "num_bots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNumBots() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 16;
  private readonly static bool PasswordDefaultValue = false;

  private bool password_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Password {
    get { if ((_hasBits0 & 256) != 0) { return password_; } else { return PasswordDefaultValue; } }
    set {
      _hasBits0 |= 256;
      password_ = value;
    }
  }
  /// <summary>Gets whether the "password" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPassword {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "password" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPassword() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "secure" field.</summary>
  public const int SecureFieldNumber = 17;
  private readonly static bool SecureDefaultValue = false;

  private bool secure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Secure {
    get { if ((_hasBits0 & 512) != 0) { return secure_; } else { return SecureDefaultValue; } }
    set {
      _hasBits0 |= 512;
      secure_ = value;
    }
  }
  /// <summary>Gets whether the "secure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSecure {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "secure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSecure() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "dedicated" field.</summary>
  public const int DedicatedFieldNumber = 18;
  private readonly static bool DedicatedDefaultValue = false;

  private bool dedicated_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Dedicated {
    get { if ((_hasBits0 & 1024) != 0) { return dedicated_; } else { return DedicatedDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      dedicated_ = value;
    }
  }
  /// <summary>Gets whether the "dedicated" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDedicated {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "dedicated" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDedicated() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 19;
  private readonly static string VersionDefaultValue = "";

  private string version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersion() {
    version_ = null;
  }

  /// <summary>Field number for the "sdr_popid" field.</summary>
  public const int SdrPopidFieldNumber = 20;
  private readonly static uint SdrPopidDefaultValue = 0;

  private uint sdrPopid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SdrPopid {
    get { if ((_hasBits0 & 2048) != 0) { return sdrPopid_; } else { return SdrPopidDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      sdrPopid_ = value;
    }
  }
  /// <summary>Gets whether the "sdr_popid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSdrPopid {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "sdr_popid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSdrPopid() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "sdr_location_string" field.</summary>
  public const int SdrLocationStringFieldNumber = 21;
  private readonly static string SdrLocationStringDefaultValue = "";

  private string sdrLocationString_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SdrLocationString {
    get { return sdrLocationString_ ?? SdrLocationStringDefaultValue; }
    set {
      sdrLocationString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sdr_location_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSdrLocationString {
    get { return sdrLocationString_ != null; }
  }
  /// <summary>Clears the value of the "sdr_location_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSdrLocationString() {
    sdrLocationString_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerPingQueryData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerPingQueryData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ServerIp, other.ServerIp)) return false;
    if (QueryPort != other.QueryPort) return false;
    if (GamePort != other.GamePort) return false;
    if (SpectatorPort != other.SpectatorPort) return false;
    if (SpectatorServerName != other.SpectatorServerName) return false;
    if (ServerName != other.ServerName) return false;
    if (Steamid != other.Steamid) return false;
    if (AppId != other.AppId) return false;
    if (Gamedir != other.Gamedir) return false;
    if (Map != other.Map) return false;
    if (GameDescription != other.GameDescription) return false;
    if (Gametype != other.Gametype) return false;
    if (NumPlayers != other.NumPlayers) return false;
    if (MaxPlayers != other.MaxPlayers) return false;
    if (NumBots != other.NumBots) return false;
    if (Password != other.Password) return false;
    if (Secure != other.Secure) return false;
    if (Dedicated != other.Dedicated) return false;
    if (Version != other.Version) return false;
    if (SdrPopid != other.SdrPopid) return false;
    if (SdrLocationString != other.SdrLocationString) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (serverIp_ != null) hash ^= ServerIp.GetHashCode();
    if (HasQueryPort) hash ^= QueryPort.GetHashCode();
    if (HasGamePort) hash ^= GamePort.GetHashCode();
    if (HasSpectatorPort) hash ^= SpectatorPort.GetHashCode();
    if (HasSpectatorServerName) hash ^= SpectatorServerName.GetHashCode();
    if (HasServerName) hash ^= ServerName.GetHashCode();
    if (HasSteamid) hash ^= Steamid.GetHashCode();
    if (HasAppId) hash ^= AppId.GetHashCode();
    if (HasGamedir) hash ^= Gamedir.GetHashCode();
    if (HasMap) hash ^= Map.GetHashCode();
    if (HasGameDescription) hash ^= GameDescription.GetHashCode();
    if (HasGametype) hash ^= Gametype.GetHashCode();
    if (HasNumPlayers) hash ^= NumPlayers.GetHashCode();
    if (HasMaxPlayers) hash ^= MaxPlayers.GetHashCode();
    if (HasNumBots) hash ^= NumBots.GetHashCode();
    if (HasPassword) hash ^= Password.GetHashCode();
    if (HasSecure) hash ^= Secure.GetHashCode();
    if (HasDedicated) hash ^= Dedicated.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (HasSdrPopid) hash ^= SdrPopid.GetHashCode();
    if (HasSdrLocationString) hash ^= SdrLocationString.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (serverIp_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ServerIp);
    }
    if (HasQueryPort) {
      output.WriteRawTag(16);
      output.WriteUInt32(QueryPort);
    }
    if (HasGamePort) {
      output.WriteRawTag(24);
      output.WriteUInt32(GamePort);
    }
    if (HasSpectatorPort) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpectatorPort);
    }
    if (HasSpectatorServerName) {
      output.WriteRawTag(42);
      output.WriteString(SpectatorServerName);
    }
    if (HasServerName) {
      output.WriteRawTag(50);
      output.WriteString(ServerName);
    }
    if (HasSteamid) {
      output.WriteRawTag(57);
      output.WriteFixed64(Steamid);
    }
    if (HasAppId) {
      output.WriteRawTag(64);
      output.WriteUInt32(AppId);
    }
    if (HasGamedir) {
      output.WriteRawTag(74);
      output.WriteString(Gamedir);
    }
    if (HasMap) {
      output.WriteRawTag(82);
      output.WriteString(Map);
    }
    if (HasGameDescription) {
      output.WriteRawTag(90);
      output.WriteString(GameDescription);
    }
    if (HasGametype) {
      output.WriteRawTag(98);
      output.WriteString(Gametype);
    }
    if (HasNumPlayers) {
      output.WriteRawTag(104);
      output.WriteUInt32(NumPlayers);
    }
    if (HasMaxPlayers) {
      output.WriteRawTag(112);
      output.WriteUInt32(MaxPlayers);
    }
    if (HasNumBots) {
      output.WriteRawTag(120);
      output.WriteUInt32(NumBots);
    }
    if (HasPassword) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Password);
    }
    if (HasSecure) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Secure);
    }
    if (HasDedicated) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Dedicated);
    }
    if (HasVersion) {
      output.WriteRawTag(154, 1);
      output.WriteString(Version);
    }
    if (HasSdrPopid) {
      output.WriteRawTag(165, 1);
      output.WriteFixed32(SdrPopid);
    }
    if (HasSdrLocationString) {
      output.WriteRawTag(170, 1);
      output.WriteString(SdrLocationString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (serverIp_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ServerIp);
    }
    if (HasQueryPort) {
      output.WriteRawTag(16);
      output.WriteUInt32(QueryPort);
    }
    if (HasGamePort) {
      output.WriteRawTag(24);
      output.WriteUInt32(GamePort);
    }
    if (HasSpectatorPort) {
      output.WriteRawTag(32);
      output.WriteUInt32(SpectatorPort);
    }
    if (HasSpectatorServerName) {
      output.WriteRawTag(42);
      output.WriteString(SpectatorServerName);
    }
    if (HasServerName) {
      output.WriteRawTag(50);
      output.WriteString(ServerName);
    }
    if (HasSteamid) {
      output.WriteRawTag(57);
      output.WriteFixed64(Steamid);
    }
    if (HasAppId) {
      output.WriteRawTag(64);
      output.WriteUInt32(AppId);
    }
    if (HasGamedir) {
      output.WriteRawTag(74);
      output.WriteString(Gamedir);
    }
    if (HasMap) {
      output.WriteRawTag(82);
      output.WriteString(Map);
    }
    if (HasGameDescription) {
      output.WriteRawTag(90);
      output.WriteString(GameDescription);
    }
    if (HasGametype) {
      output.WriteRawTag(98);
      output.WriteString(Gametype);
    }
    if (HasNumPlayers) {
      output.WriteRawTag(104);
      output.WriteUInt32(NumPlayers);
    }
    if (HasMaxPlayers) {
      output.WriteRawTag(112);
      output.WriteUInt32(MaxPlayers);
    }
    if (HasNumBots) {
      output.WriteRawTag(120);
      output.WriteUInt32(NumBots);
    }
    if (HasPassword) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Password);
    }
    if (HasSecure) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Secure);
    }
    if (HasDedicated) {
      output.WriteRawTag(144, 1);
      output.WriteBool(Dedicated);
    }
    if (HasVersion) {
      output.WriteRawTag(154, 1);
      output.WriteString(Version);
    }
    if (HasSdrPopid) {
      output.WriteRawTag(165, 1);
      output.WriteFixed32(SdrPopid);
    }
    if (HasSdrLocationString) {
      output.WriteRawTag(170, 1);
      output.WriteString(SdrLocationString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (serverIp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerIp);
    }
    if (HasQueryPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueryPort);
    }
    if (HasGamePort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePort);
    }
    if (HasSpectatorPort) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpectatorPort);
    }
    if (HasSpectatorServerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SpectatorServerName);
    }
    if (HasServerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
    }
    if (HasSteamid) {
      size += 1 + 8;
    }
    if (HasAppId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppId);
    }
    if (HasGamedir) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Gamedir);
    }
    if (HasMap) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Map);
    }
    if (HasGameDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameDescription);
    }
    if (HasGametype) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Gametype);
    }
    if (HasNumPlayers) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPlayers);
    }
    if (HasMaxPlayers) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
    }
    if (HasNumBots) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBots);
    }
    if (HasPassword) {
      size += 2 + 1;
    }
    if (HasSecure) {
      size += 2 + 1;
    }
    if (HasDedicated) {
      size += 2 + 1;
    }
    if (HasVersion) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (HasSdrPopid) {
      size += 2 + 4;
    }
    if (HasSdrLocationString) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SdrLocationString);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerPingQueryData other) {
    if (other == null) {
      return;
    }
    if (other.serverIp_ != null) {
      if (serverIp_ == null) {
        ServerIp = new global::CMsgIPAddress();
      }
      ServerIp.MergeFrom(other.ServerIp);
    }
    if (other.HasQueryPort) {
      QueryPort = other.QueryPort;
    }
    if (other.HasGamePort) {
      GamePort = other.GamePort;
    }
    if (other.HasSpectatorPort) {
      SpectatorPort = other.SpectatorPort;
    }
    if (other.HasSpectatorServerName) {
      SpectatorServerName = other.SpectatorServerName;
    }
    if (other.HasServerName) {
      ServerName = other.ServerName;
    }
    if (other.HasSteamid) {
      Steamid = other.Steamid;
    }
    if (other.HasAppId) {
      AppId = other.AppId;
    }
    if (other.HasGamedir) {
      Gamedir = other.Gamedir;
    }
    if (other.HasMap) {
      Map = other.Map;
    }
    if (other.HasGameDescription) {
      GameDescription = other.GameDescription;
    }
    if (other.HasGametype) {
      Gametype = other.Gametype;
    }
    if (other.HasNumPlayers) {
      NumPlayers = other.NumPlayers;
    }
    if (other.HasMaxPlayers) {
      MaxPlayers = other.MaxPlayers;
    }
    if (other.HasNumBots) {
      NumBots = other.NumBots;
    }
    if (other.HasPassword) {
      Password = other.Password;
    }
    if (other.HasSecure) {
      Secure = other.Secure;
    }
    if (other.HasDedicated) {
      Dedicated = other.Dedicated;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    if (other.HasSdrPopid) {
      SdrPopid = other.SdrPopid;
    }
    if (other.HasSdrLocationString) {
      SdrLocationString = other.SdrLocationString;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (serverIp_ == null) {
            ServerIp = new global::CMsgIPAddress();
          }
          input.ReadMessage(ServerIp);
          break;
        }
        case 16: {
          QueryPort = input.ReadUInt32();
          break;
        }
        case 24: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 32: {
          SpectatorPort = input.ReadUInt32();
          break;
        }
        case 42: {
          SpectatorServerName = input.ReadString();
          break;
        }
        case 50: {
          ServerName = input.ReadString();
          break;
        }
        case 57: {
          Steamid = input.ReadFixed64();
          break;
        }
        case 64: {
          AppId = input.ReadUInt32();
          break;
        }
        case 74: {
          Gamedir = input.ReadString();
          break;
        }
        case 82: {
          Map = input.ReadString();
          break;
        }
        case 90: {
          GameDescription = input.ReadString();
          break;
        }
        case 98: {
          Gametype = input.ReadString();
          break;
        }
        case 104: {
          NumPlayers = input.ReadUInt32();
          break;
        }
        case 112: {
          MaxPlayers = input.ReadUInt32();
          break;
        }
        case 120: {
          NumBots = input.ReadUInt32();
          break;
        }
        case 128: {
          Password = input.ReadBool();
          break;
        }
        case 136: {
          Secure = input.ReadBool();
          break;
        }
        case 144: {
          Dedicated = input.ReadBool();
          break;
        }
        case 154: {
          Version = input.ReadString();
          break;
        }
        case 165: {
          SdrPopid = input.ReadFixed32();
          break;
        }
        case 170: {
          SdrLocationString = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (serverIp_ == null) {
            ServerIp = new global::CMsgIPAddress();
          }
          input.ReadMessage(ServerIp);
          break;
        }
        case 16: {
          QueryPort = input.ReadUInt32();
          break;
        }
        case 24: {
          GamePort = input.ReadUInt32();
          break;
        }
        case 32: {
          SpectatorPort = input.ReadUInt32();
          break;
        }
        case 42: {
          SpectatorServerName = input.ReadString();
          break;
        }
        case 50: {
          ServerName = input.ReadString();
          break;
        }
        case 57: {
          Steamid = input.ReadFixed64();
          break;
        }
        case 64: {
          AppId = input.ReadUInt32();
          break;
        }
        case 74: {
          Gamedir = input.ReadString();
          break;
        }
        case 82: {
          Map = input.ReadString();
          break;
        }
        case 90: {
          GameDescription = input.ReadString();
          break;
        }
        case 98: {
          Gametype = input.ReadString();
          break;
        }
        case 104: {
          NumPlayers = input.ReadUInt32();
          break;
        }
        case 112: {
          MaxPlayers = input.ReadUInt32();
          break;
        }
        case 120: {
          NumBots = input.ReadUInt32();
          break;
        }
        case 128: {
          Password = input.ReadBool();
          break;
        }
        case 136: {
          Secure = input.ReadBool();
          break;
        }
        case 144: {
          Dedicated = input.ReadBool();
          break;
        }
        case 154: {
          Version = input.ReadString();
          break;
        }
        case 165: {
          SdrPopid = input.ReadFixed32();
          break;
        }
        case 170: {
          SdrLocationString = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CMsgGameServerPlayersQueryData : pb::IMessage<CMsgGameServerPlayersQueryData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerPlayersQueryData> _parser = new pb::MessageParser<CMsgGameServerPlayersQueryData>(() => new CMsgGameServerPlayersQueryData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerPlayersQueryData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPlayersQueryData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPlayersQueryData(CMsgGameServerPlayersQueryData other) : this() {
    players_ = other.players_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerPlayersQueryData Clone() {
    return new CMsgGameServerPlayersQueryData(this);
  }

  /// <summary>Field number for the "players" field.</summary>
  public const int PlayersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgGameServerPlayersQueryData.Types.Player> _repeated_players_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgGameServerPlayersQueryData.Types.Player.Parser);
  private readonly pbc::RepeatedField<global::CMsgGameServerPlayersQueryData.Types.Player> players_ = new pbc::RepeatedField<global::CMsgGameServerPlayersQueryData.Types.Player>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgGameServerPlayersQueryData.Types.Player> Players {
    get { return players_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerPlayersQueryData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerPlayersQueryData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!players_.Equals(other.players_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= players_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    players_.WriteTo(output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    players_.WriteTo(ref output, _repeated_players_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += players_.CalculateSize(_repeated_players_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerPlayersQueryData other) {
    if (other == null) {
      return;
    }
    players_.Add(other.players_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          players_.AddEntriesFrom(input, _repeated_players_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          players_.AddEntriesFrom(ref input, _repeated_players_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgGameServerPlayersQueryData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Player : pb::IMessage<Player>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Player> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgGameServerPlayersQueryData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player(Player other) : this() {
        _hasBits0 = other._hasBits0;
        name_ = other.name_;
        score_ = other.score_;
        timePlayed_ = other.timePlayed_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Player Clone() {
        return new Player(this);
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 1;
      private readonly static string NameDefaultValue = "";

      private string name_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "score" field.</summary>
      public const int ScoreFieldNumber = 2;
      private readonly static uint ScoreDefaultValue = 0;

      private uint score_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Score {
        get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
        set {
          _hasBits0 |= 1;
          score_ = value;
        }
      }
      /// <summary>Gets whether the "score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasScore {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearScore() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "time_played" field.</summary>
      public const int TimePlayedFieldNumber = 3;
      private readonly static uint TimePlayedDefaultValue = 0;

      private uint timePlayed_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint TimePlayed {
        get { if ((_hasBits0 & 2) != 0) { return timePlayed_; } else { return TimePlayedDefaultValue; } }
        set {
          _hasBits0 |= 2;
          timePlayed_ = value;
        }
      }
      /// <summary>Gets whether the "time_played" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTimePlayed {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "time_played" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTimePlayed() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Player);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Player other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Score != other.Score) return false;
        if (TimePlayed != other.TimePlayed) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasName) hash ^= Name.GetHashCode();
        if (HasScore) hash ^= Score.GetHashCode();
        if (HasTimePlayed) hash ^= TimePlayed.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasName) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (HasScore) {
          output.WriteRawTag(16);
          output.WriteUInt32(Score);
        }
        if (HasTimePlayed) {
          output.WriteRawTag(24);
          output.WriteUInt32(TimePlayed);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasName) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (HasScore) {
          output.WriteRawTag(16);
          output.WriteUInt32(Score);
        }
        if (HasTimePlayed) {
          output.WriteRawTag(24);
          output.WriteUInt32(TimePlayed);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
        }
        if (HasTimePlayed) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePlayed);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Player other) {
        if (other == null) {
          return;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 16: {
              Score = input.ReadUInt32();
              break;
            }
            case 24: {
              TimePlayed = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 16: {
              Score = input.ReadUInt32();
              break;
            }
            case 24: {
              TimePlayed = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CMsgGameServerRulesQueryData : pb::IMessage<CMsgGameServerRulesQueryData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CMsgGameServerRulesQueryData> _parser = new pb::MessageParser<CMsgGameServerRulesQueryData>(() => new CMsgGameServerRulesQueryData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CMsgGameServerRulesQueryData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRulesQueryData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRulesQueryData(CMsgGameServerRulesQueryData other) : this() {
    rules_ = other.rules_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CMsgGameServerRulesQueryData Clone() {
    return new CMsgGameServerRulesQueryData(this);
  }

  /// <summary>Field number for the "rules" field.</summary>
  public const int RulesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CMsgGameServerRulesQueryData.Types.Rule> _repeated_rules_codec
      = pb::FieldCodec.ForMessage(10, global::CMsgGameServerRulesQueryData.Types.Rule.Parser);
  private readonly pbc::RepeatedField<global::CMsgGameServerRulesQueryData.Types.Rule> rules_ = new pbc::RepeatedField<global::CMsgGameServerRulesQueryData.Types.Rule>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CMsgGameServerRulesQueryData.Types.Rule> Rules {
    get { return rules_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CMsgGameServerRulesQueryData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CMsgGameServerRulesQueryData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rules_.Equals(other.rules_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rules_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    rules_.WriteTo(output, _repeated_rules_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    rules_.WriteTo(ref output, _repeated_rules_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += rules_.CalculateSize(_repeated_rules_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CMsgGameServerRulesQueryData other) {
    if (other == null) {
      return;
    }
    rules_.Add(other.rules_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          rules_.AddEntriesFrom(input, _repeated_rules_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          rules_.AddEntriesFrom(ref input, _repeated_rules_codec);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the CMsgGameServerRulesQueryData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public sealed partial class Rule : pb::IMessage<Rule>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Rule> _parser = new pb::MessageParser<Rule>(() => new Rule());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Rule> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::CMsgGameServerRulesQueryData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Rule() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Rule(Rule other) : this() {
        rule_ = other.rule_;
        value_ = other.value_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Rule Clone() {
        return new Rule(this);
      }

      /// <summary>Field number for the "rule" field.</summary>
      public const int Rule_FieldNumber = 1;
      private readonly static string Rule_DefaultValue = "";

      private string rule_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Rule_ {
        get { return rule_ ?? Rule_DefaultValue; }
        set {
          rule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "rule" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasRule_ {
        get { return rule_ != null; }
      }
      /// <summary>Clears the value of the "rule" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearRule_() {
        rule_ = null;
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 2;
      private readonly static string ValueDefaultValue = "";

      private string value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Value {
        get { return value_ ?? ValueDefaultValue; }
        set {
          value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "value" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasValue {
        get { return value_ != null; }
      }
      /// <summary>Clears the value of the "value" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearValue() {
        value_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Rule);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Rule other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Rule_ != other.Rule_) return false;
        if (Value != other.Value) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasRule_) hash ^= Rule_.GetHashCode();
        if (HasValue) hash ^= Value.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasRule_) {
          output.WriteRawTag(10);
          output.WriteString(Rule_);
        }
        if (HasValue) {
          output.WriteRawTag(18);
          output.WriteString(Value);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasRule_) {
          output.WriteRawTag(10);
          output.WriteString(Rule_);
        }
        if (HasValue) {
          output.WriteRawTag(18);
          output.WriteString(Value);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasRule_) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Rule_);
        }
        if (HasValue) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Rule other) {
        if (other == null) {
          return;
        }
        if (other.HasRule_) {
          Rule_ = other.Rule_;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Rule_ = input.ReadString();
              break;
            }
            case 18: {
              Value = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Rule_ = input.ReadString();
              break;
            }
            case 18: {
              Value = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class CGameServers_GameServerQuery_Response : pb::IMessage<CGameServers_GameServerQuery_Response>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CGameServers_GameServerQuery_Response> _parser = new pb::MessageParser<CGameServers_GameServerQuery_Response>(() => new CGameServers_GameServerQuery_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CGameServers_GameServerQuery_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GameServerQuery_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GameServerQuery_Response(CGameServers_GameServerQuery_Response other) : this() {
    pingData_ = other.pingData_ != null ? other.pingData_.Clone() : null;
    playersData_ = other.playersData_ != null ? other.playersData_.Clone() : null;
    rulesData_ = other.rulesData_ != null ? other.rulesData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CGameServers_GameServerQuery_Response Clone() {
    return new CGameServers_GameServerQuery_Response(this);
  }

  /// <summary>Field number for the "ping_data" field.</summary>
  public const int PingDataFieldNumber = 1;
  private global::CMsgGameServerPingQueryData pingData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerPingQueryData PingData {
    get { return pingData_; }
    set {
      pingData_ = value;
    }
  }

  /// <summary>Field number for the "players_data" field.</summary>
  public const int PlayersDataFieldNumber = 2;
  private global::CMsgGameServerPlayersQueryData playersData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerPlayersQueryData PlayersData {
    get { return playersData_; }
    set {
      playersData_ = value;
    }
  }

  /// <summary>Field number for the "rules_data" field.</summary>
  public const int RulesDataFieldNumber = 3;
  private global::CMsgGameServerRulesQueryData rulesData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerRulesQueryData RulesData {
    get { return rulesData_; }
    set {
      rulesData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CGameServers_GameServerQuery_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CGameServers_GameServerQuery_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PingData, other.PingData)) return false;
    if (!object.Equals(PlayersData, other.PlayersData)) return false;
    if (!object.Equals(RulesData, other.RulesData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (pingData_ != null) hash ^= PingData.GetHashCode();
    if (playersData_ != null) hash ^= PlayersData.GetHashCode();
    if (rulesData_ != null) hash ^= RulesData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (pingData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PingData);
    }
    if (playersData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayersData);
    }
    if (rulesData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RulesData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (pingData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PingData);
    }
    if (playersData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayersData);
    }
    if (rulesData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RulesData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (pingData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingData);
    }
    if (playersData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayersData);
    }
    if (rulesData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RulesData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CGameServers_GameServerQuery_Response other) {
    if (other == null) {
      return;
    }
    if (other.pingData_ != null) {
      if (pingData_ == null) {
        PingData = new global::CMsgGameServerPingQueryData();
      }
      PingData.MergeFrom(other.PingData);
    }
    if (other.playersData_ != null) {
      if (playersData_ == null) {
        PlayersData = new global::CMsgGameServerPlayersQueryData();
      }
      PlayersData.MergeFrom(other.PlayersData);
    }
    if (other.rulesData_ != null) {
      if (rulesData_ == null) {
        RulesData = new global::CMsgGameServerRulesQueryData();
      }
      RulesData.MergeFrom(other.RulesData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (pingData_ == null) {
            PingData = new global::CMsgGameServerPingQueryData();
          }
          input.ReadMessage(PingData);
          break;
        }
        case 18: {
          if (playersData_ == null) {
            PlayersData = new global::CMsgGameServerPlayersQueryData();
          }
          input.ReadMessage(PlayersData);
          break;
        }
        case 26: {
          if (rulesData_ == null) {
            RulesData = new global::CMsgGameServerRulesQueryData();
          }
          input.ReadMessage(RulesData);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (pingData_ == null) {
            PingData = new global::CMsgGameServerPingQueryData();
          }
          input.ReadMessage(PingData);
          break;
        }
        case 18: {
          if (playersData_ == null) {
            PlayersData = new global::CMsgGameServerPlayersQueryData();
          }
          input.ReadMessage(PlayersData);
          break;
        }
        case 26: {
          if (rulesData_ == null) {
            RulesData = new global::CMsgGameServerRulesQueryData();
          }
          input.ReadMessage(RulesData);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GameServerClient_QueryServerData_Request : pb::IMessage<GameServerClient_QueryServerData_Request>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GameServerClient_QueryServerData_Request> _parser = new pb::MessageParser<GameServerClient_QueryServerData_Request>(() => new GameServerClient_QueryServerData_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GameServerClient_QueryServerData_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Request(GameServerClient_QueryServerData_Request other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Request Clone() {
    return new GameServerClient_QueryServerData_Request(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GameServerClient_QueryServerData_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GameServerClient_QueryServerData_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GameServerClient_QueryServerData_Request other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

public sealed partial class GameServerClient_QueryServerData_Response : pb::IMessage<GameServerClient_QueryServerData_Response>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GameServerClient_QueryServerData_Response> _parser = new pb::MessageParser<GameServerClient_QueryServerData_Response>(() => new GameServerClient_QueryServerData_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GameServerClient_QueryServerData_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SteammessagesGameserversSteamclientReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Response(GameServerClient_QueryServerData_Response other) : this() {
    pingData_ = other.pingData_ != null ? other.pingData_.Clone() : null;
    playersData_ = other.playersData_ != null ? other.playersData_.Clone() : null;
    rulesData_ = other.rulesData_ != null ? other.rulesData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameServerClient_QueryServerData_Response Clone() {
    return new GameServerClient_QueryServerData_Response(this);
  }

  /// <summary>Field number for the "ping_data" field.</summary>
  public const int PingDataFieldNumber = 1;
  private global::CMsgGameServerPingQueryData pingData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerPingQueryData PingData {
    get { return pingData_; }
    set {
      pingData_ = value;
    }
  }

  /// <summary>Field number for the "players_data" field.</summary>
  public const int PlayersDataFieldNumber = 2;
  private global::CMsgGameServerPlayersQueryData playersData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerPlayersQueryData PlayersData {
    get { return playersData_; }
    set {
      playersData_ = value;
    }
  }

  /// <summary>Field number for the "rules_data" field.</summary>
  public const int RulesDataFieldNumber = 3;
  private global::CMsgGameServerRulesQueryData rulesData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgGameServerRulesQueryData RulesData {
    get { return rulesData_; }
    set {
      rulesData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GameServerClient_QueryServerData_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GameServerClient_QueryServerData_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PingData, other.PingData)) return false;
    if (!object.Equals(PlayersData, other.PlayersData)) return false;
    if (!object.Equals(RulesData, other.RulesData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (pingData_ != null) hash ^= PingData.GetHashCode();
    if (playersData_ != null) hash ^= PlayersData.GetHashCode();
    if (rulesData_ != null) hash ^= RulesData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (pingData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PingData);
    }
    if (playersData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayersData);
    }
    if (rulesData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RulesData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (pingData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PingData);
    }
    if (playersData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayersData);
    }
    if (rulesData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RulesData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (pingData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingData);
    }
    if (playersData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayersData);
    }
    if (rulesData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RulesData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GameServerClient_QueryServerData_Response other) {
    if (other == null) {
      return;
    }
    if (other.pingData_ != null) {
      if (pingData_ == null) {
        PingData = new global::CMsgGameServerPingQueryData();
      }
      PingData.MergeFrom(other.PingData);
    }
    if (other.playersData_ != null) {
      if (playersData_ == null) {
        PlayersData = new global::CMsgGameServerPlayersQueryData();
      }
      PlayersData.MergeFrom(other.PlayersData);
    }
    if (other.rulesData_ != null) {
      if (rulesData_ == null) {
        RulesData = new global::CMsgGameServerRulesQueryData();
      }
      RulesData.MergeFrom(other.RulesData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (pingData_ == null) {
            PingData = new global::CMsgGameServerPingQueryData();
          }
          input.ReadMessage(PingData);
          break;
        }
        case 18: {
          if (playersData_ == null) {
            PlayersData = new global::CMsgGameServerPlayersQueryData();
          }
          input.ReadMessage(PlayersData);
          break;
        }
        case 26: {
          if (rulesData_ == null) {
            RulesData = new global::CMsgGameServerRulesQueryData();
          }
          input.ReadMessage(RulesData);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (pingData_ == null) {
            PingData = new global::CMsgGameServerPingQueryData();
          }
          input.ReadMessage(PingData);
          break;
        }
        case 18: {
          if (playersData_ == null) {
            PlayersData = new global::CMsgGameServerPlayersQueryData();
          }
          input.ReadMessage(PlayersData);
          break;
        }
        case 26: {
          if (rulesData_ == null) {
            RulesData = new global::CMsgGameServerRulesQueryData();
          }
          input.ReadMessage(RulesData);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
